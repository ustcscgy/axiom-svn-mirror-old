\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/input mappkg1.input}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{License}
<<license>>=
--Copyright The Numerical Algorithms Group Limited 1991.
@
<<*>>=
)spool mappkg1.output
)set message test on
)set message auto off
)clear all
--S 1  of 26
power(q: FRAC INT, n: INT): FRAC INT == q**n
--R 
--R   Function declaration power : (Fraction Integer,Integer) -> Fraction 
--R      Integer has been added to workspace.
--R                                                                   Type: Void
--E 1

--S 2 of 26
power(2,3)
--R 
--R   Compiling function power with type (Fraction Integer,Integer) -> 
--R      Fraction Integer 
--R
--R   (2)  8
--R                                                       Type: Fraction Integer
--E 2

--S 3 of 26
rewop := twist power
--R 
--R
--R   (3)  theMap(MAPPKG3;twist;MM;5!0)
--R                       Type: ((Integer,Fraction Integer) -> Fraction Integer)
--E 3

--S 4 of 26
rewop(3, 2)
--R 
--R
--R   (4)  8
--R                                                       Type: Fraction Integer
--E 4

--S 5 of 26
square: FRAC INT -> FRAC INT
--R 
--R                                                                   Type: Void
--E 5

--S 6 of 26
square:= curryRight(power, 2)
--R 
--R
--R   (6)  theMap(MAPPKG3;curryRight;MBM;1!0,0)
--R                                 Type: (Fraction Integer -> Fraction Integer)
--E 6

--S 7 of 26
square 4
--R 
--R
--R   (7)  16
--R                                                       Type: Fraction Integer
--E 7

--S 8 of 26
squirrel:= constantRight(square)$MAPPKG3(FRAC INT,FRAC INT,FRAC INT)
--R 
--R
--R   (8)  theMap(MAPPKG3;constantRight;MM;3!0)
--R              Type: ((Fraction Integer,Fraction Integer) -> Fraction Integer)
--E 8

--S 9 of 26
squirrel(1/2, 1/3)
--R 
--R
--R        1
--R   (9)  -
--R        4
--R                                                       Type: Fraction Integer
--E 9

--S 10 of 26
sixteen := curry(square, 4/1)
--R 
--R
--R   (10)  theMap(MAPPKG2;curry;MAM;2!0,0)
--R                                               Type: (() -> Fraction Integer)
--E 10

--S 11 of 26
sixteen()
--R 
--R
--R   (11)  16
--R                                                       Type: Fraction Integer
--E 11

--S 12 of 26
square2:=square*square
--R 
--R
--R   (12)  theMap(MAPPKG3;*;MMM;6!0,0)
--R                                 Type: (Fraction Integer -> Fraction Integer)
--E 12

--S 13 of 26
square2  3
--R 
--R
--R   (13)  81
--R                                                       Type: Fraction Integer
--E 13

--S 14 of 26
sc(x: FRAC INT): FRAC INT == x + 1
--R 
--R   Function declaration sc : Fraction Integer -> Fraction Integer has 
--R      been added to workspace.
--R                                                                   Type: Void
--E 14

--S 15 of 26
incfns := [sc**i for i in 0..10]
--R 
--R   Compiling function sc with type Fraction Integer -> Fraction Integer
--R      
--R
--R   (15)
--R   [theMap(MAPPKG1;**;MNniM;6!0,0), theMap(MAPPKG1;**;MNniM;6!0,0),
--R    theMap(MAPPKG1;**;MNniM;6!0,0), theMap(MAPPKG1;**;MNniM;6!0,0),
--R    theMap(MAPPKG1;**;MNniM;6!0,0), theMap(MAPPKG1;**;MNniM;6!0,0),
--R    theMap(MAPPKG1;**;MNniM;6!0,0), theMap(MAPPKG1;**;MNniM;6!0,0),
--R    theMap(MAPPKG1;**;MNniM;6!0,0), theMap(MAPPKG1;**;MNniM;6!0,0),
--R    theMap(MAPPKG1;**;MNniM;6!0,0)]
--R                            Type: List (Fraction Integer -> Fraction Integer)
--E 15

--S 16 of 26
[f 4 for f in incfns]
--R 
--R
--R   (16)  [4,5,6,7,8,9,10,11,12,13,14]
--R                                                  Type: List Fraction Integer
--E 16

--S 17 of 26
times(n:NNI, i:INT):INT == n*i
--R 
--R   Function declaration times : (NonNegativeInteger,Integer) -> Integer
--R      has been added to workspace.
--R                                                                   Type: Void
--E 17

--S 18 of 26
r := recur(times)
--R 
--R   Compiling function times with type (NonNegativeInteger,Integer) -> 
--R      Integer 
--R
--R   (18)  theMap(MAPPKG1;recur;2M;7!0,0)
--R                              Type: ((NonNegativeInteger,Integer) -> Integer)
--E 18

--S 19 of 26
fact := curryRight(r, 1)
--R 
--R
--R   (19)  theMap(MAPPKG3;curryRight;MBM;1!0,0)
--R                                        Type: (NonNegativeInteger -> Integer)
--E 19

--S 20 of 26
fact 4
--R 
--R
--R   (20)  24
--R                                                        Type: PositiveInteger
--E 20

--S 21 of 26
mto2ton(m, n) ==
  raiser := square**n
  raiser m
--R 
--R                                                                   Type: Void
--E 21

--S 22 of 26
mto2ton(3, 3)
--R 
--R   Compiling function mto2ton with type (PositiveInteger,
--R      PositiveInteger) -> Fraction Integer 
--R
--R   (22)  6561
--R                                                       Type: Fraction Integer
--E 22

--S 23 of 26
shiftfib(r: List INT) : INT ==
  t := r.1
  r.1 := r.2
  r.2 := r.2 + t
  t
--R 
--R   Function declaration shiftfib : List Integer -> Integer has been 
--R      added to workspace.
--R                                                                   Type: Void
--E 23

--S 24 of 26
fibinit: List INT := [0, 1]
--R 
--R
--R   (24)  [0,1]
--R                                                           Type: List Integer
--E 24

--S 25 of 26
fibs := curry(shiftfib, fibinit)
--R 
--R   Compiling function shiftfib with type List Integer -> Integer 
--R
--R   (25)  theMap(MAPPKG2;curry;MAM;2!0,0)
--R                                                        Type: (() -> Integer)
--E 25

--S 26 of 26
[fibs() for i in 0..30]
--R 
--R
--R   (26)
--R   [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,
--R    2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418,
--R    317811, 514229, 832040]
--R                                                           Type: List Integer
--E 26
)spool 
)lisp (bye)
 
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

 
