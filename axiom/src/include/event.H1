#ifdef _NO_PROTO
extern void exitHyperDoc();
extern void helpForHyperDoc();
extern void mainEventLoop();
extern void make_window_link();
extern void quitHyperDoc();
extern void get_new_window();
#ifdef _EVENT_C
static void set_cursor();
static void change_cursor();
static void create_window();
static void downlink();
static HyperDocPage * find_page();
static void handle_button();
static void handle_event();
static void handle_motion_event();
static int HyperDocErrorHandler();
static void init_cursor_states();
static void killAxiomPage();
static void make_busy_cursor();
static void make_busy_cursors();
static void memolink();
static void set_error_handlers();
static int set_window();
static void clear_exposures();
static void kill_page();
static HyperDocPage * returnlink();
static HyperDocPage * uplink();
static void windowlink_handler();
static void lispwindowlink_handler();
static HyperDocPage * paste_button();
static HyperLink * findButtonInList();
static HyperLink * get_hyper_link();
static void init_cursor_state();
#endif
#else
extern void exitHyperDoc(void );
extern void helpForHyperDoc(void );
extern void mainEventLoop(void );
extern void make_window_link(char * name);
extern void quitHyperDoc(void );
extern void get_new_window(void );
#ifdef _EVENT_C
static void set_cursor(HDWindow * window , Cursor state);
static void change_cursor(Cursor state , HDWindow * window);
static void create_window(void );
static void downlink(void );
static HyperDocPage * find_page(TextNode * node);
static void handle_button(int button , XButtonEvent * event);
static void handle_event(XEvent * event);
static void handle_motion_event(XMotionEvent * event);
static int HyperDocErrorHandler(Display * display , XErrorEvent * xe);
static void init_cursor_states(void );
static void killAxiomPage(HyperDocPage * page);
static void make_busy_cursor(HDWindow * window);
static void make_busy_cursors(void );
static void memolink(void );
static void set_error_handlers(void );
static int set_window(Window window);
static void clear_exposures(Window w);
static void kill_page(HyperDocPage * page);
static HyperDocPage * returnlink(void );
static HyperDocPage * uplink(void );
static void windowlink_handler(TextNode * node);
static void lispwindowlink_handler(HyperLink * link);
static HyperDocPage * paste_button(PasteNode * paste);
static HyperLink * findButtonInList(HDWindow * window , int x , int y);
static HyperLink * get_hyper_link(XButtonEvent * event);
static void init_cursor_state(HDWindow * window);
#endif
#endif 
