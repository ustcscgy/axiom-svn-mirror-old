\documentclass{article}
\usepackage{../scripts/tex/axiom}
\begin{document}
\title{\$SPAD/src/aldor2 Makefile}
\author{Peter Broadbery}
\maketitle
\begin{abstract}
The aldor axiom-related rules make file.  Or how to make make more confusing, vol. 3.
\end{abstract}

<<axiomrules>>=

# -*-Makefile-*-

ifeq ($(strip $(MODE)),INIT)
ALL_LISP_O_TARGETS:=
endif

ifeq ($(strip $(MODE)),FINAL)
#
# Dependency lists
#
# ALL_DEP_LISTS holds a list of names, 
#   for each name, there is a DEP_TYPES_<name> var holding a list of types 
#                  and a DEP_FILES_<name> var holding a list of files 

ALL_DEP_MKS    := $(patsubst %,$(MID)/dep_%.mk,$(ALL_DEP_LISTS))
ALL_DEP_STAMPS := $(patsubst %,$(MID)/dep_%.stamp,$(ALL_DEP_LISTS))

ALL_DIRS += $(MID) $(MID)/tmp $(MID)/gendeps

$(ALL_DEP_MKS): $(MID)/dep_%.mk: $(MID)/.dir
	echo > $@
	echo 'MODE := DEP' >> $@
	echo 'THIS_DEP  := $*' >> $@
	echo 'include $$(IN)/Make.rules' >> $@

inits = \
	$(patsubst %,|%|,$(filter init_%,$(1)))

$(ALL_DEP_STAMPS): $(MID)/dep_%.stamp: 			\
		$(MID)/gendeps/.dir $(MID)/deps/.dir 	\
		$(MID)/.dir $(MID)/tmp/.dir 		\
		$(IN)/genax.lsp				
	@echo "Creating dependencies for $(DEP) C: $(words $(DEP_TYPES_$(DEP)))"
	@echo > "$(FILE)"
	@echo ")co RNS.spad"  >> $(FILE)
	@echo ")set bre fast" >> $(FILE)
	@echo ")lisp (break)" >> $(FILE)
	@echo '(load "$(IN)/genax.lsp")' >> $(FILE)
	@echo '(setq domains (quote ($(DEP_TYPES_$(DEP)))))' >> $(FILE)
	@echo "($(DEP_FUNCTION_$(DEP)) domains)" >> $(FILE)
	-@(cd $(MID); DAASE="$(DAASE)"; export DAASE; $(INTERPSYS))  \
		< $(FILE) > $(MID)/tmp/dep_$*.log
	@(for i in $(DEP_BASENAMES_$(DEP)); \
	do \
		cat $(MID)/gendeps/$$i.dep | sort | uniq > $(MID)/gendeps/$$i.tmp;	\
		mv $(MID)/gendeps/$$i.tmp $(MID)/gendeps/$$i;			\
		$(call move-if-changed,$(MID)/gendeps/$$i.dep,$(MID)/deps/$$i.dep); \
	done)
	@touch $@

#$(warning including $(ALL_DEP_MKS))
include $(ALL_DEP_MKS)

#
# .spad -> .ap
#

inits = \
	$(patsubst %,|%|,$(filter init_%,$(1)))

no-inits = $(filter-out init_%,$(1))

$(ALL_SPADSET_APS): $(MID)/ap/%.ap: $(MID)/ap/.dir $(IN)/genax.lsp 
	@echo "GEN AP: $*.spad -> $*.ap"
	@echo > $(MID)/tmp/mkax_$*.lsp
	@echo ")co womble.spad" >> $(MID)/tmp/mkax_$*.lsp
	@echo ")set bre fast" >> $(MID)/tmp/mkax_$*.lsp
	@echo ")lisp (break)" >> $(MID)/tmp/mkax_$*.lsp
	@echo "(si::use-fast-links nil)" >> $(MID)/tmp/mkax_$*.lsp
	@echo '(load "$(IN)/genax.lsp")' >> $(MID)/tmp/mkax_$*.lsp
	@echo "(setq comp-name (quote |$*|) )" >> $(MID)/tmp/mkax_$*.lsp
	@echo "(setq components (quote ($(call no-inits,$(SPADSET_ITEM_$(C)_$*)))) )" >> $(MID)/tmp/mkax_$*.lsp
	@echo "(setq inits (quote ($(call inits,$(SPADSET_ITEM_$(C)_$*)))) )" >> $(MID)/tmp/mkax_$*.lsp
	@echo "(generate-ax-file comp-name components inits)" >> $(MID)/tmp/mkax_$*.lsp
	@(cd $(MID); DAASE="$(DAASE)"; export DAASE; $(INTERPSYS); true) < $(MID)/tmp/mkax_$*.lsp > $(MID)/tmp/gen_$*.log 2>&1
	@test -s $@


.DELETE_ON_ERROR: $(ALL_SPADSET_APS)

#
# .lsp -> .o
#

ALL_DIRS += $(OBJ)/$(SYS)/aldor/build

$(ALL_LISP_O_TARGETS): %.$(O): $(OBJ)/$(SYS)/aldor/build/.dir
	echo LSP->O: $(notdir $@)
	@echo '(progn (load "$(OBJ)/$(SYS)/interp/foam_l.o") (compile-file "$(filter %.lsp,$^)" :output-file "$@") (${BYE}))' | ${DEPSYS} > $(OBJ)/$(SYS)/aldor/build/$(notdir $@).log ; 
	@if test -f $@; then echo "Built $(notdir $@)" ; else cat $(OBJ)/$(SYS)/aldor/build/$(notdir $@).log; false; fi

endif

@

<<*>>=
<<axiomrules>>

@

\end{document}
