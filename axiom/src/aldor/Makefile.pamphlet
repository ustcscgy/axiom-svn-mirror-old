\documentclass{article}
\usepackage{../scripts/tex/axiom}
\begin{document}
\title{\$SPAD/src/aldor Makefile}
\author{Peter Broadbery}
\maketitle
\begin{abstract}
The aldor makefile.  Or how to make make more confusing, vol. 1.
\end{abstract}


This builds the axiom/aldor interface library.
It requires that the algebra has already been built

Libaxiom:

Plan: 
1) Get list of types to be compiled
2) Generate .ap files for each of the types
3) Topological sort on categories to determine base clique
4) Find list of .as domains that are required

The approach taken to the {\tt aldor} makefiles is more data driven than other
makefiles in the axiom system.  The idea is that clients should list sources
and define targets, and then the makefile prepares intermediate target rules
based on those lists.  This avoids cut and paste of makefile sections, but is
a little tricky to get used to.  

See [[types.mk]] for details of how the initial file selection was done.

Note that assignment ({\tt :=}) rather than rule definition ({\tt =}) is used
throughout.  The principal difference is that assignments are evaluated
immediately while rule definitions are expanded by need.  Also note that this
comment is an excuse to get a smiley into otherwise boring prose.

Assignments to SRC, INT, OBJ and SYS, if not already defined.  This allows
'make' to work directly in the [[$(SRC)/aldor]] directory.

<<basevariables>>=
# Generated from src/aldor/Makefile.pamphlet

ifeq ($(strip $(SRC)),)
SRC:=$(shell cd $(AXIOM)/../../src; pwd)
INT:=$(shell cd $(AXIOM)/../../int; pwd)
OBJ:=$(shell cd $(AXIOM)/../../obj; pwd)
SYS:=$(shell basename $(AXIOM))
DOCUMENT := $(AXIOM)/bin/document
O:=o
endif

@
Normal environment variables.
<<environment>>=

IN=${SRC}/aldor
MID=${INT}/aldor
OUT=${OBJ}/${SYS}/aldor

LISPSYS := ${OBJ}/${SYS}/bin/lisp
BOOTSYS := ${OBJ}/${SYS}/bin/bootsys    
DEPSYS  := ${OBJ}/${SYS}/bin/depsys
INTERPSYS := ${OBJ}/${SYS}/bin/depsys

@

We should only build libaldor if the environment variable ALDORROOT is set.
This ensures that 'make all' will work only when it is set.  If not, the build
will simply complete successfully.
<<buildonlyrule>>=

all: 
	+@if [ x$$ALDORROOT = x ]; \
	then echo "No aldor compiler.  Don't see point in building libaxiom. ttfn."; \
	else										\
		echo "Building libaxiom.al and associated files";			\
		echo $(MID);\
		make REALLY_BUILD=1 -f $(IN)/Makefile aldor_libraries;			\
	fi

.PHONY: all
@

The targets '[[clean]]' (removes generated files) and '[[list_sources]]' (list all
source files) are always possible.

<<boringrules>>=
clean: $(IN)/Makefile 
	make -f $(IN)/Makefile REALLY_BUILD=1 _clean

list_sources: $(IN)/Makefile 
	make -f $(IN)/Makefile REALLY_BUILD=1 _list_sources

.PHONY: clean list_sources
@

This defines the initial list of [[.pamphlet]] files; it has to be here so that a raw 
make can see it.

<<buildit>>=
PAMPHLET_FILES := $(IN)/Makefile $(IN)/libaxiom.mk $(IN)/types.mk $(IN)/Make.rules
@

Most of the 'knowledge' about building libaxiom is in [[src/aldor/Make.rules]].
This file is intended to be included with the [[MODE]] variable set - the
behavior on include is entirely dependent on this variable.

Google for 'recursive make considered harmful' for more information about this
style of Makefile.

[[Make.rules]] must initially be called (ie. included) with a MODE of '[[INIT]]', and
finally with a MODE of [[FINAL]].  This ensures that all the appropriate targets
are created.  See [[Make.rules]] for the full set of possible modes.

[[PAMPHLET_FILES]] is a list of source files which need to be generated from
.pamphlet files.  These will be generated into [[$(MID)/src]].

The includes of the two .mk files will trigger the creation of a set of rules
that build respectively, the [[libaxiom.al]] library, and the set of aldor syntax
files corresponding to the [[src/aldor]] directory.

The [[FINAL]] mode include of [[Make.rules]] will define [[LIBAXIOM_TARGETS]], and a set
of rules to build them.  To complete the build we simply need to add a rule
which builds the targets ([[aldor_libraries]]).

<<buildit>>=
ifneq ($(strip $(REALLY_BUILD)),)

MODE := INIT
include $(IN)/Make.rules
@

This should make sure that any makefiles are generated if the .pamphlet is newer 
than the makefile (oh, and this includes [[src/aldor/Makefile]], this file).


<<buildit>>=
include $(IN)/libaxiom.mk
include $(IN)/types.mk

MODE := FINAL
include $(IN)/Make.rules

ALL_SOURCES += $(PAMPHLET_SRCS)

ifneq ($(LIBAXIOM_TARGETS),)
aldor_libraries: sources $(LIBAXIOM_TARGETS)
	@echo warning Targets are $^
	@echo "Built libaxiom"
endif

_clean: sources $(CLEAN_TARGETS)
	@echo "Removed intermediate files"

_list_sources: sources $(ALL_SOURCES)
	@for i in $(ALL_SOURCES); do echo $$i; done

# Handle .pamphlet files here - it will allow make to get started quicker.

UNIQ_PAMPHLET_FILES := $(sort $(PAMPHLET_FILES))
PAMPHLET_SRCS  := $(patsubst %,%.pamphlet,$(UNIQ_PAMPHLET_FILES))
PAMPHLET_DVI   := $(patsubst %,%.dvi,$(UNIQ_PAMPHLET_FILES))

$(UNIQ_PAMPHLET_FILES): %: %.pamphlet
	@echo "$(DOCUMENT) $(NOISE) $@"
	(cd $$(dirname $@); $(DOCUMENT) $(NOISE) $@)

#
# Do this 1st to ensure that source files are created before any further processing.
#
sources: $(UNIQ_PAMPHLET_FILES)

.PHONY: aldor_libraries _clean _list_sources sources

endif
@

<<*>>=
<<basevariables>>
<<environment>>
<<buildonlyrule>>
<<boringrules>>
<<buildit>>
@

\end{document}
