\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/input repa6.input}
\author{Holger Gollan, Johannes Grabmeier, and Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{License}
<<license>>=
--Copyright The Numerical Algorithms Group Limited 1991.
@
<<*>>=
)spool repa6.output
)set message test on
)set message auto off
)clear all
 
@
This file demonstrates Representation Theory in Scratchpad
using the packages REP1, REP2, IRSN and SGCF, which are the
abbreviations for RepresentationPackage1, RepresentationPackage2
IrrRepSymNatPackage and SymmetricGroupCombinatoricFunctions.
 
authors: Holger Gollan, Johannes Grabmeier
release 1.0  09/30/87
release 2.0  11/10/88: J. Grabmeier: add functions from IRSN
release 2.1  08/04/89: J. Grabmeier: adjusting to new PERM
  and modified REP1
release 2.2  06/05/89: J. Grabmeier: adjusting to new algebra
release 2.3  08/20/89: J. Grabmeier: minor adjustments
 
In the sequel we show how to get all 2-modular irreducible
representations of the alternating group A6.
 
We generate A6 by the permutations threecycle x=(1,2,3)
and the 5-cycle y=(2,3,4,5,6)
<<*>>=
--S 1  of 33
genA6 : List PERM INT := [cycle [1,2,3], cycle [2,3,4,5,6]]
--R 
--R
--R   (1)  [(1 2 3),(2 3 4 5 6)]
--R                                               Type: List Permutation Integer
--E 1

@ 
pRA6 is the permutation representation over the Integers...
<<*>>=
--S 2  of 33
pRA6 := permutationRepresentation (genA6, 6)
--R 
--R
--R         +0  0  1  0  0  0+ +1  0  0  0  0  0+
--R         |                | |                |
--R         |1  0  0  0  0  0| |0  0  0  0  0  1|
--R         |                | |                |
--R         |0  1  0  0  0  0| |0  1  0  0  0  0|
--R   (2)  [|                |,|                |]
--R         |0  0  0  1  0  0| |0  0  1  0  0  0|
--R         |                | |                |
--R         |0  0  0  0  1  0| |0  0  0  1  0  0|
--R         |                | |                |
--R         +0  0  0  0  0  1+ +0  0  0  0  1  0+
--R                                                    Type: List Matrix Integer
--E 2

@
And pRA6m2 is the permutation representation over PrimeField 2:
<<*>>=
--S 3  of 33
pRA6m2 : List Matrix PrimeField 2 := pRA6
--R 
--R
--R         +0  0  1  0  0  0+ +1  0  0  0  0  0+
--R         |                | |                |
--R         |1  0  0  0  0  0| |0  0  0  0  0  1|
--R         |                | |                |
--R         |0  1  0  0  0  0| |0  1  0  0  0  0|
--R   (3)  [|                |,|                |]
--R         |0  0  0  1  0  0| |0  0  1  0  0  0|
--R         |                | |                |
--R         |0  0  0  0  1  0| |0  0  0  1  0  0|
--R         |                | |                |
--R         +0  0  0  0  0  1+ +0  0  0  0  1  0+
--R                                               Type: List Matrix PrimeField 2
--E 3
 
@
Now try to split pRA6m2:
<<*>>=
--S 4 of 33
sp0 := meatAxe pRA6m2
--R 
--R   Fingerprint element in generated algebra is singular
--R     A proper cyclic submodule is found.
--R     Transition matrix computed
--R     The inverse of the transition matrix computed
--R     Now transform the matrices
--R
--R          +0  0  1  0  0+ +1  0  0  0  0+
--R          |             | |             |
--R          |1  0  0  0  0| |1  1  1  1  1|
--R          |             | |             |
--R   (4)  [[|0  1  0  0  0|,|0  1  0  0  0|],[[1],[1]]]
--R          |             | |             |
--R          |0  0  0  1  0| |0  0  1  0  0|
--R          |             | |             |
--R          +0  0  0  0  1+ +0  0  0  1  0+
--R                                          Type: List List Matrix PrimeField 2
--E 4
 
@
We have found the trivial module as a factormodule
and a 5-dimensional submodule.
<<*>>=
--S 5  of 33
dA6d1 := sp0.2
--R 
--R
--R   (5)  [[1],[1]]
--R                                               Type: List Matrix PrimeField 2
--E 5

@ 
Try to split again...
<<*>>=
--S 6  of 33
sp1 := meatAxe sp0.1
--R 
--R   Fingerprint element in generated algebra is singular
--R     The generated cyclic submodule was not proper
--R     The generated cyclic submodule was not proper
--R     The generated cyclic submodule was not proper
--R     We know that all the cyclic submodules generated by all
--R       non-trivial element of the singular matrix under view are
--R       not proper, hence Norton's irreducibility test can be done:
--R     A proper cyclic submodule is found.
--R     Transition matrix computed
--R     The inverse of the transition matrix computed
--R     Now transform the matrices
--R     Representation is not irreducible and it will be split:
--R
--R                    +0  1  0  0+ +0  1  1  1+
--R                    |          | |          |
--R                    |0  0  1  0| |1  1  0  1|
--R   (6)  [[[1],[1]],[|          |,|          |]]
--R                    |1  0  0  0| |1  1  1  0|
--R                    |          | |          |
--R                    +0  0  0  1+ +1  1  1  1+
--R                                          Type: List List Matrix PrimeField 2
--E 6
 
@
And find a 4-dimensional submodule, say dA6d4a, and the
trivial one again.
<<*>>=
--S 7  of 33
dA6d4a := sp1.2
--R 
--R
--R         +0  1  0  0+ +0  1  1  1+
--R         |          | |          |
--R         |0  0  1  0| |1  1  0  1|
--R   (7)  [|          |,|          |]
--R         |1  0  0  0| |1  1  1  0|
--R         |          | |          |
--R         +0  0  0  1+ +1  1  1  1+
--R                                               Type: List Matrix PrimeField 2
--E 7
 
@
Now we want to test, whether dA6d4a is absolutely irreducible...
<<*>>=
--S 8  of 33 random input, ok to fail
isAbsolutelyIrreducible? dA6d4a
--R 
--R   Random element in generated algebra does
--R     not have a one-dimensional kernel
--R   Random element in generated algebra has
--R     one-dimensional kernel
--R   Random element in generated algebra has
--R     one-dimensional kernel
--R     We know that all the cyclic submodules generated by all
--R       non-trivial element of the singular matrix under view are
--R       not proper, hence Norton's irreducibility test can be done:
--R     The generated cyclic submodule was not proper
--R     Representation is absolutely irreducible
--R
--R   (8)  true
--R                                                                Type: Boolean
--E 8

@ 
And see: dA6d4a is absolutely irreducible.
So we have found a second irreducible representation.
 
Now construct a representation from reducing an irreducible one
of the symmetric group $S_6$ over the integers taken mod 2
What is the degree of the representation belonging to partition
[2,2,1,1]?
<<*>>=
-- lambda : PRTITION := partition [2,2,1,1]
--S 9  of 33
lambda := [2,2,1,1]
--R 
--R
--R   (9)  [2,2,1,1]
--R                                                   Type: List PositiveInteger
--E 9

--S 10 of 33
dimIrrRepSym lambda
--R 
--R   There are no library operations named dimIrrRepSym 
--R      Use HyperDoc Browse or issue
--R                            )what op dimIrrRepSym
--R      to learn if there is any operation containing " dimIrrRepSym " in
--R      its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      dimIrrRepSym with argument type(s) 
--R                            List PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 10

@
Now create the restriction to A6:
<<*>>=

--S 11 of 33
d2211  := irrRepSymNat(lambda, genA6)
--R 
--R   There are no library operations named irrRepSymNat 
--R      Use HyperDoc Browse or issue
--R                            )what op irrRepSymNat
--R      to learn if there is any operation containing " irrRepSymNat " in
--R      its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      irrRepSymNat with argument type(s) 
--R                            List PositiveInteger
--R                          List Permutation Integer
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 11

@
And d2211m2 is the representation over PrimeField 2:
<<*>>=
--S 12 of 33
d2211m2 : List Matrix PrimeField 2 := d2211
--R 
--R 
--RDaly Bug
--R   Cannot convert right-hand side of assignment
--R   d2211
--R
--R      to an object of the type List Matrix PrimeField 2 of the 
--R      left-hand side.
--E 12

@ 
And split it:
<<*>>=
--S 13 of 33
sp2 := meatAxe d2211m2
--R 
--R 
--RDaly Bug
--R   d2211m2 is declared as being in List Matrix PrimeField 2 but has not
--R      been given a value.
--E 13

@
A 5 and a 4-dimensional one.
 
we take the 4-dimensional one, say dA6d4b:
<<*>>=
--S 14  of 33
dA6d4b := sp2.1
--R 
--R   There are no library operations named sp2 
--R      Use HyperDoc Browse or issue
--R                                )what op sp2
--R      to learn if there is any operation containing " sp2 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp2 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 14

@
This is absolutely irreducible, too ...
<<*>>=
--S 15  of 33
isAbsolutelyIrreducible? dA6d4b
--R 
--R   There are 1 exposed and 0 unexposed library operations named 
--R      isAbsolutelyIrreducible? having 1 argument(s) but none was 
--R      determined to be applicable. Use HyperDoc Browse, or issue
--R                    )display op isAbsolutelyIrreducible?
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      isAbsolutelyIrreducible? with argument type(s) 
--R                               Variable dA6d4b
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 15

@ 
And dA6d4a and dA6d4b are not equivalent:
<<*>>=
--S 16 of 33
areEquivalent? ( dA6d4a , dA6d4b )
--R 
--R   There are 1 exposed and 0 unexposed library operations named 
--R      areEquivalent? having 2 argument(s) but none was determined to be
--R      applicable. Use HyperDoc Browse, or issue
--R                         )display op areEquivalent?
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      areEquivalent? with argument type(s) 
--R                          List Matrix PrimeField 2
--R                               Variable dA6d4b
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 16

@ 
So the third irreducible representation is found.
 
Now construct a new representation with the help of the tensorproduct
<<*>>=
--S 17  of 33
dA6d16 := tensorProduct ( dA6d4a , dA6d4b )
--R 
--R   There are 2 exposed and 0 unexposed library operations named 
--R      tensorProduct having 2 argument(s) but none was determined to be 
--R      applicable. Use HyperDoc Browse, or issue
--R                          )display op tensorProduct
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      tensorProduct with argument type(s) 
--R                          List Matrix PrimeField 2
--R                               Variable dA6d4b
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 17

@ 
And try to split it...
<<*>>=
--S 18 of 33
sp3 := meatAxe dA6d16
--R 
--R   There are 1 exposed and 0 unexposed library operations named meatAxe
--R      having 1 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                             )display op meatAxe
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      meatAxe with argument type(s) 
--R                               Variable dA6d16
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 18

@ 
The representation is irreducible, but may be not
absolutely irreducible.
<<*>>=
--S 19  of 33
isAbsolutelyIrreducible? dA6d16
--R 
--R   There are 1 exposed and 0 unexposed library operations named 
--R      isAbsolutelyIrreducible? having 1 argument(s) but none was 
--R      determined to be applicable. Use HyperDoc Browse, or issue
--R                    )display op isAbsolutelyIrreducible?
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      isAbsolutelyIrreducible? with argument type(s) 
--R                               Variable dA6d16
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 19

@ 
So let's try the same over the field with 4 elements:
<<*>>=
--S 20  of 33
gf4 := FiniteField(2,2)
--R 
--R
--R   (10)  FiniteField(2,2)
--R                                                                 Type: Domain
--E 20

--S 21  of 33
dA6d16gf4 : List Matrix gf4 := dA6d16
--R 
--R 
--RDaly Bug
--R   Cannot convert right-hand side of assignment
--R   dA6d16
--R
--R      to an object of the type List Matrix FiniteField(2,2) of the 
--R      left-hand side.
--E 21

--S 22 of 33
sp4 := meatAxe dA6d16gf4
--R 
--R 
--RDaly Bug
--R   dA6d16gf4 is declared as being in List Matrix FiniteField(2,2) but 
--R      has not been given a value.
--E 22

@
Now we find two 8-dimensional ones, dA6d8a and dA6d8b.
<<*>>=
--S 23  of 33
dA6d8a : List Matrix gf4  := sp4.1
--R 
--R   There are no library operations named sp4 
--R      Use HyperDoc Browse or issue
--R                                )what op sp4
--R      to learn if there is any operation containing " sp4 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp4 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 23

--S 24 of 33
dA6d8b : List Matrix gf4  := sp4.2
--R 
--R   There are no library operations named sp4 
--R      Use HyperDoc Browse or issue
--R                                )what op sp4
--R      to learn if there is any operation containing " sp4 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp4 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 24

@
Both are absolutely irreducible...
<<*>>=
--S 25  of 33
isAbsolutelyIrreducible? dA6d8a
--R 
--R 
--RDaly Bug
--R   dA6d8a is declared as being in List Matrix FiniteField(2,2) but has 
--R      not been given a value.
--E 25

--S 26 of 33
isAbsolutelyIrreducible? dA6d8b
--R 
--R 
--RDaly Bug
--R   dA6d8b is declared as being in List Matrix FiniteField(2,2) but has 
--R      not been given a value.
--E 26

@
And they are not equivalent...
<<*>>=
--S 27  of 33
areEquivalent? ( dA6d8a, dA6d8b )
--R 
--R 
--RDaly Bug
--R   dA6d8a is declared as being in List Matrix FiniteField(2,2) but has 
--R      not been given a value.
--E 27

@ 
So we have found five absolutely irreducible representations of A6
in characteristic 2.
 
The theory tells us that there are no more irreducible ones.
Here again are all absolutely irreducible 2-modular
representations of A6
<<*>>=
--S 28  of 33
dA6d1
--R 
--R
--R   (11)  [[1],[1]]
--R                                               Type: List Matrix PrimeField 2
--E 28

--S 29 of 33
dA6d4a
--R 
--R
--R          +0  1  0  0+ +0  1  1  1+
--R          |          | |          |
--R          |0  0  1  0| |1  1  0  1|
--R   (12)  [|          |,|          |]
--R          |1  0  0  0| |1  1  1  0|
--R          |          | |          |
--R          +0  0  0  1+ +1  1  1  1+
--R                                               Type: List Matrix PrimeField 2
--E 29

--S 30 of 33
dA6d4b
--R 
--R
--R   (13)  dA6d4b
--R                                                        Type: Variable dA6d4b
--E 30

--S 31 of 33
dA6d8a
--R 
--R 
--RDaly Bug
--R   dA6d8a is declared as being in List Matrix FiniteField(2,2) but has 
--R      not been given a value.
--E 31

--S 32 of 33
dA6d8b
--R 
--R 
--RDaly Bug
--R   dA6d8b is declared as being in List Matrix FiniteField(2,2) but has 
--R      not been given a value.
--E 32

@ 
And here again is the irreducible, but not absolutely irreducible
representations of A6 over PrimeField 2
<<*>>=
--S 33 of 33
dA6d16
--R 
--R
--R   (14)  dA6d16
--R                                                        Type: Variable dA6d16
--E 33
)spool 
)lisp (bye)
 
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

 
