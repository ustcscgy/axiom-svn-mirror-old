\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/input grpthry.input}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{License}
<<license>>=
--Copyright The Numerical Algorithms Group Limited 1991.
@
<<*>>=
)spool grpthry.output
)set message test on
)set message auto off
)clear all
 
--S 1 of 67
x : PERM INT := [[1,3,5],[7,11,9]]
--R 
--R
--R   (1)  (1 3 5)(7 11 9)
--R                                                    Type: Permutation Integer
--E 1

--S 2 of 67
y : PERM INT := [[3,5,7,9]]
--R 
--R
--R   (2)  (3 5 7 9)
--R                                                    Type: Permutation Integer
--E 2

--S 3 of 67
z : PERM INT := [1,3,11]
--R 
--R
--R   (3)  (1 3 11)
--R                                                    Type: Permutation Integer
--E 3

--S 4 of 67
g1 : PERMGRPS INT := [ x , y ]
--R 
--R 
--RDaly Bug
--R   Category, domain or package constructor PERMGRPS is not available.
--E 4

--S 5 of 67
g2 : PERMGRPS INT := [ x , z ]
--R 
--R 
--RDaly Bug
--R   Category, domain or package constructor PERMGRPS is not available.
--E 5

--S 6 of 67
g3 : PERMGRPS INT := [ y , z ]
--R 
--R 
--RDaly Bug
--R   Category, domain or package constructor PERMGRPS is not available.
--E 6

--S 7 of 67
order g1
--R 
--R   There are 9 exposed and 5 unexposed library operations named order 
--R      having 1 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                              )display op order
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named order
--R      with argument type(s) 
--R                                 Variable g1
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 7

--S 8 of 67
degree g3
--R 
--R
--R   (4)  g3
--R                                                Type: IndexedExponents Symbol
--E 8

--S 9 of 67
movedPoints g2
--R 
--R   There are 2 exposed and 0 unexposed library operations named 
--R      movedPoints having 1 argument(s) but none was determined to be 
--R      applicable. Use HyperDoc Browse, or issue
--R                           )display op movedPoints
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      movedPoints with argument type(s) 
--R                                 Variable g2
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 9

--S 10 of 67
orbit (g1, 3)
--R 
--R   There are 4 exposed and 0 unexposed library operations named orbit 
--R      having 2 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                              )display op orbit
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named orbit
--R      with argument type(s) 
--R                                 Variable g1
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 10

--S 11 of 67
orbits g3
--R 
--R   There are 1 exposed and 0 unexposed library operations named orbits 
--R      having 1 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                             )display op orbits
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      orbits with argument type(s) 
--R                                 Variable g3
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 11

--S 12 of 67
member? ( y , g2 )
--R 
--R   There are 2 exposed and 1 unexposed library operations named member?
--R      having 2 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                             )display op member?
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      member? with argument type(s) 
--R                             Permutation Integer
--R                                 Variable g2
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 12

--S 13 of 67
)sh PERMGRPS
--R 
--R   The )show system command is used to display information about types 
--R      or partial types. For example, )show Integer will show 
--R      information about Integer .
--R   
--R      PERMGRPS is not the name of a known type constructor. If you want
--R      to see information about any operations named PERMGRPS , issue
--R                        )display operations PERMGRPS 
--E 13

)clear all

--S 14 of 67
ptn9 := partitions 9
--R 
--R
--R   (1)
--R   [[9],[8,1],[7,2],[7,1,1],[6,3],[6,2,1],[6,1,1,1],[5,4],[5,3,1],[5,2,2],...]
--R                                                    Type: Stream List Integer
--E 14

--S 15 of 67
map(dimIrrRepSym, ptn9)
--R 
--R   There are 68 exposed and 8 unexposed library operations named map 
--R      having 2 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                               )display op map
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named map 
--R      with argument type(s) 
--R                            Variable dimIrrRepSym
--R                             Stream List Integer
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 15

--S 16 of 67
yt := listYoungTableaus [4,2]; yt :: (LIST TABLEAU I)
--R 
--R 
--RDaly Bug
--R   I is not a valid type.
--E 16

--S 17 of 67
r1 := irrRepSymNat([4,2],[1,2,4,5,3,6])
--R 
--R   There are no library operations named irrRepSymNat 
--R      Use HyperDoc Browse or issue
--R                            )what op irrRepSymNat
--R      to learn if there is any operation containing " irrRepSymNat " in
--R      its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      irrRepSymNat with argument type(s) 
--R                            List PositiveInteger
--R                            List PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 17

--S 18 of 67
r2 := irrRepSymNat([4,2],[3,2,1,5,6,4])
--R 
--R   There are no library operations named irrRepSymNat 
--R      Use HyperDoc Browse or issue
--R                            )what op irrRepSymNat
--R      to learn if there is any operation containing " irrRepSymNat " in
--R      its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      irrRepSymNat with argument type(s) 
--R                            List PositiveInteger
--R                            List PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 18

--S 19 of 67
r3 := irrRepSymNat([4,2],[4,2,1,3,6,5])
--R 
--R   There are no library operations named irrRepSymNat 
--R      Use HyperDoc Browse or issue
--R                            )what op irrRepSymNat
--R      to learn if there is any operation containing " irrRepSymNat " in
--R      its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      irrRepSymNat with argument type(s) 
--R                            List PositiveInteger
--R                            List PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 19

--S 20 of 67
(r3 = r1*r2) :: Boolean
--R 
--R
--R   (2)  false
--R                                                                Type: Boolean
--E 20

--S 21 of 67
irrRepSymNat [4,4,1]
--R 
--R
--R   (3)  irrRepSymNat
--R                    4,4,1
--R                                                                 Type: Symbol
--E 21

)clear all

--S 22 of 67
permutationRepresentation [2,3,1,4,6,5,11,10,7,8,9]
--R 
--R
--R        +0  0  1  0  0  0  0  0  0  0  0+
--R        |                               |
--R        |1  0  0  0  0  0  0  0  0  0  0|
--R        |                               |
--R        |0  1  0  0  0  0  0  0  0  0  0|
--R        |                               |
--R        |0  0  0  1  0  0  0  0  0  0  0|
--R        |                               |
--R        |0  0  0  0  0  1  0  0  0  0  0|
--R        |                               |
--R   (1)  |0  0  0  0  1  0  0  0  0  0  0|
--R        |                               |
--R        |0  0  0  0  0  0  0  0  1  0  0|
--R        |                               |
--R        |0  0  0  0  0  0  0  0  0  1  0|
--R        |                               |
--R        |0  0  0  0  0  0  0  0  0  0  1|
--R        |                               |
--R        |0  0  0  0  0  0  0  1  0  0  0|
--R        |                               |
--R        +0  0  0  0  0  0  1  0  0  0  0+
--R                                                         Type: Matrix Integer
--E 22

--S 23 of 67
gm2 := createGenericMatrix 2
--R 
--R
--R        +x     x   +
--R        | 1,1   1,2|
--R   (2)  |          |
--R        |x     x   |
--R        + 2,1   2,2+
--R                                              Type: Matrix Polynomial Integer
--E 23

--S 24 of 67
symmetricTensors (gm2,2)
--R 
--R
--R        +      2          2                       +
--R        |  x          x             x   x         |
--R        |   1,1        1,2           1,1 1,2      |
--R        |                                         |
--R   (3)  |      2          2                       |
--R        |  x          x             x   x         |
--R        |   2,1        2,2           2,1 2,2      |
--R        |                                         |
--R        |2x   x     2x   x     x   x    + x   x   |
--R        +  1,1 2,1    1,2 2,2   1,1 2,2    1,2 2,1+
--R                                              Type: Matrix Polynomial Integer
--E 24

--S 25 of 67
gm3 := createGenericMatrix 3
--R 
--R
--R        +x     x     x   +
--R        | 1,1   1,2   1,3|
--R        |                |
--R   (4)  |x     x     x   |
--R        | 2,1   2,2   2,3|
--R        |                |
--R        |x     x     x   |
--R        + 3,1   3,2   3,3+
--R                                              Type: Matrix Polynomial Integer
--E 25

--S 26 of 67
antisymmetricTensors (gm3,2)
--R 
--R
--R        +x   x    - x   x     x   x    - x   x     x   x    - x   x   +
--R        | 1,1 2,2    1,2 2,1   1,1 2,3    1,3 2,1   1,2 2,3    1,3 2,2|
--R        |                                                             |
--R   (5)  |x   x    - x   x     x   x    - x   x     x   x    - x   x   |
--R        | 1,1 3,2    1,2 3,1   1,1 3,3    1,3 3,1   1,2 3,3    1,3 3,2|
--R        |                                                             |
--R        |x   x    - x   x     x   x    - x   x     x   x    - x   x   |
--R        + 2,1 3,2    2,2 3,1   2,1 3,3    2,3 3,1   2,2 3,3    2,3 3,2+
--R                                              Type: Matrix Polynomial Integer
--E 26

--S 27 of 67
tensorProduct(gm2,gm2)
--R 
--R
--R        +     2                             2  +
--R        | x        x   x     x   x      x      |
--R        |  1,1      1,1 1,2   1,1 1,2    1,2   |
--R        |                                      |
--R        |x   x     x   x     x   x     x   x   |
--R        | 1,1 2,1   1,1 2,2   1,2 2,1   1,2 2,2|
--R   (6)  |                                      |
--R        |x   x     x   x     x   x     x   x   |
--R        | 1,1 2,1   1,2 2,1   1,1 2,2   1,2 2,2|
--R        |                                      |
--R        |     2                             2  |
--R        | x        x   x     x   x      x      |
--R        +  2,1      2,1 2,2   2,1 2,2    2,2   +
--R                                              Type: Matrix Polynomial Integer
--E 27

--S 28 of 67
)sh REP1
--R 
--R RepresentationPackage1 R: Ring  is a package constructor
--R Abbreviation for RepresentationPackage1 is REP1 
--R This constructor is exposed in this frame.
--I Issue )edit /research/research/s2/mnt/fedora5/../../src/algebra/REP1.spad to see algebra source code for REP1 
--R
--R------------------------------- Operations --------------------------------
--R antisymmetricTensors : (Matrix R,PositiveInteger) -> Matrix R if R has commutative *
--R antisymmetricTensors : (List Matrix R,PositiveInteger) -> List Matrix R if R has commutative *
--R createGenericMatrix : NonNegativeInteger -> Matrix Polynomial R
--R permutationRepresentation : (Permutation Integer,Integer) -> Matrix Integer
--R permutationRepresentation : List Integer -> Matrix Integer
--R permutationRepresentation : (List Permutation Integer,Integer) -> List Matrix Integer
--R permutationRepresentation : List List Integer -> List Matrix Integer
--R symmetricTensors : (Matrix R,PositiveInteger) -> Matrix R
--R symmetricTensors : (List Matrix R,PositiveInteger) -> List Matrix R
--R tensorProduct : (Matrix R,Matrix R) -> Matrix R
--R tensorProduct : (List Matrix R,List Matrix R) -> List Matrix R
--R tensorProduct : Matrix R -> Matrix R
--R tensorProduct : List Matrix R -> List Matrix R
--R
--E 28

)clear all

--S 29 of 67
r0 := irrRepSymNat [2,2,2,1,1]; r28 := meatAxe (r0::(LIST MATRIX PF 2))
--R 
--R 
--RDaly Bug
--R   Cannot convert from type Symbol to List Matrix PrimeField 2 for 
--R      value
--R   irrRepSymNat
--R               2,2,2,1,1
--R
--E 29

--S 30 of 67
areEquivalent? (r28.1, r28.2)
--R 
--R   There are no library operations named r28 
--R      Use HyperDoc Browse or issue
--R                                )what op r28
--R      to learn if there is any operation containing " r28 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named r28 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 30

--S 31 of 67
meatAxe r28.2
--R 
--R   There are no library operations named r28 
--R      Use HyperDoc Browse or issue
--R                                )what op r28
--R      to learn if there is any operation containing " r28 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named r28 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 31

--S 32 of 67
isAbsolutelyIrreducible? r28.2
--R 
--R   There are no library operations named r28 
--R      Use HyperDoc Browse or issue
--R                                )what op r28
--R      to learn if there is any operation containing " r28 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named r28 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 32

--S 33 of 67
ma := meatAxe r28.1
--R 
--R   There are no library operations named r28 
--R      Use HyperDoc Browse or issue
--R                                )what op r28
--R      to learn if there is any operation containing " r28 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named r28 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 33

--S 34 of 67
isAbsolutelyIrreducible? ma.1
--R 
--R   There are no library operations named ma 
--R      Use HyperDoc Browse or issue
--R                                 )what op ma
--R      to learn if there is any operation containing " ma " in its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named ma 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 34

--S 35 of 67
isAbsolutelyIrreducible? ma.2
--R 
--R   There are no library operations named ma 
--R      Use HyperDoc Browse or issue
--R                                 )what op ma
--R      to learn if there is any operation containing " ma " in its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named ma 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 35

)clear all

--S 36 of 67
px : PERM PF 29 := cycles [[1,3,5],[7,11,9]]
--R 
--R
--R   (1)  (1 3 5)(7 11 9)
--R                                              Type: Permutation PrimeField 29
--E 36

--S 37 of 67
py : PERM PF 29 := cycles [[3,5,7,9]]
--R 
--R
--R   (2)  (3 5 7 9)
--R                                              Type: Permutation PrimeField 29
--E 37

--S 38 of 67
pz : PERM PF 29 := cycle [1,3,11]
--R 
--R
--R   (3)  (1 3 11)
--R                                              Type: Permutation PrimeField 29
--E 38

--S 39 of 67
px * pz
--R 
--R
--R   (4)  (1 5)(3 9 7 11)
--R                                              Type: Permutation PrimeField 29
--E 39

--S 40 of 67
py ** 3
--R 
--R
--R   (5)  (3 9 7 5)
--R                                              Type: Permutation PrimeField 29
--E 40

--S 41 of 67
inv px
--R 
--R
--R   (6)  (1 5 3)(7 9 11)
--R                                              Type: Permutation PrimeField 29
--E 41

--S 42 of 67
order px
--R 
--R
--R   (7)  3
--R                                                        Type: PositiveInteger
--E 42

--S 43 of 67
movedPoints py
--R 
--R
--R   (8)  {3,5,7,9}
--R                                                      Type: Set PrimeField 29
--E 43

--S 44 of 67
orbit ( pz , 3 )
--R 
--R
--R   (9)  {3,11,1}
--R                                                      Type: Set PrimeField 29
--E 44

--S 45 of 67
eval ( py , 7 )
--R 
--R
--R   (10)  9
--R                                                          Type: PrimeField 29
--E 45

--S 46 of 67
)sh PERM
--R 
--R Permutation S: SetCategory  is a domain constructor
--R Abbreviation for Permutation is PERM 
--R This constructor is exposed in this frame.
--I Issue )edit /research/research/s2/mnt/fedora5/../../src/algebra/PERM.spad to see algebra source code for PERM 
--R
--R------------------------------- Operations --------------------------------
--R ?*? : (%,%) -> %                      ?**? : (%,Integer) -> %
--R ?**? : (%,PositiveInteger) -> %       ?/? : (%,%) -> %
--R ?<? : (%,%) -> Boolean                ?=? : (%,%) -> Boolean
--R 1 : () -> %                           ?^? : (%,Integer) -> %
--R ?^? : (%,PositiveInteger) -> %        coerce : List S -> %
--R coerce : List List S -> %             coerce : % -> OutputForm
--R coerceImages : List S -> %            commutator : (%,%) -> %
--R conjugate : (%,%) -> %                cycle : List S -> %
--R cyclePartition : % -> Partition       cycles : List List S -> %
--R degree : % -> NonNegativeInteger      ?.? : (%,S) -> S
--R eval : (%,S) -> S                     even? : % -> Boolean
--R hash : % -> SingleInteger             inv : % -> %
--R latex : % -> String                   movedPoints : % -> Set S
--R odd? : % -> Boolean                   one? : % -> Boolean
--R orbit : (%,S) -> Set S                order : % -> NonNegativeInteger
--R recip : % -> Union(%,"failed")        sample : () -> %
--R sign : % -> Integer                   sort : List % -> List %
--R ?~=? : (%,%) -> Boolean              
--R ?**? : (%,NonNegativeInteger) -> %
--R ?<=? : (%,%) -> Boolean if S has FINITE or S has ORDSET
--R ?>? : (%,%) -> Boolean if S has FINITE or S has ORDSET
--R ?>=? : (%,%) -> Boolean if S has FINITE or S has ORDSET
--R ?^? : (%,NonNegativeInteger) -> %
--R coerceListOfPairs : List List S -> %
--R coercePreimagesImages : List List S -> %
--R fixedPoints : % -> Set S if S has FINITE
--R listRepresentation : % -> Record(preimage: List S,image: List S)
--R max : (%,%) -> % if S has FINITE or S has ORDSET
--R min : (%,%) -> % if S has FINITE or S has ORDSET
--R numberOfCycles : % -> NonNegativeInteger
--R
--E

)clear all

--S 47 of 67
genA6 : List PERM INT := [cycle [1,2,3],cycle [2,3,4,5,6]]
--R 
--R
--R   (1)  [(1 2 3),(2 3 4 5 6)]
--R                                               Type: List Permutation Integer
--E 47

--S 48 of 67
pRA6 := permutationRepresentation (genA6,6)
--R 
--R
--R         +0  0  1  0  0  0+ +1  0  0  0  0  0+
--R         |                | |                |
--R         |1  0  0  0  0  0| |0  0  0  0  0  1|
--R         |                | |                |
--R         |0  1  0  0  0  0| |0  1  0  0  0  0|
--R   (2)  [|                |,|                |]
--R         |0  0  0  1  0  0| |0  0  1  0  0  0|
--R         |                | |                |
--R         |0  0  0  0  1  0| |0  0  0  1  0  0|
--R         |                | |                |
--R         +0  0  0  0  0  1+ +0  0  0  0  1  0+
--R                                                    Type: List Matrix Integer
--E 48

--S 49 of 67
sp0 := meatAxe (pRA6::(List Matrix PF 2))
--R 
--R   Fingerprint element in generated algebra is singular
--R     A proper cyclic submodule is found.
--R     Transition matrix computed
--R     The inverse of the transition matrix computed
--R     Now transform the matrices
--R
--R          +0  0  1  0  0+ +1  0  0  0  0+
--R          |             | |             |
--R          |1  0  0  0  0| |1  1  1  1  1|
--R          |             | |             |
--R   (3)  [[|0  1  0  0  0|,|0  1  0  0  0|],[[1],[1]]]
--R          |             | |             |
--R          |0  0  0  1  0| |0  0  1  0  0|
--R          |             | |             |
--R          +0  0  0  0  1+ +0  0  0  1  0+
--R                                          Type: List List Matrix PrimeField 2
--E 49

--S 50 of 67
sp1 := meatAxe sp0.1
--R 
--R   Fingerprint element in generated algebra is singular
--R     The generated cyclic submodule was not proper
--R     The generated cyclic submodule was not proper
--R     The generated cyclic submodule was not proper
--R     We know that all the cyclic submodules generated by all
--R       non-trivial element of the singular matrix under view are
--R       not proper, hence Norton's irreducibility test can be done:
--R     A proper cyclic submodule is found.
--R     Transition matrix computed
--R     The inverse of the transition matrix computed
--R     Now transform the matrices
--R     Representation is not irreducible and it will be split:
--R
--R                    +0  1  0  0+ +0  1  1  1+
--R                    |          | |          |
--R                    |0  0  1  0| |1  1  0  1|
--R   (4)  [[[1],[1]],[|          |,|          |]]
--R                    |1  0  0  0| |1  1  1  0|
--R                    |          | |          |
--R                    +0  0  0  1+ +1  1  1  1+
--R                                          Type: List List Matrix PrimeField 2
--E 50

--S 51 of 67 random generation, failure ok.
isAbsolutelyIrreducible? sp1.2
--R 
--R   Random element in generated algebra has
--R     one-dimensional kernel
--R     We know that all the cyclic submodules generated by all
--R       non-trivial element of the singular matrix under view are
--R       not proper, hence Norton's irreducibility test can be done:
--R     The generated cyclic submodule was not proper
--R     Representation is absolutely irreducible
--R
--I   (5)  true
--R                                                                Type: Boolean
--E 51

--S 52 of 67
d2211 := irrRepSymNat ([2,2,1,1],genA6)
--R 
--R   There are no library operations named irrRepSymNat 
--R      Use HyperDoc Browse or issue
--R                            )what op irrRepSymNat
--R      to learn if there is any operation containing " irrRepSymNat " in
--R      its name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      irrRepSymNat with argument type(s) 
--R                            List PositiveInteger
--R                          List Permutation Integer
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 52

--S 53 of 67
d2211m2 := (d2211::(List Matrix PF 2)); sp2 := meatAxe d2211m2
--R 
--R 
--RDaly Bug
--R   Cannot convert from type Variable d2211 to List Matrix PrimeField 2 
--R      for value
--R   d2211
--R
--E 53

--S 54 of 67
isAbsolutelyIrreducible? sp2.1
--R 
--R   There are no library operations named sp2 
--R      Use HyperDoc Browse or issue
--R                                )what op sp2
--R      to learn if there is any operation containing " sp2 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp2 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 54

--S 55 of 67
areEquivalent? (sp2.1, sp1.2)
--R 
--R   There are no library operations named sp2 
--R      Use HyperDoc Browse or issue
--R                                )what op sp2
--R      to learn if there is any operation containing " sp2 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp2 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 55

--S 56 of 67
dA6d16 := tensorProduct(sp2.1,sp1.2); meatAxe dA6d16
--R 
--R   There are no library operations named sp2 
--R      Use HyperDoc Browse or issue
--R                                )what op sp2
--R      to learn if there is any operation containing " sp2 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp2 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 56

--S 57 of 67
isAbsolutelyIrreducible? dA6d16
--R 
--R   There are 1 exposed and 0 unexposed library operations named 
--R      isAbsolutelyIrreducible? having 1 argument(s) but none was 
--R      determined to be applicable. Use HyperDoc Browse, or issue
--R                    )display op isAbsolutelyIrreducible?
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named 
--R      isAbsolutelyIrreducible? with argument type(s) 
--R                               Variable dA6d16
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 57

--S 58 of 67
sp3 := meatAxe (dA6d16 :: (List Matrix FF(2,2)))
--R 
--R 
--RDaly Bug
--R   Cannot convert from type Variable dA6d16 to List Matrix FiniteField(
--R      2,2) for value
--R   dA6d16
--R
--E 58

--S 59 of 67
isAbsolutelyIrreducible? sp3.1
--R 
--R   There are no library operations named sp3 
--R      Use HyperDoc Browse or issue
--R                                )what op sp3
--R      to learn if there is any operation containing " sp3 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp3 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 59

--S 60 of 67
isAbsolutelyIrreducible? sp3.2
--R 
--R   There are no library operations named sp3 
--R      Use HyperDoc Browse or issue
--R                                )what op sp3
--R      to learn if there is any operation containing " sp3 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp3 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 60

--S 61 of 67
areEquivalent? (sp3.1,sp3.2)
--R 
--R   There are no library operations named sp3 
--R      Use HyperDoc Browse or issue
--R                                )what op sp3
--R      to learn if there is any operation containing " sp3 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp3 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 61

--S 62 of 67
sp0.2
--R 
--R
--R   (6)  [[1],[1]]
--R                                               Type: List Matrix PrimeField 2
--E 62

--S 63 of 67
sp1.2
--R 
--R
--R         +0  1  0  0+ +0  1  1  1+
--R         |          | |          |
--R         |0  0  1  0| |1  1  0  1|
--R   (7)  [|          |,|          |]
--R         |1  0  0  0| |1  1  1  0|
--R         |          | |          |
--R         +0  0  0  1+ +1  1  1  1+
--R                                               Type: List Matrix PrimeField 2
--E 63

--S 64 of 67
sp2.1
--R 
--R   There are no library operations named sp2 
--R      Use HyperDoc Browse or issue
--R                                )what op sp2
--R      to learn if there is any operation containing " sp2 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp2 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 64

--S 65 of 67
sp3.1
--R 
--R   There are no library operations named sp3 
--R      Use HyperDoc Browse or issue
--R                                )what op sp3
--R      to learn if there is any operation containing " sp3 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp3 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 65

--S 66 of 67
sp3.2
--R 
--R   There are no library operations named sp3 
--R      Use HyperDoc Browse or issue
--R                                )what op sp3
--R      to learn if there is any operation containing " sp3 " in its 
--R      name.
--R 
--RDaly Bug
--R   Cannot find a definition or applicable library operation named sp3 
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 66

--S 67 of 67
dA6d16
--R 
--R
--R   (8)  dA6d16
--R                                                        Type: Variable dA6d16
--E 67
)spool 
)lisp (bye)
 
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

 
