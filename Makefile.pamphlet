%% Oh Emacs, this is a -*- Makefile -*-, so give me tabs.
\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{The Top Level Makefile}
\author{Timothy Daly \and Gabriel Dos~Reis}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{General Makefile Structure}

Makefiles are responsible for four things. First, they have to set up
the output directory structure so that all of the build machinery
can assume it exists. Second, they have to build all of the files
in their own directory. Third, they have to invoke Make on each
of their subdirectories. This forms a natural tree walk of the
directory structure. Fourth, they have to explain all of the details
about the directory, the files it manages and its subdirectories.

The clean stanza has been modified to be more effective. Previously
it walked the Makefile hierarchy trying to clean subdirectories. This
method often fails for various reasons (e.g. permissions, incomplete
builds, etc). Now we simply remove the created files directly.
\eject

\subsection{The Top Level Makefile}
<<*>>=
<<environment>>

PATH_EXPORTS = AXIOM=@AXIOM@; export AXIOM; PATH=@AXIOM@/bin:$${PATH};

subdir = 

build_libdir = $(builddir)/src/lib
lib_stamp = $(build_libdir)/stamp

build_lspdir = $(builddir)/lsp
lsp_stamp = $(build_lspdir)/stamp

build_srcdir = $(builddir)/src
src_stamp = $(build_srcdir)/stamp


.PHONY: all
all:
	$(PATH_EXPORTS) $(MAKE) do-all

.PHONY: do-all
do-all: @axiom_required_build_utils@ stamp-build-scripts
	@ echo 1 making a ${SYS} system, PART=${PART} SUBPART=${SUBPART}
	@ echo 2 Environment ${ENV}
	@ $(MAKE) stamp-rootdirs
	@ ${ENV} $(MAKE) $(lib_stamp) $(lsp_stamp) $(src_stamp)
	@echo 3 finished system build on `date` | tee >lastBuildDate

<<book>>
<<noweb>>
<<literate commands>>
<<install>>
<<src>>
<<lsp>>

$(lsp_stamp): $(lib_stamp)
$(src_stamp): $(lsp_stamp)

$(lib_stamp) $(lsp_stamp) $(src_stamp):
	d=`dirname $@`
	$(mkinstalldirs) $$d
	cd $$d && $(MAKE)

<<rootdirs>>

mostlyclean-local:

clean-local: mostlyclean-local
	@rm -rf $(axiom_build_nowebdir)
	@ rm -f stamp-*
	@ rm -rf int
	@ rm -rf obj
	@ rm -rf mnt
	@ rm -f trace

distclean-local: clean-local
	-rm -rf build
	-rm -rf $(axiom_targetdir)
	-rm -f config.status config.log
	-rm -f Makefile

$(top_builddir)/config.status: $(top_srcdir)/configure
	$(SHELL) ./config.status --recheck
@

\subsection{[[pamphlets]]}

The [[pamphlets]] variable is to be defined by every Makefile.  It shall
contain the list of all pamphlet files of interest in the directory.  The 
value of this variable is used to build documentation files.

At the moment, the toplevel directory contains only two pamphlet files
of interest:
<<pamphlets>>=
pamphlets = configure.ac.pamphlet Makefile.pamphlet
@


\subsection{Literate Commands}
Since this is the first build message that gets generated we echo
the ENV variable for debugging purposes. We use the specific file
[[$(top_builddir)/build/stamp-scripts]] as the trigger to prevent
duplicate execution of this stanza.
<<literate commands>>=
## We need to have axiom.sty installed before latexing the pamphlets
$(axiom_build_texdir)/axiom.sty: $(axiom_src_srcdir)/doc/axiom.sty.pamphlet
	$(mkinstalldirs) $(axiom_build_texdir)
	$(axiom_build_document) --tangle=axiom.sty --output=$@ $<

stamp-build-scripts: $(axiom_build_document) \
		     $(axiom_build_texdir)/axiom.sty
	@echo 10 copying $(axiom_src_srcdir)/scripts to $(axiom_top_builddir)/scripts
	@ $(INSTALL) $(axiom_src_srcdir)/scripts/showdvi $(axiom_top_builddir)/scripts
	$ $(STAMP) stamp-build-scripts

@


\subsection{Environment}

\subsubsection{VERSION}
The [[VERSION]] variable is a unique string intended to show up
in the banner at startup time. I can be anything but is intended
to be a unique way of identifying the CVS version so we can 
reference bug reports to versions.

The [[VERSION]] variable is used in the [[src/interp/Makefile]]
to set a lisp variable [[boot::*build-version*]]. This variable
is used by the [[yearweek]] function to construct the banner.

The banner also contains a build timestamp so we can determine
when the image is compiled. We touch the file 
called [[${MNT}/${SYS}/timestamp]] and using a formatted form
of its file information. See the [[YEARWEEK]] variable in the
[[src/interp/Makefile.pamphlet]] and the [[yearweek]] function in 
[[src/interp/util.lisp.pamphlet]].

\subsubsection{SPAD}
The [[SPAD]] variable is normally specified in the environment. 
It is expected to be a path to the top level directory of the
shipped system. For example, if we want to build a linux system
the [[SPAD]] variable should look like:

    `pwd`/new/mnt/{\bf linux}

\subsubsection{SYS}
From the [[SPAD]] variable we look at the last directory name
and create a version of Axiom for that system. The [[SYS]]
environment variable is the last directory name in the [[SPAD]]
variable.

\subsubsection{SPD}
The [[SPD]] variable is taken to be the current working directory
where this Makefile lives. This is obviously the root of the whole
system source tree. All Makefiles form environment variables based
on this value.

Next we see the six top-level directories discussed above being
defined using the [[SPD]] variable. 

\subsubsection{LSP}
This variable specifies where the [[lsp]] subdirectory lives.
It is normally a directory at the top level of the system but
we do not assume that to be true. Other lisps might require it
to be elsewhere. 

\subsubsection{GCLDIR}
This file contained the only mention of the AKCLDIR variable which
gives the path to the version of AKCL. Now that the system is running
on GCL this variable has been renamed to GCLDIR. This cannot be eliminated
entirely because the system uses this variable to look up a file 
called collectfn.lsp which is part of the GCL distribution. This
file lookup is in conditional lisp code so other lisps will not 
see the file load. The collectfn.lsp code is used by GCL to generate
the ``.fn'' files which are used to optimize function calling.

Also, [[lsp/sys-proclaims.lisp]] is a file generated 
during the GCL build 
which contains type information about lisp
functions, allowing fast-function calling behavior. 

When defining the environment, the [[SPD]] variable is defined as the
current directory. [[SYS]] is taken as the last non-directory part of
the environment variable [[$AXIOM]] (e.g. if [[$AXIOM=/(a-path)/mnt/linux]]
then [[SYS=linux]]). It is \emph{mandatory} that [[$AXIOM]] does
\emph{not} contain any trailing slash, because the [[notdir]] function
will return the string following the final slash and would thus return
the empty string.

\subsubsection{AXIOM\_X11\_CFLAGS}

The variable [[AXIOM_X11_CFLAGS]] holds the C compiler flags necessary
to compile part of Axiom that depends on the X Window System.  It is
computed at configure-time, based on the characteristics of the target
platform. 

\subsubsection{AXIOM\_X11\_LDFLAGS}

The variable [[AXIOM_X11_LDFLAGS]] holds the linker flags necessary
for parts of Axiom thar depends on the X Window System.  It is
computed at configure-time, based on the characteristics of the target
platform. 

\subsubsection{SRC}
The [[SRC]] subdirectory is a hand-generated, read-only top level 
directory containing the source code. This is assumed to be completely
system-independent and, in general, it can reside on a CD or NFS
mounted file system. This is useful for building several different
kinds of systems (as specified by the [[SYS]] variable from a single
source tree.

\subsubsection{INT}

The [[INT]] subdirectory is a machine-generated, system-independent
top-level directory containing source code. Axiom builds from literate
sources.  This work only needs to be done once at the first build. The
[[INT]] directory is a cache of work. It can be erased at will. 
However steps such as generating lisp code from spad code, while
done by machine, are system-independent. Therefore this subdirectory,
once built, can reside with the [[SRC]] subdirectory on CD or NFS as a
read-only branch.

\subsubsection{OBJ}
The [[OBJ]] subdirectory is a machine-generated, system-dependent
top level directory containing things like compiler binaries. The
[[OBJ]] directory is a cache of work. It can be erased at will. 
Because it is system-dependent it needs to be written at build
time by compilers for each specific system. 

\subsubsection{MNT}
The [[MNT]] subdirectory is a complete, working copy of Axiom.
This directory contains everything that is needed to run Axiom and
can be copied anywhere. Everything in this directory takes its required
information from the [[$AXIOM]] shell variable. Once this directory is
copied the [[SRC]], [[INT]], and [[OBJ]] subdirectories can be erased.

\subsubsection{ZIPS}
The [[ZIPS]] subdirectory contains particular versions of subsystems
that Axiom needs in tar-gzip format. The Makefiles will unpack them.
It also contains patch files to these subsystems. The Makefile will
apply those patches. Then it will configure and build the required
subsystems.

\subsubsection{TMP}
The [[TMP]] directory is used in place of [[/tmp]] in order to
avoid writing outside of our build tree.

Note that TMP is a workspace in the [[obj]] directory. It is
working space for temporary files since we cannot assume that
we can write outside our own tree. Output from commands like
the [[document]] command will generally be written to the
[[TMP/trace]] file. If the build seems to hang while making a
document file then check this file. It will contain the output
of the latex command and the likely error in the tex file.

\subsubsection{SPADBIN}
The [[SPADBIN]] directory is the path to the executable 
binary directory of the shipped system. The directory contains
all of the executable commands, such as the [[document]]
command. The [[document]] command lives in the [[src/scripts]]
subdirectory and will be copied to [[SPADBIN]] before we start
walking the build subtree.

\subsubsection{INC}
The [[INC]] directory contains all the include files for the C
programs.

\subsubsection{CCLBASE}
The [[CCLBASE]] subdirectory contains the path to the [[CCL]]
version of lisp. This was the original lisp used by NAG. 

\subsubsection{The [[NOISE]] variable }
The [[NOISE]] variable is used in the calls to the document
command. In general, where the document command is called in
the Makefiles it is called with the following form:
\begin{verbatim}
   ${SPADBIN}/document ${NOISE} foo
\end{verbatim}
with the default value of {\bf NOISE} being:
\begin{verbatim}
   NOISE="-o ${TMP}/trace"
\end{verbatim}

The reason [[NOISE]] exists is that the latex command will
generate a page of output which is uninteresting during the
make. However if there is a latex syntax error in a pamphlet
file the make will continue past the error due to the nonstopmode
flag. To see the actual error message rerun the make as:
\begin{verbatim}
  make NOISE=
\end{verbatim}

\subsubsection{PART and SUBPART}
Because of the size of this build we do everything possible to
minimize the work necessary to rebuild. In order to allow
finer control of the build we have two options that can be
specified. The first is the [[PART]] variable. The second
is the [[SUBPART]] variable. The [[PART]] variable basically
specifies which directory we wish to build.

Setting the PART as:

PART=foo

will look for a stanza in the Makefile as:

\${PART}dir 

which expands to:

foodir

Variable PART can be specified (environment or command-line) as
one of:

\begin{verbatim}
 (all | lib | install | lisp | interp | comp | graph | hyper 
      | clef | input | sman | boot | include | doc | algebra )
\end{verbatim}

It is possible to be more specific with a directory.
<<part>>=
PART=	cprogs
SUBPART= everything

@

\subusection{[[subdir]]}

This variable should be defined every Makefile.  It shall contain the
relative path (ending with a slash) from the toplevel source directory 
to the directory contaning that Makefile.  For the toplevel directory, it 
is empty.

[[subdir]] is used to instruct [[config.status]] --- created at 
configuration time --- to recreate a particular Makefile if needed.


\subsubsection{DESTDIR and COMMAND}
The install directory is [[/usr/local/axiom]] by default 
but this can be changed on the command line by typing:
\begin{verbatim}
make DESTDIR=/yourabsolutepath COMMAND=fullPathAndCommand install
\end{verbatim}

The [[COMMAND]] string has been modified to use the [[DESTDIR]]
variable so we can properly find the axiom command.

The [[DOCUMENT]] variable is now set to replace the direct call
to the [[$SPADBIN/document]] command. This will allow it to be
changed on the command line.
<<environment>>=

## ----------------------------------------
## -- Old-style Axiom makefile variables --
## ----------------------------------------

VERSION="Axiom (build improvements branch) -- 2006-09-17"
SPD=$(shell pwd)
SPAD=${SPD}/mnt/${SYS}
LSP=${SPD}/lsp
SRC=${SPD}/src
INT=${SPD}/int
OBJ=${SPD}/obj
MNT=${SPD}/mnt
ZIPS=${SPD}/zips
TMP=${OBJ}/tmp
SPADBIN=${MNT}/${SYS}/bin
INC=${SPD}/src/include
CCLBASE=${OBJ}/${SYS}/ccl/ccllisp
DESTDIR=$(prefix)/axiom
COMMAND=${DESTDIR}/mnt/${SYS}/bin/axiom
NOISE="-o ${TMP}/trace"

PLF=@PLF@
CCF=@CCF@
LDF=@LDF@
LISP=@LISP@
GCLOPTS=@GCLOPTS@
SRCDIRS=@SRCDIRS@

<<pamphlets>>

<<part>>

ENV= SPAD=${SPAD} SPD=${SPD} LSP=${LSP} GCLDIR=${GCLDIR} \
     SRC=${SRC} INT=${INT} OBJ=${OBJ} MNT=${MNT} ZIPS=${ZIPS} TMP=${TMP} \
     SPADBIN=${SPADBIN} INC=${INC} CCLBASE=${CCLBASE} PART=${PART} \
     SUBPART=${SUBPART} NOISE=${NOISE} \
     TANGLE=${TANGLE} VERSION=${VERSION} \
     DOCUMENT=${axiom_build_document} \
     WEAVE=${WEAVE} \
     PLF="$(PLF)" CCF="$(CCF)" LDF="$(LDF)" LISP=$(LISP) \
	GCLOPTS="$(GCLOPTS)" SRCDIRS="$(SRCDIRS)"

@
\subsection{rootdirs}
Note that the -p (parent) option to mkdir will make all intermediate
directories as well if they don't exist.

We need [[${MNT}/${SYS}/doc/src]] so the various Makefile.dvi files
can be copied.

We need to make the [[${MNT}/${SYS}/bin/lib]] path because on certain
systems, such as freebsd, we do not build noweb. The noweb stanza
would normally create this but might not have been executed.
<<rootdirs>>=
stamp-rootdirs: stamp-build-scripts
	@echo 11 checking directory structure
	@echo 12 Environment: ${ENV}
	@mkdir -p ${INT}
	@mkdir -p ${OBJ}/${SYS}
	@mkdir -p ${TMP}
	@mkdir -p ${MNT}/${SYS}/bin/lib
	@mkdir -p ${MNT}/${SYS}/doc/src
	@$(STAMP) stamp-rootdirs

@

\subsection{book}
This stanza constructs the book from the original pamphlet file.
At this time there is no difference between the pamphlet file
and straight latex (intentionally). Thus we just need to make 
sure the correct directories are in place, copy the files, and
run latex over the pamphlet file.

<<book>>=
book:
	@ echo 79 building the book as ${MNT}/${SYS}/doc/book.dvi 
	@ mkdir -p ${TMP}
	@ mkdir -p ${MNT}/${SYS}/doc
	@ cp ${SRC}/doc/book.pamphlet ${MNT}/${SYS}/doc
	@ cp -pr ${SRC}/doc/ps ${MNT}/${SYS}/doc
	@ (cd ${MNT}/${SYS}/doc ; \
          if [ .${NOISE} = . ] ; then \
	    ( latex book.pamphlet --interaction nonstopmode ; \
	      latex book.pamphlet --interaction nonstopmode ) ; \
	   else \
	    ( latex book.pamphlet --interaction nonstopmode >${TMP}/trace ; \
	      latex book.pamphlet --interaction nonstopmode >${TMP}/trace ) ; \
	  fi ; \
	  rm book.pamphlet ; \
	  rm book.toc ; \
	  rm book.log ; \
	  rm book.aux )
	@ echo 80 The book is at ${MNT}/${SYS}/doc/book.dvi 

@
\subsection{noweb}

Note that this stanza echos a line into a file called noweb.
Makefile semantics says that when this file exists we will
skip this stanza. So in a clean system where the noweb file
does not exist we will execute this once and never again
(unless someone deletes the noweb file).

Never add anything after the colon otherwise the noweb
build will depend on it rather than the noweb flag file
in the current directory.

We have added a patch to the [[${SPAD}/obj/noweb/src/c/modules.c]]
file that causes noweb to output undefined chunk names exactly
as they exist in the original file. This gets around the most
common failure of boxing up a file into a pamphlet. The patch
file lives in the [[ZIPS]] directory and will be applied
after noweb is untarred but before the make occurs.

We also patch the use of [[make]] to use [[${MAKE}]]. BSD style
systems use [[gmake]] rather than [[make]] so we need to pass this
information from above for the build to succeed.

\subsection{Noweb patch skipped}
We tried to applied this noweb patch but the function [[tempfile]]
used in all of the patches does not exist therefore this patch
has been removed pending a fix. The referenced patch files still
exist in the zips directory.

<<noweb>>=
$(addprefix $(axiom_build_bindir)/, notangle noweave):
	@echo 13 making noweb
	@mkdir -p $(axiom_build_nowebdir)
	@mkdir -p ${TMP}
	@mkdir -p $(axiom_build_texdir)
	@(cd $(axiom_build_nowebdir) && \
	  $(TAR) -zxf $(axiom_optional_srcdir)/noweb-2.10a.tgz && \
	  cd $(axiom_build_nowebdir)/src/c && \
	  $(PATCH) < $(axiom_optional_srcdir)/noweb.modules.c.patch && \
	  cd $(axiom_build_nowebdir)/src && \
	  cat Makefile \
	      | sed -e "s|^BIN=.*|BIN=$(axiom_build_bindir)|" \
                    -e "s|^LIB=.*|LIB=$(axiom_build_libdir)|" \
		    -e "s|^MAN=.*|MAN=$(axiom_build_mandir)|" \
                    -e "s|^TEXINPUTS=.*|TEXINPUTS=$(axiom_build_texdir)|" \
		    -e 's/ make / $$\(MAKE\) /' \
	      > Makefile.tmp && mv Makefile.tmp Makefile && \
	  ./awkname $(AWK) && \
	  ${ENV} $(MAKE) BIN=$(axiom_build_bindir) \
                         LIB=$(axiom_build_libdir) \
                         MAN=$(axiom_build_mandir) \
                         TEXINPUTS=$(axiom_build_texdir) \
			 all install > ${TMP}/trace )

@

\subsection{src}
We should recompile the world with the .fn information but not here.
\begin{verbatim}
	( for i in `find . -name "*.lsp"` ; \
	    do echo $$i ; touch $$i ; done )
	( for i in `find . -name "*.lisp"` ; \
	    do echo $$i ; touch $$i ; done )
	@echo 15a remaking ${SRC}/interp for performance
	@(cd src ; ${ENV} ${MAKE} )
\end{verbatim}
<<src>>=
srcdir: stamp-rootdirs
	@echo 15 making ${SPD}/src 
	@( cd src ; ${ENV} ${MAKE} )

libspadclean:
	@echo 17 cleaning ${OBJ}/${SYS}/lib	
	@rm -rf ${OBJ}/${SYS}/lib	
	@( cd src ; ${ENV} ${MAKE} clean )
	@rm -f ${SPD}/src/Makefile.dvi

@

\subsection{lsp}
We delegate the details of constructing common lisp to the Makefiles in
the subtree. We need only ensure that the Makefiles are up to date.

We build two lisps, Codemist Common Lisp (CCL) and Gnu Common Lisp (GCL)
at the current time. Carnegie-Mellon University Common Lisp (CMUCL) is planned.

If and when we GCL, it is ``installed'' in [[$(axiom_builddir)]].  
The [[gcl]] binary will be accessible as [[$(axiom_build_bindir)/gcl]].
The augmented fresh lisp image is also accessible as
[[$(axiom_build_bindir)/lisp]] for use to build Boot.

\subsubsection{[[lsp]]}

The [[obj/sys/lsp]] dir is necessary to keep collectfn and sys-proclaims.
The collectfn.lsp file is a special extension to GCL to collect type
information during a compile-file. This information gets written out
to a [[.fn]] file. These [[.fn]] files can be loaded and written out
as a file containing proclaims information. If this proclaims information
is available at compile time then the resulting function calls are much
more efficient. The [[sys-proclaims]] file contains type information 
about standard common lisp function calls.
<<lsp>>=
lspdir: stamp-rootdirs stamp-build-scripts
	@echo 19 making ${LSP}
	@mkdir -p ${OBJ}/${SYS}/bin
	@mkdir -p ${OBJ}/${SYS}/lsp
	@(cd lsp ; ${ENV} ${MAKE})
#	@(cd lsp ; ${ENV} ${MAKE} ccldir )

lspclean:
	@echo 21 cleaning ${OBJ}/${SYS}/ccl
	@rm -rf ${INT}/ccl
	@rm -rf ${OBJ}/${SYS}/ccl
@

\subsection{install}
<<install>>=
install:
	@echo 78 installing Axiom in ${DESTDIR}
	@mkdir -p ${DESTDIR}
	@cp -pr ${MNT} ${DESTDIR}
	@echo '#!/bin/sh -' >${COMMAND}
	@echo AXIOM=${DESTDIR}/mnt/${SYS} >>${COMMAND}
	@echo export AXIOM >>${COMMAND}
	@echo PATH='$${AXIOM}/bin':'$${PATH}' >>${COMMAND}
	@echo export PATH >>${COMMAND}
	@cat $(axiom_src_srcdir)/etc/axiom >>${COMMAND}
	@chmod +x ${COMMAND}
	@echo 79 Axiom installation finished.
	@echo
	@echo Please add $(shell dirname ${COMMAND}) to your PATH variable
	@echo Start Axiom with the command $(shell basename ${COMMAND})
	@echo 

@

\subsection{document}

Each file in the system is in pamphlet form. This stanza, which is not
executed by default, will walk the directories generating the
documentation for each file. These are dvi files and since they are
system-independent and machine-generated they live in the [[INT]]
subdirectory. In particular, we will build an [[INT/DOC]] subtree
mirroring the [[LSP]] and [[SRC]] subtrees. The [[INT/DOC]]
subtree can be removed with no ill effect. Since all of the pamphlet
files live in either the [[LSP]] or [[SRC]] subdirectories we make
sure the [[INT/DOC/LSP]] and [[INT/DOC/SRC]] directories exist.

<<document>>=
document: stamp-rootdirs
	@echo 22 documenting files
	@mkdir -p ${INT}/doc/lsp
	@mkdir -p ${INT}/doc/src
	@(cd lsp ; ${ENV} ${MAKE} document )
	@(cd src ; ${ENV} ${MAKE} document )

@


Until now, pamphlet files are also \LaTeX{}ed as part of a normal build.
We are moving to more standard build process where the documentation
is made as a separate rule.  Please, this does not go against the 
literate programming movement.  The new build machinery has a general 
make target [[dvi]] that builds DVI files of the corresponding pamphlet
files.  It does so by consulting the value of the variable [[pamphlets]]
--- which should be defined by every Makefile.

\section{The Platform Makefiles}

The Top Level Makefile examines the SPAD variable to determine
the target build platform. It sets up the general structure
of the world. Then it invokes one of these platform Makefiles. 
Each of these Makefiles sets several
environment variables that are specific to this platform.

\subsubsection{The [[PLF]] variable }

\subsubsection{The [[CCF]] variable }

\subsubsection{The [[LDF]] variable }

The LDF variable is the generic loader flags. This gives information
about where various libraries are located on specific platforms. On
linux, for instance, the library [[libXpm.a]] is used by the graphics
routines. This library is usually found in [[/usr/X11R6/bin/libXpm.a]]. 
Thus, on the linux platform LDF is defined as
\begin{verbatim}
LDF= -L/usr/X11R6/lib
\end{verbatim}

\subsubsection{The [[CC]] variable }

\subsubsection{The [[AWK]] variable }

On most systems the gnu toolset is the default. Thus we can just use
'awk' and the program works. However, on some systems we need to
specify that we are using the gnu toolset, and we need to use
[[gawk]] instead of [[awk]].

\subsubsection{The [[PATCH]] variable }

On most systems the gnu toolset is the default. Thus we can just use
'patch' and the program works. However, on some systems we need to
specify that we are using the gnu toolset, and we need to use
[[gpatch]] instead of [[patch]].

\subsubsection{The [[RANLIB]] variable }

\subsubsection{The [[TOUCH]] variable }

\subsubsection{The [[TAR]] variable }

\subsubsection{The [[AXIOMXLROOT]] variable }

\subsubsection{The [[O]] variable }
Various Common Lisp systems prefer certain filename extensions.
This defaults to ``o'' so a compile of foo.lisp becomes foo.o
but other systems prefer .fasl so a compile of foo.lisp becomes
foo.fasl. Change this based on the target lisp.

\subsubsection{The [[BYE]] variable }

\subsubsection{The [[LISP]] variable }

\subsubsection{The [[DAASE]] variable}
Axiom uses 5 files, the *.daase files, which are called ``the
databases''. They contain cross-reference, signatures,
and other information needed by the interpreter and compiler.
When the system is being built from scratch these databases
need to exist. However, they get dynamically rebuilt after
the algebra files are compiled. The bootstrap versions of these
databases live in the [[src/share]] subdirectory. Axiom will
use the value of the shell variable [[DAASE]] to find its 
databases. If this variable is unbound it uses the standard
[[${MNT}/${SYS}]] path. Note that Axiom will append the string
[[/algebra]] to the value of [[DAASE]]. The default value setting
given here is:

[[DAASE=$(axiom_src_datadir)]]

so [[${SRC}/share/algebra/*.daase]] will be the
Axiom bootstrap database files.

\subsubsection{The [[SRCDIRS]] variable}
The [[SRCDIRS]] variable is used in the [[src/Makefile.pamphlet]]
to decide what directories to build on a given platform. This is
needed at the moment because certain functions do not yet work on
all platforms. 
<<SRCDIRS>>=
SRCDIRS="bootdir interpdir sharedir algebradir etcdir clefdir docdir \
        graphdir smandir hyperdir inputdir "
@

\subsubsection{The [[GCLOPTS]] configure variable}
The [[GCLOPTS]] lisp requires some parameters 
for building which vary from system
to system. We create an environment variable here so we can add options
to the configure command in the [[lsp/Makefile.pamphlet]].
<<GCLOPTS>>=
GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
@
It turns out that we can successfully build GCL on many more systems
if we set the [[GCLOPTS]] to build a local [[BFD]].
<<GCLOPTS-LOCBFD>>=
GCLOPTS="--enable-vssize=65536*2 --enable-locbfd --disable-dynsysbfd \
         --disable-statsysbfd --enable-maxpage=256*1024"
@
For the MACOSX port we need the following options
<<GCLOPTS-CUSTRELOC>>=
GCLOPTS="--enable-vssize=65536*2 --enable-maxpage=256*1024 --disable-locbfd \
         --disable-statsysbfd  --enable-custreloc --disable-tkconfig \
         --enable-machine=pwerpc-macosx"
@

\subsection{Makefile.MACOSX}
On the MAC OSX someone decided (probably a BSDism) to rename the
[[SIGCLD]] signal to [[SIGCHLD]]. In order to handle this in the 
low level C socket code (in particular, in [[src/lib/fnct_key.c]])
we change the platform variable to be [[MACOSXplatform]] and create
this new stanza.

We need to add [[-I/usr/include/sys]] because [[malloc.h]] has been
moved on this platform. 

We need to explicitly put [[-I/usr/include]] before 
[[-I/usr/include/sys]] because the MAC seems to search in a
different order than linux systems. The [[sys]] versions of 
the include files are broken, at least for Axiom use.



\section{Cleanup}
Following the standard practice of GNU build machinery, there are 
three [[make]] rules for cleanup:
\begin{enumerate}
\item [[mostlyclean]]
\item [[clean]]
\item [[distclean]]
\end{enumerate}

[[mostlyclean]] acts almost like [[clean]] except that it does not 
delete some files that are time-consuming to make (if remaking is 
not needed), e.g. [[libspad.a]] or [[lisp]].

[[clean]] deletes any file created by running [[make]].

[[distclean]] cleans up the build directory to the point where it almost
reverts to the state of the build directory before the initial build.

In summary [[clean]] can be interpreted as a prerequisite of [[distclean]],
and [[mostlyclean]] a prerequisite of [[clean]].


To ease the process of writing rules to clean up directories, the new
build machinery has divided each general rule cleanup rule into two
categories
\begin{itemize}
\item [[\%-generic]]
\item [[\%-local]]
\end{itemize}

The stem [[\%]] standards for [[mostlyclean]], [[clean]], and 
[[distclean]].  The [[\%-generic]] rules are defined by the
build machinery.  Only the tree rules [[\%-local]] need to be defined
by Makefiles.  The intent is that they do directory-specific cleanup.



\subsection{[[generic cleanups]]}

There are many cleanup tasks that are common to almost all directories.
They are handled by generic cleanup rules
\begin{itemize}
\item [[mostlyclean-generic]]
\item [[clean-generic]]
\item [[distclean-generic]]
\end{itemize}
For instances, they delete intermediate files produced by \LaTeX{}.
If you're writing a new Makefile for Axiom, you do not have to
define these rules.

\subsection{[[local cleanups]]}

Some Makefiles have specific needs about cleanups.  For example, the 
directory [[src/lib]] that contains mostly C codes would need to delete 
intermediate files for C codes weaved from pmaphlets.  They must
handle those through
\begin{itemize}
\item [[mostlyclean-local]]
\item [[clean-local]]
\item [[distclean-local]]
\end{itemize}

Notice that each Makefile should define those targets, even if they do 
nothing. 


\eject
\begin{thebibliography}{99}
\bibitem{1} CMUCL {\bf http://www.cons.org/cmucl}
\bibitem{2} GCL {\bf http://savannah.gnu.org/projects/gcl}
\bibitem{3} Codemist Ltd, ``Alta'', Horsecombe Vale Combs Down
Bath BA2 5QR UK Tel. +44-1225-837430 
{\bf http://www.codemist.co.uk}
\bibitem{4} \$SPAD/zips/noweb-2.10a.tgz, the noweb source tree
\bibitem{5} \$SPAD/zips/advi-1.2.0.tar.gz, the advi source tree
\end{thebibliography}
\end{document}

