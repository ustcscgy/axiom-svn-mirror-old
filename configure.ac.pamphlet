%% Oh Emacs, this is a -*- sh -*- script, despite appearance.
\documentclass[12pt]{article}
\usepackage{axiom}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fancyvrb}
\usepackage{pslatex}
\usepackage{url}

\newcommand{\email}[1]{\url{#1}}
\CustomVerbatimEnvironment{chunk}{Verbatim}{frame=none,fontsize=\small}

\title{The Toplevel \File{configure.ac} Pamphlet}
\author{Gabriel Dos~Reis}

\begin{document}
\maketitle

\begin{abstract}
 ...
\end{abstract}

\section{Introduction}
\label{sec:intro}

This is the top-level \Tool{Autoconf} file that sets up the minimum build
environment for \Tool{Axiom}.  At the moment, the mainline version
of \Tool{Axiom} is driven by \File{Makefile} pamphlet files.  This effort
strives to move the build machinery to more abstract description
and conventional ones.
The task is compounded by the fact that the \Tool{Axiom} system is very 
complex --- but much less complex, I suspect, than say \Tool{GCC}.  
There does not
seem to be good reasons why \Tool{Axiom} should build its own ghetto.


\section{Configuration options}
\label{sec:config-options}

We strive for making \Tool{Axiom}'s build system integrate as seamlessly as 
possibly into the standard GNU build framework.

\subsection{Standard options}
\label{sec:config-options:std}

At the moment, we honor the following options:
\begin{description}
\item \verb!--prefix!:
  By default, \Tool{Axiom}'s build system will install files 
  in ``\File{/usr/local}''.  However, you 
  can select a different location prefix using this option.

\item \verb!--with-x!:

\item \verb!--x-includes=DIR!

\item \verb!--x-libraries=DIR!

\item \verb!--help!

\item \verb!--version!
\end{description}


\subsection{\Tool{Axiom}-specific options}
\label{sec:config-options:axiom-specific}

\begin{description}
\item \verb!--with-noweb!:
  The \Tool{Axiom} project
  uses \emph{literate programming} as a development methodology.
  Consequently, it needs utilities to extract programs and documentations from
  its source codes.  To that end, it currently relies on \Tool{noweb}.  
  Since \Tool{noweb}
  is not as common place as one would wish, \Tool{Axiom}
  ships with a copy of \Tool{noweb}
  that it will build if none of \Tool{noweb} utilities are present in the build
  environment.  At configure time, \Tool{Axiom} detects whether noweb 
  utilities are
  present or not.  If yes, it will use it.  Otherwise, it will build its own
  copy. 

  You can tell \Tool{Axiom} to use an installed functioning \Tool{noweb}, 
  if you have one
  with the \Tool{configure} option \verb!--with-noweb!.  
  \Tool{Axiom} will check that indeed
  \Tool{notangle} and \Tool{noweave} are present in your build environment
  and use them.
  If you specify \verb!--with-noweb! but the corresponding utilities are
  absent, \verb!Axiom! will abort configuration.

  Conversely, you can convince \Tool{Axiom} to build its own copy of
  \Tool{noweb} (and use
  it) through \verb!--without-noweb!, regardless of whether you have 
  a working \Tool{noweb} installed or not.

\item \verb!--with-gcl!:
  \Tool{Axiom} needs an implementation of Lisp to support its
  runtime system.  At the moment, GNU Common Lisp (\Tool{GCL} for short)
  is used.  This options instructs \Tool{Axiom} to use installed
  \Tool{GCL}, instead of building its own copy.
\end{description}

\section{Basic Setup}
\label{sec:basic-setup}

\subsection{\Tool{Autoconf} Initialization}
\label{sec:basic-setup:init}

The \Tool{Autoconf} machinery needs to be initialized with several pieces of
information:
\begin{itemize}
\item the \emph{name} of the system --- ``Axiom build-improvements branch''
\item its \emph{version}.  I choose to use the date of last checkin.
  It should probably include the revision number so as to 
  unambiguously identify which Axiom flavour du jour is being
  built;
\item and where to send feedback, \emph{e.g.} bug reports.  At the moment, 
  we use
  the \email{axiom-developer} list.  That could change in the future if
  we reach a high volume traffic.  For the moment, we don't seem to
  suffer from traffic...
\end{itemize}
<<Autoconf init>>=
sinclude(config/axiom.m4)
AC_INIT([Axiom build-improvements branch], [2006-11-26], 
        [axiom-developer@nongnu.org])
@

In various places, the \Tool{Axiom} source code has references to
directory paths, and is very sensitive to whether the paths are absolute
or relative, etc.  Those sensitivities are most certainly bugs.  
However, I don't have time to fix everything on this branch.  
Consequently I'll preserve here and there old semantics when fixing is not
immediate or does not need too much of work for little gain with
respect to the stated goal of this branch.  In particular, we cache
the absolute path to the top directory containing \Tool{Axiom} source
code.
<<Autoconf init>>=
axiom_top_srcdir=`cd $srcdir && pwd`
AC_SUBST(axiom_top_srcdir)
@


\Tool{Autoconf} needs some auxilary files that are present in the 
sub-directory \File{config}:
<<Autoconf init>>=
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
@

Not all platforms present the same operating system API to applications.
For the part of \Tool{Axiom} written in the C programming language, we 
can collect, in a single file, variabilities in operating system 
API in form of C preprocessor macros.  That file is for the most part
automatically generated by \Tool{Autoheader}.
<<Autoconf init>>=
AC_CONFIG_HEADERS([config/axiom-c-macros.h])
@

Note that at configuration time, \Tool{configure} will instantiate a
file [[$(top_builddir)]]\File{config/axiom-c-macros.h}, appropriate
for all C sub-parts of \Tool{Axiom} to include.


Notice that since we don't use Automake (yet), we don't initialize
the Automake subsystem.  
<<Autoconf init>>=
# AM_INIT_AUTOMAKE([foreign])
@

We require Autoconf 2.59 or higher from the developer part. Please,
note that this is no requirement on the user build environment.  All,
it means is that if someone makes changes to the current \File{configure.ac}
file, that someone needs to have Autoconf 2.59 or higher to process this
file in order to regenerate \File{configure}.
<<Autoconf init>>=
AC_PREREQ([2.59])
@


\subsection{Source tree sanity check}
\label{sec:basic-setup:sanity-check}

The \Tool{Autoconf} system implements a very basic, simple-minded, 
sanity check
whereby it will refuse to run \File{configure} if the source tree does
not contain a specified file, that serves a witness for a bona fide source
tree.  Here, we use \File{Makefile.pamphlet} from the \File{src}
subdirectory.
<<sanity check>>=
AC_CONFIG_SRCDIR(src/Makefile.pamphlet)
@


\subsection{The Build Environment}

\subsubsection{Canonical triplets}
Standard build environments consist of
\begin{enumerate}
\item the \emph{host} platform,
\item the \emph{build} platform, and
\item the \emph{target} platform.
\end{enumerate}
FIXME: Example on these notions.

We need to get the canonical names for the above three platforms.
After call to this macro, those values are available in the variables
[[host]], [[build]], and [[target]], respectively.
<<host build target platfoms>>=
AC_CANONICAL_SYSTEM

## Where tools for the build machine are built
axiom_builddir=`pwd`/build/$build
axiom_build_bindir=$axiom_builddir/bin
axiom_build_libdir=$axiom_builddir/lib
axiom_build_sharedir=$axiom_builddir/share
AC_SUBST(axiom_builddir)
AC_SUBST(axiom_build_bindir)
AC_SUBST(axiom_build_libdir)

## Prefix for the staging target inistallation directory
axiom_targetdir=`pwd`/target/$target
AC_SUBST(axiom_targetdir)
@

\subsubsection{Cross compilation}
For the moment, Axiom supports neither cross-compilation, nor Canadian cross.
Consequently, we must bail out if the build is not native.
<<check cross-compilation>>=
if test $host != $build -o $host != $target; then
   AC_MSG_ERROR([Sorry, only native builds are currently supported])
fi
@

\subsubsection{C Runtime support}

The core runtime support consists of
\begin{itemize}
\item signal ([[bsdSignal]])
\item sockets,
\item Files and directories manipulation.
\end{itemize}

\subsubsection{Build utilities}
Most of the tools we're testing for are with respect to the build
environment.  However, notice that since we only support \emph{native}
build at the moment, the tests are also for the host and target
platforms.
<<build utils>>=
## Accumulate list of utils needed for the build platform
axiom_all_prerequisites=

<<find make>>

<<find C compiler>>

<<file utils>>

<<awk and tar program>>

<<binary utils>>

<<doc utils>>

<<find lisp>>

AC_SUBST(axiom_all_prerequisites)
@

The next paragraphs detail each of the cluster of build utilities
[[configure]] looks for.

\paragraph{The [[make]] program.}

Of course, no build can proceed with [[make]] inexisting from
the build-environment.
<<find make>>=
AC_CHECK_PROG([MAKE], [make],
              [make], [AC_MSG_ERROR(['make' program missing.])])
@

\paragraph{C compiler}
First of all, check for a C compiler.  As written, this test is OK 
because currently we support only native builds.  However,
 it needs to be more carefully written when we move to cross-compilation.
Axiom, in its current form, cannot be compiled with a C compiler
other than from GNU.  We take that as a requirement.
<<find C compiler>>=
## Make sure the C compiler is from GCC
AC_PROG_CC
if test x$GCC != xyes; then
    AC_MSG_ERROR([We need a C compiler from GCC])
fi
axiom_cflags="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE"
AC_SUBST(axiom_cflags)

## What is the extension of object files on this platform?
AC_OBJEXT
@

\paragraph{File utils}
Then, check for a usable [[install]] program.  Also, find out
way to hard- or soft-link files.
<<file utils>>=
AC_PROG_INSTALL
AC_PROG_LN_S
AC_CHECK_PROG([TOUCH], [touch],
              [touch], [AC_MSG_ERROR(['touch' program is missing.])])
@

\paragraph{The [[awk]] program}
The old build machinery needs 'awk'.  Currently, it checks for
'gawk', 'nawk', and 'awk'.  Autoconf has a predefined test for that
task.  It checks for 'gawk', 'mawk', 'nawk', and 'awk' in that order.
That should be OK and match Axiom's need.

The old build system claims that on solaris9, gawk, gtar 
and gpatch are required (with no much explanation of why).  Notice
that these programs are needed only to build Axiom; so we do
check based on the value of [[build]]. 
<<awk and tar program>>=
case $build in
     *-solaris9)
        AC_CHECK_PROG([AWK], [gawk], 
                      [gawk], [AC_MSG_ERROR([Axiom needs gawk])])

        AC_CHECK_PROG([TAR], [gtar], 
                      [gtar], [AC_MSG_ERROR([Axiom needs gtar])])

        AC_CHECK_PROG([PATCH], [gpatch],
                      [gptach], [AC_MSG_ERROR([Axiom needs gpatch])]) 
        ;;

      *)
        AC_PROG_AWK

        AC_CHECK_PROGS([TAR], [gtar tar], 
                       [AC_MSG_ERROR([Axiom needs a tar program])])

        AC_CHECK_PROGS([PATCH], [gpatch patch], 
                       [AC_MSG_ERROR([Axiom needs a patch program])])
        ;;
esac
@

\paragraph{Binary utils.}

We need to know how to put object files into archives.
<<binary utils>>=
AC_PROG_RANLIB
AC_CHECK_PROG([AR], [ar], [ar], [AC_MSG_ERROR([program 'ar' is missing])])
@

\paragraph{Doc utils.}

Axiom sources is literate, and it uses the [[noweb]] technology.
[[noweb]] is used to extract both the actual source code from the
pamphlet files, and the documentation as \LaTeX{} source files.
There are many platforms on which [[noweb]] is inexistent.  
Consequently, Axioms tarballs has a copy of [[noweb]] that it builds
when [[noweb]] is missing (or when Axiom is made to believe so).
Axiom does not, however, go as far as hosting source files needed
to build \LaTeX{}.  Yet.

<<doc utils>>=
AC_CHECK_PROG([LATEX], [latex],
              [latex], [AC_MSG_ERROR([Axiom needs a latex program.])])
AC_CHECK_PROG([MAKEINDEX], [makeindex],
              [makeindex], [AC_MSG_ERROR([Axiom needs a makeindex program])])

## -------------------------
## -- Which noweb to use? --
## -------------------------
## 
axiom_use_noweb=
AC_ARG_WITH([noweb], [  --with-noweb          assume noweb is available],
            [case $withval in
                yes|no) axiom_use_noweb=$withval ;;
                *) AC_MSG_ERROR([erroneous value for --with-noweb]) ;;
             esac])

## Check for notangle and noweb if we are not explicitly told
## to build noweb from Axiom sources.
if test x$axiom_use_noweb != xno; then
    AC_PATH_PROG([NOTANGLE], [notangle])
    AC_PATH_PROG([NOWEAVE], [noweave])

    ## Ensure the build environment is consistent with specified option.
    if test x$axiom_use_noweb = xyes \
        && test -z $NOTANGLE -o -z $NOWEAVE; then
        AC_MSG_ERROR([noweb utils are missing but --with-noweb is specified])
    fi
fi

## In case noweb is missing we need to build our own.
if test -z $NOTANGLE -o -z $NOWEAVE ; then
    if test -f $axiom_top_srcdir/noweb/Makefile ; then
        axiom_all_prerequisites="$axiom_all_prerequisites all-noweb"
        NOTANGLE=$axiom_build_bindir/notangle
        NOWEAVE=$axiom_build_bindir/noweave
        AC_SUBST(NOTANGLE)
        AC_SUBST(NOWEAVE)
    else
         AC_MSG_ERROR([noweb utils and noweb sources missing, see README.wh])
    fi
fi
@

\paragraph{The Lisp platform.}

Axiom uses Lisp as its main platform.  If no Lisp implementation
is available in the build environment (or if Axiom is told not
to look for one) then Axiom msut build its own version from the
copy of GCL sources it keeps in the [[zips]] directory.  In fact,
at the moment Axiom is reported to work only with GCL.

<<find lisp>>=
## -----------------------
## -- Which GCL to use? --
## -----------------------
##
## By default, we assume that GCL is not present in the build
## environment, so we should roll our own.  That is a reasonable
## assumption since GCL does not seem to be as widespread as one
## would like to think.

axiom_use_gcl=
AC_ARG_WITH([gcl], [  --with-gcl              assume GCL is available],
            [case $withval in
                yes|no) axiom_use_gcl=$withval ;;
                *) AC_MSG_ERROR([erroneous value for --with-gcl]) ;;
             esac])

## Check for GCL only if we're told to or if we should guess
if test x$axiom_use_gcl != xno; then
    AC_PATH_PROG([GCL], [gcl])
else
    ## Make sure GCL is Autoconf-substituted in generated files
    AC_SUBST(GCL)
    :
fi

## If we were told to use system-installed GCL, but the 'gcl' command
## is missing from the build environment, then something is wrong.
if test -z $GCL; then
    if test x$axiom_use_gcl = xyes; then
        AC_MSG_ERROR([--with-gcl is specified but GCL is missing])
    fi

    GCL=$axiom_build_bindir/gcl
    ## Make sure GCL is on the list of required tools
    if test -f $axiom_top_srcdir/gcl/configure.in ; then
        axiom_all_prerequisites="$axiom_all_prerequisites all-gcl"
    else
        AC_MSG_ERROR([GCL and GCL sources missing, see README.wh])
    fi
fi
@


\subsubsection{The [[AXIOM]] variable}

The Axiom source files (especially the source files for the
interpreter) use the environment variable [[AXIOM]] in a very
pervasive way.   That variable needs to be set before the
build start --- or else, it will fail.

<<define AXIOM>>=
AXIOM=$axiom_targetdir
AC_SUBST(AXIOM)
@

\subsubsection{Platform specific bits}

The old build machinery has hard-coded special-cased Makefile for 
some known platforms.   We would like to have a uniform, Makefiles with 
varying bits computed at configuration time.  As a transitional path 
from the current system to the new build framework, we have moved the
old logic from toplevel Makefile to here.  It is understood that in the
near future the logic will be improved to support more platforms.

If GCL is not present in the build environment (a very common situation on
most platforms), we must build one from a copy included in the
Axiom tarball.  However, GCL relies on the libirary BFD, the include 
headers of which may not exist (quite common).  In order to avoid 
failure while building GCL, we test for the existence of [[<bfd.h>]]
and the corresponding library.  We configure GCL to
use its own copy of BFD accordingly. 

<<gcl options>>=
axiom_host_has_bfd_h=
axiom_host_has_libbfd=
AC_CHECK_HEADER([bfd.h], [axiom_host_has_bfd_h=yes])
AC_HAVE_LIBRARY([bfd], [axiom_host_has_libbfd=yes])

axiom_gcl_bfd_option=
if test x"$axiom_host_has_bfd_h" = xyes \
    && test x"$axiom_host_has_libbfd" = xyes; then
    axiom_gcl_bfd_option="--enable-statsysbfd --disable-dynsysbfd"
else
    axiom_gcl_bfd_option="--disable-statsysbfd --enable-locbfd"
fi
@

GCL has an elaborate memory management system and Axiom seems to 
put ``unusual'' pressure on it.  Here we specify some values that have
been empirically known to work.
<<gcl options>>=
axiom_gcl_mm_option="--enable-vssize=65536*2 --enable-maxpage=256*1024"
@

Furthermore, we don't need (at the moment) GCL to build support for
X Window system or TK:
<<gcl options>>=
axiom_gcl_x_option="--disable-tkconfig --disable-x --disable-xgcl"
@

Other aspects depend on the platform being considered.


\Tool{Axiom} source code had developed the appalling and irritating habit
of testing for
platforms, when in fact it is interested in functionalities.
The outcome is an ever-growing pile increasing disgusting hacks.
For example, most the XXXplatform below really have nothing to
do with platforms.  

<<platform specific bits>>=
<<SRC\_SUBDIRS>>

<<gcl options>>

PFL=
CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE"
LDF=
LISP=lsp

case $target in
    *bsd*)
        AC_DEFINE([BSDplatform], [], [BSD flavour])
	CCF="-O2 -pipe -fno-strength-reduce -Wall -D_GNU_SOURCE -I/usr/local/include"
	LDF="-L/usr/local/lib"
	;;
    windows)
        AC_DEFINE([MSYSplatform], [], [MS])
	SRCDIRS=bootdir interpdir sharedir algebradir etcdir docdir inputdir
	;;
    *linux*)
        AC_DEFINE([LINUXplatform], [], [Linux flavour])
	;;
    *solaris*)
        AC_DEFINE([SUNplatform], [], [SunOS flavour])
	;;
    powerpc*darwin*)
        AC_DEFINE([MACOSXplatform], [], [MACOX flavour])
	CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE \
	    -I/usr/include -I/usr/include/sys"
        axiom_gcl_bfd_option="--enable-locbfd --disable-statsysbfd \
                                --enable-machine=powerpc-macosx"
        axiom_gcl_mm_option="--enable-vssize=65536*2"
	;;
esac

GCLOPTS="$axiom_gcl_bfd_option $axiom_gcl_mm_option $axiom_gcl_x_option"

AC_SUBST(PLF)
AC_SUBST(CCF)
AC_SUBST(LDF)
AC_SUBST(LISP)
AC_SUBST(GCLOPTS)
@

The C preprocessor symbols [[BSDplatform]], [[LINUXplatform]], etc. are being
used as ``catch all'' for unstructured codes.  They should be
removed from the source base.  Any source file using those should be 
properly documented as its needs are, and a narrowed, specific configure
test should be added.


\subsubsection{The [[SRC_SUBDIRS]] variable}
The [[SRC_SUBDIRS]] variable is used in the [[src/Makefile.pamphlet]]
to decide what directories to build on a given platform. This is
needed at the moment because certain functions do not yet work on
all platforms. 
<<SRC\_SUBDIRS>>=
SRC_SUBDIRS="boot interp share algebra etc clef doc graph sman hyper input paste "
AC_SUBST(SRC_SUBDIRS)
@


\subsubsection{Instantiating configuration files}

<<instantiate config files>>=
AXIOM_MAKEFILE([Makefile])
AXIOM_MAKEFILE([src/Makefile])
AXIOM_MAKEFILE([src/lib/Makefile])
AXIOM_MAKEFILE([src/lisp/Makefile])
AXIOM_MAKEFILE([src/boot/Makefile])
AXIOM_MAKEFILE([src/interp/Makefile])
AXIOM_MAKEFILE([src/share/Makefile])
AXIOM_MAKEFILE([src/algebra/Makefile])
AXIOM_MAKEFILE([src/etc/Makefile])
AXIOM_MAKEFILE([src/clef/Makefile])
AXIOM_MAKEFILE([src/doc/Makefile])
AXIOM_MAKEFILE([src/graph/Makefile])
AXIOM_MAKEFILE([src/graph/Gdraws/Makefile])
AXIOM_MAKEFILE([src/graph/view2D/Makefile])
AXIOM_MAKEFILE([src/graph/view3D/Makefile])
AXIOM_MAKEFILE([src/graph/viewAlone/Makefile])
AXIOM_MAKEFILE([src/graph/viewman/Makefile])
AXIOM_MAKEFILE([src/sman/Makefile])
AXIOM_MAKEFILE([src/hyper/Makefile])
AXIOM_MAKEFILE([src/input/Makefile])
AXIOM_MAKEFILE([src/booklets/Makefile])
AXIOM_MAKEFILE([src/paste/Makefile])


## We now generate the "document" script and support files at configure time.
## We put them in the build directory because they are intended to be 
## build support utils only.
AC_CONFIG_FILES(build/scripts/document:$srcdir/src/scripts/document.in, \
                [chmod +x build/scripts/document])

# Where to find nowed utilities.  The current settings mimics the old
# settings, but they are not really correct.
axiom_build_notangle=$AXIOM/bin/lib/notangle
axiom_build_noweave=$AXIOM/bin/lib/noweave
AC_SUBST(axiom_build_notangle)
AC_SUBST(axiom_build_noweave)

AC_OUTPUT
@

\section{Where is X11?}

One of the thorniest issues with programs that use the X Window System
is portability.  There exist many implementations of the X11
specification, each with its own variations, extensions, and what
not.  Designing hand-written makefiles for such programs can be a
daunting task, fraut with all kinds of traps.  Fortunately, \Tool{Autoconf}
provides us with some help, namely the macro [[AC_PATH_X]] and 
[[AC_PATH_XTRA]].  The former searches the directories where the
include files and the libraries file for X11 reside.  The latter is an
enhanced version that:
\begin{itemize}
\item computes the C compiler flags required by X11;
\item computes the linker flags required by X11;
\item checks for special libraries that some systems need in order to
   compile X11 programs;
\item checks for special X11R6 libraries that need to be linked before
  the flag [[-lX11]].
\end{itemize}

<<locate X11>>=
AC_PATH_XTRA
## Output directives for the C compiler
AC_SUBST(X_CLFAGS)
## Output directives for the linker
AC_SUBST(X_LIBS)
## Output any extra libraries required by X11
AC_SUBST(X_EXTRA_LIBS)

## Finally, output the list of libraries that need to appear before -lX11
## Some part of Axiom depends on Xpm.  That library has kind uncertain
## future.  At some point in the past, it was deprecated, to be
## replaced by xpm-nox; then came back again.  So, its support may
## vary from system to system.  For the moment, we assume that if X11
## is found then, Xpm is already present.  Though, clearly that is a
## very optimistic assumption.  Long term, Axiom should get rid of
## dependence on Xpm.  A nearly fool-proof test would be probably
## inspired by AC_PATH_XTRA.  I don't have time to get to that 
## complication right now.  Will fix later.
X_PRE_LIBS="-lXpm $X_PRE_LIBS"
AC_SUBST(X_PRE_LIBS)

## If the system supports X11, then build graphics and hyperdoc
axiom_src_all="all-input"
if test -z $no_x; then
    axiom_src_all="$axiom_src_all all-graph"
    axiom_c_runtime="$axiom_c_runtime graphics"
else
    AC_MSG_NOTICE([The Gaphics and HyperDoc components are disabled.])
fi
AC_SUBST(axiom_src_all)
@


\subsection{C headers}

\subsubsection{Regex}

The HyperDoc component needs string pattern matching.  
We require [[<regex.h>]], with POSIX-conformant definition.  
Note this test makes sense only if X11 is available, for otherwise
we certainly are not going to build HyperDoc.
<<headers>>=
if test -z $no_x; then
   AC_CHECK_HEADER([regex.h], 
                   [axiom_src_all="$axiom_src_all all-hyper all-paste"], 
                   [AC_MSG_NOTICE([HyperDoc is disabled.])])
fi
@

\subsubsection{Sockets}

The host environment must be capable of handling communication through
sockets.  This is required for the communication between \Tool{AXIOMsys}
and \Tool{Superman}.  Notice that ideally, we should decouple
that interface in such a way that we can still build \Tool{Axiom}
when \Tool{Superman} is not needed.

<<headers>>=
AC_CHECK_HEADERS([sys/types.h sys/socket.h], 
                 [],
		 [AC_MSG_ERROR([Axiom needs socket support.])])
@


\subsubsection{OS interface}

<<headers>>=
AC_CHECK_HEADERS([sys/stat.h unistd.h],
                 [],
		 [AC_MSG_ERROR([File manipulation capabilities are missing.])])
@

\subsubsection{Terminal I/O}

<<C runtime>>=
## FIXME: Fix this later.
axiom_c_runtime="$axiom_c_runtime terminal_io"
@

\section{A note about comments}
\label{sec:comment}

This is a pamphlet file.  That means the source code embedded here 
are first extracted into a form (\File{configure.ac}) digestible by
\Tool{Autoconf}, which in turn produces the end-user \File{configure}
script run for setting up the build.

\Tool{Autoconf} supports two kinds of comments:
\begin{enumerate}
\item [[dnl]] style, and
\item [[#]] style.
\end{enumerate}
Comments introduced with [[dnl]] are copied verbatim to the generated
\File{configure.ac}; however, do not appear in the \File{configure}
output file.  They are for \Tool{Autoconf} consumption only --- and that
of the humans reading \File{configure.ac} (ideally, there should be none).
Comments starting with [[#]] appear verbatim in both \File{configure.ac}
and \File{configure} files.  Because this is a pamphlet file, there almost 
never is a need to use the [[dnl]]-style comment.  
Consequently, \Tool{Autoconf} comments in this file should be
of [[#]]-style form.  Such comments can be of value to the occasional
poor masochist who will be debugging the generated \File{configure}.


\section{configure.ac}

<<*>>=
<<Autoconf init>>

<<sanity check>>

<<host build target platfoms>>

<<check cross-compilation>>

<<build utils>>

# FIXME: Move this out of here.  
# The core runtime is always built.
axiom_c_runtime=core
AC_SUBST(axiom_c_runtime)

<<locate X11>>

<<headers>>

<<C runtime>>

<<define AXIOM>>

<<platform specific bits>>
<<instantiate config files>>
@

\end{document}

