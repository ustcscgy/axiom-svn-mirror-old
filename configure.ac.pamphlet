%% Oh Emacs, this is a -*- sh -*- script, despite appearance.
\documentclass[12pt]{article}
\usepackage{axiom}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fancyvrb}
\usepackage{pslatex}
\usepackage{noweb}
\usepackage{url}

\newcommand{\file}[1]{\textsf{#1}}
\newcommand{\email}[1]{\url{#1}}
\CustomVerbatimEnvironment{chunk}{Verbatim}{frame=none,fontsize=\small}

\title{The Toplevel \file{configure.ac} File}
\author{Gabriel Dos~Reis}

\begin{document}
\maketitle

\begin{abstract}
 ...
\end{abstract}

\section{Introduction}
This is the top-level Autoconf file that sets up the minimum build
environment for Axiom.  At the moment, the mainline version
of Axiom is driven by \file{Makefile} pamphlet files.  This effort
strives to move the build machinery to more abstract description
and conventional ones.
The task is compounded by the fact that the Axiom system is very 
complex --- but much less complex, I suspect, than say GCC.  There does not
seem to be good reasons why Axiom should build its own ghetto.


\section{Basic Options}

We strive for making Axiom's build system integrate as seamlessly as 
possibly into the standard GNU build framework.

At the moment, we honor the following options:
\begin{itemize}
\item [[--prefix]]: this is a standard configure option.  By default, 
  Axiom's build system will install files in '/usr/local'.  However, you 
  can select a different location prefix using this option.

\item [[--with-noweb]]: this is an Axiom-specific option.  The Axiom project
  uses \emph{literate programming} as a development methodology.
  Consequently, it needs utilities to extract programs and documentations from
  its source codes.  To that end, it currently relies on noweb.  Since noweb
  is not as common place as one would wish, Axiom ships with a copy of noweb
  that it will build if none of noweb utilities are present in the build
  environment.  At configure time, Axiom detects whether noweb utilities are
  present or not.  If yes, it will use it.  Otherwise, it will build its own
  copy. 

  You can tell Axiom to use an installed functioning noweb, if you have one
  with the configure option [[--with-noweb]].  Axiom will check that indeed
  'notangle' and 'noweave' are present in your build environment and use them.
  If you specify [[--with-noweb]] but the corresponding utilities are absent,
  Axiom will abort configuration.

  Conversely, you can convince Axiom to build its own copy of noweb (and use
  it) through [[--without-noweb]], regardless of whether you have a working
  noweb installed or not.
\end{itemize}


\section{Modifying this file}

Autoconf supports two kinds of comments:
\begin{enumerate}
\item [[dnl]] style, and
\item [[#]] style.
\end{enumerate}
Comments introduced with [[dnl]] do not appear in the \file{configure}
output file.  Comments starting with [[#]] appear verbatim in the
\file{configure} generated file.  Because this source file is
literate, there almost never is a need to use the [[dnl]]-style
comment.  Consequently, Autoconf comments in this file should be
of [[#]]-style.  Such comments can be of value to the occasional
poor masochist who will be debugging the generated \file{configure}
file.


\section{Basic Setup}
\subsection{Autoconf Initialization}

The Autoconf machinery needs to be initialized with several pieces of
information:
\begin{itemize}
\item the \emph{name} of the system --- ``Axiom silver branch''
\item its \emph{version}.  I choose to use the date of last checkin.
  It should probably include the revision number so as to 
  unambiguously identify which Axiom flavour du jour is being
  built;
\item and where to send feedback, \emph{e.g.} bug reports.  I have chosen
  the \email{axiom-developer} list.  That could change in the future if
  we reach a high volume traffic.  For the moment, we don't seem to
  suffer from traffic...
\end{itemize}
<<Autoconf init>>=
sinclude(config/axiom.m4)
AC_INIT([Axiom build improvements branch], [2006-08-26], 
        [axiom-developer@nongnu.org])
axiom_top_srcdir=`cd $srcdir && pwd`
AC_SUBST(axiom_top_srcdir)
@

Autoconf needs some auxilary files that are present in the sub-directory
\file{config}.  Autoconf needs to be told about that.
<<auxiliary config files>>=
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
@

Notice that since we don't use Automake (yet), we don't initialize
the Automake subsystem.  
<<Automake init>>=
# AM_INIT_AUTOMAKE([foreign])
@

We require Autoconf 2.59 or higher from the developer part. Please,
note that this is no requirement on the user build environment.  All,
it means is that if someone makes changes to the current \file{configure.ac}
file, that someone needs to have Autoconf 2.59 or higher to process this
file in order to regenerate \file{configure}.
<<Autoconf prerequirement>>=
AC_PREREQ([2.59])
@


\subsection{Source tree sanity check}

The Autoconf system implements a very basic, simple-minded, sanity check
whereby it will refuse to run \file{configure} if the source tree does
not contain a specified file, that serves a witness for a bona fide source
tree.  Here, I have chosen \file{Makefile.pamphlet} from the \file{src}
subdirectory.
<<sanity check>>=
AC_CONFIG_SRCDIR(src/Makefile.pamphlet)
@


\subsection{Build Environment}

\subsubsection{Canonical triplets}
Standard build environments consist of
\begin{enumerate}
\item the \emph{host} platform,
\item the \emph{build} platform, and
\item the \emph{target} platform.
\end{enumerate}
FIXME: Example on these notions.

We need to get the canonical names for the above three platforms.
After call to this macro, those values are available in the variables
[[host]], [[build]], and [[target]], respectively.
<<host build target platfoms>>=
AC_CANONICAL_SYSTEM

## Where tools for the build machine are built
axiom_builddir=`pwd`/build/$build
axiom_build_bindir=$axiom_builddir/bin
axiom_build_libdir=$axiom_builddir/lib
axiom_build_sharedir=$axiom_builddir/share
AC_SUBST(axiom_builddir)
AC_SUBST(axiom_build_bindir)
AC_SUBST(axiom_build_libdir)

## Prefix for the staging target inistallation directory
axiom_targetdir=`pwd`/target/$target
AC_SUBST(axiom_targetdir)
@

\subsubsection{Cross compilation}
For the moment, Axiom supports neither cross-compilation, nor Canadian cross.
Consequently, we must bail out if the build is not native.
<<check cross-compilation>>=
if test $host != $build -o $host != $target; then
   AC_MSG_ERROR([Sorry, only native builds are currently supported])
fi
@

\subsubsection{Build utilities}
Most of the tools we're testing for are with respect to the build
environment, neither the host nor the target.  

First of all, check for a C compiler --- \textsl{GCC/gcc} preferably.  As
written, this test is OK because currently we support only native
builds.  However, it needs to be more carefully written when we move
to cross-compilation.

Then, check for a usable 'install' program.

The old build machinery needs 'awk'.  Currently, it checks for
'gawk', 'nawk', and 'awk'.  Autoconf has a predefined test for that
task.  It checks for 'gawk', 'mawk', 'nawk', and 'awk' in that order.
That should be OK and match Axiom's need.

The old build system claims that on solaris9, gawk, gtar 
and gpatch are required (with no much explanation of why).  Notice
that these programs are needed only to build Axiom; so we do
check based on the value of [[build]].  To date, no build of Axiom 
with a C compiler other than from GCC is known.  We now take it
granted that GCC is pretty much needed to build Axiom in its present
form.

<<build utils>>=
## Make sure the C compiler is from GCC
AC_PROG_CC
if test x$GCC != xyes; then
    AC_MSG_ERROR([We need a C compiler from GCC])
fi
axiom_cflags="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE"
AC_SUBST(axiom_cflags)

## What is the extension of object files on this platform?
AC_OBJEXT

AC_PROG_INSTALL
AC_PROG_LN_S

case $build in
     *-solaris9)
        AC_CHECK_PROG([AWK], [gawk], 
                      [gawk], [AC_MSG_ERROR([Axiom needs gawk])])

        AC_CHECK_PROG([TAR], [gtar], 
                      [gtar], [AC_MSG_ERROR([Axiom needs gtar])])

        AC_CHECK_PROG([PATCH], [gpatch],
                      [gptach], [AC_MSG_ERROR([Axiom needs gpatch])]) 
        ;;

      *)
        AC_PROG_AWK

        AC_CHECK_PROGS([TAR], [gtar tar], 
                       [AC_MSG_ERROR([Axiom needs a tar program])])

        AC_CHECK_PROGS([PATCH], [gpatch patch], 
                       [AC_MSG_ERROR([Axiom needs a patch program])])
        ;;
esac

AC_CHECK_PROG([MAKE], [make],
              [make], [AC_MSG_ERROR(['make' program missing.])])

AC_PROG_RANLIB

AC_CHECK_PROG([TOUCH], [touch],
              [touch], [AC_MSG_ERROR(['touch' program is missing.])])

AC_CHECK_PROG([LATEX], [latex],
              [latex], [AC_MSG_ERROR([Axiom needs a latex program.])])
AC_CHECK_PROG([MAKEINDEX], [makeindex],
              [makeindex], [AC_MSG_ERROR([Axiom needs a makeindex program])])

## Accumulate list of utils needed for the build machine
axiom_required_build_utils=

## -------------------------
## -- Which noweb to use? --
## -------------------------
## 
axiom_use_noweb=
AC_ARG_WITH([noweb], [assume noweb is present in the build environment],
            [case $withval in
                yes|no) axiom_use_noweb=$withval ;;
                *) AC_MSG_ERROR([erroneous value for --with-noweb]) ;;
             esac])

## Check for notangle and noweb if we are not explicitly told
## to build noweb from Axiom sources.
if test x$axiom_use_noweb != xno; then
    AC_CHECK_PROG([NOTANGLE], [notangle], [notangle])
    AC_CHECK_PROG([NOWEAVE], [noweave], [noweave])

    ## Ensure the build environment is consistent with specified option.
    if test x$axiom_use_noweb = xyes \
        && test -z $NOTANGLE -o -z $NOWEAVE; then
        AC_MSG_ERROR([noweb utils are missing but --with-noweb is specified])
    fi
fi

## In case noweb is missing we need to build our own.
if test -z $NOTANGLE -o -z $NOWEAVE ; then
    NOTANGLE=$axiom_build_bindir/notangle
    NOWEAVE=$axiom_build_bindir/noweave
    axiom_required_build_utils="$axiom_required_build_utils noweb"
    AC_SUBST(NOTANGLE)
    AC_SUBST(NOWEAVE)
fi

## -----------------------
## -- Which GCL to use? --
## -----------------------
##
## By default, we assume that GCL is not present in the build
## environment, so we should roll our own.  That is a reasonable
## assumption since GCL does not seem to be as widespread as one
## would like to think.

axiom_use_gcl=
AC_ARG_WITH([gcl], [assume GCL is present in the build environment],
            [case $withval in
                yes|no) axiom_use_gcl=$withval ;;
                *) AC_MSG_ERROR([erroneous value for --with-gcl]) ;;
             esac])

## Check for GCL only if we're told to or if we should guess
if test x$axiom_use_gcl != xno; then
    AC_CHECK_PROG([GCL], [gcl], [gcl])
else
    ## Make sure GCL is Autoconf-substituted in generated files
    AC_SUBST(GCL)
    :
fi

## If we were told to use system-installed GCL, but the 'gcl' command
## is missing from the build environment, then something is wrong.
if test -z $GCL; then
    if test x$axiom_use_gcl = xyes; then
        AC_MSG_ERROR([--with-gcl is specified but GCL is missing])
    fi

    ## gcl-2.6.8pre is the most recent version we use.
    axiom_gcl_version=gcl-2.6.8pre
    GCL=$axiom_build_bindir/gcl

    ## FIXME: add gcl to axiom_required_build_utils

else
    axiom_gcl_version=gcl-system
fi
AC_SUBST(axiom_gcl_version)


AC_SUBST(axiom_required_build_utils)
@


\subsubsection{Old behaviour}
Here, we replicate the behaviour of the old configure, waiting for
a better alternative, e.g. where it is not needed.  THIS WILL BE
REMOVED IN THE NEAR FUTURE.

First, the old machinery has a very coarse target name "discovery"
<<replicate old behaviour>>=
if test -f /etc/redhat-release; then 
   SYSNAME=`cat /etc/redhat-release` 
   if test "$SYSNAME" = "Fedora Core release 3 (Heidelberg)"; then
       SYSNAME=fedora3
   fi
   AC_MSG_NOTICE([SYSNAME=$SYSNAME])
fi
if test "$SYSNAME" != "fedora3"; then
   SYSNAME=`uname -s`
   AC_MSG_NOTICE([$SYSNAME])
   case "$SYSNAME" in
      Linux)
         SYSNAME=linux ;;
      MINGW32_NT-5.1)
         SYSNAME=windows ;;
      SunOS)
         SYSNAME=solaris9 ;;
      freebsd)
         ;;
      *)
         AC_MSG_NOTICE([Your system name is $SYSNAME])
         AC_MSG_NOTICE([We do not know how to build for this kind of system])
         AC_MSG_ERROR([Send a note to axiom-developer@nongnu.org about it])
   esac
fi

must_set_AXIOM() {
   case "$SYSNAME" in
      freebsd)
         AC_MSG_NOTICE([Note that freebsd usually has noweb available])
         AC_MSG_NOTICE([echo If you wish to use the standard version you must type])
         AC_MSG_NOTICE([touch noweb])
         AC_MSG_NOTICE([If you wish to use a pre-installed GCL you must type])
         AC_MSG_NOTICE([make GCLVERSION=gcl-system])
         ;;
   esac
}

if test "x$AXIOM" = "x"; then
   must_set_AXIOM
elif test "`dirname $AXIOM`" != "`pwd`/mnt"; then
   must_set_AXIOM
else
   AC_MSG_NOTICE([configure complete.  Now type ])
   AC_MSG_NOTICE([                              ])
   AC_MSG_NOTICE([make])
fi
AXIOM=`pwd`/mnt/$SYSNAME
AC_SUBST(AXIOM)
@


The old build machinery has hard-coded special-cased Makefile for 
some known platforms.   We would like to have a uniform, Makefiles with 
varying bits computed at configuration time.  As a transitional path 
from the current system to the new build framework, we have moved the
old logic from toplevel Makefile to here.  It is understood that in the
near future the logic will be improved to support more platforms.
<<platform specific bits>>=
SRCDIRS="bootdir interpdir sharedir algebradir etcdir clefdir docdir \
        graphdir smandir hyperdir inputdir "

case $SYSNAME in
    freebsd)
        PLF=BSDplatform
	CCF="-O2 -pipe -fno-strength-reduce -Wall -D_GNU_SOURCE -D${PLF} -I/usr/local/include"
	LDF="-L/usr/local/lib"
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	;;

    windows)
        PLF=MSYSplatform
	CCF="-O2 -Wall -D_GNU_SOURCE -D${PLF}"
	LDF=
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	SRCDIRS=bootdir interpdir sharedir algebradir etcdir docdir inputdir
	;;
    linux)
        PLF=LINUXplatform
        CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE -D${PLF}"
	LDF=
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	;;
    gentoo)
        PLF=LINUXplatform
	CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE -D${PLF}"
	LDF=
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-locbfd --disable-dynsysbfd \
             --disable-statsysbfd --enable-maxpage=256*1024"
	;;
    fedora64)
        PLF=LINUXplatform
	CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE -D${PLF}"
	LDF="-L/usr/local/lib64 -L/usr/openwin/lib64 -L/usr/lib64 "
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	;;
    fedora3)
        PLF=LINUXplatform
	CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE -D${PLF}"
	LDF=
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-locbfd --disable-dynsysbfd \
             --disable-statsysbfd --enable-maxpage=256*1024"
	;;
    linuxglibc)
        PLF= LINUXplatform
	CCF=" -O2 -fno-strength-reduce -Wall -D_GNU_SOURCE  -D${PLF}"
	LDF=
	LISP=lisp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	;;
    linuxglibc2.1)
        PLF= LINUXplatform
	CCF=" -g  -Wall -D_GNU_SOURCE  -D${PLF}"
	LDF=
	LISP=lisp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	;;
    solaris9)
        PLF=LINUXplatform
	CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE -D${PLF}"
	LDF=
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-locbfd --disable-dynsysbfd \
             --disable-statsysbfd --enable-maxpage=256*1024"
	;;
    sun4os55g)
        PLF= SUN4OS5platform
	CCF=" -O3 -D__EXTENSIONS__ -Wall -ansi -D${PLF} -I /usr/openwin/include"
	LDF=-L /usr/openwin/lib -lnsl -lsocket 
	LISP=lisp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	;;
    sung)
        PLF= SUNplatform
	CCF=" -O -D${PLF} -I/usr/openwin/include"
	LDF= -L/usr/openwin/lib
	LISP=lisp
	GCLOPTS="--enable-vssize=65536*2 --enable-statsysbfd --enable-maxpage=256*1024"
	;;
    MACOSX)
        PLF=MACOSXplatform
	CCF="-O2 -fno-strength-reduce -Wall -D_GNU_SOURCE -D${PLF} \
	    -I/usr/include -I/usr/include/sys"
	LDF=
	LISP=lsp
	GCLOPTS="--enable-vssize=65536*2 --enable-maxpage=256*1024 --disable-locbfd \
	    --disable-statsysbfd  --enable-custreloc --disable-tkconfig \
	    --enable-machine=pwerpc-macosx"
	;;
esac
AC_SUBST(PLF)
AC_SUBST(CCF)
AC_SUBST(LDF)
AC_SUBST(LISP)
AC_SUBST(GCLOPTS)
AC_SUBST(SRCDIRS)
@


\subsubsection{Instantiating configuration files}

<<instantiate config files>>=
AXIOM_MAKEFILE([Makefile])
AXIOM_MAKEFILE([lsp/Makefile])
AXIOM_MAKEFILE([src/Makefile])
AXIOM_MAKEFILE([src/lib/Makefile])
AXIOM_MAKEFILE([src/boot/Makefile])
AXIOM_MAKEFILE([src/interp/Makefile])
AXIOM_MAKEFILE([src/share/Makefile])
AXIOM_MAKEFILE([src/algebra/Makefile])
AXIOM_MAKEFILE([src/etc/Makefile])
AXIOM_MAKEFILE([src/clef/Makefile])
AXIOM_MAKEFILE([src/doc/Makefile])
AXIOM_MAKEFILE([src/graph/Makefile])
AXIOM_MAKEFILE([src/graph/Gdraws/Makefile])
AXIOM_MAKEFILE([src/graph/view2D/Makefile])
AXIOM_MAKEFILE([src/graph/view3D/Makefile])
AXIOM_MAKEFILE([src/graph/viewAlone/Makefile])
AXIOM_MAKEFILE([src/graph/viewman/Makefile])
AXIOM_MAKEFILE([src/sman/Makefile])
AXIOM_MAKEFILE([src/hyper/Makefile])
AXIOM_MAKEFILE([src/input/Makefile])
AXIOM_MAKEFILE([src/booklets/Makefile])


## We now generate the "document" script and support files at configure time.
## We put them in the build directory because they are intended to be 
## build support utils only.
AC_CONFIG_FILES(build/scripts/document:$srcdir/src/scripts/document.in, \
                [chmod +x build/scripts/document])

# Where to find nowed utilities.  The current settings mimics the old
# settings, but they are not really correct.
axiom_build_notangle=$AXIOM/bin/lib/notangle
axiom_build_noweave=$AXIOM/bin/lib/noweave
AC_SUBST(axiom_build_notangle)
AC_SUBST(axiom_build_noweave)

AC_OUTPUT
@

\section{Where is X11?}

One of the thorniest issues with programs that use the X Window System
is portability.  There exist many implementations of the X11
specification, each with its own variations, extensions, and what
not.  Designing hand-written, makefiles for such programs can be a
daunting task, fraut with all kinds of traps.  Fortunately, Autoconf
provides us with some help, namely the macro [[AC_PATH_X]] and 
[[AC_PATH_XTRA]].  The former searches the directories where the
include files and the libraries file for X11 reside.  The later is an
enhanced version that:
\begin{itemize}
\item computes the C compiler flags required by X;
\item computes the linker flags required by X;
\item checks for special libraries that some systems need in order to
   compile X programs;
\item checks for special X11R6 libraries that need to be linked before
  the flag [[-lX11]].
\end{itemize}

<<locate X11>>=
AC_PATH_XTRA
## Output directives for the C compiler
AC_SUBST(X_CLFAGS)
## Output directives for the linker
AC_SUBST(X_LIBS)
## Output any extra libraries required by X11
AC_SUBST(X_EXTRA_LIBS)

## Finally, output the list of libraries that need to appear before -lX11
## Some part of Axiom depends on Xpm.  That library has kind uncertain
## future.  At some point in the past, it was deprecated, to be
## replaced by xpm-nox; then came back again.  So, its support may
## vary from system to system.  For the moment, we assume that if X11
## is found then, Xpm is already present.  Though, clearly that is a
## very optimistic assumption.  Long term, Axiom should get rid of
## dependence on Xpm.  A nearly fool-proof test would be probably
## inspired by AC_PATH_XTRA.  I don't have time to get to that 
## complication right now.  Will fix later.
X_PRE_LIBS="-lXpm $X_PRE_LIBS"
AC_SUBST(X_PRE_LIBS)
@


\section{configure.ac}

<<*>>=
<<Autoconf init>>

<<auxiliary config files>>

<<Automake init>>

<<Autoconf prerequirement>>

<<sanity check>>

<<host build target platfoms>>

<<check cross-compilation>>

<<build utils>>

<<locate X11>>

<<replicate old behaviour>>
<<platform specific bits>>
<<instantiate config files>>
@

\end{document}

