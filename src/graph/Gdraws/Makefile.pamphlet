\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/graph/Gdraws Makefile}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{Gdraws}
This directory consists of all the Gdraw functions along with a local
testing protocol to test out these functions.
The subdirectory PS contains all the ps drawing functions in support of
the Gdraw functions.

\subsection{GDRAW}

A Gdraw function, using a draw option dFlsg as input, provides drawings
capability on different output devices.  Currently, Gdraw supports routines
both in Xwindows functions, and in postscript functions on
a postscript printer/interpreter.

The general drawing functions are (see file for description of functionality)
\begin{verbatim}
 1.  Gdrawarc.c
 2.  Gdrawstring.c
 3.  Gdraw.c
 4.  Gdrawline.c
 5.  Gdrfilled.c
 6.  GdrawFrame.c
 7.  Gdrawlines.c
 8.  Gfillarc.c
 9.  GdrawIstr.c
 10. Gdrawrect.c
 11. Gmisc.c
 12. GinitPS.c
 13. GCreatePS.c
 14. PSFill.c
 15. ../include/G.h
    header information needed by all the Gdraw routines and
    view3D/view2D as well.
 16. ps.h
    header information needed by only the Gdraw routines.

\subsection{POSTSCRIPT}

A PostScript file can be generated by using a button on the control
panel of a viewAlone picture, or in Axiom, with the command write,
option Postscript.  This file can be submitted to the postsctipt
printer to be printed, or viewed using the postscript interpreter.  
It will draw a window, title, and picture clipped to fit inside of the
window.

In order to generate a postscript output, we first initializ file names and
paths to be used by our program by using
\begin{verbatim}
	InitPs(viewWindow, titleWindow)    [in GinitPS.c]
\end{verbatim}
then call the G draw routines with option "PS", which would generate postscript
drawing commands.  Then create the output file (OUTPUT.ps by default) by using
\begin{verbatim}
	makePSfile(viewWindow, titleWindow, title)   [in GcreatePS.c]
\end{verbatim}

The output file would be in local directory, i.e., the directory where Axiom
or viewAlone, etc., was started up.

The following routines are used to test out the Gdraw functions:
\begin{verbatim}
1.  main.c      creates windows, and titles and processes Xwindow events.
2.  data.c      creates data for drawing and call Gdraw routines.
3.  menu.c      draws menu when mouse clicks in viewWindow
4.  yesORno.c   determines if mouse click in menu means "yes" or "no".
5.  loadFont.c 	loads font for display
\end{verbatim}

The Gdraw routines have been written in such a way that they are usable by
both view3D and view2D.  

\subsection{TO USE G FUNCTIONS}

In order to draw in postscript, use GSetForeground to set the foreground 
colors for the drawing (and fill) functions.  Use GSetLineAttributes
to set line attributes.  And finally, replace the XDraw commands with the
corresponding GDraw commands with the appropriate parameters.  In addition,
we need to: draw frame, set GC variable names, create GCs, initialize
postscript data structures, cat all the procedures used together.

{\bf IMPORTANT}:\\
In order to create postscript command file, we need environment
variable DEVE (i.e., setenv DEVE /u/jimwen/3D/version28) or SPAD (e.g., setenv
SPAD /spad/mnt/rt in case Gdraws directory has been installed on the server).
Without this path, the program would not know where the postscript files (in
Gdraws/PS) are.

{\bf LIMITATIONS} of current implementation:\\
A picture is printed with 1 inch x direction, and 1 inch y direction 
offset, and the largest complete picutre is the size of the page
with the offest.

{\bf BUGS}:\\
The region box is not drawn correctly when perspective is altered.


{\bf FUTURE DIRECTIONS}:
\begin{itemize}
\item for view3D color rendering, may want to convert LINE drawing color
to the appropriate grayscale.  Right now, they're all drawn in black.
\item for view3D's routines for color rendering, may want to implement
color drawing for postscript functions just in case someone does
have access to a color postscript printer.
\item implement more functionality for attributes used in GC, i.e., dashed
line, dotted line etc.
\item implement a display postscript menu to set things like picture size,
landscape/portrait orientation, picture centered, left, right, up,
down, etc., reversed video.
\item make font an attribute in postscripts's graphics context so the
font can be set in user program.  Right now, it uses only 1 font.
\item for view2D's stuff, implement a smaller font for the drawing the 
units on the axes.
\end{itemize}

\section{environment variables}
<<environment>>=
IN=	${SRC}/graph/Gdraws
MIDINT=	${INT}/graph/Gdraws
MIDOBJ=	${OBJ}/${SYS}/graph/Gdraws
OUT=	${MNT}/${SYS}/lib
PS=	${MNT}/${SYS}/lib/graph
DOC=    ${MNT}/${SYS}/doc/src/graph

# local include files shared by graphics
LINC=	${SRC}/graph/include

# global include files shared by everyone
GINC=	${SRC}/include

# include files in Hyperdoc
HINC=	${SRC}/hyper

# bitmaps for cursors
BIT=	${SRC}/graph/include/bitmaps

# a .h file stuck in a really wierd place
DOTH=	${SRC}/graph/viewman

# a .c file in the library subdirectory
DOTC=	${SRC}/lib

@
\section{Gdraw code}
\subsection{Gfun}
<<Gfun.c (MIDINT from IN)>>=
${MIDINT}/Gfun.c: ${IN}/Gfun.c.pamphlet
	@ echo 1 making ${MIDINT}/Gfun.c from ${IN}/Gfun.c.pamphlet
	@( cd ${MIDINT} ; \
	${TANGLE} ${IN}/Gfun.c.pamphlet >Gfun.c )

@
<<Gfun.o (MIDOBJ from MIDINT)>>=
${MIDOBJ}/Gfun.o: ${HEADERS} ${MIDINT}/Gfun.c 
	@ echo 2 making ${MIDOBJ}/Gfun.o from ${MIDINT}/Gfun.c
	@ ( cd ${MIDOBJ} ; ${CC} -c ${CFLAGS} ${MIDINT}/Gfun.c )

@
<<Gfun.c.dvi (DOC from IN)>>=
${DOC}/Gfun.c.dvi: ${IN}/Gfun.c.pamphlet 
	@echo 3 making ${DOC}/Gfun.c.dvi from ${IN}/Gfun.c.pamphlet 
	@(cd ${DOC} ; \
	cp ${IN}/Gfun.c.pamphlet ${DOC} ; \
	${DOCUMENT} ${NOISE} Gfun.c ; \
	rm -f ${DOC}/Gfun.c.pamphlet ; \
	rm -f ${DOC}/Gfun.c.tex ; \
	rm -f ${DOC}/Gfun.c )

@
\section{Postscript files}
\subsection{colorpoly}
<<colorpoly>>=
${PS}/colorpoly.ps: ${IN}/psFiles.pamphlet
	@ echo 3 ${PS}/colorpoly.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"colorpoly" psFiles.pamphlet >${PS}/colorpoly.ps

@
\subsection{colorwol}
<<colorwol>>=
${PS}/colorwol.ps: ${IN}/psFiles.pamphlet
	@ echo 4 ${PS}/colorwol.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"colorwol" psFiles.pamphlet >${PS}/colorwol.ps

@
\subsection{draw}
<<draw>>=
${PS}/draw.ps: ${IN}/psFiles.pamphlet
	@ echo 5 ${PS}/draw.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"draw" psFiles.pamphlet >${PS}/draw.ps

@
\subsection{drawIstr}
<<drawIstr>>=
${PS}/drawIstr.ps: ${IN}/psFiles.pamphlet
	@ echo 6 ${PS}/drawIstr.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawIstr" psFiles.pamphlet >${PS}/drawIstr.ps

@
\subsection{drawarc}
<<drawarc>>=
${PS}/drawarc.ps: ${IN}/psFiles.pamphlet
	@ echo 7 ${PS}/drawarc.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawarc" psFiles.pamphlet >${PS}/drawarc.ps

@
\subsection{drawcolor}
<<drawcolor>>=
${PS}/drawcolor.ps: ${IN}/psFiles.pamphlet
	@ echo 8 ${PS}/drawcolor.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawcolor" psFiles.pamphlet >${PS}/drawcolor.ps

@
\subsection{drawline}
<<drawline>>=
${PS}/drawline.ps: ${IN}/psFiles.pamphlet
	@ echo 9 ${PS}/drawline.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawline" psFiles.pamphlet >${PS}/drawline.ps

@
\subsection{drawlines}
<<drawlines>>=
${PS}/drawlines.ps: ${IN}/psFiles.pamphlet
	@ echo 10 ${PS}/drawlines.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawlines" psFiles.pamphlet >${PS}/drawlines.ps

@
\subsection{drawpoint}
<<drawpoint>>=
${PS}/drawpoint.ps: ${IN}/psFiles.pamphlet
	@ echo 11 ${PS}/drawpoint.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawpoint" psFiles.pamphlet >${PS}/drawpoint.ps

@
\subsection{drawrect}
<<drawrect>>=
${PS}/drawrect.ps: ${IN}/psFiles.pamphlet
	@ echo 12 ${PS}/drawrect.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawrect" psFiles.pamphlet >${PS}/drawrect.ps

@
\subsection{drawstr}
<<drawstr>>=
${PS}/drawstr.ps: ${IN}/psFiles.pamphlet
	@ echo 13 ${PS}/drawstr.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drawstr" psFiles.pamphlet >${PS}/drawstr.ps

@
\subsection{drwfilled}
<<drwfilled>>=
${PS}/drwfilled.ps: ${IN}/psFiles.pamphlet
	@ echo 14 ${PS}/drwfilled.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"drwfilled" psFiles.pamphlet >${PS}/drwfilled.ps

@
\subsection{end}
<<end>>=
${PS}/end.ps: ${IN}/psFiles.pamphlet
	@ echo 15 ${PS}/end.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"end" psFiles.pamphlet >${PS}/end.ps

@
\subsection{fillarc}
<<fillarc>>=
${PS}/fillarc.ps: ${IN}/psFiles.pamphlet
	@ echo 16 ${PS}/fillarc.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"fillarc" psFiles.pamphlet >${PS}/fillarc.ps

@
\subsection{fillpoly}
<<fillpoly>>=
${PS}/fillpoly.ps: ${IN}/psFiles.pamphlet
	@ echo 17 ${PS}/fillpoly.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"fillpoly" psFiles.pamphlet >${PS}/fillpoly.ps

@
\subsection{fillwol}
<<fillwol>>=
${PS}/fillwol.ps: ${IN}/psFiles.pamphlet
	@ echo 18 ${PS}/fillwol.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"fillwol" psFiles.pamphlet >${PS}/fillwol.ps

@
\subsection{header}
<<header>>=
${PS}/header.ps: ${IN}/psFiles.pamphlet
	@ echo 19 ${PS}/header.ps from ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"header" psFiles.pamphlet >${PS}/header.ps

@
\subsection{setup}
<<setup>>=
${PS}/setup.ps: ${IN}/psFiles.pamphlet
	@ echo 20 ${PS}/setup.ps ${IN}/psFiles.pamphlet
	@ ${TANGLE} -R"setup" psFiles.pamphlet >${PS}/setup.ps

@
<<psFiles.dvi (DOC from IN)>>=
${DOC}/psFiles.dvi: ${IN}/psFiles.pamphlet 
	@echo 3 making ${DOC}/psFiles.dvi from ${IN}/psFiles.pamphlet 
	@(cd ${DOC} ; \
	cp ${IN}/psFiles.pamphlet ${DOC} ; \
	${DOCUMENT} ${NOISE} psFiles ; \
	rm -f ${DOC}/psFiles.pamphlet ; \
	rm -f ${DOC}/psFiles.tex ; \
	rm -f ${DOC}/psFiles )

@
<<*>>=
<<environment>>

DOCFILES= ${DOC}/Gfun.c.dvi ${DOC}/psFiles.dvi

CFLAGS	    = ${CCF} -I${LINC} -I${GINC} -I${IN} -I${HINC}

HEADERS = ${IN}/Gdraws0.h ${LINC}/G.h     ${LINC}/Gfun.H1    \
          ${GINC}/hash.h  ${GINC}/hash.H1 

PSFiles= ${PS}/colorpoly.ps ${PS}/colorwol.ps  ${PS}/draw.ps      \
         ${PS}/drawIstr.ps  ${PS}/drawarc.ps   ${PS}/drawcolor.ps \
         ${PS}/drawline.ps  ${PS}/drawlines.ps ${PS}/drawpoint.ps \
         ${PS}/drawrect.ps  ${PS}/drawstr.ps   ${PS}/drwfilled.ps \
         ${PS}/end.ps       ${PS}/fillarc.ps   ${PS}/fillpoly.ps  \
         ${PS}/fillwol.ps   ${PS}/header.ps    ${PS}/setup.ps

all: ${MIDOBJ}/Gfun.o ${PSFiles} ${DOCFILES}
	@ echo 21 finished making ${SRC}/Gdraws

<<Gfun.c (MIDINT from IN)>>
<<Gfun.o (MIDOBJ from MIDINT)>>
<<Gfun.c.dvi (DOC from IN)>>

<<colorpoly>>
<<colorwol>>
<<draw>>
<<drawIstr>>
<<drawarc>>
<<drawcolor>>
<<drawline>>
<<drawlines>>
<<drawpoint>>
<<drawrect>>
<<drawstr>>
<<drwfilled>>
<<end>>
<<fillarc>>
<<fillpoly>>
<<fillwol>>
<<header>>
<<setup>>

<<psFiles.dvi (DOC from IN)>>

clean: 
	@ echo 22 cleaning ${IN}/Gdraws

document: 
	@ echo 23 documenting ${IN}/Gdraws

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
