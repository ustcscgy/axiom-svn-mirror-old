\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra variable.spad}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{domain OVAR OrderedVariableList}
<<OrderedVariableList.input>>=
-- variable.spad.pamphlet OrderedVariableList.input
)spool OrderedVariableList.output
)set message test on
)set message auto off
)clear all
--S 1
ls:List Symbol:=['x,'a,'z]
--R 
--R
--R   (1)  [x,a,z]
--R                                                            Type: List Symbol
--E 1

--S 2
Z:=OVAR ls
--R 
--R
--R   (2)  OrderedVariableList [x,a,z]
--R                                                                 Type: Domain
--E 2

--S 3
size()$Z
--R 
--R
--R   (3)  3
--R                                                     Type: NonNegativeInteger
--E 3

--S 4
lv:=[index(i::PI)$Z for i in 1..size()$Z]
--R 
--R   Compiling function G1408 with type Integer -> Boolean 
--R   Compiling function G1572 with type NonNegativeInteger -> Boolean 
--R
--R   (4)  [x,a,z]
--R                                       Type: List OrderedVariableList [x,a,z]
--E 4

--S 5
sorted?(>,lv)
--R 
--R
--R   (5)  true
--R                                                                Type: Boolean
--E 5
)spool
)lisp (bye)
@
<<OrderedVariableList.help>>=
====================================================================
OrderedVariableList examples
====================================================================

The domain OrderedVariableList provides symbols which are restricted
to a particular list and have a definite ordering. Those two features
are specified by a List Symbol object that is the argument to the
domain.

This is a sample ordering of three symbols.

  ls:List Symbol:=['x,'a,'z]
    [x,a,z]
                                Type: List Symbol

Let's build the domain

  Z:=OVAR ls
    OrderedVariableList [x,a,z]
                                Type: Domain

How many variables does it have?

  size()$Z
    3
                                Type: NonNegativeInteger

They are (in the imposed order)

  lv:=[index(i::PI)$Z for i in 1..size()$Z]
    [x,a,z]
                                Type: List OrderedVariableList [x,a,z]

Check that the ordering is right

  sorted?(>,lv)
    true
                                Type: Boolean

See Also:
o )show OrderedVariableList
o $AXIOM/doc/src/algebra/variable.spad.dvi

@
<<domain OVAR OrderedVariableList>>=
)abbrev domain OVAR OrderedVariableList
++ Description:
++ This domain implements ordered variables
OrderedVariableList(VariableList:List Symbol):
  Join(OrderedFinite, ConvertibleTo Symbol, ConvertibleTo InputForm,
       ConvertibleTo Pattern Float, ConvertibleTo Pattern Integer) with
         variable: Symbol -> Union(%,"failed")
		++ variable(s) returns a member of the variable set or failed
    == add
       VariableList := removeDuplicates VariableList
       Rep := PositiveInteger
       s1,s2:%
       convert(s1):Symbol == VariableList.((s1::Rep)::PositiveInteger)
       coerce(s1):OutputForm == (convert(s1)@Symbol)::OutputForm
       convert(s1):InputForm == convert(convert(s1)@Symbol)
       convert(s1):Pattern(Integer) == convert(convert(s1)@Symbol)
       convert(s1):Pattern(Float) == convert(convert(s1)@Symbol)
       index i   == i::%
       lookup j  == j :: Rep
       size ()   == #VariableList
       variable(exp:Symbol) ==
            for i in 1.. for exp2 in VariableList repeat
                if exp=exp2 then return i::PositiveInteger::%
            "failed"
       s1 < s2 == s2 <$Rep s1
       s1 = s2 == s1 =$Rep s2
       latex(x:%):String      == latex(convert(x)@Symbol)

@
\section{domain VARIABLE Variable}
<<domain VARIABLE Variable>>=
)abbrev domain VARIABLE Variable
++ Description:
++ This domain implements variables
Variable(sym:Symbol): Join(SetCategory, CoercibleTo Symbol) with
        coerce  : % -> Symbol
		++ coerce(x) returns the symbol
        variable: () -> Symbol
		++ variable() returns the symbol
    == add
        coerce(x:%):Symbol     == sym
        coerce(x:%):OutputForm == sym::OutputForm
        variable()             == sym
        x = y                  == true
        latex(x:%):String      == latex sym

@
\section{domain RULECOLD RuleCalled}
<<domain RULECOLD RuleCalled>>=
)abbrev domain RULECOLD RuleCalled
++ Description:
++ This domain implements named rules 
RuleCalled(f:Symbol): SetCategory with 
	name: % -> Symbol 
		++ name(x) returns the symbol
 == add
  name r                 == f
  coerce(r:%):OutputForm == f::OutputForm
  x = y                  == true
  latex(x:%):String      == latex f

@
\section{domain FUNCTION FunctionCalled}
<<domain FUNCTION FunctionCalled>>=
)abbrev domain FUNCTION FunctionCalled
++ Description:
++ This domain implements named functions
FunctionCalled(f:Symbol): SetCategory with 
	name: % -> Symbol 
		++ name(x) returns the symbol
  == add
   name r                 == f
   coerce(r:%):OutputForm == f::OutputForm
   x = y                  == true
   latex(x:%):String      == latex f

@
\section{domain ANON AnonymousFunction}
<<domain ANON AnonymousFunction>>=
)abbrev domain ANON AnonymousFunction
++ Description:
++ This domain implements anonymous functions
AnonymousFunction():SetCategory == add
  coerce(x:%):OutputForm == x pretend OutputForm

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<domain VARIABLE Variable>>
<<domain RULECOLD RuleCalled>>
<<domain FUNCTION FunctionCalled>>
<<domain OVAR OrderedVariableList>>
<<domain ANON AnonymousFunction>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
