\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra card.spad}
\author{Stephen M. Watt}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{domain CARD CardinalNumber}
<<CardinalNumber.input>>=
-- card.spad.pamphlet CardinalNumber.input
)spool CardinalNumber.output
)set message test on
)set message auto off
)clear all
--S 1 of 20
c0 := 0 :: CardinalNumber
--R 
--R
--R   (1)  0
--R                                                         Type: CardinalNumber
--E 1

--S 2 of 20
c1 := 1 :: CardinalNumber
--R 
--R
--R   (2)  1
--R                                                         Type: CardinalNumber
--E 2

--S 3 of 20
c2 := 2 :: CardinalNumber
--R 
--R
--R   (3)  2
--R                                                         Type: CardinalNumber
--E 3

--S 4 of 20
c3 := 3 :: CardinalNumber
--R 
--R
--R   (4)  3
--R                                                         Type: CardinalNumber
--E 4

--S 5 of 20
A0 := Aleph 0
--R 
--R
--R   (5)  Aleph(0)
--R                                                         Type: CardinalNumber
--E 5

--S 6 of 20
A1 := Aleph 1
--R 
--R
--R   (6)  Aleph(1)
--R                                                         Type: CardinalNumber
--E 6

--S 7 of 20
finite? c2
--R 
--R
--R   (7)  true
--R                                                                Type: Boolean
--E 7

--S 8 of 20
finite? A0
--R 
--R
--R   (8)  false
--R                                                                Type: Boolean
--E 8

--S 9 of 20
countable? c2
--R 
--R
--R   (9)  true
--R                                                                Type: Boolean
--E 9

--S 10 of 20
countable? A0
--R 
--R
--R   (10)  true
--R                                                                Type: Boolean
--E 10

--S 11 of 20
countable? A1
--R 
--R
--R   (11)  false
--R                                                                Type: Boolean
--E 11

--S 12 of 20
[c2 + c2, c2 + A1]
--R 
--R
--R   (12)  [4,Aleph(1)]
--R                                                    Type: List CardinalNumber
--E 12

--S 13 of 20
[c0*c2, c1*c2, c2*c2, c0*A1, c1*A1, c2*A1, A0*A1]
--R 
--R
--R   (13)  [0,2,4,0,Aleph(1),Aleph(1),Aleph(1)]
--R                                                    Type: List CardinalNumber
--E 13

--S 14 of 20
[c2**c0, c2**c1, c2**c2, A1**c0, A1**c1, A1**c2]
--R 
--R
--R   (14)  [1,2,4,1,Aleph(1),Aleph(1)]
--R                                                    Type: List CardinalNumber
--E 14

--S 15 of 20
[c2-c1, c2-c2, c2-c3, A1-c2, A1-A0, A1-A1]
--R 
--R
--R   (15)  [1,0,"failed",Aleph(1),Aleph(1),"failed"]
--R                                    Type: List Union(CardinalNumber,"failed")
--E 15

--S 16 of 20
generalizedContinuumHypothesisAssumed true
--R 
--R
--R   (16)  true
--R                                                                Type: Boolean
--E 16

--S 17 of 20
[c0**A0, c1**A0, c2**A0, A0**A0, A0**A1, A1**A0, A1**A1]
--R 
--R
--R   (17)  [0,1,Aleph(1),Aleph(1),Aleph(2),Aleph(1),Aleph(2)]
--R                                                    Type: List CardinalNumber
--E 17

--S 18 of 20
a := Aleph 0
--R 
--R
--R   (18)  Aleph(0)
--R                                                         Type: CardinalNumber
--E 18

--S 19 of 20
c := 2**a
--R 
--R
--R   (19)  Aleph(1)
--R                                                         Type: CardinalNumber
--E 19

--S 20 of 20
f := 2**c
--R 
--R
--R   (20)  Aleph(2)
--R                                                         Type: CardinalNumber
--E 20
)spool
)lisp (bye)
@
<<CardinalNumber.help>>=
====================================================================
CardinalNumber examples
====================================================================

The CardinalNumber domain can be used for values indicating the
cardinality of sets, both finite and infinite.  For example, the
dimension operation in the category VectorSpace returns a cardinal
number.

The non-negative integers have a natural construction as cardinals

  0 = #{ }, 1 = {0}, 2 = {0, 1}, ..., n = {i | 0 <= i < n}.

The fact that 0 acts as a zero for the multiplication of cardinals is
equivalent to the axiom of choice.

Cardinal numbers can be created by conversion from non-negative integers.

  c0 := 0 :: CardinalNumber
   0 
                      Type: CardinalNumber

  c1 := 1 :: CardinalNumber
   1 
                      Type: CardinalNumber

  c2 := 2 :: CardinalNumber
   2 
                      Type: CardinalNumber

  c3 := 3 :: CardinalNumber
   3 
                      Type: CardinalNumber

They can also be obtained as the named cardinal Aleph(n).

  A0 := Aleph 0
   Aleph(0)
                      Type: CardinalNumber

  A1 := Aleph 1
   Aleph(1)
                      Type: CardinalNumber

The finite? operation tests whether a value is a finite cardinal, that
is, a non-negative integer.

  finite? c2
   true
                      Type: Boolean

  finite? A0
   false
                      Type: Boolean

Similarly, the countable?  operation determines whether a value is a
countable cardinal, that is, finite or Aleph(0).

  countable? c2
   true
                      Type: Boolean

  countable? A0
   true
                      Type: Boolean

  countable? A1
   false
                      Type: Boolean

Arithmetic operations are defined on cardinal numbers as follows:
If x = #X  and y = #Y then

  x+y  = #(X+Y) cardinality of the disjoint union
  x-y  = #(X-Y) cardinality of the relative complement
  x*y  = #(X*Y) cardinality of the Cartesian product
  x**y = #(X**Y) cardinality of the set of maps from Y to X

Here are some arithmetic examples.

  [c2 + c2, c2 + A1]
   [4, Aleph(1)]
                      Type: List CardinalNumber

  [c0*c2, c1*c2, c2*c2, c0*A1, c1*A1, c2*A1, A0*A1]
   [0, 2, 4, 0, Aleph(1), Aleph(1), Aleph(1)]
                      Type: List CardinalNumber

  [c2**c0, c2**c1, c2**c2, A1**c0, A1**c1, A1**c2]
   [1, 2, 4, 1, Aleph(1), Aleph(1)]
                      Type: List CardinalNumber

Subtraction is a partial operation: it is not defined when subtracting
a larger cardinal from a smaller one, nor when subtracting two equal
infinite cardinals.

  [c2-c1, c2-c2, c2-c3, A1-c2, A1-A0, A1-A1]
   [1, 0, "failed", Aleph(1), Aleph(1), "failed"]
                      Type: List Union(CardinalNumber,"failed")

The generalized continuum hypothesis asserts that

  2**Aleph i = Aleph(i+1)

and is independent of the axioms of set theory.

(reference: Goedel, The consistency of the continuum hypothesis,
Ann. Math. Studies, Princeton Univ. Press, 1940.)

The CardinalNumber domain provides an operation to assert whether the
hypothesis is to be assumed.

  generalizedContinuumHypothesisAssumed true
   true
                      Type: Boolean

When the generalized continuum hypothesis is assumed, exponentiation
to a transfinite power is allowed.

  [c0**A0, c1**A0, c2**A0, A0**A0, A0**A1, A1**A0, A1**A1]
   [0, 1, Aleph(1), Aleph(1), Aleph(2), Aleph(1), Aleph(2)]
                      Type: List CardinalNumber

Three commonly encountered cardinal numbers are

  a = #Z countable infinity
  c = #R the continuum
  f = #{g| g: [0,1] -> R}

In this domain, these values are obtained under the generalized
continuum hypothesis in this way.

  a := Aleph 0
   Aleph(0)
                      Type: CardinalNumber

  c := 2**a
   Aleph(1)
                      Type: CardinalNumber

  f := 2**c
   Aleph(2)
                      Type: CardinalNumber

See Also:
o )show CardinalNumber
o $AXIOM/doc/src/algebra/card.spad.dvi

@
<<domain CARD CardinalNumber>>=
)abbrev domain CARD CardinalNumber
++ Author: S.M. Watt
++ Date Created: June 1986
++ Date Last Updated: May 1990
++ Basic Operations: Aleph, +, -, *, **
++ Related Domains: 
++ Also See:
++ AMS Classifications:
++ Keywords: cardinal number, transfinite arithmetic
++ Examples:
++ References:
++   Goedel, "The consistency of the continuum hypothesis",
++   Ann. Math. Studies, Princeton Univ. Press, 1940
++ Description:
++   Members of the domain CardinalNumber are values indicating the
++   cardinality of sets, both finite and infinite.  Arithmetic operations
++   are defined on cardinal numbers as follows.
++
++   If \spad{x = #X}  and  \spad{y = #Y} then
++     \spad{x+y  = #(X+Y)}   \tab{30}disjoint union
++     \spad{x-y  = #(X-Y)}   \tab{30}relative complement
++     \spad{x*y  = #(X*Y)}   \tab{30}cartesian product
++     \spad{x**y = #(X**Y)}  \tab{30}\spad{X**Y = \{g| g:Y->X\}}
++
++   The non-negative integers have a natural construction as cardinals
++     \spad{0 = #\{\}}, \spad{1 = \{0\}}, \spad{2 = \{0, 1\}}, ..., \spad{n = \{i| 0 <= i < n\}}.
++
++   That \spad{0} acts as a zero for the multiplication of cardinals is
++   equivalent to the axiom of choice.
++
++   The generalized continuum hypothesis asserts 
++   \center{\spad{2**Aleph i = Aleph(i+1)}}
++   and is independent of the axioms of set theory [Goedel 1940].
++
++   Three commonly encountered cardinal numbers are
++      \spad{a = #Z}       \tab{30}countable infinity
++      \spad{c = #R}       \tab{30}the continuum
++      \spad{f = #\{g| g:[0,1]->R\}}
++
++   In this domain, these values are obtained using
++      \spad{a := Aleph 0}, \spad{c := 2**a}, \spad{f := 2**c}.
++
CardinalNumber: Join(OrderedSet, AbelianMonoid, Monoid,
                        RetractableTo NonNegativeInteger) with
        commutative "*"
            ++ a domain D has \spad{commutative("*")} if it has an operation
            ++ \spad{"*": (D,D) -> D} which is commutative.

        "-": (%,%) -> Union(%,"failed")
            ++ \spad{x - y} returns an element z such that 
            ++ \spad{z+y=x} or "failed" if no such element exists.
            ++
            ++E c2:=2::CardinalNumber
            ++E c2-c2
            ++E A1:=Aleph 1
            ++E A1-c2

        "**": (%, %) -> %
            ++ \spad{x**y} returns \spad{#(X**Y)} where \spad{X**Y} is defined
            ++  as \spad{\{g| g:Y->X\}}.
            ++
            ++E c2:=2::CardinalNumber
            ++E c2**c2
            ++E A1:=Aleph 1
            ++E A1**c2
            ++E generalizedContinuumHypothesisAssumed true
            ++E A1**A1

        Aleph: NonNegativeInteger -> %
            ++ Aleph(n) provides the named (infinite) cardinal number.
            ++
            ++E A0:=Aleph 0

        finite?: % -> Boolean
            ++ finite?(\spad{a}) determines whether 
            ++ \spad{a} is a finite cardinal, i.e. an integer.
            ++
            ++E c2:=2::CardinalNumber
            ++E finite? c2
            ++E A0:=Aleph 0
            ++E finite? A0

        countable?: % -> Boolean
            ++ countable?(\spad{a}) determines 
            ++ whether \spad{a} is a countable cardinal,
            ++ i.e. an integer or \spad{Aleph 0}.
            ++
            ++E c2:=2::CardinalNumber
            ++E countable? c2
            ++E A0:=Aleph 0
            ++E countable? A0
            ++E A1:=Aleph 1
            ++E countable? A1

        generalizedContinuumHypothesisAssumed?: () -> Boolean
            ++ generalizedContinuumHypothesisAssumed?()
            ++ tests if the hypothesis is currently assumed.
            ++
            ++E generalizedContinuumHypothesisAssumed?

        generalizedContinuumHypothesisAssumed:  Boolean -> Boolean
            ++ generalizedContinuumHypothesisAssumed(bool)
            ++ is used to dictate whether the hypothesis is to be assumed.
            ++
            ++E generalizedContinuumHypothesisAssumed true
            ++E a:=Aleph 0
            ++E c:=2**a
            ++E f:=2**c
    == add
        NNI ==> NonNegativeInteger
        FINord   ==> -1
        DUMMYval ==> -1
 
        Rep := Record(order: Integer, ival: Integer)
 
        GCHypothesis: Reference(Boolean) := ref false
 
        -- Creation
        0           == [FINord, 0]
        1           == [FINord, 1]
        coerce(n:NonNegativeInteger):% == [FINord, n]
        Aleph n     == [n, DUMMYval]
 
        -- Output
        ALEPHexpr := "Aleph"::OutputForm
 
        coerce(x: %): OutputForm ==
            x.order = FINord => (x.ival)::OutputForm
            prefix(ALEPHexpr, [(x.order)::OutputForm])
 
        -- Manipulation
        x = y ==
            x.order ^= y.order => false
            finite? x          => x.ival = y.ival
            true     -- equal transfinites
        x < y ==
            x.order < y.order => true
            x.order > y.order => false
            finite? x         => x.ival < y.ival
            false    -- equal transfinites
        x:% + y:% ==
            finite? x and finite? y => [FINord, x.ival+y.ival]
            max(x, y)
        x - y ==
            x < y     => "failed"
            finite? x => [FINord, x.ival-y.ival]
            x > y     => x
            "failed" -- equal transfinites
        x:% * y:% ==
            finite? x and finite? y => [FINord, x.ival*y.ival]
            x = 0 or y = 0          => 0
            max(x, y)
        n:NonNegativeInteger * x:% ==
            finite? x => [FINord, n*x.ival]
            n = 0     => 0
            x
        x**y ==
            y = 0 =>
                x ^= 0 => 1
                error "0**0 not defined for cardinal numbers."
            finite? y =>
                not finite? x => x
                [FINord,x.ival**(y.ival):NNI]
            x = 0 => 0
            x = 1 => 1
            GCHypothesis() => [max(x.order-1, y.order) + 1, DUMMYval]
            error "Transfinite exponentiation only implemented under GCH"
 
        finite? x    == x.order = FINord
        countable? x == x.order < 1
 
        retract(x:%):NonNegativeInteger ==
          finite? x => (x.ival)::NNI
          error "Not finite"
 
        retractIfCan(x:%):Union(NonNegativeInteger, "failed") ==
          finite? x => (x.ival)::NNI
          "failed"
 
        -- State manipulation
        generalizedContinuumHypothesisAssumed?() == GCHypothesis()
        generalizedContinuumHypothesisAssumed b == (GCHypothesis() := b)

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<domain CARD CardinalNumber>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
