\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra fparfrac.spad}
\author{Manuel Bronstein}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{domain FPARFRAC FullPartialFractionExpansion}
<<FullPartialFractionExpansion.input>>=
-- fparfrac.spad.pamphlet FullPartialFractionExpansion.input
)spool FullPartialFractionExpansion.output
)set message test on
)set message auto off
)clear all
--S 1 of 16
Fx := FRAC UP(x, FRAC INT)
--R 
--R
--R   (1)  Fraction UnivariatePolynomial(x,Fraction Integer)
--R                                                                 Type: Domain
--E 1

--S 2 of 16
f : Fx := 36 / (x**5-2*x**4-2*x**3+4*x**2+x-2) 
--R 
--R
--R                     36
--R   (2)  ----------------------------
--R         5     4     3     2
--R        x  - 2x  - 2x  + 4x  + x - 2
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 2

--S 3 of 16
g := fullPartialFraction f 
--R 
--R
--R          4       4        --+      - 3%A - 6
--R   (3)  ----- - ----- +    >        ---------
--R        x - 2   x + 1      --+              2
--R                          2         (x - %A)
--R                        %A  - 1= 0
--RType: FullPartialFractionExpansion(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 3

--S 4 of 16
g :: Fx
--R 
--R
--R                     36
--R   (4)  ----------------------------
--R         5     4     3     2
--R        x  - 2x  - 2x  + 4x  + x - 2
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 4

--S 5 of 16
g5 := D(g, 5)
--R 
--R
--R             480        480        --+      2160%A + 4320
--R   (5)  - -------- + -------- +    >        -------------
--R                 6          6      --+                7
--R          (x - 2)    (x + 1)      2           (x - %A)
--R                                %A  - 1= 0
--RType: FullPartialFractionExpansion(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 5

--S 6 of 16
f5 := D(f, 5)
--R 
--R
--R   (6)
--R                10           9            8            7            6
--R       - 544320x   + 4354560x  - 14696640x  + 28615680x  - 40085280x
--R     + 
--R                5            4            3           2
--R       46656000x  - 39411360x  + 18247680x  - 5870880x  + 3317760x + 246240
--R  /
--R        20      19      18      17       16       15       14        13
--R       x   - 12x   + 53x   - 76x   - 159x   + 676x   - 391x   - 1596x
--R     + 
--R            12        11        10        9        8        7        6        5
--R       2527x   + 1148x   - 4977x   + 1372x  + 4907x  - 3444x  - 2381x  + 2924x
--R     + 
--R           4        3       2
--R       276x  - 1184x  + 208x  + 192x - 64
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 6

--S 7 of 16
g5::Fx - f5
--R 
--R
--R   (7)  0
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 7

--S 8 of 16
f : Fx := (x**5 * (x-1)) / ((x**2 + x + 1)**2 * (x-2)**3)
--R 
--R
--R                       6    5
--R                      x  - x
--R   (8)  -----------------------------------
--R         7     6     5     3     2
--R        x  - 4x  + 3x  + 9x  - 6x  - 4x - 8
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 8

--S 9 of 16
g := fullPartialFraction f 
--R 
--R
--R   (9)
--R      1952       464        32                          179       135
--R      ----       ---        --                       - ---- %A + ----
--R      2401       343        49            --+          2401      2401
--R     ------ + -------- + -------- +       >          ----------------
--R      x - 2          2          3         --+             x - %A
--R              (x - 2)    (x - 2)      2
--R                                    %A  + %A + 1= 0
--R   + 
--R                       37        20
--R                      ---- %A + ----
--R           --+        1029      1029
--R           >          --------------
--R           --+                   2
--R       2                 (x - %A)
--R     %A  + %A + 1= 0
--RType: FullPartialFractionExpansion(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 9

--S 10 of 16
g :: Fx - f
--R 
--R
--R   (10)  0
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 10

--S 11 of 16
f : Fx := (2*x**7-7*x**5+26*x**3+8*x) / (x**8-5*x**6+6*x**4+4*x**2-8) 
--R 
--R
--R             7     5      3
--R           2x  - 7x  + 26x  + 8x
--R   (11)  ------------------------
--R          8     6     4     2
--R         x  - 5x  + 6x  + 4x  - 8
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 11

--S 12 of 16
g := fullPartialFraction f
--R 
--R
--R                        1                                            1
--R                        -                                            -
--R            --+         2        --+          1          --+         2
--R   (12)     >        ------ +    >        --------- +    >        ------
--R            --+      x - %A      --+              3      --+      x - %A
--R           2                    2         (x - %A)      2
--R         %A  - 2= 0           %A  - 2= 0              %A  + 1= 0
--RType: FullPartialFractionExpansion(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 12

--S 13 of 16
g :: Fx - f 
--R 
--R
--R   (13)  0
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 13

--S 14 of 16
f:Fx := x**3 / (x**21 + 2*x**20 + 4*x**19 + 7*x**18 + 10*x**17 + 17*x**16 + 22*x**15 + 30*x**14 + 36*x**13 + 40*x**12 + 47*x**11 + 46*x**10 + 49*x**9 + 43*x**8 + 38*x**7 + 32*x**6 + 23*x**5 + 19*x**4 + 10*x**3 + 7*x**2 + 2*x + 1)
--R 
--R
--R   (14)
--R      3
--R     x
--R  /
--R        21     20     19     18      17      16      15      14      13      12
--R       x   + 2x   + 4x   + 7x   + 10x   + 17x   + 22x   + 30x   + 36x   + 40x
--R     + 
--R          11      10      9      8      7      6      5      4      3     2
--R       47x   + 46x   + 49x  + 43x  + 38x  + 32x  + 23x  + 19x  + 10x  + 7x  + 2x
--R     + 
--R       1
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 14

--S 15 of 16
g := fullPartialFraction f 
--R 
--R
--R   (15)
--R                  1                        1      19
--R                  - %A                     - %A - --
--R        --+       2             --+        9      27
--R        >        ------ +       >          ---------
--R        --+      x - %A         --+          x - %A
--R       2                    2
--R     %A  + 1= 0           %A  + %A + 1= 0
--R   + 
--R                       1       1
--R                      -- %A - --
--R           --+        27      27
--R           >          ----------
--R           --+                 2
--R       2               (x - %A)
--R     %A  + %A + 1= 0
--R   + 
--R     SIGMA
--R          5     2
--R        %A  + %A  + 1= 0
--R    ,
--R               96556567040   4   420961732891   3    59101056149   2
--R            - ------------ %A  + ------------ %A  - ------------ %A
--R              912390759099       912390759099       912390759099
--R          + 
--R              373545875923      529673492498
--R            - ------------ %A + ------------
--R              912390759099      912390759099
--R       /
--R          x - %A
--R   + 
--R     SIGMA
--R          5     2
--R        %A  + %A  + 1= 0
--R    ,
--R           5580868   4    2024443   3    4321919   2    84614        5070620
--R        - -------- %A  - -------- %A  + -------- %A  - ------- %A - --------
--R          94070601       94070601       94070601       1542141      94070601
--R        --------------------------------------------------------------------
--R                                              2
--R                                      (x - %A)
--R   + 
--R     SIGMA
--R          5     2
--R        %A  + %A  + 1= 0
--R    ,
--R         1610957   4    2763014   3    2016775   2    266953        4529359
--R        -------- %A  + -------- %A  - -------- %A  + -------- %A + --------
--R        94070601       94070601       94070601       94070601      94070601
--R        -------------------------------------------------------------------
--R                                             3
--R                                     (x - %A)
--RType: FullPartialFractionExpansion(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 15

--S 16 of 16
g :: Fx - f
--R 
--R
--R   (16)  0
--R                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)
--E 16
)spool
)lisp (bye)
@
<<FullPartialFractionExpansion.help>>=
====================================================================
FullPartialFractionExpansion expansion
====================================================================

The domain FullPartialFractionExpansion implements factor-free
conversion of quotients to full partial fractions.

Our examples will all involve quotients of univariate polynomials
with rational number coefficients.

  Fx := FRAC UP(x, FRAC INT)
    Fraction UnivariatePolynomial(x,Fraction Integer)
                    Type: Domain

Here is a simple-looking rational function.

  f : Fx := 36 / (x**5-2*x**4-2*x**3+4*x**2+x-2) 
                 36
    ----------------------------
     5     4     3     2
    x  - 2x  - 2x  + 4x  + x - 2
                    Type: Fraction UnivariatePolynomial(x,Fraction Integer)

We use fullPartialFraction to convert it to an object of type
FullPartialFractionExpansion.

  g := fullPartialFraction f 
      4       4        --+      - 3%A - 6
    ----- - ----- +    >        ---------
    x - 2   x + 1      --+              2
                      2         (x - %A)
                    %A  - 1= 0
Type: FullPartialFractionExpansion(Fraction Integer,
                                   UnivariatePolynomial(x,Fraction Integer))

Use a coercion to change it back into a quotient.

  g :: Fx
                 36
    ----------------------------
     5     4     3     2
    x  - 2x  - 2x  + 4x  + x - 2
                  Type: Fraction UnivariatePolynomial(x,Fraction Integer)

Full partial fractions differentiate faster than rational functions.

  g5 := D(g, 5)
         480        480        --+      2160%A + 4320
    - -------- + -------- +    >        -------------
             6          6      --+                7
      (x - 2)    (x + 1)      2           (x - %A)
                            %A  - 1= 0
Type: FullPartialFractionExpansion(Fraction Integer,
                                   UnivariatePolynomial(x,Fraction Integer))

  f5 := D(f, 5)
                10           9            8            7            6
       - 544320x   + 4354560x  - 14696640x  + 28615680x  - 40085280x
     + 
                5            4            3           2
       46656000x  - 39411360x  + 18247680x  - 5870880x  + 3317760x + 246240
  /
        20      19      18      17       16       15       14        13
       x   - 12x   + 53x   - 76x   - 159x   + 676x   - 391x   - 1596x
     + 
            12        11        10        9        8        7        6        5
       2527x   + 1148x   - 4977x   + 1372x  + 4907x  - 3444x  - 2381x  + 2924x
     + 
           4        3       2
       276x  - 1184x  + 208x  + 192x - 64
                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)

We can check that the two forms represent the same function.

  g5::Fx - f5
    0
                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)

Here are some examples that are more complicated.

  f : Fx := (x**5 * (x-1)) / ((x**2 + x + 1)**2 * (x-2)**3)
                   6    5
                  x  - x
    -----------------------------------
     7     6     5     3     2
    x  - 4x  + 3x  + 9x  - 6x  - 4x - 8
                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)

  g := fullPartialFraction f 
      1952       464        32                          179       135
      ----       ---        --                       - ---- %A + ----
      2401       343        49            --+          2401      2401
     ------ + -------- + -------- +       >          ----------------
      x - 2          2          3         --+             x - %A
              (x - 2)    (x - 2)      2
                                    %A  + %A + 1= 0
   + 
                       37        20
                      ---- %A + ----
           --+        1029      1029
           >          --------------
           --+                   2
       2                 (x - %A)
     %A  + %A + 1= 0
Type: FullPartialFractionExpansion(Fraction Integer,
                                   UnivariatePolynomial(x,Fraction Integer))

  g :: Fx - f
    0
                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)

  f : Fx := (2*x**7-7*x**5+26*x**3+8*x) / (x**8-5*x**6+6*x**4+4*x**2-8) 
        7     5      3
      2x  - 7x  + 26x  + 8x
    ------------------------
     8     6     4     2
    x  - 5x  + 6x  + 4x  - 8
                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)

  g := fullPartialFraction f
                   1                                            1
                   -                                            -
       --+         2        --+          1          --+         2
       >        ------ +    >        --------- +    >        ------
       --+      x - %A      --+              3      --+      x - %A
      2                    2         (x - %A)      2
    %A  - 2= 0           %A  - 2= 0              %A  + 1= 0
Type: FullPartialFractionExpansion(Fraction Integer,
                                   UnivariatePolynomial(x,Fraction Integer))

  g :: Fx - f 
    0
                     Type: Fraction UnivariatePolynomial(x,Fraction Integer)

  f:Fx := x**3 / (x**21 + 2*x**20 + 4*x**19 + 7*x**18 + 10*x**17 + 17*x**16 + 22*x**15 + 30*x**14 + 36*x**13 + 40*x**12 + 47*x**11 + 46*x**10 + 49*x**9 + 43*x**8 + 38*x**7 + 32*x**6 + 23*x**5 + 19*x**4 + 10*x**3 + 7*x**2 + 2*x + 1)
      3
     x
  /
        21     20     19     18      17      16      15      14      13      12
       x   + 2x   + 4x   + 7x   + 10x   + 17x   + 22x   + 30x   + 36x   + 40x
     + 
          11      10      9      8      7      6      5      4      3     2
      47x   + 46x   + 49x  + 43x  + 38x  + 32x  + 23x  + 19x  + 10x  + 7x  + 2x
     + 
       1
                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)

  g := fullPartialFraction f 
                  1                        1      19
                  - %A                     - %A - --
        --+       2             --+        9      27
        >        ------ +       >          ---------
        --+      x - %A         --+          x - %A
       2                    2
     %A  + 1= 0           %A  + %A + 1= 0
   + 
                       1       1
                      -- %A - --
           --+        27      27
           >          ----------
           --+                 2
       2               (x - %A)
     %A  + %A + 1= 0
   + 
     SIGMA
          5     2
        %A  + %A  + 1= 0
    ,
               96556567040   4   420961732891   3    59101056149   2
            - ------------ %A  + ------------ %A  - ------------ %A
              912390759099       912390759099       912390759099
          + 
              373545875923      529673492498
            - ------------ %A + ------------
              912390759099      912390759099
       /
          x - %A
   + 
     SIGMA
          5     2
        %A  + %A  + 1= 0
    ,
           5580868   4    2024443   3    4321919   2    84614        5070620
        - -------- %A  - -------- %A  + -------- %A  - ------- %A - --------
          94070601       94070601       94070601       1542141      94070601
        --------------------------------------------------------------------
                                              2
                                      (x - %A)
   + 
     SIGMA
          5     2
        %A  + %A  + 1= 0
    ,
         1610957   4    2763014   3    2016775   2    266953        4529359
        -------- %A  + -------- %A  - -------- %A  + -------- %A + --------
        94070601       94070601       94070601       94070601      94070601
        -------------------------------------------------------------------
                                             3
                                     (x - %A)
Type: FullPartialFractionExpansion(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))

This verification takes much longer than the conversion to partial fractions.

  g :: Fx - f
    0
                      Type: Fraction UnivariatePolynomial(x,Fraction Integer)

Use PartialFraction for standard partial fraction decompositions.

For more information, see the paper: Bronstein, M and Salvy, B.
"Full Partial Fraction Decomposition of Rational Functions,"
Proceedings of ISSAC'93, Kiev, ACM Press.  

See Also:
o )help PartialFraction
o )show FullPartialFractionExpansion
o $AXIOM/doc/src/algebra/fparfrac.spad.dvi

@
<<domain FPARFRAC FullPartialFractionExpansion>>=
)abbrev domain FPARFRAC FullPartialFractionExpansion
++ Full partial fraction expansion of rational functions
++ Author: Manuel Bronstein
++ Date Created: 9 December 1992
++ Date Last Updated: 6 October 1993
++ References: M.Bronstein & B.Salvy,
++             Full Partial Fraction Decomposition of Rational Functions,
++             in Proceedings of ISSAC'93, Kiev, ACM Press.
FullPartialFractionExpansion(F, UP): Exports == Implementation where
  F  : Join(Field, CharacteristicZero)
  UP : UnivariatePolynomialCategory F

  N   ==> NonNegativeInteger
  Q   ==> Fraction Integer
  O   ==> OutputForm
  RF  ==> Fraction UP
  SUP ==> SparseUnivariatePolynomial RF
  REC ==> Record(exponent: N, center: UP, num: UP)
  ODV ==> OrderlyDifferentialVariable Symbol
  ODP ==> OrderlyDifferentialPolynomial UP
  ODF ==> Fraction ODP
  FPF ==> Record(polyPart: UP, fracPart: List REC)

  Exports ==> Join(SetCategory, ConvertibleTo RF)  with
    "+":                 (UP, $) -> $
      ++ p + x returns the sum of p and x
    fullPartialFraction: RF -> $
      ++ fullPartialFraction(f) returns \spad{[p, [[j, Dj, Hj]...]]} such that
      ++ \spad{f = p(x) + sum_{[j,Dj,Hj] in l} sum_{Dj(a)=0} Hj(a)/(x - a)\^j}.
    polyPart:            $ -> UP
      ++ polyPart(f) returns the polynomial part of f.
    fracPart:            $  -> List REC
      ++ fracPart(f) returns the list of summands of the fractional part of f.
    construct:           List REC -> $
      ++ construct(l) is the inverse of fracPart.
    differentiate:       $ -> $
      ++ differentiate(f) returns the derivative of f.
    D:                    $ -> $
      ++ D(f) returns the derivative of f.
    differentiate:       ($, N) -> $
      ++ differentiate(f, n) returns the n-th derivative of f.
    D: ($, NonNegativeInteger) -> $
      ++ D(f, n) returns the n-th derivative of f.

  Implementation ==> add
    Rep := FPF

    fullParFrac: (UP, UP, UP, N) -> List REC
    outputexp  : (O, N) -> O
    output     : (N, UP, UP) -> O
    REC2RF     : (UP, UP, N) -> RF
    UP2SUP     : UP -> SUP
    diffrec    : REC -> REC
    FP2O       : List REC -> O

-- create a differential variable
    u  := new()$Symbol
    u0 := makeVariable(u, 0)$ODV
    alpha := u::O
    x  := monomial(1, 1)$UP
    xx := x::O
    zr := (0$N)::O

    construct l     == [0, l]
    D r             == differentiate r
    D(r, n)         == differentiate(r,n)
    polyPart f      == f.polyPart
    fracPart f      == f.fracPart
    p:UP + f:$      == [p + polyPart f, fracPart f]

    differentiate f ==
      differentiate(polyPart f) + construct [diffrec rec for rec in fracPart f]

    differentiate(r, n) ==
      for i in 1..n repeat r := differentiate r
      r

-- diffrec(sum_{rec.center(a) = 0} rec.num(a) / (x - a)^e) =
--         sum_{rec.center(a) = 0} -e rec.num(a) / (x - a)^{e+1}
--                where e = rec.exponent
    diffrec rec ==
      e := rec.exponent
      [e + 1, rec.center, - e * rec.num]

    convert(f:$):RF ==
      ans := polyPart(f)::RF
      for rec in fracPart f repeat
        ans := ans + REC2RF(rec.center, rec.num, rec.exponent)
      ans

    UP2SUP p ==
      map(#1::UP::RF, p)$UnivariatePolynomialCategoryFunctions2(F, UP, RF, SUP)

    -- returns Trace_k^k(a) (h(a) / (x - a)^n)  where d(a) = 0
    REC2RF(d, h, n) ==
--      one?(m := degree d) =>
      ((m := degree d) = 1) =>
        a   := - (leadingCoefficient reductum d) / (leadingCoefficient d)
        h(a)::UP / (x - a::UP)**n
      dd  := UP2SUP d
      hh  := UP2SUP h
      aa  := monomial(1, 1)$SUP
      p   := (x::RF::SUP - aa)**n rem dd
      rec := extendedEuclidean(p, dd, hh)::Record(coef1:SUP, coef2:SUP)
      t   := rec.coef1     -- we want Trace_k^k(a)(t) now
      ans := coefficient(t, 0)
      for i in 1..degree(d)-1 repeat
        t   := (t * aa) rem dd
        ans := ans + coefficient(t, i)
      ans

    fullPartialFraction f ==
      qr := divide(numer f, d := denom f)
      qr.quotient + construct concat
                     [fullParFrac(qr.remainder, d, rec.factor, rec.exponent::N)
                                         for rec in factors squareFree denom f]

    fullParFrac(a, d, q, n) ==
      ans:List REC := empty()
      em := e := d quo (q ** n)
      rec := extendedEuclidean(e, q, 1)::Record(coef1:UP,coef2:UP)
      bm := b := rec.coef1                  -- b = inverse of e modulo q
      lvar:List(ODV) := [u0]
      um := 1::ODP
      un := (u1 := u0::ODP)**n
      lval:List(UP)  := [q1 := q := differentiate(q0 := q)]
      h:ODF := a::ODP / (e * un)
      rec := extendedEuclidean(q1, q0, 1)::Record(coef1:UP,coef2:UP)
      c := rec.coef1                        -- c = inverse of q' modulo q
      cm := 1::UP
      cn  := (c ** n) rem q0
      for m in 1..n repeat
        p    := retract(em * un * um * h)@ODP
        pp   := retract(eval(p, lvar, lval))@UP
        h    := inv(m::Q) * differentiate h
        q    := differentiate q
        lvar := concat(makeVariable(u, m), lvar)
        lval := concat(inv((m+1)::F) * q, lval)
        qq   := q0 quo gcd(pp, q0)                    -- new center
        if (degree(qq) > 0) then
          ans  := concat([(n + 1 - m)::N, qq, (pp * bm * cn * cm) rem qq], ans)
        cm   := (c * cm) rem q0     -- cm = c**m modulo q now
        um   := u1 * um             -- um = u**m now
        em   := e * em              -- em = e**{m+1} now
        bm   := (b * bm) rem q0     -- bm = b**{m+1} modulo q now
      ans

    coerce(f:$):O ==
      ans := FP2O(l := fracPart f)
      zero?(p := polyPart f) =>
        empty? l => (0$N)::O
        ans
      p::O + ans

    FP2O l ==
      empty? l => empty()
      rec := first l
      ans := output(rec.exponent, rec.center, rec.num)
      for rec in rest l repeat
        ans := ans + output(rec.exponent, rec.center, rec.num)
      ans

    output(n, d, h) ==
--      one? degree d =>
      (degree d) = 1 =>
        a := - leadingCoefficient(reductum d) / leadingCoefficient(d)
        h(a)::O / outputexp((x - a::UP)::O, n)
      sum(outputForm(makeSUP h, alpha) / outputexp(xx - alpha, n),
          outputForm(makeSUP d, alpha) = zr)

    outputexp(f, n) ==
--      one? n => f
      (n = 1) => f
      f ** (n::O)

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<domain FPARFRAC FullPartialFractionExpansion>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
