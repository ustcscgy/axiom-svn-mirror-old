\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra lodo.spad}
\author{Manuel Bronstein, Stephen M. Watt}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{category LODOCAT LinearOrdinaryDifferentialOperatorCategory}
<<category LODOCAT LinearOrdinaryDifferentialOperatorCategory>>=
)abbrev category LODOCAT LinearOrdinaryDifferentialOperatorCategory
++ Author: Manuel Bronstein
++ Date Created: 9 December 1993
++ Date Last Updated: 15 April 1994
++ Keywords: differential operator
++ Description:
++   \spad{LinearOrdinaryDifferentialOperatorCategory} is the category
++   of differential operators with coefficients in a ring A with a given
++   derivation.
++   Multiplication of operators corresponds to functional composition:
++       \spad{(L1 * L2).(f) = L1 L2 f}
LinearOrdinaryDifferentialOperatorCategory(A:Ring): Category ==
  Join(UnivariateSkewPolynomialCategory A, Eltable(A, A)) with
        D: () -> %
            ++ D() provides the operator corresponding to a derivation
            ++ in the ring \spad{A}.
        adjoint: % -> %
            ++ adjoint(a) returns the adjoint operator of a.
        if A has Field then
          symmetricProduct: (%, %) -> %
            ++ symmetricProduct(a,b) computes an operator \spad{c} of
            ++ minimal order such that the nullspace of \spad{c} is
            ++ generated by all the products of a solution of \spad{a} by
            ++ a solution of \spad{b}.
          symmetricPower  : (%, NonNegativeInteger) -> %
            ++ symmetricPower(a,n) computes an operator \spad{c} of
            ++ minimal order such that the nullspace of \spad{c} is
            ++ generated by all the products of \spad{n} solutions
            ++ of \spad{a}.
          symmetricSquare : % -> %
            ++ symmetricSquare(a) computes \spad{symmetricProduct(a,a)}
            ++ using a more efficient method.
          directSum: (%, %) -> %
            ++ directSum(a,b) computes an operator \spad{c} of
            ++ minimal order such that the nullspace of \spad{c} is
            ++ generated by all the sums of a solution of \spad{a} by
            ++ a solution of \spad{b}.
   add
        m1monom: NonNegativeInteger -> %

        D() == monomial(1, 1)

        m1monom n ==
          a:A := (odd? n => -1; 1)
          monomial(a, n)

        adjoint a ==
          ans:% := 0
          while a ^= 0 repeat
            ans := ans + m1monom(degree a) * leadingCoefficient(a)::%
            a   := reductum a
          ans

        if A has Field then symmetricSquare l == symmetricPower(l, 2)

@
\section{package LODOOPS LinearOrdinaryDifferentialOperatorsOps}
<<package LODOOPS LinearOrdinaryDifferentialOperatorsOps>>=
)abbrev package LODOOPS LinearOrdinaryDifferentialOperatorsOps
++ Author: Manuel Bronstein
++ Date Created: 18 January 1994
++ Date Last Updated: 15 April 1994
++ Description:
++   \spad{LinearOrdinaryDifferentialOperatorsOps} provides symmetric
++   products and sums for linear ordinary differential operators.
-- Putting those operations here rather than defaults in LODOCAT allows
-- LODOCAT to be defined independently of the derivative used.
-- MB 1/94
LinearOrdinaryDifferentialOperatorsOps(A, L): Exports == Implementation where
    A: Field
    L: LinearOrdinaryDifferentialOperatorCategory A

    N  ==> NonNegativeInteger
    V  ==> OrderlyDifferentialVariable Symbol
    P  ==> DifferentialSparseMultivariatePolynomial(A, Symbol, V)

    Exports ==> with
          symmetricProduct: (L, L, A -> A) -> L
            ++ symmetricProduct(a,b,D) computes an operator \spad{c} of
            ++ minimal order such that the nullspace of \spad{c} is
            ++ generated by all the products of a solution of \spad{a} by
            ++ a solution of \spad{b}.
            ++ D is the derivation to use.
          symmetricPower: (L, N, A -> A) -> L
            ++ symmetricPower(a,n,D) computes an operator \spad{c} of
            ++ minimal order such that the nullspace of \spad{c} is
            ++ generated by all the products of \spad{n} solutions
            ++ of \spad{a}.
            ++ D is the derivation to use.
          directSum: (L, L, A -> A) -> L
            ++ directSum(a,b,D) computes an operator \spad{c} of
            ++ minimal order such that the nullspace of \spad{c} is
            ++ generated by all the sums of a solution of \spad{a} by
            ++ a solution of \spad{b}.
            ++ D is the derivation to use.

    Implementation ==> add
          import IntegerCombinatoricFunctions

          var1 := new()$Symbol
          var2 := new()$Symbol

          nonTrivial?: Vector A -> Boolean
          applyLODO  : (L, V) -> P
          killer     : (P, N, List V, List P, A -> A) -> L
          vec2LODO   : Vector A -> L

          nonTrivial? v == any?(#1 ^= 0, v)$Vector(A)
          vec2LODO v    == +/[monomial(v.i, (i-1)::N) for i in 1..#v]

          symmetricPower(l, m, diff) ==
            u := var1::V; n := degree l
            un := differentiate(u, n)
            a  := applyLODO(inv(- leadingCoefficient l) * reductum l, u)
            killer(u::P ** m, binomial(n + m - 1, n - 1)::N, [un], [a], diff)

-- returns an operator L such that L(u) = 0, for a given differential
-- polynomial u, given that the differential variables appearing in u
-- satisfy some linear ode's
-- m is a bound on the order of the operator searched.
-- lvar, lval describe the substitution(s) to perform when differentiating
--     the expression u (they encode the fact the the differential variables
--     satisfy some differential equations, which can be seen as the rewrite
--     rules   lvar --> lval)
-- diff is the derivation to use
          killer(u, m, lvar, lval, diff) ==
            lu:List P := [u]
            for q in 0..m repeat
              mat := reducedSystem(matrix([lu])@Matrix(P))@Matrix(A)
              (sol := find(nonTrivial?, l := nullSpace mat)) case Vector(A) =>
                return vec2LODO(sol::Vector(A))
              u := eval(differentiate(u, diff), lvar, lval)
              lu := concat_!(lu, [u])
            error "killer: no linear dependence found"

          symmetricProduct(l1, l2, diff) ==
            u  := var1::V;   v  := var2::V
            n1 := degree l1; n2 := degree l2
            un := differentiate(u, n1); vn := differentiate(v, n2)
            a  := applyLODO(inv(- leadingCoefficient l1) * reductum l1, u)
            b  := applyLODO(inv(- leadingCoefficient l2) * reductum l2, v)
            killer(u::P * v::P, n1 * n2, [un, vn], [a, b], diff)

          directSum(l1, l2, diff) ==
            u  := var1::V;   v  := var2::V
            n1 := degree l1; n2 := degree l2
            un := differentiate(u, n1); vn := differentiate(v, n2)
            a  := applyLODO(inv(- leadingCoefficient l1) * reductum l1, u)
            b  := applyLODO(inv(- leadingCoefficient l2) * reductum l2, v)
            killer(u::P + v::P, n1 + n2, [un, vn], [a, b], diff)

          applyLODO(l, v) ==
            p:P := 0
            while l ^= 0 repeat
              p := p + monomial(leadingCoefficient(l)::P,
                                  differentiate(v, degree l), 1)
              l := reductum l
            p

@
\section{domain LODO LinearOrdinaryDifferentialOperator}
<<LinearOrdinaryDifferentialOperator.input>>=
-- lodo.spad.pamphlet LinearOrdinaryDifferentialOperator.input
)spool LinearOrdinaryDifferentialOperator.output
)set message test on
)set message auto off
)clear all
--S 1 of 16
Dx: LODO(EXPR INT, f +-> D(f, x))
--R 
--R                                                                   Type: Void
--E 1

--S 2 of 16
Dx := D()
--R 
--R
--R   (2)  D
--IType: LinearOrdinaryDifferentialOperator(Expression Integer,theMap LAMBDA-CLOSURE(NIL,NIL,NIL,G1404 envArg,SPADCALL(G1404,QUOTE x,ELT(*1;anonymousFunction;0;frame0;internal;MV,0))))
--E 2

--S 3 of 16
Dop:= Dx^3 + G/x^2*Dx + H/x^3 - 1
--R 
--R
--R                       3
--R         3    G     - x  + H
--R   (3)  D  + -- D + --------
--R              2         3
--R             x         x
--IType: LinearOrdinaryDifferentialOperator(Expression Integer,theMap LAMBDA-CLOSURE(NIL,NIL,NIL,G1404 envArg,SPADCALL(G1404,QUOTE x,ELT(*1;anonymousFunction;0;frame0;internal;MV,0))))
--E 3

--S 4 of 16
n == 3
--R 
--R                                                                   Type: Void
--E 4

--S 5 of 16
phi == reduce(+,[subscript(s,[i])*exp(x)/x^i for i in 0..n])
--R 
--R                                                                   Type: Void
--E 5

--S 6 of 16
phi1 ==  Dop(phi) / exp x
--R 
--R                                                                   Type: Void
--E 6

--S 7 of 16
phi2 == phi1 *x**(n+3)
--R 
--R                                                                   Type: Void
--E 7

--S 8 of 16
phi3 == retract(phi2)@(POLY INT)
--R 
--R                                                                   Type: Void
--E 8

--S 9 of 16
pans == phi3 ::UP(x,POLY INT)
--R 
--R                                                                   Type: Void
--E 9

--S 10 of 16
pans1 == [coefficient(pans, (n+3-i) :: NNI) for i in 2..n+1]
--R 
--R                                                                   Type: Void
--E 10

--S 11 of 16
leq == solve(pans1,[subscript(s,[i]) for i in 1..n])
--R 
--R                                                                   Type: Void
--E 11

--S 12 of 16
leq
--R 
--R   Compiling body of rule n to compute value of type PositiveInteger 
--R   Compiling body of rule phi to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi1 to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi2 to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi3 to compute value of type Polynomial 
--R      Integer 
--R   Compiling body of rule pans to compute value of type 
--R      UnivariatePolynomial(x,Polynomial Integer) 
--R   Compiling body of rule pans1 to compute value of type List 
--R      Polynomial Integer 
--R   Compiling body of rule leq to compute value of type List List 
--R      Equation Fraction Polynomial Integer 
--I   Compiling function G3349 with type Integer -> Boolean 
--R
--R   (12)
--R                           2                                3        2
--R         s G     3s H + s G  + 6s G     (9s G + 54s )H + s G  + 18s G  + 72s G
--R          0        0     0       0         0       0      0        0        0
--R   [[s = ---,s = ------------------,s = --------------------------------------]]
--R      1   3   2          18          3                    162
--R                         Type: List List Equation Fraction Polynomial Integer
--E 12

--S 13 of 16
n==4
--R 
--R   Compiled code for n has been cleared.
--R   Compiled code for leq has been cleared.
--R   Compiled code for pans1 has been cleared.
--R   Compiled code for phi2 has been cleared.
--R   Compiled code for phi has been cleared.
--R   Compiled code for phi3 has been cleared.
--R   Compiled code for phi1 has been cleared.
--R   Compiled code for pans has been cleared.
--R   1 old definition(s) deleted for function or rule n 
--R                                                                   Type: Void
--E 13

--S 14 of 16
leq
--R 
--R   Compiling body of rule n to compute value of type PositiveInteger 
--R   Compiling body of rule phi to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi1 to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi2 to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi3 to compute value of type Polynomial 
--R      Integer 
--R   Compiling body of rule pans to compute value of type 
--R      UnivariatePolynomial(x,Polynomial Integer) 
--R   Compiling body of rule pans1 to compute value of type List 
--R      Polynomial Integer 
--R   Compiling body of rule leq to compute value of type List List 
--R      Equation Fraction Polynomial Integer 
--R
--R   (14)
--R   [
--R                             2
--R          s G      3s H + s G  + 6s G
--R           0         0     0       0
--R     [s = ---, s = ------------------,
--R       1   3    2          18
--R                              3        2
--R          (9s G + 54s )H + s G  + 18s G  + 72s G
--R             0       0      0        0        0
--R      s = --------------------------------------,
--R       3                    162
--R
--R       s  =
--R        4
--R                  2         2                          4        3         2
--R             27s H  + (18s G  + 378s G + 1296s )H + s G  + 36s G  + 396s G
--R                0         0         0         0      0        0         0
--R           + 
--R             1296s G
--R                  0
--R        /
--R           1944
--R       ]
--R     ]
--R                         Type: List List Equation Fraction Polynomial Integer
--E 14

--S 15 of 16
n==7
--R 
--R   Compiled code for n has been cleared.
--R   Compiled code for leq has been cleared.
--R   Compiled code for pans1 has been cleared.
--R   Compiled code for phi2 has been cleared.
--R   Compiled code for phi has been cleared.
--R   Compiled code for phi3 has been cleared.
--R   Compiled code for phi1 has been cleared.
--R   Compiled code for pans has been cleared.
--R   1 old definition(s) deleted for function or rule n 
--R                                                                   Type: Void
--E 15

--S 16 of 16
leq
--R 
--R   Compiling body of rule n to compute value of type PositiveInteger 
--R   Compiling body of rule phi to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi1 to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi2 to compute value of type Expression 
--R      Integer 
--R   Compiling body of rule phi3 to compute value of type Polynomial 
--R      Integer 
--R   Compiling body of rule pans to compute value of type 
--R      UnivariatePolynomial(x,Polynomial Integer) 
--R   Compiling body of rule pans1 to compute value of type List 
--R      Polynomial Integer 
--R   Compiling body of rule leq to compute value of type List List 
--R      Equation Fraction Polynomial Integer 
--R
--R   (16)
--R   [
--R                             2
--R          s G      3s H + s G  + 6s G
--R           0         0     0       0
--R     [s = ---, s = ------------------,
--R       1   3    2          18
--R                              3        2
--R          (9s G + 54s )H + s G  + 18s G  + 72s G
--R             0       0      0        0        0
--R      s = --------------------------------------,
--R       3                    162
--R
--R       s  =
--R        4
--R                  2         2                          4        3         2
--R             27s H  + (18s G  + 378s G + 1296s )H + s G  + 36s G  + 396s G
--R                0         0         0         0      0        0         0
--R           + 
--R             1296s G
--R                  0
--R        /
--R           1944
--R       ,
--R
--R       s  =
--R        5
--R                               2         3          2
--R             (135s G + 2268s )H  + (30s G  + 1350s G  + 16416s G + 38880s )H
--R                  0         0          0          0           0          0
--R           + 
--R                5        4          3          2
--R             s G  + 60s G  + 1188s G  + 9504s G  + 25920s G
--R              0        0          0          0           0
--R        /
--R           29160
--R       ,
--R
--R       s  =
--R        6
--R                   3          2                        2
--R             405s H  + (405s G  + 18468s G + 174960s )H
--R                 0          0           0           0
--R           + 
--R                   4          3           2                                6
--R             (45s G  + 3510s G  + 88776s G  + 777600s G + 1166400s )H + s G
--R                 0          0           0            0            0      0
--R           + 
--R                  5          4           3           2
--R             90s G  + 2628s G  + 27864s G  + 90720s G
--R                0          0           0           0
--R        /
--R           524880
--R       ,
--R
--R       s  =
--R        7
--R                                 3
--R             (2835s G + 91854s )H
--R                   0          0
--R           + 
--R                    3           2                            2
--R             (945s G  + 81648s G  + 2082996s G + 14171760s )H
--R                  0           0             0             0
--R           + 
--R                   5          4            3             2
--R             (63s G  + 7560s G  + 317520s G  + 5554008s G  + 34058880s G)H
--R                 0          0            0             0              0
--R           + 
--R                7         6          5           4             3              2
--R             s G  + 126s G  + 4788s G  + 25272s G  - 1744416s G  - 26827200s G
--R              0         0          0           0             0              0
--R           + 
--R             - 97977600s G
--R                        0
--R        /
--R           11022480
--R       ]
--R     ]
--R                         Type: List List Equation Fraction Polynomial Integer
--E 16
)spool
 
Dx: LODO(EXPR INT, f +-> D(f, x))
Dx := D()
Dop:= Dx^3 + G/x^2*Dx + H/x^3 - 1
n == 3
phi == reduce(+,[subscript(s,[i])*exp(x)/x^i for i in 0..n])
phi1 ==  Dop(phi) / exp x
phi2 == phi1 *x**(n+3)
phi3 == retract(phi2)@(POLY INT)
pans == phi3 ::UP(x,POLY INT)
pans1 == [coefficient(pans, (n+3-i) :: NNI) for i in 2..n+1]
leq == solve(pans1,[subscript(s,[i]) for i in 1..n])
leq
n==4
leq
n==7
leq
)spool
)lisp (bye)
@
<<LinearOrdinaryDifferentialOperator.help>>=
====================================================================
LinearOrdinaryDifferentialOperator examples
====================================================================

LinearOrdinaryDifferentialOperator(A, diff) is the domain of linear
ordinary differential operators with coefficients in a ring A with a
given derivation.

====================================================================
Differential Operators with Series Coefficients
====================================================================

Problem:
  Find the first few coefficients of exp(x)/x^i of Dop phi where

    Dop := D^3 + G/x^2 * D + H/x^3 - 1
    phi := sum(s[i]*exp(x)/x^i, i = 0..)

Solution:

Define the differential.

  Dx: LODO(EXPR INT, f +-> D(f, x))
                         Type: Void

  Dx := D()
   D
     Type: LinearOrdinaryDifferentialOperator(Expression Integer,
      theMap LAMBDA-CLOSURE(NIL,NIL,NIL,G1404 envArg,
              SPADCALL(G1404,QUOTE x,
               ELT(*1;anonymousFunction;0;frame0;internal;MV,0))))

Now define the differential operator Dop.

  Dop:= Dx^3 + G/x^2*Dx + H/x^3 - 1
                       3
     3    G     - x  + H
    D  + -- D + --------
          2         3
         x         x
     Type: LinearOrdinaryDifferentialOperator(Expression Integer,
      theMap LAMBDA-CLOSURE(NIL,NIL,NIL,G1404 envArg,
              SPADCALL(G1404,QUOTE x,
               ELT(*1;anonymousFunction;0;frame0;internal;MV,0))))

  n == 3
                          Type: Void

  phi == reduce(+,[subscript(s,[i])*exp(x)/x^i for i in 0..n])
                          Type: Void

  phi1 ==  Dop(phi) / exp x
                          Type: Void

  phi2 == phi1 *x**(n+3)
                          Type: Void

  phi3 == retract(phi2)@(POLY INT)
                          Type: Void

  pans == phi3 ::UP(x,POLY INT)
                          Type: Void

  pans1 == [coefficient(pans, (n+3-i) :: NNI) for i in 2..n+1]
                          Type: Void

  leq == solve(pans1,[subscript(s,[i]) for i in 1..n])
                          Type: Void

Evaluate this for several values of n.

  leq
                          2                                3        2
        s G     3s H + s G  + 6s G     (9s G + 54s )H + s G  + 18s G  + 72s G
         0        0     0       0         0       0      0        0        0
  [[s = ---,s = ------------------,s = --------------------------------------]]
     1   3   2          18          3                    162
                         Type: List List Equation Fraction Polynomial Integer

  n==4
                          Type: Void

  leq
   [
                             2
          s G      3s H + s G  + 6s G
           0         0     0       0
     [s = ---, s = ------------------,
       1   3    2          18
                              3        2
          (9s G + 54s )H + s G  + 18s G  + 72s G
             0       0      0        0        0
      s = --------------------------------------,
       3                    162

       s  =
        4
                  2         2                          4        3         2
             27s H  + (18s G  + 378s G + 1296s )H + s G  + 36s G  + 396s G
                0         0         0         0      0        0         0
           + 
             1296s G
                  0
        /
           1944
       ]
     ]
                         Type: List List Equation Fraction Polynomial Integer

  n==7
                          Type: Void

  leq
   [
                             2
          s G      3s H + s G  + 6s G
           0         0     0       0
     [s = ---, s = ------------------,
       1   3    2          18
                              3        2
          (9s G + 54s )H + s G  + 18s G  + 72s G
             0       0      0        0        0
      s = --------------------------------------,
       3                    162

       s  =
        4
                  2         2                          4        3         2
             27s H  + (18s G  + 378s G + 1296s )H + s G  + 36s G  + 396s G
                0         0         0         0      0        0         0
           + 
             1296s G
                  0
        /
           1944
       ,

       s  =
        5
                               2         3          2
             (135s G + 2268s )H  + (30s G  + 1350s G  + 16416s G + 38880s )H
                  0         0          0          0           0          0
           + 
                5        4          3          2
             s G  + 60s G  + 1188s G  + 9504s G  + 25920s G
              0        0          0          0           0
        /
           29160
       ,

       s  =
        6
                   3          2                        2
             405s H  + (405s G  + 18468s G + 174960s )H
                 0          0           0           0
           + 
                   4          3           2                                6
             (45s G  + 3510s G  + 88776s G  + 777600s G + 1166400s )H + s G
                 0          0           0            0            0      0
           + 
                  5          4           3           2
             90s G  + 2628s G  + 27864s G  + 90720s G
                0          0           0           0
        /
           524880
       ,

       s  =
        7
                                 3
             (2835s G + 91854s )H
                   0          0
           + 
                    3           2                            2
             (945s G  + 81648s G  + 2082996s G + 14171760s )H
                  0           0             0             0
           + 
                   5          4            3             2
             (63s G  + 7560s G  + 317520s G  + 5554008s G  + 34058880s G)H
                 0          0            0             0              0
           + 
                7         6          5           4             3              2
             s G  + 126s G  + 4788s G  + 25272s G  - 1744416s G  - 26827200s G
              0         0          0           0             0              0
           + 
             - 97977600s G
                        0
        /
           11022480
       ]
     ]
                         Type: List List Equation Fraction Polynomial Integer

See Also:
o )show LinearOrdinaryDifferentialOperator
o $AXIOM/doc/src/algebra/lodo.spad.dvi

@
<<domain LODO LinearOrdinaryDifferentialOperator>>=
)abbrev domain LODO LinearOrdinaryDifferentialOperator
++ Author: Manuel Bronstein
++ Date Created: 9 December 1993
++ Date Last Updated: 15 April 1994
++ Keywords: differential operator
++ Description:
++   \spad{LinearOrdinaryDifferentialOperator} defines a ring of
++   differential operators with coefficients in a ring A with a given
++   derivation.
++   Multiplication of operators corresponds to functional composition:
++       \spad{(L1 * L2).(f) = L1 L2 f}
LinearOrdinaryDifferentialOperator(A:Ring, diff: A -> A):
    LinearOrdinaryDifferentialOperatorCategory A
      == SparseUnivariateSkewPolynomial(A, 1, diff) add
        Rep := SparseUnivariateSkewPolynomial(A, 1, diff)

        outputD := "D"@String :: Symbol :: OutputForm

        coerce(l:%):OutputForm == outputForm(l, outputD)
        elt(p:%, a:A):A        == apply(p, 0, a)

        if A has Field then
            import LinearOrdinaryDifferentialOperatorsOps(A, %)

            symmetricProduct(a, b) == symmetricProduct(a, b, diff)
            symmetricPower(a, n)   == symmetricPower(a, n, diff)
            directSum(a, b)        == directSum(a, b, diff)

@
\section{domain LODO1 LinearOrdinaryDifferentialOperator1}
<<LinearOrdinaryDifferentialOperator1.input>>=
-- lodo.spad.pamphlet LinearOrdinaryDifferentialOperator1.input
)spool LinearOrdinaryDifferentialOperator1.output
)set message test on
)set message auto off
)clear all
--S 1 of 20
RFZ := Fraction UnivariatePolynomial('x, Integer)
--R 
--R
--R   (1)  Fraction UnivariatePolynomial(x,Integer)
--R                                                                 Type: Domain
--E 1

--S 2 of 20
x : RFZ := 'x
--R 
--R
--R   (2)  x
--R                               Type: Fraction UnivariatePolynomial(x,Integer)
--E 2

--S 3 of 20
Dx : LODO1 RFZ := D()
--R 
--R
--R   (3)  D
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 3

--S 4 of 20
b : LODO1 RFZ := 3*x**2*Dx**2 + 2*Dx + 1/x
--R 
--R
--R          2 2        1
--R   (4)  3x D  + 2D + -
--R                     x
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 4

--S 5 of 20
a : LODO1 RFZ := b*(5*x*Dx + 7)
--R 
--R
--R           3 3       2        2         7
--R   (5)  15x D  + (51x  + 10x)D  + 29D + -
--R                                        x
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 5

--S 6 of 20
p := x**2 + 1/x**2
--R 
--R
--R         4
--R        x  + 1
--R   (6)  ------
--R           2
--R          x
--R                               Type: Fraction UnivariatePolynomial(x,Integer)
--E 6

--S 7 of 20
(a*b - b*a) p
--R 
--R
--R             4
--R        - 75x  + 540x - 75
--R   (7)  ------------------
--R                 4
--R                x
--R                               Type: Fraction UnivariatePolynomial(x,Integer)
--E 7

--S 8 of 20
ld := leftDivide(a,b)
--R 
--R
--R   (8)  [quotient= 5x D + 7,remainder= 0]
--RType: Record(quotient: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer),remainder: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer))
--E 8

--S 9 of 20
a = b * ld.quotient + ld.remainder
--R 
--R
--R           3 3       2        2         7     3 3       2        2         7
--R   (9)  15x D  + (51x  + 10x)D  + 29D + -= 15x D  + (51x  + 10x)D  + 29D + -
--R                                        x                                  x
--RType: Equation LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 9

--S 10 of 20
rd := rightDivide(a,b)
--R 
--R
--R                                              5
--R   (10)  [quotient= 5x D + 7,remainder= 10D + -]
--R                                              x
--RType: Record(quotient: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer),remainder: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer))
--E 10

--S 11 of 20
a = rd.quotient * b + rd.remainder
--R 
--R
--R            3 3       2        2         7     3 3       2        2         7
--R   (11)  15x D  + (51x  + 10x)D  + 29D + -= 15x D  + (51x  + 10x)D  + 29D + -
--R                                         x                                  x
--RType: Equation LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 11

--S 12 of 20
rightQuotient(a,b)
--R 
--R
--R   (12)  5x D + 7
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 12

--S 13 of 20
rightRemainder(a,b)
--R 
--R
--R               5
--R   (13)  10D + -
--R               x
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 13

--S 14 of 20
leftExactQuotient(a,b)
--R 
--R
--R   (14)  5x D + 7
--RType: Union(LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer),...)
--E 14

--S 15 of 20
e := leftGcd(a,b)
--R 
--R
--R           2 2        1
--R   (15)  3x D  + 2D + -
--R                      x
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 15

--S 16 of 20
leftRemainder(a, e)
--R 
--R
--R   (16)  0
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 16

--S 17 of 20
rightRemainder(a, e)
--R 
--R
--R               5
--R   (17)  10D + -
--R               x
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 17

--S 18 of 20
f := rightLcm(a,b)
--R 
--R
--R            3 3       2        2         7
--R   (18)  15x D  + (51x  + 10x)D  + 29D + -
--R                                         x
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 18

--S 19 of 20
rightRemainder(f, b)
--R 
--R
--R               5
--R   (19)  10D + -
--R               x
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 19

--S 20 of 20
leftRemainder(f, b)
--R 
--R
--R   (20)  0
--RType: LinearOrdinaryDifferentialOperator1 Fraction UnivariatePolynomial(x,Integer)
--E 20
)spool
)lisp (bye)
@

<<LinearOrdinaryDifferentialOperator1.help>>=
====================================================================
LinearOrdinaryDifferentialOperator1 example
====================================================================

LinearOrdinaryDifferentialOperator1(A) is the domain of linear
ordinary differential operators with coefficients in the differential
ring A.

====================================================================
Differential Operators with Rational Function Coefficients
====================================================================

This example shows differential operators with rational function
coefficients.  In this case operator multiplication is non-commutative and,
since the coefficients form a field, an operator division algorithm exists.

We begin by defining RFZ to be the rational functions in x with
integer coefficients and Dx to be the differential operator for d/dx.

  RFZ := Fraction UnivariatePolynomial('x, Integer)
    Fraction UnivariatePolynomial(x,Integer)
                         Type: Domain

  x : RFZ := 'x
    x
                         Type: Fraction UnivariatePolynomial(x,Integer)

  Dx : LODO1 RFZ := D()
    D
                         Type: LinearOrdinaryDifferentialOperator1 
                                 Fraction UnivariatePolynomial(x,Integer)

Operators are created using the usual arithmetic operations.

  b : LODO1 RFZ := 3*x**2*Dx**2 + 2*Dx + 1/x
      2 2        1
    3x D  + 2D + -
                 x
                         Type: LinearOrdinaryDifferentialOperator1 
                                Fraction UnivariatePolynomial(x,Integer)

  a : LODO1 RFZ := b*(5*x*Dx + 7)
       3 3       2        2         7
    15x D  + (51x  + 10x)D  + 29D + -
                                    x
                        Type: LinearOrdinaryDifferentialOperator1 
                                Fraction UnivariatePolynomial(x,Integer)

Operator multiplication corresponds to functional composition.

  p := x**2 + 1/x**2
     4
    x  + 1
    ------
       2
      x
                        Type: Fraction UnivariatePolynomial(x,Integer)

Since operator coefficients depend on x, the multiplication is not
commutative.

  (a*b - b*a) p
         4
    - 75x  + 540x - 75
    ------------------
             4
            x
                        Type: Fraction UnivariatePolynomial(x,Integer)

When the coefficients of operator polynomials come from a field, as in
this case, it is possible to define operator division.  Division on
the left and division on the right yield different results when the
multiplication is non-commutative.

The results of leftDivide and rightDivide are quotient-remainder pairs
satisfying:

  leftDivide(a,b) = [q, r] such that  a = b*q + r
  rightDivide(a,b) = [q, r] such that a = q*b + r

In both cases, the degree of the remainder, r, is less than the degree
of b.

  ld := leftDivide(a,b)
    [quotient= 5x D + 7,remainder= 0]
      Type: Record(quotient: LinearOrdinaryDifferentialOperator1 
                               Fraction UnivariatePolynomial(x,Integer),
                   remainder: LinearOrdinaryDifferentialOperator1 
                               Fraction UnivariatePolynomial(x,Integer))

  a = b * ld.quotient + ld.remainder
       3 3       2        2         7     3 3       2        2         7
    15x D  + (51x  + 10x)D  + 29D + -= 15x D  + (51x  + 10x)D  + 29D + -
      Type: Equation LinearOrdinaryDifferentialOperator1 
                       Fraction UnivariatePolynomial(x,Integer)

The operations of left and right division are so-called because the
quotient is obtained by dividing a on that side by b.

  rd := rightDivide(a,b)
    [quotient= 5x D + 7,remainder= 10D + -]
      Type: Record(quotient: LinearOrdinaryDifferentialOperator1 
                               Fraction UnivariatePolynomial(x,Integer),
                   remainder: LinearOrdinaryDifferentialOperator1 
                               Fraction UnivariatePolynomial(x,Integer))

  a = rd.quotient * b + rd.remainder
       3 3       2        2         7     3 3       2        2         7
    15x D  + (51x  + 10x)D  + 29D + -= 15x D  + (51x  + 10x)D  + 29D + -
     Type: Equation LinearOrdinaryDifferentialOperator1 
                      Fraction UnivariatePolynomial(x,Integer)

Operations rightQuotient and rightRemainder are available if only one
of the quotient or remainder are of interest to you.  This is the
quotient from right division.

  rightQuotient(a,b)
    5x D + 7
     Type: LinearOrdinaryDifferentialOperator1 
             Fraction UnivariatePolynomial(x,Integer)

This is the remainder from right division.  The corresponding "left"
functions, leftQuotient and leftRemainder are also available.

  rightRemainder(a,b)
          5
    10D + -
          x
      Type: LinearOrdinaryDifferentialOperator1 
              Fraction UnivariatePolynomial(x,Integer)

For exact division, operations leftExactQuotient and rightExactQuotient 
are supplied.  These return the quotient but only if the remainder is zero.  
The call rightExactQuotient(a,b) would yield an error.

  leftExactQuotient(a,b)
    5x D + 7
     Type: Union(LinearOrdinaryDifferentialOperator1 
                   Fraction UnivariatePolynomial(x,Integer),...)

The division operations allow the computation of left and right greatest
common divisors, leftGcd and rightGcd via remainder sequences, and 
consequently the computation of left and right least common multiples,
rightLcm and leftLcm.

  e := leftGcd(a,b)
      2 2        1
    3x D  + 2D + -
                 x
     Type: LinearOrdinaryDifferentialOperator1 
             Fraction UnivariatePolynomial(x,Integer)

Note that a greatest common divisor doesn't necessarily divide a and b
on both sides.  Here the left greatest common divisor does not divide
a on the right.

  leftRemainder(a, e)
    0
      Type: LinearOrdinaryDifferentialOperator1 
              Fraction UnivariatePolynomial(x,Integer)

  rightRemainder(a, e)
          5
    10D + -
          x
      Type: LinearOrdinaryDifferentialOperator1 
              Fraction UnivariatePolynomial(x,Integer)

Similarly, a least common multiple is not necessarily divisible from
both sides.

  f := rightLcm(a,b)
       3 3       2        2         7
    15x D  + (51x  + 10x)D  + 29D + -
      Type: LinearOrdinaryDifferentialOperator1 
              Fraction UnivariatePolynomial(x,Integer)

  rightRemainder(f, b)
          5
    10D + -
          x
      Type: LinearOrdinaryDifferentialOperator1 
              Fraction UnivariatePolynomial(x,Integer)

  leftRemainder(f, b)
    0
      Type: LinearOrdinaryDifferentialOperator1 
              Fraction UnivariatePolynomial(x,Integer)

See Also:
o )show LinearOrdinaryDifferentialOperator1
o $AXIOM/doc/src/algebra/lodo.spad.dvi

@
<<domain LODO1 LinearOrdinaryDifferentialOperator1>>=
)abbrev domain LODO1 LinearOrdinaryDifferentialOperator1
++ Author: Manuel Bronstein
++ Date Created: 9 December 1993
++ Date Last Updated: 31 January 1994
++ Keywords: differential operator
++ Description:
++   \spad{LinearOrdinaryDifferentialOperator1} defines a ring of
++   differential operators with coefficients in a differential ring A.
++   Multiplication of operators corresponds to functional composition:
++       \spad{(L1 * L2).(f) = L1 L2 f}
LinearOrdinaryDifferentialOperator1(A:DifferentialRing) ==
  LinearOrdinaryDifferentialOperator(A, differentiate$A)

@
\section{domain LODO2 LinearOrdinaryDifferentialOperator2}
<<LinearOrdinaryDifferentialOperator2.input>>=
-- lodo.spad.pamphlet LinearOrdinaryDifferentialOperator2.input
)spool LinearOrdinaryDifferentialOperator2.output
)set message test on
)set message auto off
)clear all
--S 1 of 26
Q  := Fraction Integer
--R 
--R
--R   (1)  Fraction Integer
--R                                                                 Type: Domain
--E 1

--S 2 of 26
PQ := UnivariatePolynomial('x, Q)
--R 
--R
--R   (2)  UnivariatePolynomial(x,Fraction Integer)
--R                                                                 Type: Domain
--E 2

--S 3 of 26
x: PQ := 'x
--R 
--R
--R   (3)  x
--R                               Type: UnivariatePolynomial(x,Fraction Integer)
--E 3

--S 4 of 26
Dx: LODO2(Q, PQ) := D()
--R 
--R
--R   (4)  D
--RType: LinearOrdinaryDifferentialOperator2(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 4

--S 5 of 26
a := Dx  + 1
--R 
--R
--R   (5)  D + 1
--RType: LinearOrdinaryDifferentialOperator2(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 5

--S 6 of 26
b := a + 1/2*Dx**2 - 1/2
--R 
--R
--R        1  2       1
--R   (6)  - D  + D + -
--R        2          2
--RType: LinearOrdinaryDifferentialOperator2(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 6

--S 7 of 26
p := 4*x**2 + 2/3
--R 
--R
--R          2   2
--R   (7)  4x  + -
--R              3
--R                               Type: UnivariatePolynomial(x,Fraction Integer)
--E 7

--S 8 of 26
a p 
--R 
--R
--R          2        2
--R   (8)  4x  + 8x + -
--R                   3
--R                               Type: UnivariatePolynomial(x,Fraction Integer)
--E 8

--S 9 of 26
(a * b) p = a b p
--R 
--R
--R          2         37    2         37
--R   (9)  2x  + 12x + --= 2x  + 12x + --
--R                     3               3
--R                      Type: Equation UnivariatePolynomial(x,Fraction Integer)
--E 9

--S 10 of 26
c := (1/9)*b*(a + b)^2
--R 
--R
--R          1  6    5  5   13  4   19  3   79  2    7     1
--R   (10)  -- D  + -- D  + -- D  + -- D  + -- D  + -- D + -
--R         72      36      24      18      72      12     8
--RType: LinearOrdinaryDifferentialOperator2(Fraction Integer,UnivariatePolynomial(x,Fraction Integer))
--E 10

--S 11 of 26
(a**2 - 3/4*b + c) (p + 1)
--R 
--R
--R           2   44     541
--R   (11)  3x  + -- x + ---
--R                3      36
--R                               Type: UnivariatePolynomial(x,Fraction Integer)
--E 11
)clear all
--S 12 of 26
PZ := UnivariatePolynomial(x,Integer)
--R 
--R
--R   (1)  UnivariatePolynomial(x,Integer)
--R                                                                 Type: Domain
--E 12

--S 13 of 26
x:PZ := 'x
--R 
--R
--R   (2)  x
--R                                        Type: UnivariatePolynomial(x,Integer)
--E 13

--S 14 of 26
Mat  := SquareMatrix(3,PZ)
--R 
--R
--R   (3)  SquareMatrix(3,UnivariatePolynomial(x,Integer))
--R                                                                 Type: Domain
--E 14

--S 15 of 26
Vect := DPMM(3, PZ, Mat, PZ)
--R 
--R
--R   (4)
--R  DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,Un
--R  ivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer))
--R                                                                 Type: Domain
--E 15

--S 16 of 26
Modo := LODO2(Mat, Vect)
--R 
--R
--R   (5)
--R  LinearOrdinaryDifferentialOperator2(SquareMatrix(3,UnivariatePolynomial(x,Int
--R  eger)),DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatr
--R  ix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer)))
--R                                                                 Type: Domain
--E 16

--S 17 of 26
m:Mat := matrix [ [x^2,1,0],[1,x^4,0],[0,0,4*x^2] ]
--R 
--R
--R        + 2         +
--R        |x   1    0 |
--R        |           |
--R   (6)  |     4     |
--R        |1   x    0 |
--R        |           |
--R        |          2|
--R        +0   0   4x +
--R                        Type: SquareMatrix(3,UnivariatePolynomial(x,Integer))
--E 17

--S 18 of 26
p:Vect := directProduct [3*x^2+1,2*x,7*x^3+2*x]
--R 
--R
--R           2          3
--R   (7)  [3x  + 1,2x,7x  + 2x]
--RType: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer))
--E 18

--S 19 of 26
q: Vect := m * p
--R 
--R
--R           4    2        5     2        5     3
--R   (8)  [3x  + x  + 2x,2x  + 3x  + 1,28x  + 8x ]
--RType: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer))
--E 19

--S 20 of 26
Dx : Modo := D()
--R 
--R
--R   (9)  D
--RType: LinearOrdinaryDifferentialOperator2(SquareMatrix(3,UnivariatePolynomial(x,Integer)),DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer)))
--E 20

--S 21 of 26
a : Modo := Dx  + m
--R 
--R
--R             + 2         +
--R             |x   1    0 |
--R             |           |
--R   (10)  D + |     4     |
--R             |1   x    0 |
--R             |           |
--R             |          2|
--R             +0   0   4x +
--RType: LinearOrdinaryDifferentialOperator2(SquareMatrix(3,UnivariatePolynomial(x,Integer)),DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer)))
--E 21

--S 22 of 26
b : Modo := m*Dx  + 1
--R 
--R
--R         + 2         +
--R         |x   1    0 |    +1  0  0+
--R         |           |    |       |
--R   (11)  |     4     |D + |0  1  0|
--R         |1   x    0 |    |       |
--R         |           |    +0  0  1+
--R         |          2|
--R         +0   0   4x +
--RType: LinearOrdinaryDifferentialOperator2(SquareMatrix(3,UnivariatePolynomial(x,Integer)),DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer)))
--E 22

--S 23 of 26
c := a*b
--R 
--R
--R   (12)
--R   + 2         +     + 4              4    2                  +    + 2         +
--R   |x   1    0 |     |x  + 2x + 2    x  + x            0      |    |x   1    0 |
--R   |           | 2   |                                        |    |           |
--R   |     4     |D  + |   4    2     8     3                   |D + |     4     |
--R   |1   x    0 |     |  x  + x     x  + 4x  + 2        0      |    |1   x    0 |
--R   |           |     |                                        |    |           |
--R   |          2|     |                              4         |    |          2|
--R   +0   0   4x +     +     0            0        16x  + 8x + 1+    +0   0   4x +
--RType: LinearOrdinaryDifferentialOperator2(SquareMatrix(3,UnivariatePolynomial(x,Integer)),DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer)))
--E 23

--S 24 of 26
a p
--R 
--R
--R            4    2        5     2        5     3      2
--R   (13)  [3x  + x  + 8x,2x  + 3x  + 3,28x  + 8x  + 21x  + 2]
--RType: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer))
--E 24

--S 25 of 26
b p
--R 
--R
--R            3     2       4         4     3     2
--R   (14)  [6x  + 3x  + 3,2x  + 8x,84x  + 7x  + 8x  + 2x]
--RType: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer))
--E 25

--S 26 of 26
(a + b + c) (p + q)
--R 
--R
--R   (15)
--R       8      7      6      5      4      3      2
--R   [10x  + 12x  + 16x  + 30x  + 85x  + 94x  + 40x  + 40x + 17,
--R       12      9      8      7     6      5      4      3      2
--R    10x   + 10x  + 12x  + 92x  + 6x  + 32x  + 72x  + 28x  + 49x  + 32x + 19,
--R         8       7        6        5       4       3      2
--R    2240x  + 224x  + 1280x  + 3508x  + 492x  + 751x  + 98x  + 18x + 4]
--RType: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer))
--E 26
)spool
)lisp (bye)
@
<<LinearOrdinaryDifferentialOperator2.help>>=
====================================================================
LinearOrdinaryDifferentialOperator2
====================================================================

LinearOrdinaryDifferentialOperator2(A, M) is the domain of linear
ordinary differential operators with coefficients in the differential
ring A and operating on M, an A-module.  This includes the cases of
operators which are polynomials in D acting upon scalar or vector
expressions of a single variable.  The coefficients of the operator
polynomials can be integers, rational functions, matrices or elements
of other domains.

====================================================================
Differential Operators with Constant Coefficients
====================================================================

This example shows differential operators with rational number
coefficients operating on univariate polynomials.

We begin by making type assignments so we can conveniently refer
to univariate polynomials in x over the rationals.

  Q  := Fraction Integer
    Fraction Integer
                         Type: Domain

  PQ := UnivariatePolynomial('x, Q)
    UnivariatePolynomial(x,Fraction Integer)
                         Type: Domain

  x: PQ := 'x
    x
                         Type: UnivariatePolynomial(x,Fraction Integer)

Now we assign Dx to be the differential operator D corresponding to d/dx.

  Dx: LODO2(Q, PQ) := D()
    D
     Type: LinearOrdinaryDifferentialOperator2(Fraction Integer,
             UnivariatePolynomial(x,Fraction Integer))

New operators are created as polynomials in D().

  a := Dx  + 1
    D + 1
     Type: LinearOrdinaryDifferentialOperator2(Fraction Integer,
             UnivariatePolynomial(x,Fraction Integer))

  b := a + 1/2*Dx**2 - 1/2
    1  2       1
    - D  + D + -
    2          2
      Type: LinearOrdinaryDifferentialOperator2(Fraction Integer,
              UnivariatePolynomial(x,Fraction Integer))

To apply the operator a to the value p the usual function call syntax
is used.

  p := 4*x**2 + 2/3
      2   2
    4x  + -
          3
                     Type: UnivariatePolynomial(x,Fraction Integer)

  a p 
      2        2
    4x  + 8x + -
               3
                     Type: UnivariatePolynomial(x,Fraction Integer)

Operator multiplication is defined by the identity (a*b)p = a(b(p))

  (a * b) p = a b p
      2         37    2         37
    2x  + 12x + --= 2x  + 12x + --
                 3               3
                     Type: Equation UnivariatePolynomial(x,Fraction Integer)

Exponentiation follows from multiplication.

  c := (1/9)*b*(a + b)^2
      1  6    5  5   13  4   19  3   79  2    7     1
     -- D  + -- D  + -- D  + -- D  + -- D  + -- D + -
     72      36      24      18      72      12     8
      Type: LinearOrdinaryDifferentialOperator2(Fraction Integer,
              UnivariatePolynomial(x,Fraction Integer))

Finally, note that operator expressions may be applied directly.

  (a**2 - 3/4*b + c) (p + 1)
       2   44     541
     3x  + -- x + ---
            3      36
                     Type: UnivariatePolynomial(x,Fraction Integer)

====================================================================
Differential Operators with Matrix Coefficients Operating on Vectors}
====================================================================

This is another example of linear ordinary differential operators with
non-commutative multiplication.  Unlike the rational function case,
the differential ring of square matrices (of a given dimension) with
univariate polynomial entries does not form a field.  Thus the number
of operations available is more limited.

In this section, the operators have three by three matrix coefficients
with polynomial entries.

  PZ := UnivariatePolynomial(x,Integer)
    UnivariatePolynomial(x,Integer)
                           Type: Domain

  x:PZ := 'x
    x
                           Type: UnivariatePolynomial(x,Integer)

  Mat  := SquareMatrix(3,PZ)
    SquareMatrix(3,UnivariatePolynomial(x,Integer))
                           Type: Domain

The operators act on the vectors considered as a Mat-module.

  Vect := DPMM(3, PZ, Mat, PZ)
  DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatrix(3,Un
  ivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer))
                           Type: Domain

  Modo := LODO2(Mat, Vect)
  LinearOrdinaryDifferentialOperator2(SquareMatrix(3,UnivariatePolynomial(x,Int
  eger)),DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),SquareMatr
  ix(3,UnivariatePolynomial(x,Integer)),UnivariatePolynomial(x,Integer)))
                           Type: Domain

The matrix m is used as a coefficient and the vectors p and q are
operated upon.

  m:Mat := matrix [ [x^2,1,0],[1,x^4,0],[0,0,4*x^2] ]
        + 2         +
        |x   1    0 |
        |           |
        |     4     |
        |1   x    0 |
        |           |
        |          2|
        +0   0   4x +
                        Type: SquareMatrix(3,UnivariatePolynomial(x,Integer))

  p:Vect := directProduct [3*x^2+1,2*x,7*x^3+2*x]
       2          3
    [3x  + 1,2x,7x  + 2x]
    Type: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
             SquareMatrix(3,UnivariatePolynomial(x,Integer)),
                UnivariatePolynomial(x,Integer))

  q: Vect := m * p
       4    2        5     2        5     3
    [3x  + x  + 2x,2x  + 3x  + 1,28x  + 8x ]
      Type: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
         SquareMatrix(3,UnivariatePolynomial(x,Integer)),
            UnivariatePolynomial(x,Integer))

Now form a few operators.

  Dx : Modo := D()
    D
      Type: LinearOrdinaryDifferentialOperator2(
             SquareMatrix(3,UnivariatePolynomial(x,Integer)),
             DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
             SquareMatrix(3,UnivariatePolynomial(x,Integer)),
             UnivariatePolynomial(x,Integer)))

  a : Modo := Dx  + m
             + 2         +
             |x   1    0 |
             |           |
         D + |     4     |
             |1   x    0 |
             |           |
             |          2|
             +0   0   4x +
    Type: LinearOrdinaryDifferentialOperator2(
             SquareMatrix(3,UnivariatePolynomial(x,Integer)),
             DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
             SquareMatrix(3,UnivariatePolynomial(x,Integer)),
             UnivariatePolynomial(x,Integer)))

  b : Modo := m*Dx  + 1
         + 2         +
         |x   1    0 |    +1  0  0+
         |           |    |       |
         |     4     |D + |0  1  0|
         |1   x    0 |    |       |
         |           |    +0  0  1+
         |          2|
         +0   0   4x +
     Type: LinearOrdinaryDifferentialOperator2(
              SquareMatrix(3,UnivariatePolynomial(x,Integer)),
              DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
              SquareMatrix(3,UnivariatePolynomial(x,Integer)),
              UnivariatePolynomial(x,Integer)))

  c := a*b
  + 2         +     + 4              4    2                  +    + 2         +
  |x   1    0 |     |x  + 2x + 2    x  + x            0      |    |x   1    0 |
  |           | 2   |                                        |    |           |
  |     4     |D  + |   4    2     8     3                   |D + |     4     |
  |1   x    0 |     |  x  + x     x  + 4x  + 2        0      |    |1   x    0 |
  |           |     |                                        |    |           |
  |          2|     |                              4         |    |          2|
  +0   0   4x +     +     0            0        16x  + 8x + 1+    +0   0   4x +
    Type: LinearOrdinaryDifferentialOperator2(
            SquareMatrix(3,UnivariatePolynomial(x,Integer)),
            DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
            SquareMatrix(3,UnivariatePolynomial(x,Integer)),
            UnivariatePolynomial(x,Integer)))

These operators can be applied to vector values.

  a p
        4    2        5     2        5     3      2
     [3x  + x  + 8x,2x  + 3x  + 3,28x  + 8x  + 21x  + 2]
       Type: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
               SquareMatrix(3,UnivariatePolynomial(x,Integer)),
                  UnivariatePolynomial(x,Integer))

  b p
        3     2       4         4     3     2
     [6x  + 3x  + 3,2x  + 8x,84x  + 7x  + 8x  + 2x]
        Type: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
                SquareMatrix(3,UnivariatePolynomial(x,Integer)),
                  UnivariatePolynomial(x,Integer))

  (a + b + c) (p + q)
       8      7      6      5      4      3      2
   [10x  + 12x  + 16x  + 30x  + 85x  + 94x  + 40x  + 40x + 17,
       12      9      8      7     6      5      4      3      2
    10x   + 10x  + 12x  + 92x  + 6x  + 32x  + 72x  + 28x  + 49x  + 32x + 19,
         8       7        6        5       4       3      2
    2240x  + 224x  + 1280x  + 3508x  + 492x  + 751x  + 98x  + 18x + 4]
     Type: DirectProductMatrixModule(3,UnivariatePolynomial(x,Integer),
             SquareMatrix(3,UnivariatePolynomial(x,Integer)),
               UnivariatePolynomial(x,Integer))

See Also:
o )show LinearOrdinaryDifferentialOperator2
o $AXIOM/doc/src/algebra/lodo.spad.dvi

@
<<domain LODO2 LinearOrdinaryDifferentialOperator2>>=
)abbrev domain LODO2 LinearOrdinaryDifferentialOperator2
++ Author: Stephen M. Watt, Manuel Bronstein
++ Date Created: 1986
++ Date Last Updated: 1 February 1994
++ Keywords: differential operator
++ Description:
++   \spad{LinearOrdinaryDifferentialOperator2} defines a ring of
++   differential operators with coefficients in a differential ring A
++   and acting on an A-module M.
++   Multiplication of operators corresponds to functional composition:
++       \spad{(L1 * L2).(f) = L1 L2 f}
LinearOrdinaryDifferentialOperator2(A, M): Exports == Implementation where
  A: DifferentialRing
  M: LeftModule A with 
	differentiate: $ -> $
		++ differentiate(x) returns the derivative of x

  Exports ==> Join(LinearOrdinaryDifferentialOperatorCategory A, Eltable(M, M))

  Implementation ==> LinearOrdinaryDifferentialOperator(A, differentiate$A) add
      elt(p:%, m:M):M ==
        apply(p, differentiate, m)$ApplyUnivariateSkewPolynomial(A, M, %)

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<category LODOCAT LinearOrdinaryDifferentialOperatorCategory>>
<<package LODOOPS LinearOrdinaryDifferentialOperatorsOps>>
<<domain LODO LinearOrdinaryDifferentialOperator>>
<<domain LODO1 LinearOrdinaryDifferentialOperator1>>
<<domain LODO2 LinearOrdinaryDifferentialOperator2>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
