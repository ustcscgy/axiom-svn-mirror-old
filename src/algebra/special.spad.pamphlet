\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra special.spad}
\author{Bruce W. Char, Timothy Daly, Stephen M. Watt}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{package DFSFUN DoubleFloatSpecialFunctions}
<<package DFSFUN DoubleFloatSpecialFunctions>>=
)abbrev package DFSFUN DoubleFloatSpecialFunctions
++ Author: Bruce W. Char, Timothy Daly, Stephen M. Watt
++ Date Created:  1990
++ Date Last Updated: Jan 19, 2008
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ Examples:
++ References:
++ Description:
++   This package provides special functions for double precision
++   real and complex floating point.

DoubleFloatSpecialFunctions(): Exports == Impl where
    NNI ==> NonNegativeInteger
    PI  ==> Integer
    R   ==> DoubleFloat
    C   ==> Complex DoubleFloat
    OPR ==> OnePointCompletion R

    Exports ==> with
        Gamma: R -> R
         ++ Gamma(x) is the Euler gamma function, \spad{Gamma(x)}, defined by
         ++   \spad{Gamma(x) = integrate(t^(x-1)*exp(-t), t=0..%infinity)}.
        Gamma: C -> C
         ++ Gamma(x) is the Euler gamma function, \spad{Gamma(x)}, defined by
         ++   \spad{Gamma(x) = integrate(t^(x-1)*exp(-t), t=0..%infinity)}.

        E1: R -> OPR
	 ++ E1(x) is the Exponential Integral function
         ++ The current implementation is a piecewise approximation
         ++ involving one poly from -4..4 and a second poly for x > 4

        En: (PI,R) -> OPR
         ++ En(n,x) is the nth Exponential Integral Function

        Ei: (OPR) -> OPR
         ++ Ei is the Exponential Integral function
         ++ This is computed using a 6 part piecewise approximation.
         ++ DoubleFloat can only preserve about 16 digits but the
         ++ Chebyshev approximation used can give 30 digits.

        Ei1: (OPR) -> OPR
         ++ Ei1 is the first approximation of Ei where the result is
         ++ x*%e^-x*Ei(x) from -infinity to -10 (preserves digits)

        Ei2: (OPR) -> OPR
         ++ Ei2 is the first approximation of Ei where the result is
         ++ x*%e^-x*Ei(x) from -10 to -4 (preserves digits)

        Ei3: (OPR) -> OPR
         ++ Ei3 is the first approximation of Ei where the result is
         ++ (Ei(x)-log |x| - gamma)/x from -4 to 4 (preserves digits)

        Ei4: (OPR) -> OPR
         ++ Ei4 is the first approximation of Ei where the result is
         ++ x*%e^-x*Ei(x) from 4 to 12 (preserves digits)

        Ei5: (OPR) -> OPR
         ++ Ei5 is the first approximation of Ei where the result is
         ++ x*%e^-x*Ei(x) from 12 to 32 (preserves digits)

        Ei6: (OPR) -> OPR
         ++ Ei6 is the first approximation of Ei where the result is
         ++ x*%e^-x*Ei(x) from 32 to infinity (preserves digits)

        Beta: (R, R) -> R
         ++ Beta(x, y) is the Euler beta function, \spad{B(x,y)}, defined by
         ++   \spad{Beta(x,y) = integrate(t^(x-1)*(1-t)^(y-1), t=0..1)}.
         ++ This is related to \spad{Gamma(x)} by
         ++   \spad{Beta(x,y) = Gamma(x)*Gamma(y) / Gamma(x + y)}.
        Beta: (C, C) -> C
         ++ Beta(x, y) is the Euler beta function, \spad{B(x,y)}, defined by
         ++   \spad{Beta(x,y) = integrate(t^(x-1)*(1-t)^(y-1), t=0..1)}.
         ++ This is related to \spad{Gamma(x)} by
         ++   \spad{Beta(x,y) = Gamma(x)*Gamma(y) / Gamma(x + y)}.

        logGamma: R -> R
         ++ logGamma(x) is the natural log of \spad{Gamma(x)}.
         ++ This can often be computed even if \spad{Gamma(x)} cannot.
        logGamma: C -> C
         ++ logGamma(x) is the natural log of \spad{Gamma(x)}.
         ++ This can often be computed even if \spad{Gamma(x)} cannot.

        digamma: R -> R
         ++ digamma(x) is the function, \spad{psi(x)}, defined by
         ++   \spad{psi(x) = Gamma'(x)/Gamma(x)}.
        digamma: C -> C
         ++ digamma(x) is the function, \spad{psi(x)}, defined by
         ++   \spad{psi(x) = Gamma'(x)/Gamma(x)}.

        polygamma: (NNI, R) -> R
         ++ polygamma(n, x) is the n-th derivative of \spad{digamma(x)}.
        polygamma: (NNI, C) -> C
         ++ polygamma(n, x) is the n-th derivative of \spad{digamma(x)}.

        besselJ: (R,R) -> R
         ++ besselJ(v,x) is the Bessel function of the first kind,
         ++ \spad{J(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.
        besselJ: (C,C) -> C
         ++ besselJ(v,x) is the Bessel function of the first kind,
         ++ \spad{J(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.

        besselY: (R, R) -> R
         ++ besselY(v,x) is the Bessel function of the second kind,
         ++ \spad{Y(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.
         ++ Note: The default implementation uses the relation
         ++   \spad{Y(v,x) = (J(v,x) cos(v*%pi) - J(-v,x))/sin(v*%pi)}
         ++ so is not valid for integer values of v.
        besselY: (C, C) -> C
         ++ besselY(v,x) is the Bessel function of the second kind,
         ++ \spad{Y(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.
         ++ Note: The default implementation uses the relation
         ++   \spad{Y(v,x) = (J(v,x) cos(v*%pi) - J(-v,x))/sin(v*%pi)}
         ++ so is not valid for integer values of v.

        besselI: (R,R) -> R
         ++ besselI(v,x) is the modified Bessel function of the first kind,
         ++ \spad{I(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.
        besselI: (C,C) -> C
         ++ besselI(v,x) is the modified Bessel function of the first kind,
         ++ \spad{I(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.

        besselK: (R, R) -> R
         ++ besselK(v,x) is the modified Bessel function of the second kind,
         ++ \spad{K(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.
         ++ Note: The default implementation uses the relation
         ++   \spad{K(v,x) = %pi/2*(I(-v,x) - I(v,x))/sin(v*%pi)}.
         ++ so is not valid for integer values of v.
        besselK: (C, C) -> C
         ++ besselK(v,x) is the modified Bessel function of the second kind,
         ++ \spad{K(v,x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.
         ++ Note: The default implementation uses the relation
         ++   \spad{K(v,x) = %pi/2*(I(-v,x) - I(v,x))/sin(v*%pi)}
         ++ so is not valid for integer values of v.

        airyAi:   C -> C
         ++ airyAi(x) is the Airy function \spad{Ai(x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{Ai''(x) - x * Ai(x) = 0}.
        airyAi:   R -> R
         ++ airyAi(x) is the Airy function \spad{Ai(x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{Ai''(x) - x * Ai(x) = 0}.

        airyBi:   R -> R
         ++ airyBi(x) is the Airy function \spad{Bi(x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{Bi''(x) - x * Bi(x) = 0}.
        airyBi:   C -> C
         ++ airyBi(x) is the Airy function \spad{Bi(x)}.
         ++ This function satisfies the differential equation:
         ++   \spad{Bi''(x) - x * Bi(x) = 0}.

        hypergeometric0F1: (R, R) -> R
         ++ hypergeometric0F1(c,z) is the hypergeometric function
         ++ \spad{0F1(; c; z)}.
        hypergeometric0F1: (C, C) -> C
         ++ hypergeometric0F1(c,z) is the hypergeometric function
         ++ \spad{0F1(; c; z)}.


    Impl ==> add
        a, v, w, z: C
        n, x, y: R

        -- These are hooks to Bruce's boot code.
        Gamma z         == CGAMMA(z)$Lisp
        Gamma x         == RGAMMA(x)$Lisp

@
\section{The Exponential Integral}
\subsection{The E1 function}
(Quoted from Segletes\cite{2}):

A number of useful integrals exist for which no exact solutions have
been found. In other cases, an exact solution, if found, may be
impractical to utilize over the complete domain of the function
because of precision limitations associated with what usually ends up
as a series solution to the challenging integral. For many of these
integrals, tabulated values may be published in various mathematical
handbooks and articles. In some handbooks, fits (usually piecewise)
also are offered. In some cases, an application may be forced to
resort to numerical integration in order to acquire the integrated
function. In this context, compact ({\sl i.e.} not piecewise)
analytical fits to some of these problematic integrals, accurate to
within a small fraction of the numerically integrated value, serve as
a useful tool to applications requiring the results of the
integration, especially when the integration is required numerous
times throughout the course of the application. Furthermore, the
ability and methodology to develop intelligent fits, in contract to
the more traditional ``brute force'' fits, provide the means to
minimize parameters and maximize accuracy when tackling some of these
difficult functions. The exponential integral will be used as an
opportunity to both demonstrate a methodology for intelligent fitting
as well as for providing an accurate, compact, analytical fit to the
exponential integral.

The exponential integral is a useful class of functions that arise in
a variety of applications [...]. The real branch of the family of
exponential integrals may be defined as
\begin{equation}
E_n(x)=x^{n-1}\int_x^\infty{\frac{e^{-t}}{t^n}\ dt}
\end{equation}
where $n$, a positive integer, denotes the specific member of the
exponential integral family. The argument of the exponential integral,
rather than expressing a lower limit of integration as in (1),
may be thought of as describing the exponential decay
constant, as given in this equivalent (and perhaps more popular)
definition of the integral:
\begin{equation}
E_n(x)=\int_1^\infty{\frac{e^{-xt}}{t^n}\ dt}
\end{equation}

Integration by parts permits any member of the exponential integral
family to be converted to an adjacent member of the family, by way of 
\begin{equation}
\int_x^\infty{\frac{e^{-t}}{t^{n+1}}\ dt}=\frac{1}{n}
\left(
\frac{e^{-x}}{x^n}-\int_x^\infty{\frac{e^{-t}}{t^n}\ dt}
\right)
\end{equation}
expressable in terms of $E_n$ as
\begin{equation}
E_{n+1}(x)=\frac{1}{n}\left[e^{-x}-xE_n(x)\right]\ (n=1,2,3)
\end{equation}

Through recursive employment of this equation, all members of the
exponential integral family may be analytically related. However, this
technique only allows for the transformation of one integral into
another. There remains the problem of evaluating $E_1(x)$. There is an
exact solution to the integral of $(e^{-t}/t)$, appearing in a number
of mathematical references \cite{4,5} which is obtainable by
expanding the exponential into a power series and integrating term by
term. That exact solution, which is convergent, may be used to specify
$E_1(x)$ as 
\begin{equation}
E_1(x)=-\gamma-ln(x)
+\frac{x}{1!}
-\frac{x^2}{2\cdot 2!}
+\frac{x^3}{3\cdot 3!}
-\ldots
\end{equation}

Euler's constant, $\gamma$, equal to $0.57721\ldots$, arises when the
power series expansion for $(e^{-t}/t)$ is integrated and evaluated at
its upper limit, as $x\rightarrow\infty$\cite{6}.

Employing eqn (5), however, to evaluate $E_1(x)$ is problematic for
finite $x$ significantly larger than unity. One may well ask of the
need to evaluate the exponential integral for large $x$, since the
function to be integrated drops off so rapidly that the integral is
surely a very flat function. Such reasoning is true when comparing the
integrand at large $x$ to that at small $x$. However, the definition
of eqn (1) has as its upper limit not a small value of $x$, but rather
that of $\infty$. Therefore, the actual values for $E_n(x)$ are
extremely small numbers for large values of $x$. Thus, it is not
sufficient merely to select enough terms of eqn (5) to evaluate the
integral to within a value of, for example $\pm 0.0001$ because the
actual integral value for large $x$ would be smaller than this
arbitrary tolerance. To draw an analogy, it would be like saying that
it is good enough to approximate $e^{-x}$ as 0.0 for $x>10$, since its
actual value is within 0.0001 of zero. For some applications, such an
approximation may be warranted. In general, though, such an
approximation is mathematically unacceptable. Worse yet, as seen from
eqns (1) and (2), the need to evaluate the exponential integral for
large arguments can arise in real-world problems from either a large
integraion limit or a large value of an exponential decay
constant. Thus, the need to evaluate exponential integrals for large
values of the argument is established. It is here that the practical
problems with the evaluation of eqn (5) become manifest.

First, the number of terms, $N$, required to achieve convergence rises
rapidly with increasing $x$, making the summation an inefficient tool,
even when expressed as a recursion relation (for three digits of
accuracy, $N$ is observed to vary roughly as $9+1.6x$, for $1<x<7$).
More important, however, is the fact that, for calculations of finite
precision, the accuracy of the complete summation will be governed by
the individual term of greatest magnitude. The source of the problem
is that as $x$ is increased, the total summation decreases in
magnitude more rapidly than a decaying exponential, while at the same
time, the largest individual term in the series is observed to grow
rapidly with increasing $x$ (
$\tilde{}10^1$ for $x=7$, 
$\tilde{}10^2$ for $x=10$, 
$\tilde{}10^3$ for $x=13$, {\sl etc.}). The magnitude of this largest
individual term consumes the available precision and, as a result,
leaves little or none left for the ever-diminishing net sum that
constitutes the desired integral.

Literally, the use of eqn (5), even with (32-bit) double precision,
does not permit the exponential integral to be evaluated to three
places for $x>14$ in any case, and with the situation worsening for
lesser precision. For these reasons, the use of eqn (5) to evaluate
the exponential integral numerically for large $x$ is wholly
unsuitable.

\begin{equation}
E_1(x)=e^{-x}\cdot
\frac{1}{\displaystyle x+
\frac{1}{\displaystyle 1+
\frac{1}{\displaystyle x+
\frac{2}{\displaystyle 1+
\frac{2}{\displaystyle x+\ldots}}}}}
\end{equation}

But as $x$ becomes smaller, the number of terms required for
convergence rises quickly. Similar arguments apply for the use of an
asymptotic expansion for $E_1$, which also converges for large $x$. As
such, the more typical approach employed by handbooks is that of a
fit. While some steps are taken to make the fits intelligent ({\sl
e.g.}, transformation of variables), the fits are all piecewise over
the domain of the integral.

Cody and Thatcher \cite{7} performed what is perhaps the definitive
work, with the use of Chebyshev\cite{18,19} approximations to the exponential 
integral $E_1$. Like others, they fit the integral over a piecewise
series of subdomains (three in their case) and provide the fitting
parameters necessary to evaluate the function to various required
precisions, down to relative errors of $10^-20$. One of the problems
with piecewise fitting over two or more subdomains is that functional
value and derivatives of the spliced fits will not, in general, match
at the domain transition point, unless special accomodations are
made. This sort of discontinuity in functional value and/or slope,
curvature, {\sl etc.}, may cause difficulties for some numerical
algorithms operating upon the fitted function. Numerical
splicing/smoothing algorithms aimed at eliminating discontinuities in
the value and/or derivatives of a piecewise fit are not, in general,
computationally insignificant. Problems associated with piecewise
splicing of fits may also be obviated by obtaining an accurate enough
fit, such that the error is on the order of magnitude of the limiting
machine precision. This alternative, however, requires the use of
additional fitting parameters to acquire the improved precision. Thus,
regardless of approach, the desire to eliminate discontinuities in the
function and its derivatives, between piecewise splices, requires
extra computational effort. One final benefit to be had by avoiding
the use of piecewise fits is the concomitant avoidance of conditional
({\sl i.e.}, IF...THEN) programming statements in the coding of the
routine. The use of conditional statements can preclude maximum
computing efficiency on certain parallel computing architectures.

Segletes constructs an analytic, non-piecewise fit to the Exponential
Integral but the precision is on the order of 4 decimal places and is
not sufficient to compare against the Abramowitz and Stegun Handbook.

Instead we have chosen to use a two piece fitting function based on
the Chebyshev polynomial for computing $E_1$. This agrees with the
handbook values to almost the last published digit. See the {\tt e1.input}
pamphlet for regression testing against the handbook tables.

\subsection{E1:R$\rightarrow$OPR}
The special function E1 below was originally derived from a function
written by T.Haavie as the {\tt expint.c} function in the Numlibc library
by Lars Erik Lund. Haavie approximates the E1 function by two 
Chebyshev polynomials. For the range $-4 < x < 4$ the Chebyshev
coefficients are:
\begin{verbatim}
 7.8737715392882774, -8.0314874286705335,  3.8797325768522250,
-1.6042971072992259,  0.5630905453891458, -0.1704423017433357,
 0.0452099390015415, -0.0106538986439085,  0.0022562638123478,
-0.0004335700473221,  0.0000762166811878, -0.0000123417443064,
 0.0000018519745698, -0.0000002588698662,  0.0000000338604319,
-0.0000000041611418,  0.0000000004821606, -0.0000000000528465,
 0.0000000000054945, -0.0000000000005433,  0.0000000000000512,
-0.0000000000000046,  0.0000000000000004 
\end{verbatim}
and for the range $x > 4$ the Chebyshev coefficients are:
\begin{verbatim}
 0.2155283776715125,  0.1028106215227030, -0.0045526707131788,
 0.0003571613122851, -0.0000379341616932,  0.0000049143944914,
-0.0000007355024922,  0.0000001230603606, -0.0000000225236907,
 0.0000000044412375, -0.0000000009328509,  0.0000000002069297,
-0.0000000000481502,  0.0000000000116891, -0.0000000000029474,
 0.0000000000007691, -0.0000000000002070,  0.0000000000000573,
-0.0000000000000163,  0.0000000000000047, -0.0000000000000014,
 0.0000000000000004, -0.0000000000000001
\end{verbatim}

I've rewritten the polynomial to use precomputed coefficients
that take into account the scaling used by Haavie. I've also
rewritten the polynomial using Horner's method so the large
powers of $x$ are only computed once.

The result can be either a double float or, or if the argument
is zero, infinity. Thus we need to extend the result to be a
one-point completion to include infinity.

<<package DFSFUN DoubleFloatSpecialFunctions>>=
        E1(x:R):OPR ==
         x = 0.0::R => infinity()
         x > 4.0::R =>
          t1:R:=0.14999948967737774608E-15::R
          t2:R:=0.9999999999993112::R
          ta:R:=(t1*x+t2)
          t3:R:=0.99999999953685760001::R
          tb:R:=(ta*x-t3)
          t4:R:=1.9999998808293376::R
          tc:R:=(tb*x+t4)
          t5:R:=5.999983407661056::R
          td:R:=(tc*x-t5)
          t6:R:=23.9985380938481664::R
          te:R:=(td*x+t6)
          t7:R:=119.9108830382784512::R
          tf:R:=(te*x-t7)
          t8:R:=716.01351020920176641::R
          tg:R:=(tf*x+t8)
          t9:R:=4903.3466623370985473::R
          th:R:=(tg*x-t9)
          t10:R:=36601.25841454446674::R
          ti:R:=(th*x+t10)
          t11:R:=279913.28608482691646::R
          tj:R:=(ti*x-t11)
          t12:R:=2060518.7020296525186::R
          tk:R:=(tj*x+t12)
          t13:R:=13859772.093039815059::R
          tl:R:=(tk*x-t13)
          t14:R:=81945572.630072918857::R
          tm:R:=(tl*x+t14)
          t15:R:=413965714.82128317479::R
          tn:R:=(tm*x-t15)
          t16:R:=1747209536.2595547568::R
          to:R:=(tn*x+t16)
          t17:R:=6036182333.96179427::R
          tp:R:=(to*x-t17)
          t18:R:=16693683576.106267572::R
          tq:R:=(tp*x+t18)
          t19:R:=35938625644.58286097::R
          tr:R:=(tq*x-t19)
          t20:R:=57888657293.609258888::R
          ts:R:=(tr*x+t20)
          t21:R:=65523779423.11290127::R
          tt:R:=(ts*x-t21)
          t22:R:=46422751473.201760309::R
          tu:R:=(tt*x+t22)
          t23:R:=15474250491.067253436::R
          tv:R:=(tu*x-t23)
          tw:R:=(-1.0::R*x)
          tx:R:=exp(tw)
          ty:R:=tv*tx
          tz:R:=x**22
          taz:R:=ty/tz
          taz::OPR
         x > -4.0::R => 
          a1:R:=0.476837158203125E-22::R
          a2:R:=0.10967254638671875E-20::R
          aa:R:=(-a1*x+a2)
          a3:R:=0.20217895507812500001E-19::R
          ab:R:=(aa*x-a3)
          a4:R:=0.42600631713867187501E-18::R
          ac:R:=(ab*x+a4)
          a5:R:=0.868625640869140625E-17::R
          ad:R:=(ac*x-a5)
          a6:R:=0.16553192138671875E-15::R
          ae:R:=(ad*x+a6)
          a7:R:=0.29870208740234375E-14::R
          af:R:=(ae*x-a7)
          a8:R:=0.5097890777587890625E-13::R
          ag:R:=(af*x+a8)
          a9:R:=0.81934069213867187499E-12::R
          ah:R:=(ag*x-a9)
          a10:R:=0.1235313123779296875E-10::R
          ai:R:=(ah*x+a10)
          a11:R:=0.1739729620849609375E-9::R
          aj:R:=(ai*x-a11)
          a12:R:=0.22774642697021484375E-8::R
          ak:R:=(aj*x+a12)
          a13:R:=0.275573192853515625E-7::R
          al:R:=(ak*x-a13)
          a14:R:=0.30619243635087890625E-6::R
          am:R:=(al*x+a14)
          a15:R:=0.000003100198412519140625::R
          an:R:=(am*x-a15)
          a16:R:=0.00002834467120045546875::R
          ao:R:=(an*x+a16)
          a17:R:=0.00023148148148176953125::R
          ap:R:=(ao*x-a17)
          a18:R:=0.0016666666666686609375::R
          aq:R:=(ap*x+a18)
          a19:R:=0.01041666666666646875::R
          ar:R:=(aq*x-a19)
          a20:R:=0.055555555555554168751::R
          as:R:=(ar*x+a20)
          a21:R:=0.2500000000000000375::R
          at:R:=(as*x-a21)
          a22:R:=1.000000000000000325::R
          au:R:=(at*x+a22)
          a23:R:=0.5772156649015328::R
          av:R:=au*x-a23
          aw:R:=- 1.0::R*log(abs(x)) + av
          aw::OPR
         error "E1: no approximation available"
@
\subsection{En:(PI,R)$\rightarrow$OPR}
The $E_n$ function is computed using the recurrence relation:
$$E_{n+1}(z)=\frac{1}{n}\left(e^{-z}-zE_n(z)\right)\ \ \ (n=1,2,3,\ldots)$$

The base case of the recursion depends on E1 above.

The formula is 5.1.14 in Abramowitz and Stegun, 1965, p229\cite{4}.
<<package DFSFUN DoubleFloatSpecialFunctions>>=
        En(n:PI,x:R):OPR == 
          n=1 => E1(x) 
          v:R:=retract(En((n-1)::PI,x))
          w:R:=1/(n-1)*(exp(-x)-x*v)
          w::OPR

@
\section{The Ei Function}
This function is based on Kin L. Lee's work\cite{8}. See also \cite{21}.
\subsection{Abstract}
The exponential integral Ei(x) is evaluated via Chebyshev series
expansion of its associated functions to achieve high relative
accuracy throughout the entire real line. The Chebyshev coefficients
for these functions are given to 30 significant digits. Clenshaw's\cite{20}
method is modified to furnish an efficient procedure for the accurate
solution of linear systems having near-triangular coefficient
matrices.
\subsection{Introduction}
The evaulation of the exponential integral
\begin{equation}
Ei(x)=\int_{-\infty}^{X}{\frac{e^u}{u}}\ du=-E_1(-x), x \ne 0
\end{equation}
is usually based on the value of its associated functions, for
example, $xe^{-x}Ei(x)$. High accuracy tabulations of integral (1) by
means of Taylor series techniques are given by Harris \cite{9} and
Miller and Hurst \cite{10}. The evaluation of $Ei(x)$ for
$-4 \le x \le \infty$ by means of Chebyshev series is provided by
Clenshaw \cite{11} to have the absolute accuracy of 20 decimal
places. The evaluation of the same integral (1) by rational
approximation of its associated functions is furnished by Cody and
Thacher \cite{12,13} for $-\infty < x < \infty$, and has the relative
accuracy of 17 significant figures.

The approximation of Cody and Thacher from the point of view of
efficient function evaluation are preferable to those of
Clenshaw. However, the accuracy of the latter's procedure, unlike
those of the former, is not limited by the accuracy or the
availability of a master function, which is a means of explicitly
evaluating the function in question.

In this paper $Ei(x)$ (or equivalently $-E_1(-x)$) for the entire real
line is evaluted via Chebyshev series expansion of its associated
functions that are accurate to 30 significant figures by a
modification of Clenshaw's procedure. To verify the accuracy of the
several Chebyshev series, values of the associated functions were
checked against those computed by Taylor series and those of Murnaghan
and Wrench \cite{14} (see Remarks on Convergence and Accuracy).

Although for most purposes fewer than 30 figures of accuracy are
required, such high accuracy is desirable for the following
reasons. In order to further reduce the number of arithmetical
operations in the evaluation of a function, the Chebyshev series in
question can either be converted into a rational function or
rearranged into an ordinary polynomial. Since several figures may be
lost in either of these procedures, it is necessary to provide the
Chebyshev series with a sufficient number of figures to achieve the
desired accuracy. Furthermore, general function approximation
routines, such as those used for minimax rational function
approximations, require the explicit evaluation of the function to be
approximated. To take account of the errors commited by these
routines, the function values must have an accuracy higher than the
approximation to be determined. Consequently, high-precision results
are useful as a master function for finding approximations for (or
involving) $Ei(x)$ (e.g. \cite{12,13}) where prescribed accuracy is
less than 30 figures.

\subsection{Discussion}

It is proposed here to provide for the evaluation of $Ei(x)$ by
obtaining Chebyshev coefficients for the associated functions given by
table 1.

\noindent
{\bf Table 1}: Associated Functions of $Ei(x)$ and their ranges of Chebyshev
Series Expansions

\begin{tabular}{clc}
& Associated function & Range of expansion\\
Ei1 & $xe^{-x}Ei(x)$ & $-\infty < x \le -10$\\
Ei2 & $xe^{-x}Ei(x)$ & $-10 \le x \le -4$\\
Ei3 & $\frac{Ei(x)-log\vert x\vert - \gamma}{x}$ & $-4 \le x \le d42$\\
Ei4 & $xe^{-x}Ei(x)$ & $4 \le x \le 12$\\
Ei5 & $xe^{-x}Ei(x)$ & $12 \le x \le 32$\\
Ei6 & $xe^{-x}Ei(x)$ & $32 \le x < \infty$\\
\end{tabular}\\
\hbox{\hskip 2cm}($\gamma$ = 0.5772156649... is Euler's constant.)

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        Ei(y:OPR):OPR ==
          infinite? y => 1
          x:R:=retract(y)
          x < -10.0::R => 
            ei:R:=retract(Ei1(y))
            (ei/(x*exp(-x)))::OPR
          x <  -4.0::R =>
            ei:R:=retract(Ei2(y))
            (ei/(x*exp(-x)))::OPR
          x <   4.0::R => 
            ei3:R:=retract(Ei3(y))
            gamma:R:=0.577215664901532860606512090082::R
            (ei3*x+log(abs(x))+gamma)::OPR
          x <  12.0::R => 
            ei:R:=retract(Ei4(y))
            (ei/(x*exp(-x)))::OPR
          x <  32.0::R => 
            ei:R:=retract(Ei5(y))
            (ei/(x*exp(-x)))::OPR
          ei:R:=retract(Ei6(y))
          (ei/(x*exp(-x)))::OPR

@
Note that the functions $[Ei(x)-log\vert x\vert - \gamma]/x$ and
$xe^{-x}Ei(x)$ have the limiting values of unity at the origin and at
infinity, respectively, and that the range of the associated function
values is close to unity (see table 4). This makes for the evaluation
of the associated functions over the indicated ranges in table 1 (and
thus $Ei(x)$ over the entire real line) with high relative accuracy by
means of the Chebyshev series. The reason for this will become
apparent later.

Some remarks about the choice of the intervals of expansion for the
serveral Chebyshev series are in order here. The partition of the real
line indicated by table 1 is chosen to allow for the approximation of
the associated functions with a maximum error of $0.5\times 10^{-30}$
by polynomials of degress $< 50$. The real line has also been
partitioned with the objective of providing the interval about zero
with the lowest degree of polynomial approximation of the six
intervals. This should compensate for the computation of 
$log\vert x\vert$ required in the evaluation of $Ei(x)$ over that
interval. The ranges $-\infty < x \le -4$ and $4 \le x < \infty$ are
partitioned into 2 and 3 intervals, respectively, to provide
approximations to $xe^{-x}Ei(x)$ by polynomials of about the same
degree. 

\subsection{Expansions in Chebyshev Series}

Let $\phi(t)$ be a differentiable function defined on [-1,1]. To
facilitate discussion, denote its Chebyshev series and that of its
derivative by 
\begin{equation}
\phi(t)=\sum_{k=0}^{\infty}\ ^{'}{A_k^{(0)}T_k(t)}\quad
\phi^{'}(t)=\sum_{k=0}^{\infty}\ ^{'}{A_k^{(1)}T_k(t)}
\end{equation}
where $T_k(t)$ are Chebyshev polynomials defined by
\begin{equation}
T_k(t)=cos(k\ \arccos\ t),\quad -1 \le t \le 1
\end{equation}
(A prime over a summation sign indicates that the first term is to be
halved.) 

If $\phi(t)$ and $\phi^{'}(t)$ are continuous, the Chebyshev
coefficients $A_k^{(0)}$ and $A_k^{(1)}$ can be obtained analytically
(if possible) or by numerical quadrature. However, since each function
in table 1 satisfies a linear differential equation with polynomial
coefficients, the Chebyshev coefficients can be more readily evaluated
by the method of Clenshaw \cite{16}.

There are several variations of Clenshaw's procedure (see,
e.g. \cite{17}), but for high-precision computation, where multiple
precision arithmetic is employed, we find his original procedure
easiest to implement. However, straightforward application of it may
result in a loss of accuracy if the trial solutions selected are not
sufficiently independent. How the difficulty is overcome will be
pointed out subsequently.

\subsection{The function $xe^{-x}Ei(x)$ on the Finite Interval}

We consider first the Chebyshev series expansion of
\begin{equation}
f(x)=xe^{-x}Ei(x),\quad (a \le x \le b)
\end{equation}
with $x\ne 0$. One can easily verify that after the change of
variables
\begin{equation}
x=[(b-a)T + a + b]/2,\quad(-1 \le t \le 1)
\end{equation}
the function
\begin{equation}
\phi(t)=f\left[\frac{(b-a)t + a + b}{2}\right]=f(x)
\end{equation}
satisfies the differential equation
\begin{equation}
2(pt+q)\phi^{'}(t)+p(pt+q-2)\phi(t)=p(pt+q)
\end{equation}
with\footnote{The value of $Ei(a)$ may be evaluated by means of the
Taylor series. In this report $Ei(a)$ is computed by first finding the
Chebyshev series approximation to $[Ei(x)-log\vert x\vert-\gamma]/x$
to get $Ei(a)$. The quantities $e^a$ and $\log\vert a\vert$ for
integral values of $a$ may be found in existing tables}
\begin{equation}
\phi(-1)=ae^{-a}Ei(a)
\end{equation}
where $p=b-a$ and $q=b+a$. Replacing $\phi(t)$ and $\phi^{'}(t)$ in
equations 7 by their Chebyshev series, we obtain
\begin{equation}
\sum_{k=0}^{\infty}\ ^{'}{(-1)^kA_k^{(0)}}=\phi(-1)
\end{equation}
\begin{equation}
2\sum_{k=0}^{\infty}\ {'}{A_k^{(1)}(pt+q)T_k(t)}+
p\sum_{k=0}^{\infty}\ {'}{A_k^{(0)}(pt+q-2)T_k(t)}=
p(pt+q)
\end{equation}
It can be demonstrated that if $B_k$ are the Chebyshev coefficients of
a function $\Psi(t)$, then $C_k$, the Chebyshev coefficients of
$t^r\Psi(t)$ for positive integers r, are given by \cite{16}
\begin{equation}
C_k=2^{-r}\sum_{i=0}^r\binom{r}{i}B_{\vert k-r+2i\vert}
\end{equation}
Consequently, the left member of equation 15 can be rearranged into a
single series involving $T_k(t)$. The comparison of the coefficients
of $T_k(t)$ that yields the infinite system of equations
\begin{equation}
\left.
\begin{array}{c}
\displaystyle\sum_{k=0}^{\infty}\ ^{'}{(-1)^kA_k^{(0)}} = \phi(-1)\\
\\
2pA_{\vert k-1\vert}^{(1)}+
4qA_k^{(1)}+
2pA_{k+1}^{(1)}+
p^2A_{\vert k-1\vert}^{(0)}+
2p(q-2)A_k^{(0)}+
p^2A_{k+1}^{(0)}\\
\\
=\left\{
\begin{array}{rcl}
4pq & , & k=0\\
2p^2 & , & k=1\\
0 & , & k=2,3,\ldots
\end{array}
\right.
\end{array}
\right\}
\end{equation}
The relation \cite{16}
\begin{equation}
2kA_k^{(0)}=A_{k-1}^{(1)}-A_{k+1}^{(1)}
\end{equation}
can be used to reduce equation 18 to a system of equations involving
only $A_k^{(0)}$. Thus, replacing $k$ of equations 18 by $k+2$ and
subtracting the resulting equation from equations 18, we have, by
means of equation 19, the system of equations
\begin{equation}
\left.
\begin{array}{c}
\displaystyle\sum_{k=0}^{\infty}\ ^{'}{(-1)^kA_k^{(0)}} = \phi(-1)\\
\\
2p(q-2)A_0+(8q+p^2)A_1+2p(6-q)A_2-p^2A_3=4pq\\
\\
p^2A_{k-1}+2p(2k+q-2)A_k+8q(k+1)A_{k+1}+2p(2k-q+6)A_{k+2}-p^2A_{k+3}\\
\\
=\left\{
\begin{array}{rcl}
2p^2 & , & k=1\\
0 & , & k=2,3,\ldots
\end{array}
\right.
\end{array}
\right\}
\end{equation}
The superscript of $A_k^{(0)}$ is dropped for simplicity. In order to
solve the infinite system 20, Clenshaw \cite{11} essentially
considered the required solution as the limiting solution of the
sequence of truncated systems consisting of the first $M+1$ equations
of the same system, that is, the solution of the system
\begin{equation}
\sum_{k=0}^M\ ^{'}{(-1)^kA_k}=\phi(-1)
\end{equation}
\begin{equation}
2p(q-2)A_0+(8q+p^2)A_1+2p(q-6)A_2-p^2A_3=4pq
\end{equation}
\begin{equation}
\left.
\begin{array}{c}
p^2A_{k-1}+2p(2k+q-2)A_k+8q(k+1)A_{k+1}+2p(2k-q+6)A_{k+2}-p^2A_{k+3}\\
\\
=\left\{
\begin{array}{rcl}
2p^2 & , & k=1\\
0 & , & k=2,3,\ldots,M-3
\end{array}
\right.\\
\\
p^2A_{M-3}+2p(2M+q-6)A_{M-2}+8q(M-1)A_{M-1}+2p(2M+4-q)A_M=0\\
\\
p^2A_{M-2}+2p(2M+q-4)A_{M-1}+8qMA_M=0
\end{array}
\right\}
\end{equation}
where $A_k$ is assumed to vanish for $K \ge M+1$. To solve system
(21,22,23) consider first the subsystem 23 consisting of $M-2$
equations in $M$ unknowns. Here use is made of the fact that the
subsystem 23 is satisfied by
\begin{equation}
A_k=c_1\alpha_k+c_2\beta_k+\gamma_k\quad(k=0,1,2,\ldots)
\end{equation}
for arbitrary constants $c_1$ and $c_2$, where $\gamma_k$ is a
particular solution of 23 and where $\alpha_k$ and $\beta_k$ are two
independent solutions of the homogeneous equations (23 with $2p^2$
deleted) of the same subsystem. Hence, if $\alpha_k$, $\beta_k$, and
$\gamma_k$ are available, the solution of system (21,22,23) reduces to
the determinant of $c_1$ and $c_2$ from equations 21 and 22.

To solve equations (21,22,23), we note that
\begin{equation}
\gamma_0=2,\quad \gamma_k=0,\quad {\textrm for\ }k=1(1)M
\end{equation}
is obviously a particular solution of equation 23. The two independent
solutions $\gamma_k$ and $\beta_k$ of the homogeneous equations of the
same subsystem can be generated in turn by backward recurrence if we
set
\begin{equation}
\left.
\begin{array}{l}
\hbox{\hskip 4cm}\alpha_{M-1}=0,\quad\alpha_M=1\\
\textrm{and}\\
\hbox{\hskip 4cm}\beta_{M-1}=1,\quad\beta_M=0\\
\end{array}
\right\}
\end{equation}
or choose any $\alpha{M-1}$, $\alpha_M$, and $\beta_{M-1}$, $\beta_M$
for which $\alpha_{M-1}\beta_M-\alpha_M\beta_{M-1}\ne 0$. The
arbitrary constants $c_1$ and $c_2$ are determined, and consequently
the solution of equations (21,22,23) if equation 24 is substituted
into equation 21 and 22 and the resulting equations
\begin{equation}
c_1R(\alpha)+c_2R(\beta)=\phi(-1)-1
\end{equation}
\begin{equation}
c_1S(\alpha)+c_2S(\beta)=8p
\end{equation}
are solved as two equations in two unknowns. The terms $R(\alpha)$ and
$S(\alpha)$ are equal, respectively, to the left members of equations
21 and 22 corresponding to solution $\alpha_k$. (The identical
designation holds for $R(\beta)$ and $S(\beta)$.)

The quantities $\alpha_k$ and $\beta_k$ are known as trial solutions
in reference \cite{12}. Clenshaw has pointed out that if $\alpha_k$
and $\beta_k$ are not sufficiently independent, loss of significance
will occur in the formation of the linear combination 24, with
consequent loss of accuracy. Clenshaw suggested the Gauss-Seidel
iteration procedure to improve the accuracy of the solution. However,
this requires the application of an additional computing procedure and
may prove to be extremely slow. A simpler procedure which does not
alter the basic computing scheme given above is proposed here. The
loss of accuracy can effectively be regained if we first generate a
third trial solution $\delta_k$ (k=0,1,$\ldots$,M), where
$\delta_{M-1}$ and $\delta_M$ are equal to 
$c_1\alpha_{M-1}+c_2\beta_{M-1}$ and 
$c_1\alpha_M+c_2\beta_M$, respectively, and where $\delta_k$
(k=M-2,M-3,$\ldots$,0) is determined using backward recurrence as
before by means of equation 23. Then either $\alpha_k$ or $\beta_k$ is
replaced by $\delta_k$ and a new set of $c_1$ and $c_2$ is determined
by equations 27 and 28. Such a procedure can be repeated until the
required accuracy is reached. However, only one application of it was
necessary in the computation of the coefficients of this report.

As an example, consider the case for $4 \le x \le 12$ with $M=15$. The
right member of equation 27 and of equation 28 assume, respectively,
the values of $0.43820800$ and $64$. The trial solutions $\alpha_k$
and $\beta_k$ generated with $\alpha_{14}=8$, $\alpha_{15}=9$ and
$\beta_{14}=7$, $\beta_{15}=8$ are certainly independent, since 
$\alpha_{14}\beta_{15}-\alpha_{15}\beta_{14}=1\ne 0$. A check of table
2 shows that equations 27 and 28 have, respectively, the residuals of 
$-0.137\times 10^-4$ and $-0.976\times 10^{-3}$. The same table also
shows that $c_1\alpha_k$ is opposite in sign but nearly equal in
magnitude to $c_2\beta_k$. Cancellations in the formation of the
linear combination 24 causes a loss of significance of 2 to 6 figures
in the computed $A_k$. In the second iteration, where a new set of
$\beta_k$ is generated replacing $\beta_{14}$ and $\beta_{15}$,
respectively, by $c_1\alpha_{14}+c_2\beta_{14}$ and 
$c_1\alpha_{15}+c_2\beta_{15}$ of the first iteration, the new 
$c_1\alpha_k$ and $c_2\beta_k$ differed from 2 to 5 orders of
magnitude. Consequently, no cancellation of significant figures in the
computation of $A_k$ occurred. Notice that equations 27 and 28 are now
satisfied exactly. Further note that the new $c_1$ and $c_2$ are near
zero and unity, respectively, for the reason that if equations 21, 22,
and 23 are satisfied by equation 24 exactly in the first iteration,
the new $c_1$ and $c_2$ should have the precise values zero and 1,
respectively. The results of the third iteration show that the $A_k$
of the second iteration are already accurate to eight decimal places,
since the $A_k$ in the two iterations differ in less that 
$0.5\times 10^{-8}$. Notice that for the third iteration, equations
27 and 28 are also satisfied exactly and that $c_1=1$ and $c_2=0$
(relative to 8 places of accuracy).

\noindent
{\bf Table 2}: Computation of Chebyshev Coefficients for $xe^{-x}Ei(x)$

\hrule
First iteration: $\alpha_{14}=8$, $\alpha_{15}=9$; $\beta_{14}=7$, 
$\beta_{15}=8$
\hrule
\begin{tabular}{|r|r|r|r|}
k & $c_1\alpha_k\hbox{\hskip 1cm}$ & $c_2\beta_k\hbox{\hskip 1cm}$ & 
$A_k\hbox{\hskip 1cm}$\\
&&&\\
 0 &  0.71690285E 03 & -0.71644773E 03 &  0.24551200E 01\\
 1 & -0.33302683E 03 &  0.33286440E 03 & -0.16243000E 00\\
 2 &  0.13469341E 03 & -0.13464845E 03 &  0.44960000E-01\\
 3 & -0.43211869E 02 &  0.43205127E 02 & -0.67420000E-02\\
 4 &  0.99929173E 01 & -0.99942238E 01 & -0.13065000E-02\\
 5 & -0.11670764E 01 &  0.11684574E 01 &  0.13810000E-02\\
 6 & -0.25552137E 00 &  0.25493635E 00 & -0.58502000E-02\\
 7 &  0.20617247E 00 & -0.20599754E 00 &  0.17493000E-03\\
 8 & -0.75797238E-01 &  0.75756767E-01 & -0.40471000E-04\\
 9 &  0.20550680E-01 & -0.20543463E-01 &  0.72170000E-05\\
10 & -0.45192333E-02 &  0.45183721E-02 & -0.86120000E-06\\
11 &  0.82656562E-03 & -0.82656589E-03 & -0.27000000E-09\\
12 & -0.12333571E-03 &  0.12337366E-03 &  0.37950000E-07\\
13 &  0.13300910E-04 & -0.13315328E-04 & -0.14418000E-07\\
14 & -0.29699001E-06 &  0.30091136E-06 &  0.39213500E-08\\
15 & -0.33941716E-06 &  0.33852528E-06 & -0.89188000E-09\\
\end{tabular}\\
\hbox{\hskip 3.0cm}$c_1=0.37613920E-07$\\
\hbox{\hskip 3.0cm}$c_2=-0.42427144E-07$\\
\hbox{\hskip 1.0cm}$c_1R(\alpha)+c_2R(\beta)-0.43820800E\ 00=-0.13700000E-04$\\
\hbox{\hskip 1.0cm}$c_1S(\alpha)+c_2S(\beta)-0.64000000E\ 00=-0.97600000E-03$

\hrule
Second iteration: $\alpha_{14}=8$, $\alpha_{15}=9$; \\
$\beta_{14}=0.39213500E-08$, $\beta_{15}=-0.89188000E-09$
\hrule
\begin{tabular}{|r|r|r|r|}
k & $c_1\alpha_k\hbox{\hskip 1cm}$ & $c_2\beta_k\hbox{\hskip 1cm}$ & 
$A_k\hbox{\hskip 1cm}$\\
&&&\\
 0 &  0.36701576E-05 &  0.45512986E 00 &  0.24551335E 01\\
 1 & -0.17051695E-05 & -0.16243666E 00 & -0.16243837E 00\\
 2 &  0.68976566E-06 &  0.44956834E-01 &  0.44957523E-01\\
 3 & -0.22132756E-06 & -0.67413538E-02 & -0.67415751E-02\\
 4 &  0.51197561E-07 & -0.13067496E-02 & -0.13066984E-02\\
 5 & -0.59856744E-08 &  0.13810895E-02 &  0.13810835E-02\\
 6 & -0.13059663E-08 & -0.58502164E-03 & -0.58502294E-03\\
 7 &  0.10552667E-08 &  0.17492889E-03 &  0.17492994E-03\\
 8 & -0.38808033E-09 & -0.40472426E-04 & -0.40472814E-04\\
 9 &  0.10523831E-09 &  0.72169965E-05 &  0.72171017E-05\\
10 & -0.23146333E-10 & -0.86125438E-06 & -0.86127752E-06\\
11 &  0.42342615E-11 & -0.25542252E-09 & -0.25118825E-09\\
12 & -0.63200810E-12 &  0.37946968E-07 &  0.37946336E-07\\
13 &  0.68210630E-13 & -0.14417584E-07 & -0.14417516E-07\\
14 & -0.15414832E-14 &  0.39212981E-08 &  0.39212965E-08\\
15 & -0.17341686E-14 & -0.89186818E-09 & -0.89186991E-09\\
\end{tabular}\\
\hbox{\hskip 3.0cm}$c_1=-0.19268540E-15$\\
\hbox{\hskip 3.0cm}$c_2=0.99998675E\ 00$\\
\hbox{\hskip 1.0cm}$c_1R(\alpha)+c_2R(\beta)-0.43820800E\ 00=0.0$\\
\hbox{\hskip 1.0cm}$c_1S(\alpha)+c_2S(\beta)-0.64000000E\ 00=0.0$

\noindent
{\bf Table 2}: Computation of Chebyshev Coefficients for
$xe^{-x}Ei(x)$ - Concluded\\
\hbox{\hskip 0.5cm}$[4 \le x \le 12 with M=15; \gamma_0=2, \gamma_k=0
\textrm{for\ }k=1(1)15]$

\hrule
Third iteration: $\alpha_{14}=8$, $\alpha_{15}=9$;\\ 
\hbox{\hskip 0.5cm}$\beta_{14}=0.39212965E-08$, $\beta_{15}=-0.89186991E-09$
\hrule
\begin{tabular}{|r|r|r|r|}
k & $c_1\alpha_k\hbox{\hskip 1cm}$ & $c_2\beta_k\hbox{\hskip 1cm}$ & 
$A_k\hbox{\hskip 1cm}$\\
&&&\\
 0 & -0.23083059E-07 &  0.45513355E 00 &  0.24551335E 01\\
 1 &  0.10724479E-07 & -0.16243838E 00 & -0.16243837E 00\\
 2 & -0.43382065E-08 &  0.44957526E-01 &  0.44957522E-01\\
 3 &  0.13920157E-08 & -0.67415759E-02 & -0.67415745E-02\\
 4 & -0.32200152E-09 & -0.13066983E-02 & -0.13066986E-02\\
 5 &  0.37646251E-10 &  0.13810835E-02 &  0.13810836E-02\\
 6 &  0.82137336E-11 & -0.58502297E-03 & -0.58502296E-03\\
 7 & -0.66369857E-11 &  0.17492995E-03 &  0.17492994E-03\\
 8 &  0.24407892E-11 & -0.40472817E-04 & -0.40472814E-04\\
 9 & -0.66188494E-12 &  0.72171023E-05 &  0.72171017E-05\\
10 &  0.14557636E-12 & -0.86127766E-06 & -0.86127751E-06\\
11 & -0.26630930E-13 & -0.25116620E-09 & -0.25119283E-09\\
12 &  0.39749465E-14 &  0.37946334E-07 &  0.37946337E-07\\
13 & -0.42900337E-15 & -0.14417516E-07 & -0.14417516E-07\\
14 &  0.96949915E-17 &  0.39212966E-08 &  0.39212966E-08\\
15 &  0.10906865E-16 & -0.89186992E-09 & -0.89186990E-09\\
\end{tabular}\\
\hbox{\hskip 3.0cm}$c_1=0.12118739E-17$\\
\hbox{\hskip 3.0cm}$c_2=0.10000000E\ 01$\\
\hbox{\hskip 1.0cm}$c_1R(\alpha)+c_2R(\beta)-0.43820800E\ 00=0.0$\\
\hbox{\hskip 1.0cm}$c_1S(\alpha)+c_2S(\beta)-0.64000000E\ 00=0.0$\\
\hrule

It is worth noting that the coefficient matrix of system (21,22,23)
yields an upper triangular matrix of order $M-1$ after the deletion of
the first two rows and the last two columns. Consequently, the
procedure of this section is applicable to any linear system having
this property. As a matter of fact, the same procedure can be
generalized to solve linear systems having coefficient matrices of
order N, the deletion of whose first $r$ ($r < N$) rows and last $r$
columns yields upper triangular matrices of order $N-r$.

\subsection{The Function $(1/x)[Ei(x)-log\vert x\vert-\gamma]$}

Let
\begin{equation}
f(x)=(1/x)[Ei(x)-log\vert x\vert-\gamma],\quad g(x)=e^x,\quad
\vert x\vert \le b
\end{equation}
These functions, with the change of variable $x=bt$, simultaneously
satisfy the differential equations
\begin{equation}
bt^2\phi^{'}(t)+bt\phi(t)-\psi(t)=-1
\end{equation}
\begin{equation}
\psi^{'}(t)-b\psi(t)=0,\quad -1 \le t \le 1
\end{equation}
Conversely,\footnote{The general solution of the differential
equations has the form
$$
\phi(t)=(c_1/t)+[Ei(bt)-log\vert bt\vert-\gamma]/bt
$$
$$
\psi(t)=c_2e^{bt}
$$
where the first and second terms of $\phi(t)$ are, respectively, the
complementary solution and a particular integral of equation 30. The
requirement that $\phi(t)$ is bounded makes the constant $c_1=0$. The
fact that $\psi(0)=1$ is implicit in equation 30.} any solution of
equations 30 and 31 is equal to the functions given by equations 29
for the change of variable $x=bt$. Therefore, boundary conditions need
not be imposed for the solution of the differential equations.

A procedure similar to that of the previous section gives the coupled
infinite recurrence relations
\begin{equation}
bA_1+bA_3-B_0+B_2=-2
\end{equation}
\begin{equation}
\left.
\begin{array}{c}
kbA_{k-1}+2(k+1)bA_{k+1}+(k+2)bA_{k+3}-2B_k+2B_{k+2}=0\\
\\
bB_{k-1}-2kB_k-bB_{k+1}=0,\quad k=1,2,\ldots
\end{array}
\right\}
\end{equation}
where $A_k$ and $B_k$ are the Chebyshev coefficients of $\phi(t)$ and
$\psi(t)$, respectively.

Consider first the subsystem 33. If $A_k=\alpha_k$ and $B_k=\beta_k$
are a simultaneous solution of the system, which is homogeneous, then
\begin{equation}
\left.
\begin{array}{l}
\hbox{\hskip 4cm}A_k=c\alpha_k\\
\textrm{and}\\
\hbox{\hskip 4cm}B_k=c\beta_k\\
\end{array}
\right\}
\end{equation}
are also a solution for an arbitrary constant $c$. Thus based on
considerations analogous to the solution of equations 21, 22, and 23,
one can initiate an approximate solution of equations 32 and 33 by
setting 
\begin{equation}
\left.
\begin{array}{l}
\alpha_M=0,\quad\alpha_k=0\quad\textrm{for }k \ge M+1\\
\\
\beta_M=1,\quad\beta_k=0\quad\textrm{for }k \ge M+1
\end{array}
\right\}
\end{equation}
and then determining $\alpha_k$ and $\beta_k$ ($k=M-1, M-2, \ldots,
0$) by backward recurrence by means of equation 33. The arbitrary
constant $c$ is determined by substituting 34 into 32.

\subsection{The Function $xe^{-x}Ei(x)$ on the Infinite Interval}
Let
\begin{equation}
f(x)=xe^{-x}Ei(x),\quad -\infty < x \le b < 0,\quad or 0 < b \le x < \infty
\end{equation}
By making the change of variables,
\begin{equation}
x=2b/(t+1)
\end{equation}
we can easily demonstrate that
\begin{equation}
f(x)=f[2b/(t+1)]=\phi(t)
\end{equation}
satisfies the differential equation
\begin{equation}
(t+1)^2\phi^{'}(t)+(t+1-2b)\phi(t)=-2b
\end{equation}
with
\begin{equation}
\phi(1)=be^{-b}Ei(b)
\end{equation}
An infinite system of equations involving the Chebyshev coefficients
$A_k$ of $\phi(t)$ is deducible from equations 39 and 40 by the same
procedure as applied to equations 13 and 14 to obtain the infinite
system 20; it is given as follows.
\begin{equation}
\sum_{k=0}^\infty\ ^{'}A_k=\phi(1)=be^{-b}Ei(b)
\end{equation}
\begin{equation}
(1-2b)A_0+3A_1+(3+2b)A_2+A_3=-4b
\end{equation}
\begin{equation}
\begin{array}{l}
kA_{k-1}+2[(2k+1)-2b]A_k+6(k+1)A_{k+1}+2(2k+3+2b)A_{k+2}\\
\hbox{\hskip 4.0cm}+(k+2)A_{k+3}=0,\quad k=1,2,\ldots
\end{array}
\end{equation}
As in the case of equations 21, 22 and 23, the solution of 41, 42 and
43 can be assumed to be
\begin{equation}
A_k=c_1\alpha_k+c_2\beta_k
\end{equation}
with $A_k$ vanishing for a $k \ge M$. Thus, we can set, say
\begin{equation}
\left.
\begin{array}{ccc}
\alpha_{M-1}=0 & , & \alpha_M=1\\
\beta_{M-1}=1  & , & \beta_M=0
\end{array}
\right\}
\end{equation}
and determine the trial solutions $\alpha_k$ and $\beta_k$ 
(k=M-1,M-2,$\ldots$,0) by means of equation 43 by backward
recurrence. The required solution of equations 41,42,adn 43 is then
determined by substituting equation 44 in equations 41 and 42 and
solving the resulting equations for $c_1$ and $c_2$.

Loss of accuracy in the computation of $A_k$ can also occur here, as
in the solution of equations 21, 22 and 23, if the trial solutions are
not sufficiently independent. The process used to improve the accuracy
of $A_k$ of the system 21, 22 and 23 can also be applied here.

For efficiency in computation, it is worth noting that for $b < 0$
($-\infty < x \le b < 0$) the boundary condition 40 is not required
for the solution of equation 39 and 40. This follows from the fact
that any solution\footnote{The general solution of the differential
equation 39. Since equation 39 has no bounded complementary solution
for $-\infty < x \le b < 0$, every solution of it is equal to the
particular integral $xe^{-x}Ei(x)$. On the other hand, a solution of
equation 39 for $0 < x \le b < \infty$ would, in general, involve the
complementary function. Hence, boundary condition 40 is required to
guarantee that the solution of equation 39 is equal to
$xe^{-x}Ei(x)$.} of the differential equation 39 is equal to 
$xe^{-x}Ei(x)$ ($x=2b/(t+1)$). Hence the $A_k$ of $xe^{-x}Ei(x)$ for 
$-\infty < x \le b < 0$ can be obtained without the use of equation
39 and can be assumed to have the form
\begin{equation}
A_k = c\alpha_k,\quad(k=0,1,\ldots,M)
\end{equation}
The M+1 values of $\alpha_k$ can be generated by setting $\alpha_M=1$
and computing $\alpha_k$ (k=0,1,$\ldots$,M-1) by means of equation
43 by backward recurrence. The substitution of equation 46 into 42
then enables one to determine $c$ from the resulting equation.

\subsection{Remarks on Convergence and Accuracy}

The Chebyshev coefficients of table 3 were computed on the IBM 7094
with 50-digit normalized floating-point arithmetic. In order to assure
that the sequence of approximate solutions (see Discusion) converged
to the limiting solution of the differential equation in question, a
trial M was incremented by 4 until the approximate Chebyshev
coefficients showed no change greter than or equal to 
$0.5\times 10^{-35}$. Hence the maximum error is bounded by
\begin{equation}
0.5(M+1)\times 10^{-35}+\sum_{M+1}^\infty{\vert A_k\vert}
\end{equation}
where the first term is the maximum error of the M+1 approximate
Chebyshev coefficients, and the sum is the maximum error of the
truncated Chebyshev series of M+1 terms. If the Chebyshev series is
rapidly convergent, the maximum error of the approximate Chebyshev
series should be of the order of $10^{-30}$. The coefficients of table
3 have been rounded to 30 digits, and higher terms for $k > N$ giving
the maximum residual
\begin{equation}
\sum_{k=N+1}^M{\vert A_k\vert} < 0.5\times 10^{-30}
\end{equation}
have been dropped. This should allow for evaluation of the relevant
function that is accurate to 30 decimal places. Since the range of
values of each function is bounded between 2/5 and 5, the evaluated
function should be good to 30 significant digits. Taylor series
evaluation also checks with that of the function values of table 4
(computed with 30-digit floating-point arithmetic using the
coefficients of table 3) for at least 28-1/2 significant
digits. Evaluation of Ei(x) using the coefficients of table 3 also
checked with Murnaghan and Wrench \cite{14} for 28-1/2 significant
figures. 

{\vbox{\vskip 1cm}}

{\bf Table 3: Chebyshev Coefficients}
(a)
$$
xe^{-x}Ei(x)=\sum_{k-0}^{40}\ {'}{A_kT_k(t)},\ \ t=(-20/x)-1,\ \ 
(-\infty < x \le -10)
$$
\begin{tabular}{|r|r|}
k & $A_k$\hbox{\hskip 3cm}\\
&\\
 0 &  0.1912173225 8605534539 1519326510E 01\\
 1 & -0.4208355052 8684843755 0974986680E-01\\
 2 &  0.1722819627 2843267833 7118157835E-02\\
 3 & -0.9915782173 4445636455 9842322973E-04\\
 4 &  0.7176093168 0227750526 5590665592E-05\\
 5 & -0.6152733145 0951269682 7956791331E-06\\
 6 &  0.6024857106 5627583129 3999701610E-07\\
 7 & -0.6573848845 2883048229 5894189637E-08\\
 8 &  0.7853167541 8323998199 4810079871E-09\\
 9 & -0.1013730288 0038789855 4202774257E-09\\
10 &  0.1399770413 2267686027 7823488623E-10\\
11 & -0.2051008376 7838189961 8962318711E-11\\
12 &  0.3168388726 0024778181 4907985818E-12\\
13 & -0.5132760082 8391806541 5984751899E-13\\
14 &  0.8680933040 7665493418 7433687383E-14\\
15 & -0.1527015040 9030849719 8572355351E-14\\
16 &  0.2784686251 6493573965 0105251453E-15\\
17 & -0.5249890437 4217669680 8472933696E-16\\
18 &  0.1020717991 2485612924 7455787226E-16\\
\end{tabular}
\begin{tabular}{|r|r|}
19 & -0.2042264679 8997184130 8462421876E-17\\
20 &  0.4197064172 7264847440 8827228562E-18\\
21 & -0.8844508176 1728105081 6483737536E-19\\
22 &  0.1908272629 5947174199 5060168262E-19\\
23 & -0.4209746222 9351995033 6450865676E-20\\
24 &  0.9483904058 1983732764 1500214512E-21\\
25 & -0.2179467860 1366743199 4032574014E-21\\
26 &  0.5103936869 0714509499 3452562741E-22\\
27 & -0.1216883113 3344150908 9746779693E-22\\
28 &  0.2951289166 4478751929 4773757144E-23\\
29 & -0.7275353763 7728468971 4438950920E-24\\
30 &  0.1821639048 6230739612 1667115976E-24\\
31 & -0.4629629963 1633171661 2753482064E-25\\
32 &  0.1193539790 9715779152 3052371292E-25\\
33 & -0.3119493285 2201424493 1062147473E-26\\
34 &  0.8261419734 5334664228 4170028518E-27\\
35 & -0.2215803373 6609829830 2591177697E-27\\
36 &  0.6016031671 6542638904 5303124429E-28\\
37 & -0.1652725098 3821265964 9744302314E-28\\
38 &  0.4592230358 7730270279 5636377166E-29\\
39 & -0.1290062767 2132638473 7453212670E-29\\
40 &  0.3662718481 0320025908 1177078922E-30\\
\end{tabular}

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        Ei1(y:OPR):OPR ==
          infinite? y => 1
          x:R:=retract(y)
          t:R:=acos((-20.0::R/x)-1.0::R)::R
          t01:=    0.191217322586055345391519326510E1::R*cos(0.0::R)/2.0::R
          t02:=t01-0.420835505286848437550974986680E-01::R*cos(t::R)::R
          t03:=t02+0.172281962728432678337118157835E-02::R*cos( 2.0::R*t)
          t04:=t03-0.991578217344456364559842322973E-04::R*cos( 3.0::R*t)
          t05:=t04+0.717609316802277505265590665592E-05::R*cos( 4.0::R*t)
          t06:=t05-0.615273314509512696827956791331E-06::R*cos( 5.0::R*t)
          t07:=t06+0.602485710656275831293999701610E-07::R*cos( 6.0::R*t)
          t08:=t07-0.657384884528830482295894189637E-08::R*cos( 7.0::R*t)
          t09:=t08+0.785316754183239981994810079871E-09::R*cos( 8.0::R*t)
          t10:=t09-0.101373028800387898554202774257E-09::R*cos( 9.0::R*t)
          t11:=t10+0.139977041322676860277823488623E-10::R*cos(10.0::R*t)
          t12:=t11-0.205100837678381899618962318711E-11::R*cos(11.0::R*t)
          t13:=t12+0.316838872600247781814907985818E-12::R*cos(12.0::R*t)
          t14:=t13-0.513276008283918065415984751899E-13::R*cos(13.0::R*t)
          t15:=t14+0.868093304076654934187433687383E-14::R*cos(14.0::R*t)
          t16:=t15-0.152701504090308497198572355351E-14::R*cos(15.0::R*t)
          t17:=t16+0.278468625164935739650105251453E-15::R*cos(16.0::R*t)
          t18:=t17-0.524989043742176696808472933696E-16::R*cos(17.0::R*t)
          t19:=t18+0.102071799124856129247455787226E-16::R*cos(18.0::R*t)
          t20:=t19-0.204226467989971841308462421876E-17::R*cos(19.0::R*t)
          t21:=t20+0.419706417272648474408827228562E-18::R*cos(20.0::R*t)
          t22:=t21-0.884450817617281050816483737536E-19::R*cos(21.0::R*t)
          t23:=t22+0.190827262959471741995060168262E-19::R*cos(22.0::R*t)
          t24:=t23-0.420974622293519950336450865676E-20::R*cos(23.0::R*t)
          t25:=t24+0.948390405819837327641500214512E-21::R*cos(24.0::R*t)
          t26:=t25-0.217946786013667431994032574014E-21::R*cos(25.0::R*t)
          t27:=t26+0.510393686907145094993452562741E-22::R*cos(26.0::R*t)
          t28:=t27-0.121688311333441509089746779693E-22::R*cos(27.0::R*t)
          t29:=t28+0.295128916644787519294773757144E-23::R*cos(28.0::R*t)
          t30:=t29-0.727535376377284689714438950920E-24::R*cos(29.0::R*t)
          t31:=t30+0.182163904862307396121667115976E-24::R*cos(30.0::R*t)
          t32:=t31-0.462962996316331716612753482064E-25::R*cos(31.0::R*t)
          t33:=t32+0.119353979097157791523052371292E-25::R*cos(32.0::R*t)
          t34:=t33-0.311949328522014244931062147473E-26::R*cos(33.0::R*t)
          t35:=t34+0.826141973453346642284170028518E-27::R*cos(34.0::R*t)
          t36:=t35-0.221580337366098298302591177697E-27::R*cos(35.0::R*t)
          t37:=t36+0.601603167165426389045303124429E-28::R*cos(36.0::R*t)
          t38:=t37-0.165272509838212659649744302314E-28::R*cos(37.0::R*t)
          t39:=t38+0.459223035877302702795636377166E-29::R*cos(38.0::R*t)
          t40:=t39-0.129006276721326384737453212670E-29::R*cos(39.0::R*t)
          t41:=t40+0.366271848103200259081177078922E-30::R*cos(40.0::R*t)
          t41::OPR

@

{\vbox{\vskip 1cm}}

{\bf Table 3: Chebyshev Coefficients - Continued}
(b)
$$
xe^{-x}Ei(x)=\sum_{k-0}^{40}\ {'}{A_kT_k(t)},\ \ t=(x+7)/3,\ \ 
(-10 \le x \le -4)
$$
\begin{tabular}{|r|r|}
k & $A_k$\hbox{\hskip 3cm}\\
&\\
 0 &  0.1757556496 0612937384 8762834691E 011\\
 1 & -0.4358541517 7361661170 5001867964E-01\\
 2 & -0.7979507139 5584254013 3217027492E-02\\
 3 & -0.1484372327 3037121385 0970210001E-02\\
 4 & -0.2800301984 3775145748 6203954948E-03\\
 5 & -0.5348648512 8657932303 9177361553E-04\\
 6 & -0.1032867243 5735548661 0233266460E-04\\
 7 & -0.2014083313 0055368773 2226198639E-05\\
 8 & -0.3961758434 2738664582 2338443500E-06\\
 9 & -0.7853872767 0966316306 7607656069E-07\\
10 & -0.1567925981 0074698262 4616270279E-07\\
11 & -0.3150055939 3763998825 0007372851E-08\\
12 & -0.6365096822 5242037304 0380263972E-09\\
13 & -0.1292888113 2805631835 6593121259E-09\\
14 & -0.2638690999 6592557613 2149942808E-10\\
15 & -0.5408958287 0450687349 1922207896E-11\\
16 & -0.1113222784 6010898999 7676692708E-11\\
17 & -0.2299624726 0744624618 4338864145E-12\\
18 & -0.4766682389 4951902622 3913482091E-13\\
19 & -0.9911756747 3352709450 6246643371E-14\\
20 & -0.2067103580 4957072400 0900805021E-14\\
\end{tabular}
\begin{tabular}{|r|r|}
21 & -0.4322776783 3833850564 5764394579E-15\\
22 & -0.9063014799 6650172551 4905603356E-16\\
23 & -0.1904669979 5816613974 4015963342E-16\\
24 & -0.4011792326 3502786634 6744227520E-17\\
25 & -0.8467772130 0168322313 4166334685E-18\\
26 & -0.1790842733 6586966555 5826492204E-18\\
27 & -0.3794490638 1714782440 1106175166E-19\\
28 & -0.8053999236 7982798526 0999654058E-20\\
29 & -0.1712339011 2362012974 3228671244E-20\\
30 & -0.3646274058 7749686208 6576562816E-21\\
31 & -0.7775969638 8939479435 3098157647E-22\\
32 & -0.1660628498 4484020566 2531950966E-22\\
33 & -0.3551178625 7882509300 5927145352E-23\\
34 & -0.7603722685 9413580929 5734653294E-24\\
35 & -0.1630074137 2584900288 9638374755E-24\\
36 & -0.3498575202 7286322350 7538497255E-25\\
37 & -0.7517179627 8900988246 0645145143E-26\\
38 & -0.1616877440 0527227629 8777317918E-26\\
39 & -0.3481270085 7247569174 8202271565E-27\\
40 & -0.7502707775 5024654701 0642233720E-28\\
41 & -0.1618454364 4959102680 7612330206E-28\\
42 & -0.3494366771 7051616674 9482836452E-29\\
43 & -0.7551036906 1261678585 6037026797E-30\\
\end{tabular}

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        Ei2(y:OPR):OPR ==
          x:R:=retract(y)
          t:R:=acos((x+7.0::R)/3.0::R)::R
          t01:=    0.175755649606129373848762834691E1::R*cos(0.0::R)/2.0::R
          t02:=t01-0.435854151773616611705001867964E-01::R*cos(t)
          t03:=t02-0.797950713955842540133217027492E-02::R*cos( 2.0::R*t)
          t04:=t03-0.148437232730371213850970210001E-02::R*cos( 3.0::R*t)
          t05:=t04-0.280030198437751457486203954948E-03::R*cos( 4.0::R*t)
          t06:=t05-0.534864851286579323039177361553E-04::R*cos( 5.0::R*t)
          t07:=t06-0.103286724357355486610233266460E-04::R*cos( 6.0::R*t)
          t08:=t07-0.201408331300553687732226198639E-05::R*cos( 7.0::R*t)
          t09:=t08-0.396175843427386645822338443500E-06::R*cos( 8.0::R*t)
          t10:=t09-0.785387276709663163067607656069E-07::R*cos( 9.0::R*t)
          t11:=t10-0.156792598100746982624616270279E-07::R*cos(10.0::R*t)
          t12:=t11-0.315005593937639988250007372851E-08::R*cos(11.0::R*t)
          t13:=t12-0.636509682252420373040380263972E-09::R*cos(12.0::R*t)
          t14:=t13-0.129288811328056318356593121259E-09::R*cos(13.0::R*t)
          t15:=t14-0.263869099965925576132149942808E-10::R*cos(14.0::R*t)
          t16:=t15-0.540895828704506873491922207896E-11::R*cos(15.0::R*t)
          t17:=t16-0.111322278460108989997676692708E-11::R*cos(16.0::R*t)
          t18:=t17-0.229962472607446246184338864145E-12::R*cos(17.0::R*t)
          t19:=t18-0.476668238949519026223913482091E-13::R*cos(18.0::R*t)
          t20:=t19-0.991175674733527094506246643371E-14::R*cos(19.0::R*t)
          t21:=t20-0.206710358049570724000900805021E-14::R*cos(20.0::R*t)
          t22:=t21-0.432277678338338505645764394579E-15::R*cos(21.0::R*t)
          t23:=t22-0.906301479966501725514905603356E-16::R*cos(22.0::R*t)
          t24:=t23-0.190466997958166139744015963342E-16::R*cos(23.0::R*t)
          t25:=t24-0.401179232635027866346744227520E-17::R*cos(24.0::R*t)
          t26:=t25-0.846777213001683223134166334685E-18::R*cos(25.0::R*t)
          t27:=t26-0.179084273365869665555826492204E-18::R*cos(26.0::R*t)
          t28:=t27-0.379449063817147824401106175166E-19::R*cos(27.0::R*t)
          t29:=t28-0.805399923679827985260999654058E-20::R*cos(28.0::R*t)
          t30:=t29-0.171233901123620129743228671244E-20::R*cos(29.0::R*t)
          t31:=t30-0.364627405877496862086576562816E-21::R*cos(30.0::R*t)
          t32:=t31-0.777596963889394794353098157647E-22::R*cos(31.0::R*t)
          t33:=t32-0.166062849844840205662531950966E-22::R*cos(32.0::R*t)
          t34:=t33-0.355117862578825093005927145352E-23::R*cos(33.0::R*t)
          t35:=t34-0.760372268594135809295734653294E-24::R*cos(34.0::R*t)
          t36:=t35-0.163007413725849002889638374755E-24::R*cos(35.0::R*t)
          t37:=t36-0.349857520272863223507538497255E-25::R*cos(36.0::R*t)
          t38:=t37-0.751717962789009882460645145143E-26::R*cos(37.0::R*t)
          t39:=t38-0.161687744005272276298777317918E-26::R*cos(38.0::R*t)
          t40:=t39-0.348127008572475691748202271565E-27::R*cos(39.0::R*t)
          t41:=t40-0.750270777550246547010642233720E-28::R*cos(40.0::R*t)
          t42:=t41-0.161845436449591026807612330206E-28::R*cos(41.0::R*t)
          t43:=t42-0.349436677170516166749482836452E-29::R*cos(42.0::R*t)
          t44:=t43-0.755103690612616785856037026797E-30::R*cos(43.0::R*t)
          t44::OPR

@
{\vbox{\vskip 1cm}}

{\bf Table 3: Chebyshev Coefficients - Continued}
(c)
$$
[Ei-log\vert x\vert-\gamma]/x=
\sum_{k-0}^{33}\ {'}{A_kT_k(t)},\ \ t=x/4,\ \ 
(-4 \le x \le 4)
$$
\begin{tabular}{|r|r|}
k & $A_k$\hbox{\hskip 3cm}\\
&\\
 0 & 0.3293700103 7673912939 3905231421E 01\\
 1 & 0.1679835052 3713029156 5505796064E 01\\
 2 & 0.7220436105 6787543524 0299679644E 00\\
 3 & 0.2600312360 5480956171 3740181192E 00\\
 4 & 0.8010494308 1737502239 4742889237E-01\\
 5 & 0.2151403663 9763337548 0552483005E-01\\
 6 & 0.5116207789 9303312062 1968910894E-02\\
 7 & 0.1090932861 0073913560 5066199014E-02\\
 8 & 0.2107415320 2393891631 8348675226E-03\\
 9 & 0.3719904516 6518885709 5940815956E-04\\
10 & 0.6043491637 1238787570 4767032866E-05\\
11 & 0.9092954273 9626095264 9596541772E-06\\
12 & 0.1273805160 6592647886 5567184969E-06\\
13 & 0.1669185748 4109890739 0896143814E-07\\
14 & 0.2054417026 4010479254 7612484551E-08\\
15 & 0.2383584444 4668176591 4052321417E-09\\
\end{tabular}
\begin{tabular}{|r|r|}
16 & 0.2615386378 8854429666 9068664148E-10\\
17 & 0.2721858622 8541670644 6550268995E-11\\
18 & 0.2693750031 9835792992 5326427442E-12\\
19 & 0.2541220946 7072635546 7884089307E-13\\
20 & 0.2290130406 8650370941 8510620516E-14\\
21 & 0.1975465739 0746229940 1057650412E-15\\
22 & 0.1634024551 9289317406 8635419984E-16\\
23 & 0.1298235437 0796376099 1961293204E-17\\
24 & 0.9922587925 0737105964 4632581302E-19\\
25 & 0.7306252806 7221032944 7230880087E-20\\
26 & 0.5189676834 6043451272 0780080019E-21\\
27 & 0.3560409454 0997068112 8043162227E-22\\
28 & 0.2361979432 5793864237 0187203948E-23\\
29 & 0.1516837767 7214529754 9624516819E-24\\
30 & 0.9439089722 2448744292 5310405245E-26\\
31 & 0.5697227559 5036921198 9581737831E-27\\
32 & 0.3338333627 7954330315 6597939562E-28\\
33 & 0.1900626012 8161914852 6680482237E-29\\
\end{tabular}

\noindent
($\gamma$=0.5772156649\ 0153286060\ 6512090082\ E\ 00)

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        Ei3(y:OPR):OPR ==
          x:R:=retract(y)
          x = 0.0::R => 1
          t:R:=acos(x/4.0::R)::R
          t01:=    0.329370010376739129393905231421E1::R*cos(0.0::R)/2.0::R
          t02:=t01+0.167983505237130291565505796064E1::R*cos(t)
          t03:=t02+0.722043610567875435240299679644E0::R*cos( 2.0::R*t)
          t04:=t03+0.260031236054809561713740181192E0::R*cos( 3.0::R*t)
          t05:=t04+0.801049430817375022394742889237E-01::R*cos( 4.0::R*t)
          t06:=t05+0.215140366397633375480552483005E-01::R*cos( 5.0::R*t)
          t07:=t06+0.511620778993033120621968910894E-02::R*cos( 6.0::R*t)
          t08:=t07+0.109093286100739135605066199014E-02::R*cos( 7.0::R*t)
          t09:=t08+0.210741532023938916318348675226E-03::R*cos( 8.0::R*t)
          t10:=t09+0.371990451665188857095940815956E-04::R*cos( 9.0::R*t)
          t11:=t10+0.604349163712387875704767032866E-05::R*cos(10.0::R*t)
          t12:=t11+0.909295427396260952649596541772E-06::R*cos(11.0::R*t)
          t13:=t12+0.127380516065926478865567184969E-06::R*cos(12.0::R*t)
          t14:=t13+0.166918574841098907390896143814E-07::R*cos(13.0::R*t)
          t15:=t14+0.205441702640104792547612484551E-08::R*cos(14.0::R*t)
          t16:=t15+0.238358444446681765914052321417E-09::R*cos(15.0::R*t)
          t17:=t16+0.261538637888544296669068664148E-10::R*cos(16.0::R*t)
          t18:=t17+0.272185862285416706446550268995E-11::R*cos(17.0::R*t)
          t19:=t18+0.269375003198357929925326427442E-12::R*cos(18.0::R*t)
          t20:=t19+0.254122094670726355467884089307E-13::R*cos(19.0::R*t)
          t21:=t20+0.229013040686503709418510620516E-14::R*cos(20.0::R*t)
          t22:=t21+0.197546573907462299401057650412E-15::R*cos(21.0::R*t)
          t23:=t22+0.163402455192893174068635419984E-16::R*cos(22.0::R*t)
          t24:=t23+0.129823543707963760991961293204E-17::R*cos(23.0::R*t)
          t25:=t24+0.992258792507371059644632581302E-19::R*cos(24.0::R*t)
          t26:=t25+0.730625280672210329447230880087E-20::R*cos(25.0::R*t)
          t27:=t26+0.518967683460434512720780080019E-21::R*cos(26.0::R*t)
          t28:=t27+0.356040945409970681128043162227E-22::R*cos(27.0::R*t)
          t29:=t28+0.236197943257938642370187203948E-23::R*cos(28.0::R*t)
          t30:=t29+0.151683776772145297549624516819E-24::R*cos(29.0::R*t)
          t31:=t30+0.943908972224487442925310405245E-26::R*cos(30.0::R*t)
          t32:=t31+0.569722755950369211989581737831E-27::R*cos(31.0::R*t)
          t33:=t32+0.333833362779543303156597939562E-28::R*cos(32.0::R*t)
          t34:=t33+0.190062601281619148526680482237E-29::R*cos(33.0::R*t)
          t34::OPR

@
{\vbox{\vskip 1cm}}

{\bf Table 3: Chebyshev Coefficients - Continued}
(d) 
$$
xe^{-x}Ei(x)=\sum_{k-0}^{49}\ {'}{A_kT_k(t)},\ \ t=(x-8)/4,\ \ 
(4 \le x \le 12)
$$
\begin{tabular}{|r|r|}
k & $A_k$\hbox{\hskip 3cm}\\
&\\
 0 &  0.2455133538 7812952867 3420457043E 01\\
 1 & -0.1624383791 3037652439 6002276856E 00\\
 2 &  0.4495753080 9357264148 0785417193E-01\\
 3 & -0.6741578679 9892299884 8718835050E-02\\
 4 & -0.1306697142 8032942805 1599341387E-02\\
 5 &  0.1381083146 0007257602 0202089820E-02\\
 6 & -0.5850228790 1596579868 7368242394E-03\\
 7 &  0.1749299341 0789197003 8740976432E-03\\
 8 & -0.4047281499 0529303552 2869333800E-04\\
 9 &  0.7217102412 1709975003 5752600049E-05\\
10 & -0.8612776970 1986775241 4815450193E-06\\
11 & -0.2514475296 5322559777 9084739054E-09 \\
12 &  0.3794747138 2014951081 4074505574E-07\\
13 & -0.1442117969 5211980616 0265640172E-07\\
14 &  0.3935049295 9761013108 7190848042E-08\\
15 & -0.9284689401 0633175304 7289210353E-09\\
16 &  0.2031789568 0065461336 6090995698E-09\\
17 & -0.4292498504 9923683142 7918026902E-10\\
18 &  0.8992647177 7812393526 8001544182E-11\\
19 & -0.1900869118 4121097524 2396635722E-11\\
20 &  0.4092198912 2237383452 6121178338E-12\\
21 & -0.8999253437 2931901982 5435824585E-13\\
22 &  0.2019654670 8242638335 4948543451E-13\\
23 & -0.4612930261 3830820719 4950531726E-14\\
\end{tabular}
\begin{tabular}{|r|r|}
24 &  0.1069023072 9386369566 8857256409E-14\\
25 & -0.2507030070 5700729569 2572254042E-15\\
26 &  0.5937322503 7915516070 6073763509E-16\\
27 & -0.1417734582 4376625234 4732005648E-16\\
28 &  0.3409203754 3608089342 6806402093E-17\\
29 & -0.8248290269 5054937928 8702529656E-18\\
30 &  0.2006369712 6214423139 8824095937E-18\\
31 & -0.4903851667 9674222440 3498152027E-19\\
32 &  0.1203734482 3483321716 6664609324E-19\\
33 & -0.2966282447 1413682538 1453572575E-20\\
34 &  0.7335512384 2880759924 2142328436E-21\\
35 & -0.1819924142 9085112734 4263485604E-21\\
36 &  0.4528629374 2957606021 7359526404E-22\\
37 & -0.1129980043 7506096133 8906717853E-22\\
38 &  0.2826681251 2901165692 3764408445E-23\\
39 & -0.7087717977 1690496166 6732640699E-24\\
40 &  0.1781104524 0187095153 4401530034E-24\\
41 & -0.4485004076 6189635731 2006142358E-25\\
42 &  0.1131540292 5754766224 5053090840E-25\\
43 & -0.2859957899 7793216379 0414326136E-26\\
44 &  0.7240775806 9226736175 8172726753E-27\\
45 & -0.1836132234 1257789805 0666710105E-27\\
46 &  0.4663128735 2273048658 2600122073E-28\\
47 & -0.1185959588 9190288794 6724005478E-28\\
48 &  0.3020290590 5567131073 1137614875E-29\\
49 & -0.7701650548 1663660609 8827057102E-30\\
\end{tabular}

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        Ei4(y:OPR):OPR ==
          x:R:=retract(y)
          t:R:=acos((x-8.0::R)/4.0::R)::R
          t01:=    0.245513353878129528673420457043E1::R*cos(0.0::R)/2.0::R
          t02:=t01-0.162438379130376524396002276856E0::R*cos(t)
          t03:=t02+0.449575308093572641480785417193E-01::R*cos( 2.0::R*t)
          t04:=t03-0.674157867998922998848718835050E-02::R*cos( 3.0::R*t)
          t05:=t04-0.130669714280329428051599341387E-02::R*cos( 4.0::R*t)
          t06:=t05+0.138108314600072576020202089820E-02::R*cos( 5.0::R*t)
          t07:=t06-0.585022879015965798687368242394E-03::R*cos( 6.0::R*t)
          t08:=t07+0.174929934107891970038740976432E-03::R*cos( 7.0::R*t)
          t09:=t08-0.404728149905293035522869333800E-04::R*cos( 8.0::R*t)
          t10:=t09+0.721710241217099750035752600049E-05::R*cos( 9.0::R*t)
          t11:=t10-0.861277697019867752414815450193E-06::R*cos(10.0::R*t)
          t12:=t11-0.251447529653225597779084739054E-09::R*cos(11.0::R*t)
          t13:=t12+0.379474713820149510814074505574E-07::R*cos(12.0::R*t)
          t14:=t13-0.144211796952119806160265640172E-07::R*cos(13.0::R*t)
          t15:=t14+0.393504929597610131087190848042E-08::R*cos(14.0::R*t)
          t16:=t15-0.928468940106331753047289210353E-09::R*cos(15.0::R*t)
          t17:=t16+0.203178956800654613366090995698E-09::R*cos(16.0::R*t)
          t18:=t17-0.429249850499236831427918026902E-10::R*cos(17.0::R*t)
          t19:=t18+0.899264717778123935268001544182E-11::R*cos(18.0::R*t)
          t20:=t19-0.190086911841210975242396635722E-11::R*cos(19.0::R*t)
          t21:=t20+0.409219891222373834526121178338E-12::R*cos(20.0::R*t)
          t22:=t21-0.899925343729319019825435824585E-13::R*cos(21.0::R*t)
          t23:=t22+0.201965467082426383354948543451E-13::R*cos(22.0::R*t)
          t24:=t23-0.461293026138308207194950531726E-14::R*cos(23.0::R*t)
          t25:=t24+0.106902307293863695668857256409E-14::R*cos(24.0::R*t)
          t26:=t25-0.250703007057007295692572254042E-15::R*cos(25.0::R*t)
          t27:=t26+0.593732250379155160706073763509E-16::R*cos(26.0::R*t)
          t28:=t27-0.141773458243766252344732005648E-16::R*cos(27.0::R*t)
          t29:=t28+0.340920375436080893426806402093E-17::R*cos(28.0::R*t)
          t30:=t29-0.824829026950549379288702529656E-18::R*cos(29.0::R*t)
          t31:=t30+0.200636971262144231398824095937E-18::R*cos(30.0::R*t)
          t32:=t31-0.490385166796742224403498152027E-19::R*cos(31.0::R*t)
          t33:=t32+0.120373448234833217166664609324E-19::R*cos(32.0::R*t)
          t34:=t33-0.296628244714136825381453572575E-20::R*cos(33.0::R*t)
          t35:=t34+0.733551238428807599242142328436E-21::R*cos(34.0::R*t)
          t36:=t35-0.181992414290851127344263485604E-21::R*cos(35.0::R*t)
          t37:=t36+0.452862937429576060217359526404E-22::R*cos(36.0::R*t)
          t38:=t37-0.112998004375060961338906717853E-22::R*cos(37.0::R*t)
          t39:=t38+0.282668125129011656923764408445E-23::R*cos(38.0::R*t)
          t40:=t39-0.708771797716904961666732640699E-24::R*cos(39.0::R*t)
          t41:=t40+0.178110452401870951534401530034E-24::R*cos(40.0::R*t)
          t42:=t41-0.448500407661896357312006142358E-25::R*cos(41.0::R*t)
          t43:=t42+0.113154029257547662245053090840E-25::R*cos(42.0::R*t)
          t44:=t43-0.285995789977932163790414326136E-26::R*cos(43.0::R*t)
          t45:=t44+0.724077580692267361758172726753E-27::R*cos(44.0::R*t)
          t46:=t45-0.183613223412577898050666710105E-27::R*cos(45.0::R*t)
          t47:=t46+0.466312873522730486582600122073E-28::R*cos(46.0::R*t)
          t48:=t47-0.118595958891902887946724005478E-28::R*cos(47.0::R*t)
          t49:=t48+0.302029059055671310731137614875E-29::R*cos(48.0::R*t)
          t50:=t49-0.770165054816636606098827057102E-30::R*cos(49.0::R*t)
          t50::OPR

@

{\vbox{\vskip 1cm}}

{\bf Table 3: Chebyshev Coefficients - Continued}
(e)
$$ xe^{-x}Ei(x)=\sum_{k-0}^{47}\ {'}{A_kT_k(t)},\ \ t=(x-22)/10,\ \ 
(12 \le x \le 32)
$$
\begin{tabular}{|r|r|}
k & $A_k$\hbox{\hskip 3cm}\\
&\\
 0 &  0.2117028640 4369866832 9789991614E 01\\
 1 & -0.3204237273 7548579499 0618303177E-01\\
 2 &  0.8891732077 3531683589 0182400335E-02\\
 3 & -0.2507952805 1892993708 8352442063E-02\\
 4 &  0.7202789465 9598754887 5760902487E-03\\
 5 & -0.2103490058 5011305342 3531441256E-03\\
 6 &  0.6205732318 2769321658 8857730842E-04\\
 7 & -0.1826566749 8167026544 9155689733E-04\\
 8 &  0.5270651575 2893637580 7788296811E-05\\
 9 & -0.1459666547 6199457532 3066719367E-05\\
10 &  0.3781719973 5896367198 0484193981E-06\\
11 & -0.8842581282 8407192007 7971589012E-07\\
12 &  0.1741749198 5383936137 7350309156E-07\\
13 & -0.2313517747 0436906350 6474480152E-08\\
14 & -0.1228609819 1808623883 2104835230E-09\\
15 &  0.2349966236 3228637047 8311381926E-09\\
16 & -0.1100719401 0272628769 0738963049E-09\\
17 &  0.3848275157 8612071114 9705563369E-10\\
18 & -0.1148440967 4900158965 8439301603E-10\\
19 &  0.3056876293 0885208263 0893626200E-11\\
20 & -0.7388278729 2847356645 4163131431E-12\\
21 &  0.1630933094 1659411056 4148013749E-12\\
22 & -0.3276989373 3127124965 7111774748E-13\\
\end{tabular}
\begin{tabular}{|r|r|}
23 &  0.5898114347 0713196171 1164283918E-14\\
24 & -0.9099707635 9564920464 3554720718E-15\\
25 &  0.1040752382 6695538658 5405697541E-15\\
26 & -0.1809815426 0592279322 7163355935E-17\\
27 & -0.3777098842 5639477336 9593494417E-17\\
28 &  0.1580332901 0284795713 6759888420E-17\\
29 & -0.4684291758 8088273064 8433752957E-18\\
30 &  0.1199516852 5919809370 7533478542E-18\\
31 & -0.2823594749 8418651767 9349931117E-19\\
32 &  0.6293738065 6446352262 7520190349E-20\\
33 & -0.1352410249 5047975630 5343973177E-20\\
34 &  0.2837106053 8552914159 0980426210E-21\\
35 & -0.5867007420 2463832353 1936371015E-22\\
36 &  0.1205247636 0954731111 2449686917E-22\\
37 & -0.2474446616 9988486972 8416011246E-23\\
38 &  0.5099962585 8378500814 2986465688E-24\\
39 & -0.1058382578 7754224088 7093294733E-24\\
40 &  0.2215276245 0704827856 6429387155E-25\\
41 & -0.4679278754 7569625867 1852546231E-26\\
42 &  0.9972872990 6020770482 4269828079E-27\\
43 & -0.2143267945 2167880459 1907805844E-27\\
44 &  0.4640656908 8381811433 8414829515E-28\\
45 & -0.1011447349 2115139094 8461800780E-28\\
46 &  0.2217211522 7100771109 3046878345E-29\\
47 & -0.4884890469 2437855322 4914645512E-30\\
\end{tabular}

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        Ei5(y:OPR):OPR ==
          x:R:=retract(y)
          t:R:=acos((x-22.0::R)/10.0::R)::R
          t01:=    0.211702864043698668329789991614E1::R*cos(0.0::R)::R/2.0::R
          t02:=t01-0.320423727375485794990618303177E-01::R*cos(t)
          t03:=t02+0.889173207735316835890182400335E-02::R*cos( 2.0::R*t)
          t04:=t03-0.250795280518929937088352442063E-02::R*cos( 3.0::R*t)
          t05:=t04+0.720278946595987548875760902487E-03::R*cos( 4.0::R*t)
          t06:=t05-0.210349005850113053423531441256E-03::R*cos( 5.0::R*t)
          t07:=t06+0.620573231827693216588857730842E-04::R*cos( 6.0::R*t)
          t08:=t07-0.182656674981670265449155689733E-04::R*cos( 7.0::R*t)
          t09:=t08+0.527065157528936375807788296811E-05::R*cos( 8.0::R*t)
          t10:=t09-0.145966654761994575323066719367E-05::R*cos( 9.0::R*t)
          t11:=t10+0.378171997358963671980484193981E-06::R*cos(10.0::R*t)
          t12:=t11-0.884258128284071920077971589012E-07::R*cos(11.0::R*t)
          t13:=t12+0.174174919853839361377350309156E-07::R*cos(12.0::R*t)
          t14:=t13-0.231351774704369063506474480152E-08::R*cos(13.0::R*t)
          t15:=t14-0.122860981918086238832104835230E-09::R*cos(14.0::R*t)
          t16:=t15+0.234996623632286370478311381926E-09::R*cos(15.0::R*t)
          t17:=t16-0.110071940102726287690738963049E-09::R*cos(16.0::R*t)
          t18:=t17+0.384827515786120711149705563369E-10::R*cos(17.0::R*t)
          t19:=t18-0.114844096749001589658439301603E-10::R*cos(18.0::R*t)
          t20:=t19+0.305687629308852082630893626200E-11::R*cos(19.0::R*t)
          t21:=t20-0.738827872928473566454163131431E-12::R*cos(20.0::R*t)
          t22:=t21+0.163093309416594110564148013749E-12::R*cos(21.0::R*t)
          t23:=t22-0.327698937331271249657111774748E-13::R*cos(22.0::R*t)
          t24:=t23+0.589811434707131961711164283918E-14::R*cos(23.0::R*t)
          t25:=t24-0.909970763595649204643554720718E-15::R*cos(24.0::R*t)
          t26:=t25+0.104075238266955386585405697541E-15::R*cos(25.0::R*t)
          t27:=t26-0.180981542605922793227163355935E-17::R*cos(26.0::R*t)
          t28:=t27-0.377709884256394773369593494417E-17::R*cos(27.0::R*t)
          t29:=t28+0.158033290102847957136759888420E-17::R*cos(28.0::R*t)
          t30:=t29-0.468429175880882730648433752957E-18::R*cos(29.0::R*t)
          t31:=t30+0.119951685259198093707533478542E-18::R*cos(30.0::R*t)
          t32:=t31-0.282359474984186517679349931117E-19::R*cos(31.0::R*t)
          t33:=t32+0.629373806564463522627520190349E-20::R*cos(32.0::R*t)
          t34:=t33-0.135241024950479756305343973177E-20::R*cos(33.0::R*t)
          t35:=t34+0.283710605385529141590980426210E-21::R*cos(34.0::R*t)
          t36:=t35-0.586700742024638323531936371015E-22::R*cos(35.0::R*t)
          t37:=t36+0.120524763609547311112449686917E-22::R*cos(36.0::R*t)
          t38:=t37-0.247444661699884869728416011246E-23::R*cos(37.0::R*t)
          t39:=t38+0.509996258583785008142986465688E-24::R*cos(38.0::R*t)
          t40:=t39-0.105838257877542240887093294733E-24::R*cos(39.0::R*t)
          t41:=t40+0.221527624507048278566429387155E-25::R*cos(40.0::R*t)
          t42:=t41-0.467927875475696258671852546231E-26::R*cos(41.0::R*t)
          t43:=t42+0.997287299060207704824269828079E-27::R*cos(42.0::R*t)
          t44:=t42-0.214326794521678804591907805844E-27::R*cos(43.0::R*t)
          t45:=t42+0.464065690883818114338414829515E-28::R*cos(44.0::R*t)
          t46:=t42-0.101144734921151390948461800780E-28::R*cos(45.0::R*t)
          t47:=t42+0.221721152271007711093046878345E-29::R*cos(46.0::R*t)
          t48:=t42-0.488489046924378553224914645512E-30::R*cos(47.0::R*t)
          t48::OPR

@
{\vbox{\vskip 1cm}}

{\bf Table 3: Chebyshev Coefficients - Continued}
(f)
$$ xe^{-x}Ei(x)=\sum_{k-0}^{46}\ {'}{A_kT_k(t)},\ \ t=(64/x)-1,\ \ 
(32 \le x < \infty)
$$
\begin{tabular}{|r|r|}
k & $A_k$\hbox{\hskip 3cm}\\
&\\
 0 &  0.2032843945 7961669908 7873844202E 01\\
 1 &  0.1669920452 0313628514 7618434339E-01\\
 2 &  0.2845284724 3613468074 2489985325E-03\\
 3 &  0.7563944358 5162064894 8786693854E-05\\
 4 &  0.2798971289 4508591575 0484318090E-06\\
 5 &  0.1357901828 5345310695 2556392593E-07\\
 6 &  0.8343596202 0404692558 5610289412E-09\\
 7 &  0.6370971727 6402484382 7524337306E-10\\
 8 &  0.6007247608 8118612357 6083084850E-11\\
 9 &  0.7022876174 6797735907 5059216588E-12\\
10 &  0.1018302673 7036876930 9667322152E-12\\
11 &  0.1761812903 4308800404 0656741554E-13\\
12 &  0.3250828614 2353606942 4072007647E-14\\
13 &  0.5071770025 5058186788 1479300685E-15\\
14 &  0.1665177387 0432942985 3520036957E-16\\
15 & -0.3166753890 7975144007 2410018963E-16\\
16 & -0.1588403763 6641415154 8423134074E-16\\
17 & -0.4175513256 1380188308 9626455063E-17\\
18 & -0.2892347749 7071418820 2868862358E-18\\
19 &  0.2800625903 3966080728 9978777339E-18\\
20 &  0.1322938639 5392708914 0532005364E-18\\
21 &  0.1804447444 1773019958 5334811191E-19\\
22 & -0.7905384086 5226165620 2021080364E-20\\
23 & -0.4435711366 3695734471 8167314045E-20\\
\end{tabular}
\begin{tabular}{|r|r|}
24 & -0.4264103994 9781026176 0579779746E-21\\
25 &  0.3920101766 9371439072 5625388636E-21\\
26 &  0.1527378051 3439636447 2804486402E-21\\
27 & -0.1024849527 0494906078 6953149788E-22\\
28 & -0.2134907874 7710893794 8904287231E-22\\
29 & -0.3239139475 1602368761 4279789345E-23\\
30 &  0.2142183762 2964597029 6249355934E-23\\
31 &  0.8234609419 6189955316 9207838151E-24\\
32 & -0.1524652829 6206721081 1495038147E-24\\
33 & -0.1378208282 4882440129 0438126477E-24\\
34 &  0.2131311201 4287370679 1513005998E-26\\
35 &  0.2012649651 8713266585 9213006507E-25\\
36 &  0.1995535662 0563740232 0607178286E-26\\
37 & -0.2798995812 2017971142 6020884464E-26\\
38 & -0.5534511830 5070025094 9784942560E-27\\
39 &  0.3884995422 6845525312 9749000696E-27\\
40 &  0.1121304407 2330701254 0043264712E-27\\
41 & -0.5566568286 7445948805 7823816866E-28\\
42 & -0.2045482612 4651357628 8865878722E-28\\
43 &  0.8453814064 4893808943 7361193598E-29\\
44 &  0.3565755151 2015152659 0791715785E-29\\
45 & -0.1383652423 4779775181 0195772006E-29\\
46 & -0.6062142653 2093450576 7865286306E-30\\
\end{tabular}

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        Ei6(y:OPR):OPR ==
          infinite? y => 1
          x:R:=retract(y)
          m:R:=64.0::R/x-1.0::R
          t:R:=acos(m::R)::R
          t01:=    0.203284394579616699087873844202E1::R*cos(0.0::R)::R/2.0::R
          t02:=t01+0.166992045203136285147618434339E-01::R*cos(t)
          t03:=t02+0.284528472436134680742489985325E-03::R*cos( 2.0::R*t)
          t04:=t03+0.756394435851620648948786693854E-05::R*cos( 3.0::R*t)
          t05:=t04+0.279897128945085915750484318090E-06::R*cos( 4.0::R*t)
          t06:=t05+0.135790182853453106952556392593E-07::R*cos( 5.0::R*t)
          t07:=t06+0.834359620204046925585610289412E-09::R*cos( 6.0::R*t)
          t08:=t07+0.637097172764024843827524337306E-10::R*cos( 7.0::R*t)
          t09:=t08+0.600724760881186123576083084850E-11::R*cos( 8.0::R*t)
          t10:=t09+0.702287617467977359075059216588E-12::R*cos( 9.0::R*t)
          t11:=t10+0.101830267370368769309667322152E-12::R*cos(10.0::R*t)
          t12:=t11+0.176181290343088004040656741554E-13::R*cos(11.0::R*t)
          t13:=t12+0.325082861423536069424072007647E-14::R*cos(12.0::R*t)
          t14:=t13+0.507177002550581867881479300685E-15::R*cos(13.0::R*t)
          t15:=t14+0.166517738704329429853520036957E-16::R*cos(14.0::R*t)
          t16:=t15-0.316675389079751440072410018963E-16::R*cos(15.0::R*t)
          t17:=t16-0.158840376366414151548423134074E-16::R*cos(16.0::R*t)
          t18:=t17-0.417551325613801883089626455063E-17::R*cos(17.0::R*t)
          t19:=t18-0.289234774970714188202868862358E-18::R*cos(18.0::R*t)
          t20:=t19+0.280062590339660807289978777339E-18::R*cos(19.0::R*t)
          t21:=t20+0.132293863953927089140532005364E-18::R*cos(20.0::R*t)
          t22:=t21+0.180444744417730199585334811191E-19::R*cos(21.0::R*t)
          t23:=t22-0.790538408652261656202021080364E-20::R*cos(22.0::R*t)
          t24:=t23-0.443571136636957344718167314045E-20::R*cos(23.0::R*t)
          t25:=t24-0.426410399497810261760579779746E-21::R*cos(24.0::R*t)
          t26:=t25+0.392010176693714390725625388636E-21::R*cos(25.0::R*t)
          t27:=t26+0.152737805134396364472804486402E-21::R*cos(26.0::R*t)
          t28:=t27-0.102484952704949060786953149788E-22::R*cos(27.0::R*t)
          t29:=t28-0.213490787477108937948904287231E-22::R*cos(28.0::R*t)
          t30:=t29-0.323913947516023687614279789345E-23::R*cos(29.0::R*t)
          t31:=t30+0.214218376229645970296249355934E-23::R*cos(30.0::R*t)
          t32:=t31+0.823460941961899553169207838151E-24::R*cos(31.0::R*t)
          t33:=t32-0.152465282962067210811495038147E-24::R*cos(32.0::R*t)
          t34:=t33-0.137820828248824401290438126477E-24::R*cos(33.0::R*t)
          t35:=t34+0.213131120142873706791513005998E-26::R*cos(34.0::R*t)
          t36:=t35+0.201264965187132665859213006507E-25::R*cos(35.0::R*t)
          t37:=t36+0.199553566205637402320607178286E-26::R*cos(36.0::R*t)
          t38:=t37-0.279899581220179711426020884464E-26::R*cos(37.0::R*t)
          t39:=t38-0.553451183050700250949784942560E-27::R*cos(38.0::R*t)
          t40:=t39+0.388499542268455253129749000696E-27::R*cos(39.0::R*t)
          t41:=t40+0.112130440723307012540043264712E-27::R*cos(40.0::R*t)
          t42:=t41-0.556656828674459488057823816866E-28::R*cos(41.0::R*t)
          t43:=t42-0.204548261246513576288865878722E-28::R*cos(42.0::R*t)
          t44:=t43+0.845381406448938089437361193598E-29::R*cos(43.0::R*t)
          t45:=t44+0.356575515120151526590791715785E-29::R*cos(44.0::R*t)
          t46:=t45-0.138365242347797751810195772006E-29::R*cos(45.0::R*t)
          t47:=t46-0.606214265320934505767865286306E-30::R*cos(46.0::R*t)
          t47::OPR

@

{\vbox{\vskip 1cm}}

{\bf Table 4: Function Values of the Associated Functions}

{\vbox{\vskip 1cm}}

\begin{tabular}{|r|c|r|}
x\hbox{\hskip 0.5cm} & $t=-(20/x)-1$ & $xe^{-x}Ei(x)$\hbox{\hskip 3cm}\\
&&\\
$-\infty$ & -1.000 & 0.1000000000 0000000000 0000000000 E 01\\
-160      & -0.875 & 0.9938266956 7406127387 8797850088 E 00\\
-80       & -0.750 & 0.9878013330 9428877356 4522608410 E 00\\
-53 1/3   & -0.625 & 0.9819162901 4319443961 7735426105 E 00\\
-40       & -0.500 & 0.9761646031 8514305080 8000604060 E 00\\
-32       & -0.375 & 0.9705398840 7466392046 2584664361 E 00\\
-26 2/3   & -0.250 & 0.9650362511 2337703576 3536593528 E 00\\
-22 6/7   & -0.125 & 0.9596482710 7936727616 5478970820 E 00\\
-20       & -0.000 & 0.9543709099 1921683397 5195829433 E 00\\
-17 7/9   &  0.125 & 0.9491994907 7974574460 6445346803 E 00\\
-16       &  0.250 & 0.9441296577 3690297898 4149471583 E 00\\
-14 6/11  &  0.375 & 0.9391573444 1928424124 0422409988 E 00\\
-13 1/3   &  0.500 & 0.9342787466 5341046480 9375801650 E 00\\
-12 4/13  &  0.625 & 0.9294902984 9721403772 5319679042 E 00\\
-11 3/7   &  0.750 & 0.9247886511 4084169605 5993585492 E 00\\
-10 2/3   &  0.875 & 0.9201706542 4944567620 2148012149 E 00\\
-10       &  1.000 & 0.9156333393 9788081876 0698157666 E 00
\end{tabular}

{\vbox{\vskip 1cm}}

\begin{tabular}{|r|c|r|}
x\hbox{\hskip 0.5cm} & $t=-(x+7)/3$ & $xe^{-x}Ei(x)$\hbox{\hskip 3cm}\\
&&\\
-10.000 & -1.000 & 0.9156333393 9788081876 0698157661 E 01\\
 -9.625 & -0.875 & 0.9128444614 6799341885 6575662217 E 00\\
 -9.250 & -0.750 & 0.9098627515 2542413937 8954274597 E 00\\
 -8.875 & -0.625 & 0.9066672706 5475388033 4995756418 E 00\\
 -8.500 & -0.500 & 0.9032339019 7320784414 4682926135 E 00\\
 -8.125 & -0.375 & 0.8995347176 8847383630 1415777697 E 00\\
 -7.750 & -0.250 & 0.8955371870 8753915717 9475513219 E 00\\
 -7.375 & -0.125 & 0.8912031763 2125431626 7087476258 E 00\\
 -7.000 & -0.000 & 0.8864876725 3642935289 3993846569 E 00\\
 -6.625 &  0.125 & 0.8813371384 6821020039 4305706270 E 00\\
 -6.250 &  0.250 & 0.8756873647 8846593227 6462155532 E 00\\
 -5.875 &  0.375 & 0.8694606294 5411341030 2047153364 E 00\\
 -5.500 &  0.500 & 0.8625618846 9070142209 0918986586 E 00\\
 -5.125 &  0.625 & 0.8548735538 9019954239 2425567234 E 00\\
 -4.750 &  0.750 & 0.8462482991 0358736117 1665798810 E 00\\
 -4.375 &  0.875 & 0.8364987545 5629874174 2152267582 E 00\\
 -4.000 &  1.000 & 0.8253825996 0422333240 8183035504 E 00
\end{tabular}

{\vbox{\vskip 1cm}}

\begin{tabular}{|r|c|r|}
x\hbox{\hskip 0.5cm} & $t=x/4$ &
$[Ei(x)-log\vert x\vert - \gamma]/x$\hbox{\hskip 2cm}\\
&&\\
 -4.0 & -1.000 & 0.4918223446 0781809647 9962798267 E 00\\
 -3.5 & -0.875 & 0.5248425066 4412835691 8258753311 E 00\\
 -3.0 & -0.750 & 0.5629587782 2127986313 8086024270 E 00\\
 -2.5 & -0.625 & 0.6073685258 5838306451 4266925640 E 00\\
 -2.0 & -0.500 & 0.6596316780 8476964479 5492023380 E 00\\
 -1.5 & -0.375 & 0.7218002369 4421992965 7623030310 E 00\\
 -1.0 & -0.250 & 0.7965995992 9705313428 3675865540 E 00\\
 -0.5 & -0.125 & 0.8876841582 3549672587 2151815870 E 00\\
  0.0 & -0.000 & 0.1000000000 0000000000 0000000000 E 01\\
  0.5 &  0.125 & 0.1140302841 0431720574 6248768807 E 01\\
  1.0 &  0.250 & 0.1317902151 4544038948 6000884424 E 01\\
  1.5 &  0.375 & 0.1545736450 7467337302 4859074039 E 01\\
  2.0 &  0.500 & 0.1841935755 2702059966 7788045934 E 01\\
  2.5 &  0.625 & 0.2232103799 1211651144 5340506423 E 01\\
  3.0 &  0.750 & 0.2752668205 6852580020 0219289740 E 01\\
  3.5 &  0.875 & 0.3455821531 9301241243 7300898811 E 01\\
  4.0 &  1.000 & 0.4416841111 0086991358 0118598668 E 01
\end{tabular}

{\vbox{\vskip 1cm}}

\begin{tabular}{|r|c|r|}
x\hbox{\hskip 0.5cm} & $t=(x-8)/4$ &$xe^{-x}Ei(x)$\hbox{\hskip 3cm}\\
&&\\
 4.0 & -1.000 & 0.1438208031 4544827847 0968670330 E 01\\
 4.5 & -0.875 & 0.1396419029 6297460710 0674523183 E 01\\
 5.0 & -0.750 & 0.1353831277 4552859779 0189174047 E 01\\
 5.5 & -0.625 & 0.1314143565 7421192454 1219816991 E 01\\
 6.0 & -0.500 & 0.1278883860 4895616189 2314099578 E 01\\
 6.5 & -0.375 & 0.1248391155 0017014864 0741941387 E 01\\
 7.0 & -0.250 & 0.1222408052 3605310590 3656846622 E 01\\
 7.5 & -0.125 & 0.1200421499 5996307864 3879158950 E 01\\
 8.0 & -0.000 & 0.1181847986 9872079731 7739362644 E 01\\
 8.5 &  0.125 & 0.1166126525 8117484943 9918142965 E 01\\
 9.0 &  0.250 & 0.1152759208 7089248132 2396814952 E 01\\
 9.5 &  0.375 & 0.1141323475 9526242015 5338560641 E 01\\
10.0 &  0.500 & 0.1131470204 7341077803 4051681355 E 01\\
10.5 &  0.625 & 0.1122915570 0177606064 2888630755 E 01\\
11.0 &  0.750 & 0.1115430938 9980384416 4779434229 E 01\\
11.5 &  0.875 & 0.1108832926 3050773058 6855234934 E 01\\
12.0 &  1.000 & 0.1102974544 9067590726 7241234953 E 01\\
\end{tabular}

{\vbox{\vskip 1cm}}

\begin{tabular}{|r|c|r|}
x\hbox{\hskip 0.5cm} & $t=(x-22)/10$ &$xe^{-x}Ei(x)$\hbox{\hskip 3cm}\\
&&\\
12.00 & -1.000 & 0.1102974544 9067590726 7241234952 E 01\\
13.25 & -0.875 & 0.1090844898 2154756926 6468614954 E 01\\
14.50 & -0.750 & 0.1081351395 7351912850 6346643795 E 01\\
15.75 & -0.625 & 0.1073701384 1997572371 2157900374 E 01\\
17.00 & -0.500 & 0.1067393691 9585378312 9572196197 E 01\\
18.25 & -0.375 & 0.1062096608 6221502426 8372647556 E 01\\
19.50 & -0.250 & 0.1057581342 1587250319 5393949410 E 01\\
20.75 & -0.125 & 0.1053684451 2894094408 2102194964 E 01\\
22.00 & -0.000 & 0.1050285719 6851897941 1780664532 E 01\\
23.25 &  0.125 & 0.1047294551 7053248581 1492365591 E 01\\
24.50 &  0.250 & 0.1044641267 9046436368 9761075289 E 01\\
25.75 &  0.375 & 0.1042271337 2023202388 5710928048 E 01\\
27.00 &  0.500 & 0.1040141438 3230104381 3713899754 E 01\\
28.25 &  0.625 & 0.1038216700 3601458768 0056548394 E 01\\
29.50 &  0.750 & 0.1036468726 2924118457 5154685419 E 01\\
30.75 &  0.875 & 0.1034874149 8964796947 2990938990 E 01\\
32.00 &  1.000 & 0.1033413564 2162410494 3493552567 E 01\\
\end{tabular}

{\vbox{\vskip 1cm}}

\begin{tabular}{|r|c|r|}
x\hbox{\hskip 0.5cm} & $t=(64/x)-1$ &$xe^{-x}Ei(x)$\hbox{\hskip 3cm}\\
&&\\
$\infty$ & -1.000 & 0.100000000 0000000000 00000000001 E 01\\
512      & -0.875 & 0.100196079 9450711925 31337468473 E 01\\
256      & -0.750 & 0.100393713 0905698627 88009078297 E 01\\
170 2/3  & -0.625 & 0.100592927 5692929112 94663030932 E 01\\
128      & -0.500 & 0.100793752 4408140182 81776821694 E 01\\
102 2/5  & -0.375 & 0.100996217 7406449755 74367545570 E 01\\
85 1/3   & -0.250 & 0.101200354 5332988482 01864466702 E 01\\
73 1/7   & -0.125 & 0.101406194 9696971331 45942329335 E 01\\
64       & -0.000 & 0.101613772 3494325321 70357100831 E 01\\
56 8/9   &  0.125 & 0.101823121 1884832696 82337017143 E 01\\
51 1/5   &  0.250 & 0.102034277 2930783774 87217829808 E 01\\
46 6/11  &  0.375 & 0.102247277 8405420595 91275364791 E 01\\
42 2/3   &  0.500 & 0.102462161 4681078391 01187804247 E 01\\
39 5/13  &  0.625 & 0.102678968 3709028524 50984510823 E 01\\
36 4/7   &  0.750 & 0.102897740 4105808008 63378435059 E 01\\
34 2/15  &  0.875 & 0.103118521 2364659263 55875784663 E 01\\
32       &  1.000 & 0.103341356 4216241049 43493552567 E 01\\
\end{tabular}

<<package DFSFUN DoubleFloatSpecialFunctions>>=

        polygamma(k,z)  == CPSI(k, z)$Lisp
        polygamma(k,x)  == RPSI(k, x)$Lisp

        logGamma z      == CLNGAMMA(z)$Lisp
        logGamma x      == RLNGAMMA(x)$Lisp

        besselJ(v,z)    == CBESSELJ(v,z)$Lisp
        besselJ(n,x)    == RBESSELJ(n,x)$Lisp

        besselI(v,z)    == CBESSELI(v,z)$Lisp
        besselI(n,x)    == RBESSELI(n,x)$Lisp

        hypergeometric0F1(a,z) == CHYPER0F1(a, z)$Lisp
        hypergeometric0F1(n,x) == retract hypergeometric0F1(n::C, x::C)


        -- All others are defined in terms of these.
        digamma x == polygamma(0, x)
        digamma z == polygamma(0, z)

        Beta(x,y) == Gamma(x)*Gamma(y)/Gamma(x+y)
        Beta(w,z) == Gamma(w)*Gamma(z)/Gamma(w+z)

        fuzz := (10::R)**(-7)

        import IntegerRetractions(R)
        import IntegerRetractions(C)

        besselY(n,x) ==
            if integer? n then n := n + fuzz
            vp := n * pi()$R
            (cos(vp) * besselJ(n,x) - besselJ(-n,x) )/sin(vp)
        besselY(v,z) ==
            if integer? v then v := v + fuzz::C
            vp := v * pi()$C
            (cos(vp) * besselJ(v,z) - besselJ(-v,z) )/sin(vp)

        besselK(n,x) ==
            if integer? n then n := n + fuzz
            p    := pi()$R
            vp   := n*p
            ahalf:= 1/(2::R)
            p * ahalf * ( besselI(-n,x) - besselI(n,x) )/sin(vp)
        besselK(v,z) ==
            if integer? v then v := v + fuzz::C
            p    := pi()$C
            vp   := v*p
            ahalf:= 1/(2::C)
            p * ahalf * ( besselI(-v,z) - besselI(v,z) )/sin(vp)

        airyAi x ==
            ahalf  := recip(2::R)::R
            athird := recip(3::R)::R
            eta := 2 * athird * (-x) ** (3*ahalf)
            (-x)**ahalf * athird * (besselJ(-athird,eta) + besselJ(athird,eta))
        airyAi z ==
            ahalf  := recip(2::C)::C
            athird := recip(3::C)::C
            eta := 2 * athird * (-z) ** (3*ahalf)
            (-z)**ahalf * athird * (besselJ(-athird,eta) + besselJ(athird,eta))

        airyBi x ==
            ahalf  := recip(2::R)::R
            athird := recip(3::R)::R
            eta := 2 * athird * (-x) ** (3*ahalf)
            (-x*athird)**ahalf * ( besselJ(-athird,eta) - besselJ(athird,eta) )

        airyBi z ==
            ahalf  := recip(2::C)::C
            athird := recip(3::C)::C
            eta := 2 * athird * (-z) ** (3*ahalf)
            (-z*athird)**ahalf * ( besselJ(-athird,eta) - besselJ(athird,eta) )

@
\section{package ORTHPOL OrthogonalPolynomialFunctions}
<<package ORTHPOL OrthogonalPolynomialFunctions>>=
)abbrev package ORTHPOL OrthogonalPolynomialFunctions
++ Author: Stephen M. Watt
++ Date Created:  1990
++ Date Last Updated: June 25, 1991
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ Examples:
++ References:
++ Description:
++   This package provides orthogonal polynomials as functions on a ring.

OrthogonalPolynomialFunctions(R: CommutativeRing): Exports == Impl where
    NNI ==> NonNegativeInteger
    RN  ==> Fraction Integer

    Exports ==> with

        chebyshevT: (NNI, R) -> R
           ++ chebyshevT(n,x) is the n-th Chebyshev polynomial of the first
           ++ kind, \spad{T[n](x)}.  These are defined by
           ++ \spad{(1-t*x)/(1-2*t*x+t**2) = sum(T[n](x) *t**n, n = 0..)}.

        chebyshevU: (NNI, R) -> R
           ++ chebyshevU(n,x) is the n-th Chebyshev polynomial of the second
           ++ kind, \spad{U[n](x)}. These are defined by
           ++ \spad{1/(1-2*t*x+t**2) = sum(T[n](x) *t**n, n = 0..)}.

        hermiteH:   (NNI, R) -> R
           ++ hermiteH(n,x) is the n-th Hermite polynomial, \spad{H[n](x)}.
           ++ These are defined by
           ++ \spad{exp(2*t*x-t**2) = sum(H[n](x)*t**n/n!, n = 0..)}.

        laguerreL:  (NNI, R) -> R
           ++ laguerreL(n,x) is the n-th Laguerre polynomial, \spad{L[n](x)}.
           ++ These are defined by
           ++ \spad{exp(-t*x/(1-t))/(1-t) = sum(L[n](x)*t**n/n!, n = 0..)}.

        laguerreL:  (NNI, NNI, R) -> R
           ++ laguerreL(m,n,x) is the associated Laguerre polynomial,
           ++ \spad{L<m>[n](x)}.  This is the m-th derivative of \spad{L[n](x)}.

        if R has Algebra RN then
            legendreP:  (NNI, R) -> R
                ++ legendreP(n,x) is the n-th Legendre polynomial,
                ++ \spad{P[n](x)}.  These are defined by
                ++ \spad{1/sqrt(1-2*x*t+t**2) = sum(P[n](x)*t**n, n = 0..)}.

    Impl ==> add
        p0, p1: R
        cx:     Integer

        import IntegerCombinatoricFunctions()

        laguerreL(n, x) ==
            n = 0 => 1
            (p1, p0) := (-x + 1, 1)
            for i in 1..n-1 repeat
                (p1, p0) := ((2*i::R + 1 - x)*p1 - i**2*p0, p1)
            p1
        laguerreL(m, n, x) ==
            ni := n::Integer
            mi := m::Integer
            cx := (-1)**m * binomial(ni,ni-mi) * factorial(ni)
            p0 := 1
            p1 := cx::R
            for j in 1..ni-mi repeat
                cx := -cx*(ni-mi-j+1)
                cx := (cx exquo ((mi+j)*j))::Integer
                p0 := p0 * x
                p1 := p1 + cx*p0
            p1
        chebyshevT(n, x) ==
            n = 0 => 1
            (p1, p0) := (x, 1)
            for i in 1..n-1 repeat
                (p1, p0) := (2*x*p1 - p0, p1)
            p1
        chebyshevU(n, x) ==
            n = 0 => 1
            (p1, p0) := (2*x, 1)
            for i in 1..n-1 repeat
                (p1, p0) := (2*x*p1 - p0, p1)
            p1
        hermiteH(n, x) ==
            n = 0 => 1
            (p1, p0) := (2*x, 1)
            for i in 1..n-1 repeat
                (p1, p0) := (2*x*p1 - 2*i*p0, p1)
            p1
        if R has Algebra RN then
            legendreP(n, x) ==
                n = 0 => 1
                p0 := 1
                p1 := x
                for i in 1..n-1 repeat
                    c: RN := 1/(i+1)
                    (p1, p0) := (c*((2*i+1)*x*p1 - i*p0), p1)
                p1

@
\section{package NTPOLFN NumberTheoreticPolynomialFunctions}
<<package NTPOLFN NumberTheoreticPolynomialFunctions>>=
)abbrev package NTPOLFN NumberTheoreticPolynomialFunctions
++ Author: Stephen M. Watt
++ Date Created:  1990
++ Date Last Updated: June 25, 1991
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ Examples:
++ References:
++ Description:
++   This package provides polynomials as functions on a ring.

NumberTheoreticPolynomialFunctions(R: CommutativeRing): Exports == Impl where
    NNI ==> NonNegativeInteger
    RN  ==> Fraction Integer

    Exports ==> with

        cyclotomic: (NNI, R) -> R
         ++ cyclotomic(n,r) \undocumented

        if R has Algebra RN then
            bernoulliB: (NNI, R) -> R
             ++ bernoulliB(n,r) \undocumented
            eulerE:     (NNI, R) -> R
             ++ eulerE(n,r) \undocumented

    Impl ==> add

        import PolynomialNumberTheoryFunctions()

        I   ==> Integer
        SUP ==> SparseUnivariatePolynomial

        -- This is the wrong way to evaluate the polynomial.
        cyclotomic(k, x) ==
            p: SUP(I) := cyclotomic(k)
            r: R      := 0
            while p ^= 0 repeat
                d := degree p
                c := leadingCoefficient p
                p := reductum p
                r := c*x**d + r
            r

        if R has Algebra RN then
            eulerE(k, x) ==
                p: SUP(RN) := euler(k)
                r: R       := 0
                while p ^= 0 repeat
                    d := degree p
                    c := leadingCoefficient p
                    p := reductum p
                    r := c*x**d + r
                r
            bernoulliB(k, x) ==
                p: SUP(RN) := bernoulli(k)
                r: R       := 0
                while p ^= 0 repeat
                    d := degree p
                    c := leadingCoefficient p
                    p := reductum p
                    r := c*x**d + r
                r

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<package DFSFUN DoubleFloatSpecialFunctions>>
<<package ORTHPOL OrthogonalPolynomialFunctions>>
<<package NTPOLFN NumberTheoreticPolynomialFunctions>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} Segletes, Steven, B., ``A Compact Analytical Fit to the 
Exponential Integral $E_1(x)$'', Army Research Laboratory, ARL-TR-1758,
September 1998
\bibitem{2} Lund, Lars Erik, ``Numlibc'',\\
{\bf http://www.math.ntnu.no/num/nnm/Program/Numlibc}
\bibitem{3} Haavie, T. ``expint.c'',\\
{\bf http://www.math.ntnu.no/num/nnm/Program/Numlibc}, June, 1988
\bibitem{4} Abramowitz and Stegun,``Handbook of Mathematical Functions'',
Dover Publications, Inc. New York 1965. pp238-243
\bibitem{5} Beyer, W.H. (ed.) CRC Standard Mathematical Tables. 26th
Edition, Boca Raton: CRC Press, 1981.
\bibitem{6} Pearson, C.E. (ed.) ``Handbook of Applied Mathematics; 
Selected Results and Methods''. New York: van Nostrand Reinhold, 1983.
\bibitem{7} Cody, W.J., and H.C. Thatcher, Jr. ``Rational Chebyshev
Approximations for the Exponential Integral $E_1(x)$.''
Mathematics of Computation, 11, pp. 641-649, 1968
\bibitem{8} Lee, K.L.,``High-precision Chebyshev series approximation
to the exponential integral'', NASA-TN-D-5953, A-3571, No Copyright
Doc. ID=19700026648, Accession ID=70N35964, Aug 1970
\bibitem{9} Harris, Frank E.: Tables of the Exponential Integral
Ei(x). Math. Tables and Other Aids to Computation, vol. 11, 1957,
pp.9-16 
\bibitem{10} Miller, James; and Hurst, R.P.: Simplified Calculation of
the Exponential Integral. Math. Tables and Other Aids to Computation,
vol. 12, 1958, pp 187-193.
\bibitem{11} Clenshaw, C.W.: Chebyshev Series for Mathematical
Functions. Mathematical Tables, vol. 5, National Physical Laboratory,
Her Majesty's Stationery Office, London, 1962, p. 29.
\bibitem{12} Cody, W.J.; and Thacher, H.C., Jr.: Rational
Approximations for the Exponential Integral $E_1(x)$. Math. Comp.,
vol.22, July 1968, pp. 641-649.
\bibitem{13} Cody, W.J.; and Thacher, H.C., Jr.: Rational
Approximations for the Exponential Integral $Ei(x)$. Math. Comp.,
vol.22, April 1969, pp. 289-303.
\bibitem{14} Murnaghan, F.D.; and Wrench, J.W., Jr.: The Converging
Factor for the Exponential Integral. Rep. 1535, David Taylor Model
Basin Applied Mathematics Lab., Jan. 1963.
\bibitem{16} Clenshaw, C.W.: The Numerical Solution of Linear
Differential Equation in Chebyshev Series. Proc. Cambridge Phil. Soc.,
vol. 53, 1957, pp 134-149
\bibitem{17} Fox, L.; and Parker, I.B.: Chebyshev Polynomials in
Numerical Analysis. Oxford Univ. Press, London, 1968.
\bibitem{18} Jeffrey, Alan ``Handbook of Mathematical Formulas and
Integrals'' Elsevier Academic Press 2004 3rd Edition ISBN
0-12-382256-4 pp167-171
\bibitem{19} Press, William, et.al., ``Numerical Recipes in C''
Press Syndicate Univ. of Cambridge, 1995 ISBN 0-521-43108-5 
pp190-194
\bibitem{20} Press, William, et.al., ``Numerical Recipes in C''
Press Syndicate Univ. of Cambridge, 1995 ISBN 0-521-43108-5 
p196
\bibitem{21} Press, William, et.al., ``Numerical Recipes in C''
Press Syndicate Univ. of Cambridge, 1995 ISBN 0-521-43108-5 
p222-225
\end{thebibliography}
\end{document}
