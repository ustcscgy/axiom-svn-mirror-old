\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra zerodim.spad}
\author{Marc Moreno Maza}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{package FGLMICPK FGLMIfCanPackage}
<<package FGLMICPK FGLMIfCanPackage>>=
)abbrev package FGLMICPK FGLMIfCanPackage
++ Author: Marc Moreno Maza
++ Date Created: 08/02/1999
++ Date Last Updated: 08/02/1999
++ Description: 
++ This is just an interface between several packages and domains.
++ The goal is to compute lexicographical Groebner bases 
++ of sets of polynomial with type \spadtype{Polynomial R}
++ by the {\em FGLM} algorithm if this is possible (i.e.
++ if the input system generates a zero-dimensional ideal).
++ Version: 1.
FGLMIfCanPackage(R,ls): Exports == Implementation where
  R: GcdDomain
  ls: List Symbol
  V ==> OrderedVariableList ls
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  Q1 ==> Polynomial R
  Q2 ==> HomogeneousDistributedMultivariatePolynomial(ls,R) 
  Q3 ==> DistributedMultivariatePolynomial(ls,R)
  E2 ==> HomogeneousDirectProduct(#ls,NonNegativeInteger)
  E3 ==>  DirectProduct(#ls,NonNegativeInteger)
  poltopol ==> PolToPol(ls, R)
  lingrobpack ==> LinGroebnerPackage(ls,R)
  groebnerpack2 ==> GroebnerPackage(R,E2,V,Q2)
  groebnerpack3 ==> GroebnerPackage(R,E3,V,Q3)
  Exports ==  with

     zeroDimensional?: List(Q1) -> B
         ++ \axiom{zeroDimensional?(lq1)} returns true iff
         ++ \axiom{lq1} generates a zero-dimensional ideal
         ++ w.r.t. the variables of \axiom{ls}.
     fglmIfCan: List(Q1) -> Union(List(Q1), "failed")
         ++ \axiom{fglmIfCan(lq1)} returns the lexicographical Groebner 
         ++ basis of \axiom{lq1} by using the {\em FGLM} strategy,
         ++ if \axiom{zeroDimensional?(lq1)} holds.
     groebner: List(Q1) -> List(Q1) 
         ++ \axiom{groebner(lq1)} returns the lexicographical Groebner 
         ++ basis of \axiom{lq1}. If \axiom{lq1} generates a zero-dimensional
         ++ ideal then the {\em FGLM} strategy is used, otherwise
         ++ the {\em Sugar} strategy is used.

  Implementation == add

     zeroDim?(lq2: List Q2): Boolean ==
       lq2 := groebner(lq2)$groebnerpack2
       empty? lq2 => false
       #lq2 < #ls => false
       lv: List(V) := [(variable(s)$V)::V for s in ls]
       for q2 in lq2 while not empty?(lv) repeat
          m := leadingMonomial(q2)
          x := mainVariable(m)::V
          if ground?(leadingCoefficient(univariate(m,x))) then
               lv := remove(x, lv)
       empty? lv

     zeroDimensional?(lq1: List(Q1)): Boolean ==
       lq2: List(Q2) := [pToHdmp(q1)$poltopol for q1 in lq1]
       zeroDim?(lq2)

     fglmIfCan(lq1:List(Q1)): Union(List(Q1),"failed") == 
       lq2: List(Q2) := [pToHdmp(q1)$poltopol for q1 in lq1]
       lq2 := groebner(lq2)$groebnerpack2
       not zeroDim?(lq2) => "failed"::Union(List(Q1),"failed")
       lq3: List(Q3) := totolex(lq2)$lingrobpack
       lq1 := [dmpToP(q3)$poltopol for q3 in lq3]
       lq1::Union(List(Q1),"failed")

     groebner(lq1:List(Q1)): List(Q1) ==
       lq2: List(Q2) := [pToHdmp(q1)$poltopol for q1 in lq1]
       lq2 := groebner(lq2)$groebnerpack2
       not zeroDim?(lq2) => 
         lq3: List(Q3) := [pToDmp(q1)$poltopol for q1 in lq1]
         lq3 := groebner(lq3)$groebnerpack3
         [dmpToP(q3)$poltopol for q3 in lq3]
       lq3: List(Q3) := totolex(lq2)$lingrobpack
       [dmpToP(q3)$poltopol for q3 in lq3]

@
\section{package LEXTRIPK LexTriangularPackage}
<<LexTriangularPackage.input>>=
-- zerodim.spad.pamphlet LexTriangularPackage.input
)spool LexTriangularPackage.output
)set message test on
)set message auto off
)clear all
--S 1 of 22
R := Integer
--R 
--R
--R   (1)  Integer
--R                                                                 Type: Domain
--E 1

--S 2 of 22
ls : List Symbol := [a,b,c,d,e,f]
--R 
--R
--R   (2)  [a,b,c,d,e,f]
--R                                                            Type: List Symbol
--E 2

--S 3 of 22
V := OVAR(ls)
--R 
--R
--R   (3)  OrderedVariableList [a,b,c,d,e,f]
--R                                                                 Type: Domain
--E 3

--S 4 of 22
P := NSMP(R, V)
--R 
--R
--R   (4)
--R   NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--R                                                                 Type: Domain
--E 4

--S 5 of 22
p1: P :=  a*b*c*d*e*f - 1
--R 
--R
--R   (5)  f e d c b a - 1
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 5

--S 6 of 22
p2: P := a*b*c*d*e +a*b*c*d*f +a*b*c*e*f +a*b*d*e*f +a*c*d*e*f +b*c*d*e*f 
--R 
--R
--R   (6)  ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 6

--S 7 of 22
p3: P :=  a*b*c*d + a*b*c*f + a*b*e*f + a*d*e*f + b*c*d*e + c*d*e*f 
--R 
--R
--R   (7)  (((d + f)c + f e)b + f e d)a + e d c b + f e d c
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 7

--S 8 of 22
p4: P := a*b*c + a*b*f + a*e*f + b*c*d + c*d*e + d*e*f 
--R 
--R
--R   (8)  ((c + f)b + f e)a + d c b + e d c + f e d
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 8

--S 9 of 22
p5: P := a*b + a*f + b*c + c*d + d*e + e*f 
--R 
--R
--R   (9)  (b + f)a + c b + d c + e d + f e
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 9

--S 10 of 22
p6: P := a + b + c + d + e + f 
--R 
--R
--R   (10)  a + b + c + d + e + f
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 10

--S 11 of 22
lp := [p1, p2, p3, p4, p5, p6]
--R 
--R
--R   (11)
--R   [f e d c b a - 1, ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b,
--R    (((d + f)c + f e)b + f e d)a + e d c b + f e d c,
--R    ((c + f)b + f e)a + d c b + e d c + f e d,
--R    (b + f)a + c b + d c + e d + f e, a + b + c + d + e + f]
--RType: List NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 11

--S 12 of 22
lextripack :=  LEXTRIPK(R,ls)
--R 
--R
--R   (12)  LexTriangularPackage(Integer,[a,b,c,d,e,f])
--R                                                                 Type: Domain
--E 12

--S 13 of 22
lg := groebner(lp)$lextripack
--R 
--R
--R   (13)
--R   [a + b + c + d + e + f,
--R
--R                        2                                           2
--R       3968379498283200b  + 15873517993132800f b + 3968379498283200d
--R     + 
--R                                               3 5                     4 4
--R       15873517993132800f d + 3968379498283200f e  - 15873517993132800f e
--R     + 
--R                         5 3                       6                       2
--R       23810276989699200f e  + (206355733910726400f  + 230166010900425600)e
--R     + 
--R                             43                       37
--R           - 729705987316687f   + 1863667496867205421f
--R         + 
--R                                 31                         25
--R           291674853771731104461f   + 365285994691106921745f
--R         + 
--R                              19                         13
--R           549961185828911895f   - 365048404038768439269f
--R         + 
--R                                   7
--R           - 292382820431504027669f  - 2271898467631865497f
--R      *
--R         e
--R     + 
--R                          44                        38
--R       - 3988812642545399f   + 10187423878429609997f
--R     + 
--R                              32                          26
--R       1594377523424314053637f   + 1994739308439916238065f
--R     + 
--R                           20                          14
--R       1596840088052642815f   - 1993494118301162145413f
--R     + 
--R                                8                        2
--R       - 1596049742289689815053f  - 11488171330159667449f
--R     ,
--R
--R                                                                      2
--R       (23810276989699200c - 23810276989699200f)b + 23810276989699200c
--R     + 
--R                                                2
--R       71430830969097600f c - 23810276989699200d  - 95241107958796800f d
--R     + 
--R                           3 5                      4 4                      5 3
--R       - 55557312975964800f e  + 174608697924460800f e  - 174608697924460800f e
--R     + 
--R                              6                        2
--R       (- 2428648252949318400f  - 2611193709870345600)e
--R     + 
--R                            43                        37
--R           8305444561289527f   - 21212087151945459641f
--R         + 
--R                                    31                          25
--R           - 3319815883093451385381f   - 4157691646261657136445f
--R         + 
--R                                 19                          13
--R           - 6072721607510764095f   + 4154986709036460221649f
--R         + 
--R                                  7
--R           3327761311138587096749f  + 25885340608290841637f
--R      *
--R         e
--R     + 
--R                         44                         38
--R       45815897629010329f   - 117013765582151891207f
--R     + 
--R                                 32                           26
--R       - 18313166848970865074187f   - 22909971239649297438915f
--R     + 
--R                              20                           14
--R       - 16133250761305157265f   + 22897305857636178256623f
--R     + 
--R                               8                         2
--R       18329944781867242497923f  + 130258531002020420699f
--R     ,
--R
--R       (7936758996566400d - 7936758996566400f)b - 7936758996566400f d
--R     + 
--R                          3 5                     4 4                     5 3
--R       - 7936758996566400f e  + 23810276989699200f e  - 23810276989699200f e
--R     + 
--R                             6                       2
--R       (- 337312257354072000f  - 369059293340337600)e
--R     + 
--R                            43                       37
--R           1176345388640471f   - 3004383582891473073f
--R         + 
--R                                   31                         25
--R           - 470203502707246105653f   - 588858183402644348085f
--R         + 
--R                                19                         13
--R           - 856939308623513535f   + 588472674242340526377f
--R         + 
--R                                 7
--R           471313241958371103517f  + 3659742549078552381f
--R      *
--R         e
--R     + 
--R                        44                        38                          32
--R       6423170513956901f   - 16404772137036480803f   - 2567419165227528774463f
--R     + 
--R                                26                       20
--R       - 3211938090825682172335f   - 2330490332697587485f
--R     + 
--R                              14                          8
--R       3210100109444754864587f   + 2569858315395162617847f
--R     + 
--R                            2
--R       18326089487427735751f
--R     ,
--R
--R                                                                     3 5
--R       (11905138494849600e - 11905138494849600f)b - 3968379498283200f e
--R     + 
--R                         4 4                     5 3
--R       15873517993132800f e  - 27778656487982400f e
--R     + 
--R                             6                       2
--R       (- 208339923659868000f  - 240086959646133600)e
--R     + 
--R                           43                       37
--R           786029984751110f   - 2007519008182245250f
--R         + 
--R                                   31                         25
--R           - 314188062908073807090f   - 393423667537929575250f
--R         + 
--R                                19                         13
--R           - 550329120654394950f   + 393196408728889612770f
--R         + 
--R                                 7
--R           314892372799176495730f  + 2409386515146668530f
--R      *
--R         e
--R     + 
--R                        44                        38                          32
--R       4177638546747827f   - 10669685294602576381f   - 1669852980419949524601f
--R     + 
--R                                26                       20
--R       - 2089077057287904170745f   - 1569899763580278795f
--R     + 
--R                              14                          8
--R       2087864026859015573349f   + 1671496085945199577969f
--R     + 
--R                            2
--R       11940257226216280177f
--R     ,
--R
--R                          6                                           2 5
--R       (11905138494849600f  - 11905138494849600)b - 15873517993132800f e
--R     + 
--R                         3 4                     4 3
--R       39683794982832000f e  - 39683794982832000f e
--R     + 
--R                             11                      5  2
--R       (- 686529653202993600f   - 607162063237329600f )e
--R     + 
--R                          42                      36                        30
--R           65144531306704f   - 166381280901088652f   - 26033434502470283472f
--R         + 
--R                                  24                      18
--R           - 31696259583860650140f   + 971492093167581360f
--R         + 
--R                              12                        6
--R         32220085033691389548f   + 25526177666070529808f  + 138603268355749244
--R      *
--R         e
--R     + 
--R                       43                      37                        31
--R       167620036074811f   - 428102417974791473f   - 66997243801231679313f
--R     + 
--R                              25                      19
--R       - 83426716722148750485f   + 203673895369980765f
--R     + 
--R                            13                        7
--R       83523056326010432457f   + 66995789640238066937f  + 478592855549587901f
--R     ,
--R
--R                    3                   2                 2                45
--R       801692827936c  + 2405078483808f c  - 2405078483808f c - 13752945467f
--R     + 
--R                      39                    33                    27
--R       35125117815561f   + 5496946957826433f   + 6834659447749117f
--R     + 
--R                        21                    15                    9
--R       - 44484880462461f   - 6873406230093057f   - 5450844938762633f
--R     + 
--R                     3
--R       1216586044571f
--R     ,
--R
--R                                                                      2
--R       (23810276989699200d - 23810276989699200f)c + 23810276989699200d
--R     + 
--R                                               3 5                     4 4
--R       71430830969097600f d + 7936758996566400f e  - 31747035986265600f e
--R     + 
--R                         5 3                       6                       2
--R       31747035986265600f e  + (404774708824886400f  + 396837949828320000)e
--R     + 
--R                              43                       37
--R           - 1247372229446701f   + 3185785654596621203f
--R         + 
--R                                 31                         25
--R           498594866849974751463f   + 624542545845791047935f
--R         + 
--R                              19                         13
--R           931085755769682885f   - 624150663582417063387f
--R         + 
--R                                   7
--R           - 499881859388360475647f  - 3926885313819527351f
--R      *
--R         e
--R     + 
--R                          44                        38
--R       - 7026011547118141f   + 17944427051950691243f
--R     + 
--R                              32                          26
--R       2808383522593986603543f   + 3513624142354807530135f
--R     + 
--R                           20                          14
--R       2860757006705537685f   - 3511356735642190737267f
--R     + 
--R                                8                        2
--R       - 2811332494697103819887f  - 20315011631522847311f
--R     ,
--R
--R       (7936758996566400e - 7936758996566400f)c
--R     + 
--R                           43                     37                       31
--R           - 4418748183673f   + 11285568707456559f   + 1765998617294451019f
--R         + 
--R                               25                     19
--R           2173749283622606155f   - 55788292195402895f
--R         + 
--R                               13                       7
--R         - 2215291421788292951f   - 1718142665347430851f  + 30256569458230237f
--R      *
--R         e
--R     + 
--R                     44                     38                       32
--R       4418748183673f   - 11285568707456559f   - 1765998617294451019f
--R     + 
--R                             26                     20                       14
--R       - 2173749283622606155f   + 55788292195402895f   + 2215291421788292951f
--R     + 
--R                           8                     2
--R       1718142665347430851f  - 30256569458230237f
--R     ,
--R
--R                       6                                  43
--R       (72152354514240f  - 72152354514240)c + 40950859449f
--R     + 
--R                         37                     31                     25
--R       - 104588980990367f   - 16367227395575307f   - 20268523416527355f
--R     + 
--R                       19                     13                     7
--R       442205002259535f   + 20576059935789063f   + 15997133796970563f
--R     + 
--R       - 275099892785581f
--R     ,
--R
--R                        3                      2                    2
--R       1984189749141600d  + 5952569247424800f d  - 5952569247424800f d
--R     + 
--R                          4 5                     5 4                     3
--R       - 3968379498283200f e  + 15873517993132800f e  + 17857707742274400e
--R     + 
--R                             7                        2
--R       (- 148814231185620000f  - 162703559429611200f)e
--R     + 
--R                             44                      38
--R           - 390000914678878f   + 996062704593756434f
--R         + 
--R                                 32                         26
--R           155886323972034823914f   + 194745956143985421330f
--R         + 
--R                            20                         14
--R           6205077595574430f   - 194596512653299068786f
--R         + 
--R                                   8                       2
--R           - 155796897940756922666f  - 1036375759077320978f
--R      *
--R         e
--R     + 
--R                         45                      39                         33
--R       - 374998630035991f   + 957747106595453993f   + 149889155566764891693f
--R     + 
--R                             27                      21
--R       187154171443494641685f   - 127129015426348065f
--R     + 
--R                             15                         9                      3
--R     - 187241533243115040417f   - 149719983567976534037f  - 836654081239648061f
--R     ,
--R
--R                                                                   3 5
--R       (5952569247424800e - 5952569247424800f)d - 3968379498283200f e
--R     + 
--R                        4 4                    5 3
--R       9920948745708000f e  - 3968379498283200f e
--R     + 
--R                             6                       2
--R       (- 148814231185620000f  - 150798420934761600)e
--R     + 
--R                           43                       37
--R           492558110242553f   - 1257992359608074599f
--R         + 
--R                                   31                         25
--R           - 196883094539368513959f   - 246562115745735428055f
--R         + 
--R                                19                         13
--R           - 325698701993885505f   + 246417769883651808111f
--R         + 
--R                                 7
--R           197327352068200652911f  + 1523373796389332143f
--R      *
--R         e
--R     + 
--R                        44                       38                          32
--R       2679481081803026f   - 6843392695421906608f   - 1071020459642646913578f
--R     + 
--R                                26                      20
--R       - 1339789169692041240060f   - 852746750910750210f
--R     + 
--R                              14                          8
--R       1339105101971878401312f   + 1071900289758712984762f
--R     + 
--R                           2
--R       7555239072072727756f
--R     ,
--R
--R                          6                                          2 5
--R       (11905138494849600f  - 11905138494849600)d - 7936758996566400f e
--R     + 
--R                         3 4                     4 3
--R       31747035986265600f e  - 31747035986265600f e
--R     + 
--R                             11                      5  2
--R       (- 420648226818019200f   - 404774708824886400f )e
--R     + 
--R                          42                     36                       30
--R           15336187600889f   - 39169739565161107f   - 6127176127489690827f
--R         + 
--R                                 24                      18
--R           - 7217708742310509615f   + 538628483890722735f
--R         + 
--R                               12                       6
--R           7506804353843507643f   + 5886160769782607203f  + 63576108396535879
--R      *
--R         e
--R     + 
--R                      43                      37                        31
--R       71737781777066f   - 183218856207557938f   - 28672874271132276078f
--R     + 
--R                              25                      19
--R       - 35625223686939812010f   + 164831339634084390f
--R     + 
--R                            13                        7
--R       35724160423073052642f   + 28627022578664910622f  + 187459987029680506f
--R     ,
--R
--R                        6                      5                    2 4
--R       1322793166094400e  - 3968379498283200f e  + 3968379498283200f e
--R     + 
--R                          3 3
--R       - 5291172664377600f e
--R     + 
--R                             10                      4  2
--R       (- 230166010900425600f   - 226197631402142400f )e
--R     + 
--R                                47                         41
--R           - 152375364610443885f   + 389166626064854890415f
--R         + 
--R                                   35                           29
--R           60906097841360558987335f   + 76167367934608798697275f
--R         + 
--R                                23                           17
--R           27855066785995181125f   - 76144952817052723145495f
--R         + 
--R                                     11                         5
--R           - 60933629892463517546975f   - 411415071682002547795f
--R      *
--R         e
--R     + 
--R                         42                      36                        30
--R       - 209493533143822f   + 535045979490560586f   + 83737947964973553146f
--R     + 
--R                             24                      18
--R       104889507084213371570f   + 167117997269207870f
--R     + 
--R                               12                        6
--R       - 104793725781390615514f   - 83842685189903180394f  - 569978796672974242
--R     ,
--R
--R                       6                   3
--R       (25438330117200f  + 25438330117200)e
--R     + 
--R                       7                    2
--R       (76314990351600f  + 76314990351600f)e
--R     + 
--R                           44                    38                      32
--R           - 1594966552735f   + 4073543370415745f   + 637527159231148925f
--R         + 
--R                              26                   20                      14
--R           797521176113606525f   + 530440941097175f   - 797160527306433145f
--R         + 
--R                                8                    2
--R           - 638132320196044965f  - 4510507167940725f
--R      *
--R         e
--R     + 
--R                       45                     39                       33
--R       - 6036376800443f   + 15416903421476909f   + 2412807646192304449f
--R     + 
--R                           27                    21                       15
--R       3017679923028013705f   + 1422320037411955f   - 3016560402417843941f
--R     + 
--R                             9                     3
--R       - 2414249368183033161f  - 16561862361763873f
--R     ,
--R
--R                      12                  2
--R       (1387545279120f   - 1387545279120)e
--R     + 
--R                      43                  37                    31
--R           4321823003f   - 11037922310209f   - 1727510711947989f
--R         + 
--R                              25                 19                    13
--R           - 2165150991154425f   - 5114342560755f   + 2162682824948601f
--R         + 
--R                            7
--R           1732620732685741f  + 13506088516033f
--R      *
--R         e
--R     + 
--R                   44                  38                    32
--R       24177661775f   - 61749727185325f   - 9664106795754225f
--R     + 
--R                           26                 20                     14
--R       - 12090487758628245f   - 8787672733575f   + 12083693383005045f
--R     + 
--R                        8                  2
--R       9672870290826025f  + 68544102808525f
--R     ,
--R     48        42          36          30          18          12        6
--R    f   - 2554f   - 399710f   - 499722f   + 499722f   + 399710f   + 2554f  - 1]
--RType: List NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 13

--S 14 of 22
lexTriangular(lg,false)$lextripack
--R 
--R
--R   (14)
--R   [
--R       6       6       5     2 4     3 3     4 2     5
--R     {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
--R            2 5     3 4     4 3     5 2
--R      3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
--R             2 5     3 4     4 3      5 2
--R      3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
--R           2 5     3 4     4 3     5 2
--R      a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
--R     ,
--R      6                  2           2                    2
--R    {f  - 1,e - f,d - f,c  + 4f c + f ,(c - f)b - f c - 5f ,a + b + c + 3f},
--R      6                        2           2
--R    {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
--R      6            2           2                    2
--R    {f  - 1,e - f,d  + 4f d + f ,(d - f)c - f d - 5f ,b - f,a + c + d + 3f},
--R
--R       36        30          24          18          12        6
--R     {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
--R
--R                    12              2
--R         (161718564f   - 161718564)e
--R       + 
--R                      31              25                19                13
--R             - 504205f   + 1287737951f   + 201539391380f   + 253982817368f
--R           + 
--R                          7
--R             201940704665f  + 1574134601f
--R        *
--R           e
--R       + 
--R                   32              26                 20                 14
--R         - 2818405f   + 7198203911f   + 1126548149060f   + 1416530563364f
--R       + 
--R                       8              2
--R         1127377589345f  + 7988820725f
--R       ,
--R
--R                       6                                 2 5                 3 4
--R         (693772639560f  - 693772639560)d - 462515093040f e  + 1850060372160f e
--R       + 
--R                         4 3                     11                  5  2
--R         - 1850060372160f e  + (- 24513299931120f   - 23588269745040f )e
--R       + 
--R                         30                 24                   18
--R             - 890810428f   + 2275181044754f   + 355937263869776f
--R           + 
--R                             12                   6
--R             413736880104344f   + 342849304487996f  + 3704966481878
--R        *
--R           e
--R       + 
--R                      31                  25                    19
--R         - 4163798003f   + 10634395752169f   + 1664161760192806f
--R       + 
--R                          13                    7
--R         2079424391370694f   + 1668153650635921f  + 10924274392693f
--R       ,
--R
--R                      6                           31               25
--R         (12614047992f  - 12614047992)c - 7246825f   + 18508536599f
--R       + 
--R                       19                 13                 7
--R         2896249516034f   + 3581539649666f   + 2796477571739f  - 48094301893f
--R       ,
--R
--R                       6                                 2 5                 3 4
--R         (693772639560f  - 693772639560)b - 925030186080f e  + 2312575465200f e
--R       + 
--R                         4 3                     11                  5  2
--R         - 2312575465200f e  + (- 40007555547960f   - 35382404617560f )e
--R       + 
--R                          30                 24                    18
--R             - 3781280823f   + 9657492291789f   + 1511158913397906f
--R           + 
--R                              12                    6
--R             1837290892286154f   + 1487216006594361f  + 8077238712093
--R        *
--R           e
--R       + 
--R                      31                  25                    19
--R         - 9736390478f   + 24866827916734f   + 3891495681905296f
--R       + 
--R                          13                    7
--R         4872556418871424f   + 3904047887269606f  + 27890075838538f
--R       ,
--R      a + b + c + d + e + f}
--R     ,
--R      6      2           2                    2
--R    {f  - 1,e  + 4f e + f ,(e - f)d - f e - 5f ,c - f,b - f,a + d + e + 3f}]
--R                               Type: List RegularChain(Integer,[a,b,c,d,e,f])
--E 14

--S 15 of 22
lts := lexTriangular(lg,true)$lextripack
--R 
--R
--R   (15)
--R   [
--R       6       6       5     2 4     3 3     4 2     5
--R     {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
--R            2 5     3 4     4 3     5 2
--R      3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
--R             2 5     3 4     4 3      5 2
--R      3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
--R           2 5     3 4     4 3     5 2
--R      a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
--R     ,
--R      6                  2           2
--R    {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
--R      6                        2           2
--R    {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
--R      6            2           2
--R    {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
--R
--R       36        30          24          18          12        6
--R     {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
--R
--R                       2
--R         1387545279120e
--R       + 
--R                        31                  25                    19
--R             4321823003f   - 11037922310209f   - 1727506390124986f
--R           + 
--R                                13                    7
--R             - 2176188913464634f   - 1732620732685741f  - 13506088516033f
--R        *
--R           e
--R       + 
--R                     32                  26                    20
--R         24177661775f   - 61749727185325f   - 9664082618092450f
--R       + 
--R                             14                    8                  2
--R         - 12152237485813570f   - 9672870290826025f  - 68544102808525f
--R       ,
--R
--R         1387545279120d
--R       + 
--R                          30                 24                   18
--R             - 1128983050f   + 2883434331830f   + 451234998755840f
--R           + 
--R                             12                   6
--R             562426491685760f   + 447129055314890f  - 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                   19
--R         - 1816935351f   + 4640452214013f   + 726247129626942f
--R       + 
--R                         13                   7
--R         912871801716798f   + 726583262666877f  + 4909358645961f
--R       ,
--R
--R                                    31                 25                   19
--R         1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
--R       + 
--R                           13                   7
--R         - 383262822316802f   - 300335488637543f  + 5289595037041f
--R       ,
--R
--R         1387545279120b
--R       + 
--R                        30                 24                   18
--R             1128983050f   - 2883434331830f   - 451234998755840f
--R           + 
--R                               12                   6
--R             - 562426491685760f   - 447129055314890f  + 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                    19
--R         - 3283058841f   + 8384938292463f   + 1312252817452422f
--R       + 
--R                          13                    7
--R         1646579934064638f   + 1306372958656407f  + 4694680112151f
--R       ,
--R
--R                                                      31                  25
--R         1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
--R       + 
--R                            19                    13                    7
--R         - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
--R       + 
--R         - 13506088516033f
--R       }
--R     ,
--R      6      2           2
--R    {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
--R                               Type: List RegularChain(Integer,[a,b,c,d,e,f])
--E 15

--S 16 of 22
[ [init(p) for p in (ts :: List(P))] for ts in lts]
--R 
--R
--R   (16)
--R   [[1,3,1,3,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1],
--R    [1387545279120,1387545279120,1387545279120,1387545279120,1387545279120,1],
--R    [1,1,1,1,1,1]]
--RType: List List NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 16

--S 17 of 22
squareFreeLexTriangular(lg,true)$lextripack
--R 
--R
--R   (17)
--R   [
--R       6       6       5     2 4     3 3     4 2     5
--R     {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
--R            2 5     3 4     4 3     5 2
--R      3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
--R             2 5     3 4     4 3      5 2
--R      3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
--R           2 5     3 4     4 3     5 2
--R      a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
--R     ,
--R      6                  2           2
--R    {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
--R      6                        2           2
--R    {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
--R      6            2           2
--R    {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
--R
--R       36        30          24          18          12        6
--R     {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
--R
--R                       2
--R         1387545279120e
--R       + 
--R                        31                  25                    19
--R             4321823003f   - 11037922310209f   - 1727506390124986f
--R           + 
--R                                13                    7
--R             - 2176188913464634f   - 1732620732685741f  - 13506088516033f
--R        *
--R           e
--R       + 
--R                     32                  26                    20
--R         24177661775f   - 61749727185325f   - 9664082618092450f
--R       + 
--R                             14                    8                  2
--R         - 12152237485813570f   - 9672870290826025f  - 68544102808525f
--R       ,
--R
--R         1387545279120d
--R       + 
--R                          30                 24                   18
--R             - 1128983050f   + 2883434331830f   + 451234998755840f
--R           + 
--R                             12                   6
--R             562426491685760f   + 447129055314890f  - 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                   19
--R         - 1816935351f   + 4640452214013f   + 726247129626942f
--R       + 
--R                         13                   7
--R         912871801716798f   + 726583262666877f  + 4909358645961f
--R       ,
--R
--R                                    31                 25                   19
--R         1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
--R       + 
--R                           13                   7
--R         - 383262822316802f   - 300335488637543f  + 5289595037041f
--R       ,
--R
--R         1387545279120b
--R       + 
--R                        30                 24                   18
--R             1128983050f   - 2883434331830f   - 451234998755840f
--R           + 
--R                               12                   6
--R             - 562426491685760f   - 447129055314890f  + 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                    19
--R         - 3283058841f   + 8384938292463f   + 1312252817452422f
--R       + 
--R                          13                    7
--R         1646579934064638f   + 1306372958656407f  + 4694680112151f
--R       ,
--R
--R                                                      31                  25
--R         1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
--R       + 
--R                            19                    13                    7
--R         - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
--R       + 
--R         - 13506088516033f
--R       }
--R     ,
--R      6      2           2
--R    {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
--RType: List SquareFreeRegularTriangularSet(Integer,IndexedExponents OrderedVariableList [a,b,c,d,e,f],OrderedVariableList [a,b,c,d,e,f],NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f]))
--E 17

--S 18 of 22
reduce(+,[degree(ts) for ts in lts])
--R 
--R
--R   (18)  156
--R                                                        Type: PositiveInteger
--E 18

--S 19 of 22
ls2 : List Symbol := concat(ls,new()$Symbol)
--R 
--R
--R   (19)  [a,b,c,d,e,f,%A]
--R                                                            Type: List Symbol
--E 19

--S 20 of 22
zdpack := ZDSOLVE(R,ls,ls2)
--R 
--R
--R   (20)  ZeroDimensionalSolvePackage(Integer,[a,b,c,d,e,f],[a,b,c,d,e,f,%A])
--R                                                                 Type: Domain
--E 20

--S 21 of 22
concat [univariateSolve(ts)$zdpack for ts in lts]
--R 
--R
--R   (21)
--R   [
--R                     4      2
--R     [complexRoots= ?  - 13?  + 49,
--R
--R       coordinates =
--R                 3                3                3                3
--R         [7a + %A  - 6%A, 21b + %A  + %A, 21c - 2%A  + 19%A, 7d - %A  + 6%A,
--R                  3                3
--R          21e - %A  - %A, 21f + 2%A  - 19%A]
--R       ]
--R     ,
--R
--R                     4      2
--R     [complexRoots= ?  + 11?  + 49,
--R
--R       coordinates =
--R                   3                 3                  3
--R         [35a + 3%A  + 19%A, 35b + %A  + 18%A, 35c - 2%A  - %A,
--R                   3                 3                  3
--R          35d - 3%A  - 19%A, 35e - %A  - 18%A, 35f + 2%A  + %A]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3       2
--R         ?  - 12?  + 58?  - 120?  + 207?  - 360?  + 802?  - 1332? + 1369
--R       ,
--R
--R       coordinates =
--R         [
--R                                7           6            5            4
--R             43054532a + 33782%A  - 546673%A  + 3127348%A  - 6927123%A
--R           + 
--R                      3             2
--R             4365212%A  - 25086957%A  + 39582814%A - 107313172
--R           ,
--R
--R                                7           6            5            4
--R             43054532b - 33782%A  + 546673%A  - 3127348%A  + 6927123%A
--R           + 
--R                        3             2
--R             - 4365212%A  + 25086957%A  - 39582814%A + 107313172
--R           ,
--R
--R                                7           6            5            4
--R             21527266c - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  + 10322663%A  - 9026596%A + 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532d + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  - 10322663%A  + 30553862%A - 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532e - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  + 10322663%A  - 30553862%A + 12950740
--R           ,
--R
--R                                7           6            5            4
--R             21527266f + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  - 10322663%A  + 9026596%A - 12950740
--R           ]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3       2
--R         ?  + 12?  + 58?  + 120?  + 207?  + 360?  + 802?  + 1332? + 1369
--R       ,
--R
--R       coordinates =
--R         [
--R                                7           6            5            4
--R             43054532a + 33782%A  + 546673%A  + 3127348%A  + 6927123%A
--R           + 
--R                      3             2
--R             4365212%A  + 25086957%A  + 39582814%A + 107313172
--R           ,
--R
--R                                7           6            5            4
--R             43054532b - 33782%A  - 546673%A  - 3127348%A  - 6927123%A
--R           + 
--R                        3             2
--R             - 4365212%A  - 25086957%A  - 39582814%A - 107313172
--R           ,
--R
--R                                7           6            5            4
--R             21527266c - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  - 10322663%A  - 9026596%A - 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532d + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  + 10322663%A  + 30553862%A + 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532e - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  - 10322663%A  - 30553862%A - 12950740
--R           ,
--R
--R                                7           6            5            4
--R             21527266f + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  + 10322663%A  + 9026596%A + 12950740
--R           ]
--R       ]
--R     ,
--R
--R                     4    2
--R     [complexRoots= ?  - ?  + 1,
--R                                 3            3              3            3
--R      coordinates= [a - %A,b + %A  - %A,c + %A ,d + %A,e - %A  + %A,f - %A ]]
--R     ,
--R
--R                     8     6      4      2
--R     [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
--R
--R       coordinates =
--R                  7      5       3                 7      5       3
--R         [4a - 2%A  - 7%A  - 20%A  - 22%A, 4b + 2%A  + 7%A  + 20%A  + 22%A,
--R                 7      5       3                7      5       3
--R          4c + %A  + 3%A  + 10%A  + 10%A, 4d + %A  + 3%A  + 10%A  + 6%A,
--R                 7      5       3               7      5       3
--R          4e - %A  - 3%A  - 10%A  - 6%A, 4f - %A  - 3%A  - 10%A  - 10%A]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                  3      2                    3      2
--R         [30a - %A  - 5%A  - 30%A - 6, 6b + %A  + 5%A  + 24%A + 6,
--R                  3      2              3      2
--R          30c - %A  - 5%A  - 6, 30d - %A  - 5%A  - 30%A - 6,
--R                  3      2                     3      2
--R          30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                  3      2                    3      2
--R         [30a - %A  + 5%A  - 30%A + 6, 6b + %A  - 5%A  + 24%A - 6,
--R                  3      2              3      2
--R          30c - %A  + 5%A  + 6, 30d - %A  + 5%A  - 30%A + 6,
--R                  3      2                     3      2
--R          30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + 1,b - %A - 5,c + %A + 1,d + 1,e + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - 1,b - %A + 5,c + %A - 1,d - 1,e - 1,f - 1]]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a + %A  + 5%A  + 24%A + 6, 30b - %A  - 5%A  - 6,
--R                  3      2                     3      2
--R          30c - %A  - 5%A  - 30%A - 6, 30d - %A  - 5%A  - 30%A - 6,
--R                  3      2                     3      2
--R          30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a + %A  - 5%A  + 24%A - 6, 30b - %A  + 5%A  + 6,
--R                  3      2                     3      2
--R          30c - %A  + 5%A  - 30%A + 6, 30d - %A  + 5%A  - 30%A + 6,
--R                  3      2                     3      2
--R          30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a - %A - 5,b + %A + 1,c + 1,d + 1,e + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - %A + 5,b + %A - 1,c - 1,d - 1,e - 1,f - 1]]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
--R                 3      2                     3      2
--R          6c + %A  + 5%A  + 24%A + 6, 30d - %A  - 5%A  - 6,
--R                  3      2                     3      2
--R          30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
--R                 3      2                     3      2
--R          6c + %A  - 5%A  + 24%A - 6, 30d - %A  + 5%A  + 6,
--R                  3      2                     3      2
--R          30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + 1,b + 1,c - %A - 5,d + %A + 1,e + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - 1,b - 1,c - %A + 5,d + %A - 1,e - 1,f - 1]]
--R     ,
--R
--R                     8     7      6      5      4     2
--R     [complexRoots= ?  + 6?  + 16?  + 24?  + 18?  - 8?  + 4,
--R
--R       coordinates =
--R                  7      6       5       4      3       2
--R         [2a + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 2%A + 4,
--R                  7      6       5       4      3       2
--R          2b + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 4%A + 4,
--R                 7      6      5      4      3
--R          2c - %A  - 4%A  - 8%A  - 9%A  - 4%A  - 2%A - 4,
--R                 7      6      5      4      3
--R          2d + %A  + 4%A  + 8%A  + 9%A  + 4%A  + 2%A + 4,
--R                  7      6       5       4      3       2
--R          2e - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 4%A - 4,
--R                  7      6       5       4      3       2
--R          2f - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 2%A - 4]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3        2
--R         ?  + 12?  + 64?  + 192?  + 432?  + 768?  + 1024?  + 768? + 256
--R       ,
--R
--R       coordinates =
--R         [
--R                         7        6        5         4         3         2
--R             1408a - 19%A  - 200%A  - 912%A  - 2216%A  - 4544%A  - 6784%A
--R           + 
--R             - 6976%A - 1792
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408b - 37%A  - 408%A  - 1952%A  - 5024%A  - 10368%A  - 16768%A
--R           + 
--R             - 17920%A - 5120
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408c + 37%A  + 408%A  + 1952%A  + 5024%A  + 10368%A  + 16768%A
--R           + 
--R             17920%A + 5120
--R           ,
--R
--R                         7        6        5         4         3         2
--R             1408d + 19%A  + 200%A  + 912%A  + 2216%A  + 4544%A  + 6784%A
--R           + 
--R             6976%A + 1792
--R           ,
--R          2e + %A, 2f - %A]
--R       ]
--R     ,
--R
--R                     8     6      4      2
--R     [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
--R
--R       coordinates =
--R                 7      5       3               7      5       3
--R         [4a - %A  - 3%A  - 10%A  - 6%A, 4b - %A  - 3%A  - 10%A  - 10%A,
--R                  7      5       3                 7      5       3
--R          4c - 2%A  - 7%A  - 20%A  - 22%A, 4d + 2%A  + 7%A  + 20%A  + 22%A,
--R                 7      5       3                7      5       3
--R          4e + %A  + 3%A  + 10%A  + 10%A, 4f + %A  + 3%A  + 10%A  + 6%A]
--R       ]
--R     ,
--R
--R                     8      6      4       2
--R     [complexRoots= ?  + 16?  - 96?  + 256?  + 256,
--R
--R       coordinates =
--R                   7       5        3
--R         [512a - %A  - 12%A  + 176%A  - 448%A,
--R                   7       5       3
--R          128b - %A  - 16%A  + 96%A  - 256%A,
--R                   7       5       3
--R          128c + %A  + 16%A  - 96%A  + 256%A,
--R                   7       5        3
--R          512d + %A  + 12%A  - 176%A  + 448%A, 2e + %A, 2f - %A]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3        2
--R         ?  - 12?  + 64?  - 192?  + 432?  - 768?  + 1024?  - 768? + 256
--R       ,
--R
--R       coordinates =
--R         [
--R                         7        6        5         4         3         2
--R             1408a - 19%A  + 200%A  - 912%A  + 2216%A  - 4544%A  + 6784%A
--R           + 
--R             - 6976%A + 1792
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408b - 37%A  + 408%A  - 1952%A  + 5024%A  - 10368%A  + 16768%A
--R           + 
--R             - 17920%A + 5120
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408c + 37%A  - 408%A  + 1952%A  - 5024%A  + 10368%A  - 16768%A
--R           + 
--R             17920%A - 5120
--R           ,
--R
--R                         7        6        5         4         3         2
--R             1408d + 19%A  - 200%A  + 912%A  - 2216%A  + 4544%A  - 6784%A
--R           + 
--R             6976%A - 1792
--R           ,
--R          2e + %A, 2f - %A]
--R       ]
--R     ,
--R
--R                     8     7      6      5      4     2
--R     [complexRoots= ?  - 6?  + 16?  - 24?  + 18?  - 8?  + 4,
--R
--R       coordinates =
--R                  7      6       5       4      3       2
--R         [2a + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 2%A - 4,
--R                  7      6       5       4      3       2
--R          2b + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 4%A - 4,
--R                 7      6      5      4      3
--R          2c - %A  + 4%A  - 8%A  + 9%A  - 4%A  - 2%A + 4,
--R                 7      6      5      4      3
--R          2d + %A  - 4%A  + 8%A  - 9%A  + 4%A  + 2%A - 4,
--R                  7      6       5       4      3       2
--R          2e - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 4%A + 4,
--R                  7      6       5       4      3       2
--R          2f - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 2%A + 4]
--R       ]
--R     ,
--R
--R                     4      2
--R     [complexRoots= ?  + 12?  + 144,
--R
--R       coordinates =
--R                  2               2               2               2
--R         [12a - %A  - 12, 12b - %A  - 12, 12c - %A  - 12, 12d - %A  - 12,
--R                 2                    2
--R          6e + %A  + 3%A + 12, 6f + %A  - 3%A + 12]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a - %A  - 5%A  - 24%A - 6, 30b + %A  + 5%A  + 30%A + 6,
--R                  3      2                     3      2
--R          30c + %A  + 5%A  + 30%A + 6, 30d + %A  + 5%A  + 30%A + 6,
--R                  3      2                     3      2
--R          30e + %A  + 5%A  + 30%A + 6, 30f + %A  + 5%A  + 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a - %A  + 5%A  - 24%A + 6, 30b + %A  - 5%A  + 30%A - 6,
--R                  3      2                     3      2
--R          30c + %A  - 5%A  + 30%A - 6, 30d + %A  - 5%A  + 30%A - 6,
--R                  3      2                     3      2
--R          30e + %A  - 5%A  + 30%A - 6, 30f + %A  - 5%A  - 6]
--R       ]
--R     ,
--R
--R                     4      2
--R     [complexRoots= ?  + 12?  + 144,
--R
--R       coordinates =
--R                  2               2               2               2
--R         [12a + %A  + 12, 12b + %A  + 12, 12c + %A  + 12, 12d + %A  + 12,
--R                 2                    2
--R          6e - %A  + 3%A - 12, 6f - %A  - 3%A - 12]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 12,
--R      coordinates= [a - 1,b - 1,c - 1,d - 1,2e + %A + 4,2f - %A + 4]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + %A + 5,b - 1,c - 1,d - 1,e - 1,f - %A - 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a + %A - 5,b + 1,c + 1,d + 1,e + 1,f - %A + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 12,
--R      coordinates= [a + 1,b + 1,c + 1,d + 1,2e + %A - 4,2f - %A - 4]]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
--R                  3      2                    3      2
--R          30c - %A  - 5%A  - 30%A - 6, 6d + %A  + 5%A  + 24%A + 6,
--R                  3      2              3      2
--R          30e - %A  - 5%A  - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
--R                  3      2                    3      2
--R          30c - %A  + 5%A  - 30%A + 6, 6d + %A  - 5%A  + 24%A - 6,
--R                  3      2              3      2
--R          30e - %A  + 5%A  + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + 1,b + 1,c + 1,d - %A - 5,e + %A + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - 1,b - 1,c - 1,d - %A + 5,e + %A - 1,f - 1]]
--R     ]
--RType: List Record(complexRoots: SparseUnivariatePolynomial Integer,coordinates: List Polynomial Integer)
--E 21

--S 22 of 22
concat [realSolve(ts)$zdpack for ts in lts] 
--R 
--R
--R   (22)
--R   [[%B1,%B1,%B1,%B5,- %B5 - 4%B1,%B1], [%B1,%B1,%B1,%B6,- %B6 - 4%B1,%B1],
--R    [%B2,%B2,%B2,%B3,- %B3 - 4%B2,%B2], [%B2,%B2,%B2,%B4,- %B4 - 4%B2,%B2],
--R    [%B7,%B7,%B7,%B7,%B11,- %B11 - 4%B7], [%B7,%B7,%B7,%B7,%B12,- %B12 - 4%B7],
--R    [%B8,%B8,%B8,%B8,%B9,- %B9 - 4%B8], [%B8,%B8,%B8,%B8,%B10,- %B10 - 4%B8],
--R    [%B13,%B13,%B17,- %B17 - 4%B13,%B13,%B13],
--R    [%B13,%B13,%B18,- %B18 - 4%B13,%B13,%B13],
--R    [%B14,%B14,%B15,- %B15 - 4%B14,%B14,%B14],
--R    [%B14,%B14,%B16,- %B16 - 4%B14,%B14,%B14],
--R
--R     [%B19, %B29,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B19   - ---------- %B19   - ----------- %B19
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B19   - ------------- %B19  - ----------- %B19
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B19   + ------------- %B19   + --------------- %B19
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B19   + --------------- %B19  - ------------ %B19
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B19   - ------------- %B19   - --------------- %B19
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B19   - --------------- %B19  - ------------- %B19
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B29 - ------------- %B19   + ------------ %B19
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B19   + ---------------- %B19
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B19  + -------------- %B19
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B19, %B30,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B19   - ---------- %B19   - ----------- %B19
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B19   - ------------- %B19  - ----------- %B19
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B19   + ------------- %B19   + --------------- %B19
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B19   + --------------- %B19  - ------------ %B19
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B19   - ------------- %B19   - --------------- %B19
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B19   - --------------- %B19  - ------------- %B19
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B30 - ------------- %B19   + ------------ %B19
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B19   + ---------------- %B19
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B19  + -------------- %B19
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B20, %B27,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B20   - ---------- %B20   - ----------- %B20
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B20   - ------------- %B20  - ----------- %B20
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B20   + ------------- %B20   + --------------- %B20
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B20   + --------------- %B20  - ------------ %B20
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B20   - ------------- %B20   - --------------- %B20
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B20   - --------------- %B20  - ------------- %B20
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B27 - ------------- %B20   + ------------ %B20
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B20   + ---------------- %B20
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B20  + -------------- %B20
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B20, %B28,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B20   - ---------- %B20   - ----------- %B20
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B20   - ------------- %B20  - ----------- %B20
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B20   + ------------- %B20   + --------------- %B20
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B20   + --------------- %B20  - ------------ %B20
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B20   - ------------- %B20   - --------------- %B20
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B20   - --------------- %B20  - ------------- %B20
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B28 - ------------- %B20   + ------------ %B20
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B20   + ---------------- %B20
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B20  + -------------- %B20
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B21, %B25,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B21   - ---------- %B21   - ----------- %B21
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B21   - ------------- %B21  - ----------- %B21
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B21   + ------------- %B21   + --------------- %B21
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B21   + --------------- %B21  - ------------ %B21
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B21   - ------------- %B21   - --------------- %B21
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B21   - --------------- %B21  - ------------- %B21
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B25 - ------------- %B21   + ------------ %B21
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B21   + ---------------- %B21
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B21  + -------------- %B21
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B21, %B26,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B21   - ---------- %B21   - ----------- %B21
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B21   - ------------- %B21  - ----------- %B21
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B21   + ------------- %B21   + --------------- %B21
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B21   + --------------- %B21  - ------------ %B21
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B21   - ------------- %B21   - --------------- %B21
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B21   - --------------- %B21  - ------------- %B21
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B26 - ------------- %B21   + ------------ %B21
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B21   + ---------------- %B21
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B21  + -------------- %B21
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B22, %B23,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B22   - ---------- %B22   - ----------- %B22
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B22   - ------------- %B22  - ----------- %B22
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B22   + ------------- %B22   + --------------- %B22
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B22   + --------------- %B22  - ------------ %B22
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B22   - ------------- %B22   - --------------- %B22
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B22   - --------------- %B22  - ------------- %B22
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B23 - ------------- %B22   + ------------ %B22
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B22   + ---------------- %B22
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B22  + -------------- %B22
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B22, %B24,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B22   - ---------- %B22   - ----------- %B22
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B22   - ------------- %B22  - ----------- %B22
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B22   + ------------- %B22   + --------------- %B22
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B22   + --------------- %B22  - ------------ %B22
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B22   - ------------- %B22   - --------------- %B22
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B22   - --------------- %B22  - ------------- %B22
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B24 - ------------- %B22   + ------------ %B22
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B22   + ---------------- %B22
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B22  + -------------- %B22
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R    [%B31,%B35,- %B35 - 4%B31,%B31,%B31,%B31],
--R    [%B31,%B36,- %B36 - 4%B31,%B31,%B31,%B31],
--R    [%B32,%B33,- %B33 - 4%B32,%B32,%B32,%B32],
--R    [%B32,%B34,- %B34 - 4%B32,%B32,%B32,%B32]]
--R                                 Type: List List RealClosure Fraction Integer
--E 22
)spool
)lisp (bye)
@
<<LexTriangularPackage.help>>=
====================================================================
LexTriangularPackage examples
====================================================================

The LexTriangularPackage package constructor provides an
implementation of the lexTriangular algorithm (D. Lazard "Solving
Zero-dimensional Algebraic Systems", J. of Symbol. Comput., 1992).
This algorithm decomposes a zero-dimensional variety into zero-sets of
regular triangular sets.  Thus the input system must have a finite
number of complex solutions.  Moreover, this system needs to be a
lexicographical Groebner basis.

This package takes two arguments: the coefficient-ring R of the
polynomials, which must be a GcdDomain and their set of variables
given by ls a List Symbol.  The type of the input polynomials must be
NewSparseMultivariatePolynomial(R,V) where V is OrderedVariableList(ls).  
The abbreviation for LexTriangularPackage is LEXTRIPK.  The main operations 
are lexTriangular and squareFreeLexTriangular.  The later provide 
decompositions by means of square-free regular triangular sets, built 
with the SquareFreeRegularTriangularSet constructor, whereas the former 
uses the RegularTriangularSet constructor.  Note that these constructors
also implement another algorithm for solving algebraic systems by
means of regular triangular sets; in that case no computations of
Groebner bases are needed and the input system may have any dimension
(i.e. it may have an infinite number of solutions).

The implementation of the lexTriangular algorithm provided in the
LexTriangularPackage constructor differs from that reported in
"Computations of gcd over algebraic towers of simple extensions" by
M. Moreno Maza and R. Rioboo (in proceedings of AAECC11, Paris, 1995).
Indeed, the squareFreeLexTriangular operation removes all multiplicities 
of the solutions (i.e. the computed solutions are pairwise different) 
and the lexTriangular operation may keep some multiplicities; this 
later operation runs generally faster than the former.

The interest of the lexTriangular algorithm is due to the
following experimental remark.  For some examples, a triangular
decomposition of a zero-dimensional variety can be computed faster via
a lexicographical Groebner basis computation than by using a direct method 
(like that of SquareFreeRegularTriangularSet and RegularTriangularSet).  
This happens typically when the total degree of the system relies 
essentially on its smallest variable (like in the Katsura systems).  
When this is not the case, the direct method may give better timings 
(like in the Rose system).

Of course, the direct method can also be applied to a lexicographical
Groebner basis.  However, the lexTriangular algorithm takes advantage 
of the structure of this basis and avoids many unnecessary computations 
which are performed by the direct method.

For this purpose of solving algebraic systems with a finite number of
solutions, see also the ZeroDimensionalSolvePackage.  It allows
to use both strategies (the lexTriangular algorithm and the direct
method) for computing either the complex or real roots of a system.

Note that the way of understanding triangular decompositions is
detailed in the example of the RegularTriangularSet constructor.

Since the LexTriangularPackage package constructor is limited to
zero-dimensional systems, it provides a zeroDimensional? operation to
check whether this requirement holds.  There is also a groebner operation 
to compute the lexicographical Groebner basis of a set of polynomials 
with type NewSparseMultivariatePolynomial(R,V).  The elimination ordering 
is that given by ls (the greatest variable being the first element
of ls).  This basis is computed by the FLGM algorithm (Faugere et al. 
"Efficient Computation of Zero-Dimensional Groebner Bases by Change 
of Ordering" , J. of Symbol. Comput., 1993) implemented in the 
LinGroebnerPackage package constructor.

Once a lexicographical Groebner basis is computed, then one can call
the operations lexTriangular and squareFreeLexTriangular.  Note that
these operations admit an optional argument to produce normalized
triangular sets.  There is also a zeroSetSplit operation which does
all the job from the input system; an error is produced if this system
is not zero-dimensional.

Let us illustrate the facilities of the LexTriangularPackage constructor
by a famous example, the cyclic-6 root system.

Define the coefficient ring.

  R := Integer
   Integer
                       Type: Domain

Define the list of variables,

  ls : List Symbol := [a,b,c,d,e,f]
    [a,b,c,d,e,f]
                      Type: List Symbol

and make it an ordered set.

  V := OVAR(ls)
    OrderedVariableList [a,b,c,d,e,f]
                      Type: Domain

Define the polynomial ring.

  P := NSMP(R, V)
   NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
                      Type: Domain

Define the polynomials.

  p1: P :=  a*b*c*d*e*f - 1
   f e d c b a - 1
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p2: P := a*b*c*d*e +a*b*c*d*f +a*b*c*e*f +a*b*d*e*f +a*c*d*e*f +b*c*d*e*f 
   ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p3: P :=  a*b*c*d + a*b*c*f + a*b*e*f + a*d*e*f + b*c*d*e + c*d*e*f 
   (((d + f)c + f e)b + f e d)a + e d c b + f e d c
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p4: P := a*b*c + a*b*f + a*e*f + b*c*d + c*d*e + d*e*f 
   ((c + f)b + f e)a + d c b + e d c + f e d
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p5: P := a*b + a*f + b*c + c*d + d*e + e*f 
   (b + f)a + c b + d c + e d + f e
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p6: P := a + b + c + d + e + f 
   a + b + c + d + e + f
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  lp := [p1, p2, p3, p4, p5, p6]
    [f e d c b a - 1, ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b,
     (((d + f)c + f e)b + f e d)a + e d c b + f e d c,
     ((c + f)b + f e)a + d c b + e d c + f e d,
     (b + f)a + c b + d c + e d + f e, a + b + c + d + e + f]
   Type: List NewSparseMultivariatePolynomial(Integer,
                                           OrderedVariableList [a,b,c,d,e,f])

Now call LEXTRIPK.

  lextripack :=  LEXTRIPK(R,ls)
    LexTriangularPackage(Integer,[a,b,c,d,e,f])
                        Type: Domain

Compute the lexicographical Groebner basis of the system.  This may
take between 5 minutes and one hour, depending on your machine.

  lg := groebner(lp)$lextripack
   [a + b + c + d + e + f,
                        2                                           2
      3968379498283200b  + 15873517993132800f b + 3968379498283200d
    + 
                                              3 5                     4 4
      15873517993132800f d + 3968379498283200f e  - 15873517993132800f e
    + 
                        5 3                       6                       2
      23810276989699200f e  + (206355733910726400f  + 230166010900425600)e
    + 
                            43                       37
          - 729705987316687f   + 1863667496867205421f
        + 
                                31                         25
          291674853771731104461f   + 365285994691106921745f
        + 
                             19                         13
          549961185828911895f   - 365048404038768439269f
        + 
                                  7
          - 292382820431504027669f  - 2271898467631865497f
     *
        e
    + 
                         44                        38
      - 3988812642545399f   + 10187423878429609997f
    + 
                             32                          26
      1594377523424314053637f   + 1994739308439916238065f
    + 
                          20                          14
      1596840088052642815f   - 1993494118301162145413f
    + 
                               8                        2
      - 1596049742289689815053f  - 11488171330159667449f
    ,
                                                                      2
      (23810276989699200c - 23810276989699200f)b + 23810276989699200c
    + 
                                               2
      71430830969097600f c - 23810276989699200d  - 95241107958796800f d
    + 
                          3 5                      4 4                      5 3
      - 55557312975964800f e  + 174608697924460800f e  - 174608697924460800f e
    + 
                             6                        2
      (- 2428648252949318400f  - 2611193709870345600)e
    + 
                           43                        37
          8305444561289527f   - 21212087151945459641f
        + 
                                   31                          25
          - 3319815883093451385381f   - 4157691646261657136445f
        + 
                                19                          13
          - 6072721607510764095f   + 4154986709036460221649f
        + 
                                 7
          3327761311138587096749f  + 25885340608290841637f
     *
        e
    + 
                        44                         38
      45815897629010329f   - 117013765582151891207f
    + 
                                32                           26
      - 18313166848970865074187f   - 22909971239649297438915f
    + 
                             20                           14
      - 16133250761305157265f   + 22897305857636178256623f
    + 
                              8                         2
      18329944781867242497923f  + 130258531002020420699f
    ,
       (7936758996566400d - 7936758996566400f)b - 7936758996566400f d
    + 
                         3 5                     4 4                     5 3
      - 7936758996566400f e  + 23810276989699200f e  - 23810276989699200f e
    + 
                            6                       2
      (- 337312257354072000f  - 369059293340337600)e
    + 
                           43                       37
          1176345388640471f   - 3004383582891473073f
        + 
                                  31                         25
          - 470203502707246105653f   - 588858183402644348085f
        + 
                               19                         13
          - 856939308623513535f   + 588472674242340526377f
        + 
                                7
          471313241958371103517f  + 3659742549078552381f
     *
        e
    + 
                       44                        38                          32
      6423170513956901f   - 16404772137036480803f   - 2567419165227528774463f
    + 
                               26                       20
      - 3211938090825682172335f   - 2330490332697587485f
    + 
                             14                          8
      3210100109444754864587f   + 2569858315395162617847f
    + 
                           2
      18326089487427735751f
    ,
                                                                     3 5
      (11905138494849600e - 11905138494849600f)b - 3968379498283200f e
    + 
                        4 4                     5 3
      15873517993132800f e  - 27778656487982400f e
    + 
                            6                       2
      (- 208339923659868000f  - 240086959646133600)e
    + 
                          43                       37
          786029984751110f   - 2007519008182245250f
        + 
                                  31                         25
          - 314188062908073807090f   - 393423667537929575250f
        + 
                               19                         13
          - 550329120654394950f   + 393196408728889612770f
        + 
                                7
          314892372799176495730f  + 2409386515146668530f
     *
        e
    + 
                       44                        38                          32
      4177638546747827f   - 10669685294602576381f   - 1669852980419949524601f
    + 
                               26                       20
      - 2089077057287904170745f   - 1569899763580278795f
    + 
                             14                          8
      2087864026859015573349f   + 1671496085945199577969f
    + 
                           2
      11940257226216280177f
    ,
                          6                                           2 5
      (11905138494849600f  - 11905138494849600)b - 15873517993132800f e
    + 
                        3 4                     4 3
      39683794982832000f e  - 39683794982832000f e
    + 
                            11                      5  2
      (- 686529653202993600f   - 607162063237329600f )e
    + 
                         42                      36                        30
          65144531306704f   - 166381280901088652f   - 26033434502470283472f
        + 
                                 24                      18
          - 31696259583860650140f   + 971492093167581360f
        + 
                             12                        6
        32220085033691389548f   + 25526177666070529808f  + 138603268355749244
     *
        e
    + 
                      43                      37                        31
      167620036074811f   - 428102417974791473f   - 66997243801231679313f
    + 
                             25                      19
      - 83426716722148750485f   + 203673895369980765f
    + 
                           13                        7
      83523056326010432457f   + 66995789640238066937f  + 478592855549587901f
    ,
                    3                   2                 2                45
      801692827936c  + 2405078483808f c  - 2405078483808f c - 13752945467f
    + 
                     39                    33                    27
      35125117815561f   + 5496946957826433f   + 6834659447749117f
    + 
                       21                    15                    9
      - 44484880462461f   - 6873406230093057f   - 5450844938762633f
    + 
                    3
      1216586044571f
    ,
                                                                      2
      (23810276989699200d - 23810276989699200f)c + 23810276989699200d
    + 
                                              3 5                     4 4
      71430830969097600f d + 7936758996566400f e  - 31747035986265600f e
    + 
                        5 3                       6                       2
      31747035986265600f e  + (404774708824886400f  + 396837949828320000)e
    + 
                             43                       37
          - 1247372229446701f   + 3185785654596621203f
        + 
                                31                         25
          498594866849974751463f   + 624542545845791047935f
        + 
                             19                         13
          931085755769682885f   - 624150663582417063387f
        + 
                                  7
          - 499881859388360475647f  - 3926885313819527351f
     *
        e
    + 
                         44                        38
      - 7026011547118141f   + 17944427051950691243f
    + 
                             32                          26
      2808383522593986603543f   + 3513624142354807530135f
    + 
                          20                          14
      2860757006705537685f   - 3511356735642190737267f
    + 
                               8                        2
      - 2811332494697103819887f  - 20315011631522847311f
    ,
       (7936758996566400e - 7936758996566400f)c
    + 
                          43                     37                       31
          - 4418748183673f   + 11285568707456559f   + 1765998617294451019f
        + 
                              25                     19
          2173749283622606155f   - 55788292195402895f
        + 
                              13                       7
        - 2215291421788292951f   - 1718142665347430851f  + 30256569458230237f
     *
        e
    + 
                    44                     38                       32
      4418748183673f   - 11285568707456559f   - 1765998617294451019f
    + 
                            26                     20                       14
      - 2173749283622606155f   + 55788292195402895f   + 2215291421788292951f
    + 
                          8                     2
      1718142665347430851f  - 30256569458230237f
    ,
                       6                                  43
      (72152354514240f  - 72152354514240)c + 40950859449f
    + 
                        37                     31                     25
      - 104588980990367f   - 16367227395575307f   - 20268523416527355f
    + 
                      19                     13                     7
      442205002259535f   + 20576059935789063f   + 15997133796970563f
    + 
      - 275099892785581f
    ,
                        3                      2                    2
      1984189749141600d  + 5952569247424800f d  - 5952569247424800f d
    + 
                         4 5                     5 4                     3
      - 3968379498283200f e  + 15873517993132800f e  + 17857707742274400e
    + 
                            7                        2
      (- 148814231185620000f  - 162703559429611200f)e
    + 
                            44                      38
          - 390000914678878f   + 996062704593756434f
        + 
                                32                         26
          155886323972034823914f   + 194745956143985421330f
        + 
                           20                         14
          6205077595574430f   - 194596512653299068786f
        + 
                                  8                       2
          - 155796897940756922666f  - 1036375759077320978f
     *
        e
    + 
                        45                      39                         33
      - 374998630035991f   + 957747106595453993f   + 149889155566764891693f
    + 
                            27                      21
      187154171443494641685f   - 127129015426348065f
    + 
                            15                         9                      3
    - 187241533243115040417f   - 149719983567976534037f  - 836654081239648061f
    ,
                                                                   3 5
      (5952569247424800e - 5952569247424800f)d - 3968379498283200f e
    + 
                       4 4                    5 3
      9920948745708000f e  - 3968379498283200f e
    + 
                            6                       2
      (- 148814231185620000f  - 150798420934761600)e
    + 
                          43                       37
          492558110242553f   - 1257992359608074599f
        + 
                                  31                         25
          - 196883094539368513959f   - 246562115745735428055f
        + 
                               19                         13
          - 325698701993885505f   + 246417769883651808111f
        + 
                                7
          197327352068200652911f  + 1523373796389332143f
     *
        e
    + 
                       44                       38                          32
      2679481081803026f   - 6843392695421906608f   - 1071020459642646913578f
    + 
                               26                      20
      - 1339789169692041240060f   - 852746750910750210f
    + 
                             14                          8
      1339105101971878401312f   + 1071900289758712984762f
    + 
                          2
      7555239072072727756f
    ,
                          6                                          2 5
      (11905138494849600f  - 11905138494849600)d - 7936758996566400f e
    + 
                        3 4                     4 3
      31747035986265600f e  - 31747035986265600f e
    + 
                            11                      5  2
      (- 420648226818019200f   - 404774708824886400f )e
    + 
                         42                     36                       30
          15336187600889f   - 39169739565161107f   - 6127176127489690827f
        + 
                                24                      18
          - 7217708742310509615f   + 538628483890722735f
        + 
                              12                       6
          7506804353843507643f   + 5886160769782607203f  + 63576108396535879
     *
        e
    + 
                     43                      37                        31
      71737781777066f   - 183218856207557938f   - 28672874271132276078f
    + 
                             25                      19
      - 35625223686939812010f   + 164831339634084390f
    + 
                           13                        7
      35724160423073052642f   + 28627022578664910622f  + 187459987029680506f
    ,
                        6                      5                    2 4
      1322793166094400e  - 3968379498283200f e  + 3968379498283200f e
    + 
                         3 3
      - 5291172664377600f e
    + 
                            10                      4  2
      (- 230166010900425600f   - 226197631402142400f )e
    + 
                               47                         41
          - 152375364610443885f   + 389166626064854890415f
        + 
                                  35                           29
          60906097841360558987335f   + 76167367934608798697275f
        + 
                               23                           17
          27855066785995181125f   - 76144952817052723145495f
        + 
                                    11                         5
          - 60933629892463517546975f   - 411415071682002547795f
     *
        e
    + 
                        42                      36                        30
      - 209493533143822f   + 535045979490560586f   + 83737947964973553146f
    + 
                            24                      18
      104889507084213371570f   + 167117997269207870f
    + 
                              12                        6
      - 104793725781390615514f   - 83842685189903180394f  - 569978796672974242
    ,
                       6                   3
      (25438330117200f  + 25438330117200)e
    + 
                      7                    2
      (76314990351600f  + 76314990351600f)e
    + 
                          44                    38                      32
          - 1594966552735f   + 4073543370415745f   + 637527159231148925f
        + 
                             26                   20                      14
          797521176113606525f   + 530440941097175f   - 797160527306433145f
        + 
                               8                    2
          - 638132320196044965f  - 4510507167940725f
     *
        e
    + 
                      45                     39                       33
      - 6036376800443f   + 15416903421476909f   + 2412807646192304449f
    + 
                          27                    21                       15
      3017679923028013705f   + 1422320037411955f   - 3016560402417843941f
    + 
                            9                     3
      - 2414249368183033161f  - 16561862361763873f
    ,
                      12                  2
      (1387545279120f   - 1387545279120)e
    + 
                     43                  37                    31
          4321823003f   - 11037922310209f   - 1727510711947989f
        + 
                             25                 19                    13
          - 2165150991154425f   - 5114342560755f   + 2162682824948601f
        + 
                           7
          1732620732685741f  + 13506088516033f
     *
        e
    + 
                  44                  38                    32
      24177661775f   - 61749727185325f   - 9664106795754225f
    + 
                          26                 20                     14
      - 12090487758628245f   - 8787672733575f   + 12083693383005045f
    + 
                       8                  2
      9672870290826025f  + 68544102808525f
    ,
    48        42          36          30          18          12        6
   f   - 2554f   - 399710f   - 499722f   + 499722f   + 399710f   + 2554f  - 1]
  Type: List NewSparseMultivariatePolynomial(Integer,
    OrderedVariableList [a,b,c,d,e,f])

Apply lexTriangular to compute a decomposition into regular triangular sets.
This should not take more than 5 seconds.

  lexTriangular(lg,false)$lextripack
  [
     6       6       5     2 4     3 3     4 2     5
   {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
          2 5     3 4     4 3     5 2
    3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
           2 5     3 4     4 3      5 2
    3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
         2 5     3 4     4 3     5 2
    a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
   ,
    6                  2           2                    2
  {f  - 1,e - f,d - f,c  + 4f c + f ,(c - f)b - f c - 5f ,a + b + c + 3f},
    6                        2           2
  {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
    6            2           2                    2
  {f  - 1,e - f,d  + 4f d + f ,(d - f)c - f d - 5f ,b - f,a + c + d + 3f},
      36        30          24          18          12        6
   {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
                   12              2
       (161718564f   - 161718564)e
     + 
                    31              25                19                13
           - 504205f   + 1287737951f   + 201539391380f   + 253982817368f
         + 
                        7
           201940704665f  + 1574134601f
      *
         e
     + 
                 32              26                 20                 14
       - 2818405f   + 7198203911f   + 1126548149060f   + 1416530563364f
     + 
                     8              2
       1127377589345f  + 7988820725f
     ,
                      6                                 2 5                 3 4
       (693772639560f  - 693772639560)d - 462515093040f e  + 1850060372160f e
     + 
                       4 3                     11                  5  2
       - 1850060372160f e  + (- 24513299931120f   - 23588269745040f )e
     + 
                       30                 24                   18
           - 890810428f   + 2275181044754f   + 355937263869776f
         + 
                           12                   6
           413736880104344f   + 342849304487996f  + 3704966481878
      *
         e
     + 
                    31                  25                    19
       - 4163798003f   + 10634395752169f   + 1664161760192806f
     + 
                        13                    7
       2079424391370694f   + 1668153650635921f  + 10924274392693f
     ,
                     6                           31               25
       (12614047992f  - 12614047992)c - 7246825f   + 18508536599f
     + 
                     19                 13                 7
       2896249516034f   + 3581539649666f   + 2796477571739f  - 48094301893f
     ,
                      6                                 2 5                 3 4
       (693772639560f  - 693772639560)b - 925030186080f e  + 2312575465200f e
     + 
                       4 3                     11                  5  2
       - 2312575465200f e  + (- 40007555547960f   - 35382404617560f )e
     + 
                        30                 24                    18
           - 3781280823f   + 9657492291789f   + 1511158913397906f
         + 
                            12                    6
           1837290892286154f   + 1487216006594361f  + 8077238712093
      *
         e
     + 
                    31                  25                    19
       - 9736390478f   + 24866827916734f   + 3891495681905296f
     + 
                        13                    7
       4872556418871424f   + 3904047887269606f  + 27890075838538f
     ,
    a + b + c + d + e + f}
   ,
    6      2           2                    2
  {f  - 1,e  + 4f e + f ,(e - f)d - f e - 5f ,c - f,b - f,a + d + e + 3f}]
                             Type: List RegularChain(Integer,[a,b,c,d,e,f])

Note that the first set of the decomposition is normalized (all
initials are integer numbers) but not the second one (normalized
triangular sets are defined in the description of the 
NormalizedTriangularSetCategory constructor).

So apply now lexTriangular to produce normalized triangular sets.

  lts := lexTriangular(lg,true)$lextripack
   [
      6       6       5     2 4     3 3     4 2     5
    {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
           2 5     3 4     4 3     5 2
     3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
            2 5     3 4     4 3      5 2
     3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
          2 5     3 4     4 3     5 2
     a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
    ,
     6                  2           2
   {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
     6                        2           2
   {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
     6            2           2
   {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
       36        30          24          18          12        6
    {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
                       2
        1387545279120e
      + 
                       31                  25                    19
            4321823003f   - 11037922310209f   - 1727506390124986f
          + 
                               13                    7
            - 2176188913464634f   - 1732620732685741f  - 13506088516033f
       *
          e
      + 
                    32                  26                    20
        24177661775f   - 61749727185325f   - 9664082618092450f
      + 
                            14                    8                  2
        - 12152237485813570f   - 9672870290826025f  - 68544102808525f
      ,
         1387545279120d
      + 
                         30                 24                   18
            - 1128983050f   + 2883434331830f   + 451234998755840f
          + 
                            12                   6
            562426491685760f   + 447129055314890f  - 165557857270
       *
          e
      + 
                     31                 25                   19
        - 1816935351f   + 4640452214013f   + 726247129626942f
      + 
                        13                   7
        912871801716798f   + 726583262666877f  + 4909358645961f
      ,
                                    31                 25                   19
        1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
      + 
                          13                   7
        - 383262822316802f   - 300335488637543f  + 5289595037041f
      ,
         1387545279120b
      + 
                       30                 24                   18
            1128983050f   - 2883434331830f   - 451234998755840f
          + 
                              12                   6
            - 562426491685760f   - 447129055314890f  + 165557857270
       *
          e
      + 
                     31                 25                    19
        - 3283058841f   + 8384938292463f   + 1312252817452422f
      + 
                         13                    7
        1646579934064638f   + 1306372958656407f  + 4694680112151f
      ,
                                                      31                  25
        1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
      + 
                           19                    13                    7
        - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
      + 
        - 13506088516033f
      }
    ,
     6      2           2
   {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
                              Type: List RegularChain(Integer,[a,b,c,d,e,f])

We check that all initials are constant.

  [ [init(p) for p in (ts :: List(P))] for ts in lts]
   [[1,3,1,3,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1],
    [1387545279120,1387545279120,1387545279120,1387545279120,1387545279120,1],
    [1,1,1,1,1,1]]
     Type: List List NewSparseMultivariatePolynomial(Integer,
                                       OrderedVariableList [a,b,c,d,e,f])

Note that each triangular set in lts is a lexicographical Groebner
basis.  Recall that a point belongs to the variety associated with lp
if and only if it belongs to that associated with one triangular set
ts in lts.

By running the squareFreeLexTriangular operation, we retrieve the
above decomposition.

  squareFreeLexTriangular(lg,true)$lextripack
  [
      6       6       5     2 4     3 3     4 2     5
    {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
           2 5     3 4     4 3     5 2
     3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
            2 5     3 4     4 3      5 2
     3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
          2 5     3 4     4 3     5 2
     a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
    ,
     6                  2           2
   {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
     6                        2           2
   {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
     6            2           2
   {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
       36        30          24          18          12        6
    {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
                       2
        1387545279120e
      + 
                       31                  25                    19
            4321823003f   - 11037922310209f   - 1727506390124986f
          + 
                               13                    7
            - 2176188913464634f   - 1732620732685741f  - 13506088516033f
       *
          e
      + 
                    32                  26                    20
        24177661775f   - 61749727185325f   - 9664082618092450f
      + 
                            14                    8                  2
        - 12152237485813570f   - 9672870290826025f  - 68544102808525f
      ,
         1387545279120d
      + 
                         30                 24                   18
            - 1128983050f   + 2883434331830f   + 451234998755840f
          + 
                            12                   6
            562426491685760f   + 447129055314890f  - 165557857270
       *
          e
      + 
                     31                 25                   19
        - 1816935351f   + 4640452214013f   + 726247129626942f
      + 
                        13                   7
        912871801716798f   + 726583262666877f  + 4909358645961f
      ,
                                    31                 25                   19
        1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
      + 
                          13                   7
        - 383262822316802f   - 300335488637543f  + 5289595037041f
      ,
         1387545279120b
      + 
                       30                 24                   18
            1128983050f   - 2883434331830f   - 451234998755840f
          + 
                              12                   6
            - 562426491685760f   - 447129055314890f  + 165557857270
       *
          e
      + 
                     31                 25                    19
        - 3283058841f   + 8384938292463f   + 1312252817452422f
      + 
                         13                    7
        1646579934064638f   + 1306372958656407f  + 4694680112151f
      ,
                                                      31                  25
        1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
      + 
                           19                    13                    7
        - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
      + 
        - 13506088516033f
      }
    ,
     6      2           2
   {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
  Type: List SquareFreeRegularTriangularSet(Integer,
               IndexedExponents OrderedVariableList [a,b,c,d,e,f],
               OrderedVariableList [a,b,c,d,e,f],
               NewSparseMultivariatePolynomial(Integer,
                                OrderedVariableList [a,b,c,d,e,f]))

Thus the solutions given by lts are pairwise different.

We count them as follows.

  reduce(+,[degree(ts) for ts in lts])
    156
                      Type: PositiveInteger

We can investigate the triangular decomposition lts by using the
ZeroDimensionalSolvePackage.

This requires to add an extra variable (smaller than the others) as follows.

  ls2 : List Symbol := concat(ls,new()$Symbol)
    [a,b,c,d,e,f,%A]
                      Type: List Symbol

Then we call the package.

  zdpack := ZDSOLVE(R,ls,ls2)
   (20)  ZeroDimensionalSolvePackage(Integer,[a,b,c,d,e,f],[a,b,c,d,e,f,%A])
                      Type: Domain

We compute a univariate representation of the variety associated with
the input system as follows.

  concat [univariateSolve(ts)$zdpack for ts in lts]
  [
                    4      2
    [complexRoots= ?  - 13?  + 49,
       coordinates =
                3                3                3                3
        [7a + %A  - 6%A, 21b + %A  + %A, 21c - 2%A  + 19%A, 7d - %A  + 6%A,
                 3                3
         21e - %A  - %A, 21f + 2%A  - 19%A]
      ]
    ,
                     4      2
    [complexRoots= ?  + 11?  + 49,
       coordinates =
                  3                 3                  3
        [35a + 3%A  + 19%A, 35b + %A  + 18%A, 35c - 2%A  - %A,
                  3                 3                  3
         35d - 3%A  - 19%A, 35e - %A  - 18%A, 35f + 2%A  + %A]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3       2
        ?  - 12?  + 58?  - 120?  + 207?  - 360?  + 802?  - 1332? + 1369
      ,
       coordinates =
        [
                               7           6            5            4
            43054532a + 33782%A  - 546673%A  + 3127348%A  - 6927123%A
          + 
                     3             2
            4365212%A  - 25086957%A  + 39582814%A - 107313172
          ,
                                7           6            5            4
            43054532b - 33782%A  + 546673%A  - 3127348%A  + 6927123%A
          + 
                       3             2
            - 4365212%A  + 25086957%A  - 39582814%A + 107313172
          ,
                                7           6            5            4
            21527266c - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
          + 
                       3             2
            - 2892788%A  + 10322663%A  - 9026596%A + 12950740
          ,
                                7           6            5            4
            43054532d + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
          + 
                     3             2
            2892788%A  - 10322663%A  + 30553862%A - 12950740
          ,
                                7           6            5            4
            43054532e - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
          + 
                       3             2
            - 2892788%A  + 10322663%A  - 30553862%A + 12950740
          ,
                                7           6            5            4
            21527266f + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
          + 
                     3             2
            2892788%A  - 10322663%A  + 9026596%A - 12950740
          ]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3       2
        ?  + 12?  + 58?  + 120?  + 207?  + 360?  + 802?  + 1332? + 1369
      ,
       coordinates =
        [
                               7           6            5            4
            43054532a + 33782%A  + 546673%A  + 3127348%A  + 6927123%A
          + 
                     3             2
            4365212%A  + 25086957%A  + 39582814%A + 107313172
          ,
                                7           6            5            4
            43054532b - 33782%A  - 546673%A  - 3127348%A  - 6927123%A
          + 
                       3             2
            - 4365212%A  - 25086957%A  - 39582814%A - 107313172
          ,
                                7           6            5            4
            21527266c - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
          + 
                       3             2
            - 2892788%A  - 10322663%A  - 9026596%A - 12950740
          ,
                                7           6            5            4
            43054532d + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
          + 
                     3             2
            2892788%A  + 10322663%A  + 30553862%A + 12950740
          ,
                                7           6            5            4
            43054532e - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
          + 
                       3             2
            - 2892788%A  - 10322663%A  - 30553862%A - 12950740
          ,
                                7           6            5            4
            21527266f + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
          + 
                     3             2
            2892788%A  + 10322663%A  + 9026596%A + 12950740
          ]
      ]
    ,
                     4    2
    [complexRoots= ?  - ?  + 1,
                                3            3              3            3
     coordinates= [a - %A,b + %A  - %A,c + %A ,d + %A,e - %A  + %A,f - %A ]]
    ,
                     8     6      4      2
    [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
       coordinates =
                 7      5       3                 7      5       3
        [4a - 2%A  - 7%A  - 20%A  - 22%A, 4b + 2%A  + 7%A  + 20%A  + 22%A,
                7      5       3                7      5       3
         4c + %A  + 3%A  + 10%A  + 10%A, 4d + %A  + 3%A  + 10%A  + 6%A,
                7      5       3               7      5       3
         4e - %A  - 3%A  - 10%A  - 6%A, 4f - %A  - 3%A  - 10%A  - 10%A]
      ]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                 3      2                    3      2
        [30a - %A  - 5%A  - 30%A - 6, 6b + %A  + 5%A  + 24%A + 6,
                 3      2              3      2
         30c - %A  - 5%A  - 6, 30d - %A  - 5%A  - 30%A - 6,
                 3      2                     3      2
         30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                 3      2                    3      2
        [30a - %A  + 5%A  - 30%A + 6, 6b + %A  - 5%A  + 24%A - 6,
                 3      2              3      2
         30c - %A  + 5%A  + 6, 30d - %A  + 5%A  - 30%A + 6,
                 3      2                     3      2
         30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + 1,b - %A - 5,c + %A + 1,d + 1,e + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - 1,b - %A + 5,c + %A - 1,d - 1,e - 1,f - 1]]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                3      2                     3      2
        [6a + %A  + 5%A  + 24%A + 6, 30b - %A  - 5%A  - 6,
                 3      2                     3      2
         30c - %A  - 5%A  - 30%A - 6, 30d - %A  - 5%A  - 30%A - 6,
                 3      2                     3      2
         30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                3      2                     3      2
        [6a + %A  - 5%A  + 24%A - 6, 30b - %A  + 5%A  + 6,
                 3      2                     3      2
         30c - %A  + 5%A  - 30%A + 6, 30d - %A  + 5%A  - 30%A + 6,
                 3      2                     3      2
         30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a - %A - 5,b + %A + 1,c + 1,d + 1,e + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - %A + 5,b + %A - 1,c - 1,d - 1,e - 1,f - 1]]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
                3      2                     3      2
         6c + %A  + 5%A  + 24%A + 6, 30d - %A  - 5%A  - 6,
                 3      2                     3      2
         30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
                3      2                     3      2
         6c + %A  - 5%A  + 24%A - 6, 30d - %A  + 5%A  + 6,
                 3      2                     3      2
         30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + 1,b + 1,c - %A - 5,d + %A + 1,e + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - 1,b - 1,c - %A + 5,d + %A - 1,e - 1,f - 1]]
    ,
                     8     7      6      5      4     2
    [complexRoots= ?  + 6?  + 16?  + 24?  + 18?  - 8?  + 4,
       coordinates =
                 7      6       5       4      3       2
        [2a + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 2%A + 4,
                 7      6       5       4      3       2
         2b + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 4%A + 4,
                7      6      5      4      3
         2c - %A  - 4%A  - 8%A  - 9%A  - 4%A  - 2%A - 4,
                7      6      5      4      3
         2d + %A  + 4%A  + 8%A  + 9%A  + 4%A  + 2%A + 4,
                 7      6       5       4      3       2
         2e - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 4%A - 4,
                 7      6       5       4      3       2
         2f - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 2%A - 4]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3        2
        ?  + 12?  + 64?  + 192?  + 432?  + 768?  + 1024?  + 768? + 256
      ,
       coordinates =
        [
                        7        6        5         4         3         2
            1408a - 19%A  - 200%A  - 912%A  - 2216%A  - 4544%A  - 6784%A
          + 
            - 6976%A - 1792
          ,
                         7        6         5         4          3          2
            1408b - 37%A  - 408%A  - 1952%A  - 5024%A  - 10368%A  - 16768%A
          + 
            - 17920%A - 5120
          ,
                         7        6         5         4          3          2
            1408c + 37%A  + 408%A  + 1952%A  + 5024%A  + 10368%A  + 16768%A
          + 
            17920%A + 5120
          ,
                         7        6        5         4         3         2
            1408d + 19%A  + 200%A  + 912%A  + 2216%A  + 4544%A  + 6784%A
          + 
            6976%A + 1792
          ,
         2e + %A, 2f - %A]
      ]
    ,
                     8     6      4      2
    [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
       coordinates =
                7      5       3               7      5       3
        [4a - %A  - 3%A  - 10%A  - 6%A, 4b - %A  - 3%A  - 10%A  - 10%A,
                 7      5       3                 7      5       3
         4c - 2%A  - 7%A  - 20%A  - 22%A, 4d + 2%A  + 7%A  + 20%A  + 22%A,
                7      5       3                7      5       3
         4e + %A  + 3%A  + 10%A  + 10%A, 4f + %A  + 3%A  + 10%A  + 6%A]
      ]
    ,
                     8      6      4       2
    [complexRoots= ?  + 16?  - 96?  + 256?  + 256,
       coordinates =
                  7       5        3
        [512a - %A  - 12%A  + 176%A  - 448%A,
                  7       5       3
         128b - %A  - 16%A  + 96%A  - 256%A,
                  7       5       3
         128c + %A  + 16%A  - 96%A  + 256%A,
                  7       5        3
         512d + %A  + 12%A  - 176%A  + 448%A, 2e + %A, 2f - %A]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3        2
        ?  - 12?  + 64?  - 192?  + 432?  - 768?  + 1024?  - 768? + 256
      ,
       coordinates =
        [
                        7        6        5         4         3         2
            1408a - 19%A  + 200%A  - 912%A  + 2216%A  - 4544%A  + 6784%A
          + 
            - 6976%A + 1792
          ,
                         7        6         5         4          3          2
            1408b - 37%A  + 408%A  - 1952%A  + 5024%A  - 10368%A  + 16768%A
          + 
            - 17920%A + 5120
          ,
                         7        6         5         4          3          2
            1408c + 37%A  - 408%A  + 1952%A  - 5024%A  + 10368%A  - 16768%A
          + 
            17920%A - 5120
          ,
                         7        6        5         4         3         2
            1408d + 19%A  - 200%A  + 912%A  - 2216%A  + 4544%A  - 6784%A
          + 
            6976%A - 1792
          ,
         2e + %A, 2f - %A]
      ]
    ,
                     8     7      6      5      4     2
    [complexRoots= ?  - 6?  + 16?  - 24?  + 18?  - 8?  + 4,
       coordinates =
                 7      6       5       4      3       2
        [2a + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 2%A - 4,
                 7      6       5       4      3       2
         2b + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 4%A - 4,
                7      6      5      4      3
         2c - %A  + 4%A  - 8%A  + 9%A  - 4%A  - 2%A + 4,
                7      6      5      4      3
         2d + %A  - 4%A  + 8%A  - 9%A  + 4%A  + 2%A - 4,
                 7      6       5       4      3       2
         2e - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 4%A + 4,
                 7      6       5       4      3       2
         2f - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 2%A + 4]
      ]
    ,
                     4      2
    [complexRoots= ?  + 12?  + 144,
       coordinates =
                 2               2               2               2
        [12a - %A  - 12, 12b - %A  - 12, 12c - %A  - 12, 12d - %A  - 12,
                2                    2
         6e + %A  + 3%A + 12, 6f + %A  - 3%A + 12]
      ]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                3      2                     3      2
        [6a - %A  - 5%A  - 24%A - 6, 30b + %A  + 5%A  + 30%A + 6,
                 3      2                     3      2
         30c + %A  + 5%A  + 30%A + 6, 30d + %A  + 5%A  + 30%A + 6,
                 3      2                     3      2
         30e + %A  + 5%A  + 30%A + 6, 30f + %A  + 5%A  + 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                3      2                     3      2
        [6a - %A  + 5%A  - 24%A + 6, 30b + %A  - 5%A  + 30%A - 6,
                 3      2                     3      2
         30c + %A  - 5%A  + 30%A - 6, 30d + %A  - 5%A  + 30%A - 6,
                 3      2                     3      2
         30e + %A  - 5%A  + 30%A - 6, 30f + %A  - 5%A  - 6]
      ]
    ,
                     4      2
    [complexRoots= ?  + 12?  + 144,
       coordinates =
                 2               2               2               2
        [12a + %A  + 12, 12b + %A  + 12, 12c + %A  + 12, 12d + %A  + 12,
                2                    2
         6e - %A  + 3%A - 12, 6f - %A  - 3%A - 12]
      ]
    ,
                     2
    [complexRoots= ?  - 12,
     coordinates= [a - 1,b - 1,c - 1,d - 1,2e + %A + 4,2f - %A + 4]]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + %A + 5,b - 1,c - 1,d - 1,e - 1,f - %A - 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a + %A - 5,b + 1,c + 1,d + 1,e + 1,f - %A + 1]]
    ,
                     2
    [complexRoots= ?  - 12,
     coordinates= [a + 1,b + 1,c + 1,d + 1,2e + %A - 4,2f - %A - 4]]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
                 3      2                    3      2
         30c - %A  - 5%A  - 30%A - 6, 6d + %A  + 5%A  + 24%A + 6,
                 3      2              3      2
         30e - %A  - 5%A  - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
                 3      2                    3      2
         30c - %A  + 5%A  - 30%A + 6, 6d + %A  - 5%A  + 24%A - 6,
                 3      2              3      2
         30e - %A  + 5%A  + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + 1,b + 1,c + 1,d - %A - 5,e + %A + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - 1,b - 1,c - 1,d - %A + 5,e + %A - 1,f - 1]]
    ]
  Type: List Record(complexRoots: SparseUnivariatePolynomial Integer,
                    coordinates: List Polynomial Integer)

Since the univariateSolve operation may split a regular set, it
returns a list. This explains the use of concat.

Look at the last item of the result. It consists of two parts.  For
any complex root ? of the univariate polynomial in the first part, we
get a tuple of univariate polynomials (in a, ...,f respectively) by
replacing %A by ? in the second part.  Each of these tuples t
describes a point of the variety associated with lp by equaling to
zero the polynomials in t.

Note that the way of reading these univariate representations is
explained also in the example illustrating the ZeroDimensionalSolvePackage 
constructor.

Now, we compute the points of the variety with real coordinates.

  concat [realSolve(ts)$zdpack for ts in lts] 
  [[%B1,%B1,%B1,%B5,- %B5 - 4%B1,%B1], [%B1,%B1,%B1,%B6,- %B6 - 4%B1,%B1],
   [%B2,%B2,%B2,%B3,- %B3 - 4%B2,%B2], [%B2,%B2,%B2,%B4,- %B4 - 4%B2,%B2],
   [%B7,%B7,%B7,%B7,%B11,- %B11 - 4%B7], [%B7,%B7,%B7,%B7,%B12,- %B12 - 4%B7],
   [%B8,%B8,%B8,%B8,%B9,- %B9 - 4%B8], [%B8,%B8,%B8,%B8,%B10,- %B10 - 4%B8],
   [%B13,%B13,%B17,- %B17 - 4%B13,%B13,%B13],
   [%B13,%B13,%B18,- %B18 - 4%B13,%B13,%B13],
   [%B14,%B14,%B15,- %B15 - 4%B14,%B14,%B14],
   [%B14,%B14,%B16,- %B16 - 4%B14,%B14,%B14],
     [%B19, %B29,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B19   - ---------- %B19   - ----------- %B19
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B19   - ------------- %B19  - ----------- %B19
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B19   + ------------- %B19   + --------------- %B19
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B19   + --------------- %B19  - ------------ %B19
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B19   - ------------- %B19   - --------------- %B19
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B19   - --------------- %B19  - ------------- %B19
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B29 - ------------- %B19   + ------------ %B19
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B19   + ---------------- %B19
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B19  + -------------- %B19
          1387545279120           1387545279120
      ]
    ,
     [%B19, %B30,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B19   - ---------- %B19   - ----------- %B19
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B19   - ------------- %B19  - ----------- %B19
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B19   + ------------- %B19   + --------------- %B19
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B19   + --------------- %B19  - ------------ %B19
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B19   - ------------- %B19   - --------------- %B19
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B19   - --------------- %B19  - ------------- %B19
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B30 - ------------- %B19   + ------------ %B19
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B19   + ---------------- %B19
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B19  + -------------- %B19
          1387545279120           1387545279120
      ]
    ,
     [%B20, %B27,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B20   - ---------- %B20   - ----------- %B20
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B20   - ------------- %B20  - ----------- %B20
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B20   + ------------- %B20   + --------------- %B20
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B20   + --------------- %B20  - ------------ %B20
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B20   - ------------- %B20   - --------------- %B20
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B20   - --------------- %B20  - ------------- %B20
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B27 - ------------- %B20   + ------------ %B20
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B20   + ---------------- %B20
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B20  + -------------- %B20
          1387545279120           1387545279120
      ]
    ,
     [%B20, %B28,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B20   - ---------- %B20   - ----------- %B20
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B20   - ------------- %B20  - ----------- %B20
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B20   + ------------- %B20   + --------------- %B20
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B20   + --------------- %B20  - ------------ %B20
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B20   - ------------- %B20   - --------------- %B20
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B20   - --------------- %B20  - ------------- %B20
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B28 - ------------- %B20   + ------------ %B20
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B20   + ---------------- %B20
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B20  + -------------- %B20
          1387545279120           1387545279120
      ]
    ,
     [%B21, %B25,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B21   - ---------- %B21   - ----------- %B21
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B21   - ------------- %B21  - ----------- %B21
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B21   + ------------- %B21   + --------------- %B21
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B21   + --------------- %B21  - ------------ %B21
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B21   - ------------- %B21   - --------------- %B21
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B21   - --------------- %B21  - ------------- %B21
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B25 - ------------- %B21   + ------------ %B21
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B21   + ---------------- %B21
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B21  + -------------- %B21
          1387545279120           1387545279120
      ]
    ,
     [%B21, %B26,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B21   - ---------- %B21   - ----------- %B21
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B21   - ------------- %B21  - ----------- %B21
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B21   + ------------- %B21   + --------------- %B21
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B21   + --------------- %B21  - ------------ %B21
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B21   - ------------- %B21   - --------------- %B21
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B21   - --------------- %B21  - ------------- %B21
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B26 - ------------- %B21   + ------------ %B21
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B21   + ---------------- %B21
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B21  + -------------- %B21
          1387545279120           1387545279120
      ]
    ,
     [%B22, %B23,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B22   - ---------- %B22   - ----------- %B22
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B22   - ------------- %B22  - ----------- %B22
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B22   + ------------- %B22   + --------------- %B22
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B22   + --------------- %B22  - ------------ %B22
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B22   - ------------- %B22   - --------------- %B22
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B22   - --------------- %B22  - ------------- %B22
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B23 - ------------- %B22   + ------------ %B22
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B22   + ---------------- %B22
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B22  + -------------- %B22
          1387545279120           1387545279120
      ]
    ,
     [%B22, %B24,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B22   - ---------- %B22   - ----------- %B22
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B22   - ------------- %B22  - ----------- %B22
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B22   + ------------- %B22   + --------------- %B22
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B22   + --------------- %B22  - ------------ %B22
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B22   - ------------- %B22   - --------------- %B22
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B22   - --------------- %B22  - ------------- %B22
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B24 - ------------- %B22   + ------------ %B22
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B22   + ---------------- %B22
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B22  + -------------- %B22
          1387545279120           1387545279120
      ]
    ,
   [%B31,%B35,- %B35 - 4%B31,%B31,%B31,%B31],
   [%B31,%B36,- %B36 - 4%B31,%B31,%B31,%B31],
   [%B32,%B33,- %B33 - 4%B32,%B32,%B32,%B32],
   [%B32,%B34,- %B34 - 4%B32,%B32,%B32,%B32]]
                                Type: List List RealClosure Fraction Integer

We obtain 24 points given by lists of elements in the RealClosure
of Fraction of R.  In each list, the first value corresponds 
to the indeterminate f, the second to e and so on. 

See Also:
o )help RegularChain
o )help RegularTriangularSet
o )help SquareFreeRegularTriangularSet
o )help ZeroDimensionalSolvePackage
o )help NewSparseMultivariatePolynomial
o )help LinGroebnerPackage
o )help NormalizedTriangularSetCategory
o )help RealClosure
o )help Fraction
o )show LexTriangularPackage
o $AXIOM/doc/src/algebra/zerodim.spad.dvi

@
<<package LEXTRIPK LexTriangularPackage>>=
)abbrev package LEXTRIPK LexTriangularPackage
++ Author: Marc Moreno Maza
++ Date Created: 08/02/1999
++ Date Last Updated: 08/02/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Keywords:
++ Description: 
++ A package for solving polynomial systems with finitely many solutions.
++ The decompositions are given by means of regular triangular sets.
++ The computations use lexicographical Groebner bases. 
++ The main operations are \axiomOpFrom{lexTriangular}{LexTriangularPackage}
++ and \axiomOpFrom{squareFreeLexTriangular}{LexTriangularPackage}.
++ The second one provide decompositions by means of square-free regular triangular sets.
++ Both are based on the {\em lexTriangular} method described in [1].
++ They differ from the algorithm described in [2] by the fact that
++ multiciplities of the roots are not kept.
++ With the \axiomOpFrom{squareFreeLexTriangular}{LexTriangularPackage} operation
++ all multiciplities are removed. With the other operation some multiciplities may remain. 
++ Both operations admit an optional argument to produce normalized triangular sets.  \newline 
++ References: \newline
++ [1] D. LAZARD "Solving Zero-dimensional Algebraic Systems" 
++ published in the J. of Symbol. Comput. (1992) 13, 117-131.\newline
++ [2] M. MORENO MAZA and R. RIOBOO "Computations of gcd over
++ algebraic towers of simple extensions" In proceedings of AAECC11, Paris, 1995.\newline
++ Version: 2.

LexTriangularPackage(R,ls): Exports == Implementation where

  R: GcdDomain
  ls: List Symbol
  V ==> OrderedVariableList ls
  E ==> IndexedExponents V
  P ==> NewSparseMultivariatePolynomial(R,V)
  TS  ==> RegularChain(R,ls)
  ST ==> SquareFreeRegularTriangularSet(R,E,V,P)
  Q1 ==> Polynomial R
  PS ==> GeneralPolynomialSet(R,E,V,P)
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  S ==> String
  K ==> Fraction R
  LP ==> List P
  BWTS ==> Record(val : Boolean, tower : TS)
  LpWTS ==> Record(val : (List P), tower : TS)
  BWST ==> Record(val : Boolean, tower : ST)
  LpWST ==> Record(val : (List P), tower : ST)
  polsetpack ==> PolynomialSetUtilitiesPackage(R,E,V,P)
  quasicomppackTS ==> QuasiComponentPackage(R,E,V,P,TS)
  regsetgcdpackTS ==> SquareFreeRegularTriangularSetGcdPackage(R,E,V,P,TS)
  normalizpackTS ==> NormalizationPackage(R,E,V,P,TS)
  quasicomppackST ==> QuasiComponentPackage(R,E,V,P,ST)
  regsetgcdpackST ==> SquareFreeRegularTriangularSetGcdPackage(R,E,V,P,ST)
  normalizpackST ==> NormalizationPackage(R,E,V,P,ST)

  Exports ==  with

     zeroDimensional?: LP -> B
         ++ \axiom{zeroDimensional?(lp)} returns true iff
         ++ \axiom{lp} generates a zero-dimensional ideal
         ++ w.r.t. the variables involved in \axiom{lp}.
     fglmIfCan:  LP -> Union(LP, "failed")
         ++ \axiom{fglmIfCan(lp)} returns the lexicographical Groebner 
         ++ basis of \axiom{lp} by using the {\em FGLM} strategy,
         ++ if \axiom{zeroDimensional?(lp)} holds .
     groebner: LP -> LP
         ++ \axiom{groebner(lp)} returns the lexicographical Groebner 
         ++ basis of \axiom{lp}. If \axiom{lp} generates a zero-dimensional
         ++ ideal then the {\em FGLM} strategy is used, otherwise
         ++ the {\em Sugar} strategy is used.
     lexTriangular: (LP, B) -> List TS
         ++ \axiom{lexTriangular(base, norm?)} decomposes the variety
         ++ associated with \axiom{base} into regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{base} needs to be a lexicographical Groebner basis
         ++ of a zero-dimensional ideal. If \axiom{norm?} is \axiom{true} 
         ++ then the regular sets are normalized. 
     squareFreeLexTriangular: (LP, B) -> List ST
         ++ \axiom{squareFreeLexTriangular(base, norm?)} decomposes the variety
         ++ associated with \axiom{base} into square-free regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{base} needs to be a lexicographical Groebner basis
         ++ of a zero-dimensional ideal. If \axiom{norm?} is \axiom{true} 
         ++ then the regular sets are normalized. 
     zeroSetSplit: (LP, B) -> List TS
         ++ \axiom{zeroSetSplit(lp, norm?)} decomposes the variety
         ++ associated with \axiom{lp} into regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{lp} needs to generate a zero-dimensional ideal.
         ++ If \axiom{norm?} is \axiom{true} then the regular sets are normalized.
     zeroSetSplit: (LP, B) -> List ST
         ++ \axiom{zeroSetSplit(lp, norm?)} decomposes the variety
         ++ associated with \axiom{lp} into square-free regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{lp} needs to generate a zero-dimensional ideal.
         ++ If \axiom{norm?} is \axiom{true} then the regular sets are normalized.

  Implementation == add

     trueVariables(lp: List(P)): List Symbol ==
       lv: List V := variables([lp]$PS)
       truels: List Symbol := []
       for s in ls repeat
         if member?(variable(s)::V, lv) then truels := cons(s,truels)
       reverse truels

     zeroDimensional?(lp:List(P)): Boolean ==
       truels: List Symbol := trueVariables(lp)
       fglmpack := FGLMIfCanPackage(R,truels)
       lq1: List(Q1) := [p::Q1 for p in lp]
       zeroDimensional?(lq1)$fglmpack

     fglmIfCan(lp:List(P)): Union(List(P), "failed") ==
       truels: List Symbol := trueVariables(lp)
       fglmpack := FGLMIfCanPackage(R,truels)
       lq1: List(Q1) := [p::Q1 for p in lp]
       foo := fglmIfCan(lq1)$fglmpack
       foo case "failed" => return("failed" :: Union(List(P), "failed"))
       lp := [retract(q1)$P for q1 in (foo :: List(Q1))]
       lp::Union(List(P), "failed")

     groebner(lp:List(P)): List(P) ==
       truels: List Symbol := trueVariables(lp)
       fglmpack := FGLMIfCanPackage(R,truels)
       lq1: List(Q1) := [p::Q1 for p in lp]
       lq1 := groebner(lq1)$fglmpack
       lp := [retract(q1)$P for q1 in lq1]

     lexTriangular(base: List(P), norm?: Boolean): List(TS) ==
       base := sort(infRittWu?,base)
       base := remove(zero?, base)
       any?(ground?, base) => []
       ts: TS := empty()
       toSee: List LpWTS := [[base,ts]$LpWTS]
       toSave: List TS := []
       while not empty? toSee repeat
         lpwt := first toSee; toSee := rest toSee
         lp := lpwt.val; ts := lpwt.tower
         empty? lp => toSave := cons(ts, toSave)
         p := first lp; lp := rest lp; v := mvar(p)
         algebraic?(v,ts) =>
           error "lexTriangular$LEXTRIPK: should never happen !"
         norm? and zero? remainder(init(p),ts).polnum => 
           toSee := cons([lp, ts]$LpWTS, toSee)
         (not norm?) and zero? (initiallyReduce(init(p),ts)) => 
           toSee := cons([lp, ts]$LpWTS, toSee)
         lbwt: List BWTS := invertible?(init(p),ts)$TS
         while (not empty? lbwt) repeat
           bwt := first lbwt; lbwt := rest lbwt
           b := bwt.val; us := bwt.tower
           (not b) => toSee := cons([lp, us], toSee)
           lus: List TS
           if norm?
             then 
               newp := normalizedAssociate(p,us)$normalizpackTS
               lus := [internalAugment(newp,us)$TS]
             else 
               newp := p
               lus := augment(newp,us)$TS
           newlp := lp 
           while (not empty? newlp) and (mvar(first newlp) = v) repeat
             newlp := rest newlp
           for us in lus repeat
             toSee := cons([newlp, us]$LpWTS, toSee)
       algebraicSort(toSave)$quasicomppackTS

     zeroSetSplit(lp:List(P), norm?:B): List TS ==
       bar := fglmIfCan(lp)
       bar case "failed" =>
         error "zeroSetSplit$LEXTRIPK: #1 not zero-dimensional"
       lexTriangular(bar::(List P),norm?)

     squareFreeLexTriangular(base: List(P), norm?: Boolean): List(ST) ==
       base := sort(infRittWu?,base)
       base := remove(zero?, base)
       any?(ground?, base) => []
       ts: ST := empty()
       toSee: List LpWST := [[base,ts]$LpWST]
       toSave: List ST := []
       while not empty? toSee repeat
         lpwt := first toSee; toSee := rest toSee
         lp := lpwt.val; ts := lpwt.tower
         empty? lp => toSave := cons(ts, toSave)
         p := first lp; lp := rest lp; v := mvar(p)
         algebraic?(v,ts) =>
           error "lexTriangular$LEXTRIPK: should never happen !"
         norm? and zero? remainder(init(p),ts).polnum => 
           toSee := cons([lp, ts]$LpWST, toSee)
         (not norm?) and zero? (initiallyReduce(init(p),ts)) => 
           toSee := cons([lp, ts]$LpWST, toSee)
         lbwt: List BWST := invertible?(init(p),ts)$ST
         while (not empty? lbwt) repeat
           bwt := first lbwt; lbwt := rest lbwt
           b := bwt.val; us := bwt.tower
           (not b) => toSee := cons([lp, us], toSee)
           lus: List ST
           if norm?
             then 
               newp := normalizedAssociate(p,us)$normalizpackST
               lus := augment(newp,us)$ST
             else
               lus := augment(p,us)$ST
           newlp := lp 
           while (not empty? newlp) and (mvar(first newlp) = v) repeat
             newlp := rest newlp
           for us in lus repeat
             toSee := cons([newlp, us]$LpWST, toSee)
       algebraicSort(toSave)$quasicomppackST

     zeroSetSplit(lp:List(P), norm?:B): List ST ==
       bar := fglmIfCan(lp)
       bar case "failed" =>
         error "zeroSetSplit$LEXTRIPK: #1 not zero-dimensional"
       squareFreeLexTriangular(bar::(List P),norm?)

@
\section{package IRURPK InternalRationalUnivariateRepresentationPackage}
<<package IRURPK InternalRationalUnivariateRepresentationPackage>>=
)abbrev package IRURPK InternalRationalUnivariateRepresentationPackage
++ Author: Marc Moreno Maza
++ Date Created: 01/1999
++ Date Last Updated: 23/01/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Keywords:
++ Description: 
++   An internal package for computing the rational univariate representation
++   of a zero-dimensional algebraic variety given by a square-free 
++   triangular set. 
++   The main operation is \axiomOpFrom{rur}{InternalRationalUnivariateRepresentationPackage}.
++   It is based on the {\em generic} algorithm description in [1]. \newline References:
++  [1] D. LAZARD "Solving Zero-dimensional Algebraic Systems"
++      Journal of Symbolic Computation, 1992, 13, 117-131
++ Version: 1.

InternalRationalUnivariateRepresentationPackage(R,E,V,P,TS): Exports == Implementation where
  R : Join(EuclideanDomain,CharacteristicZero)
  E : OrderedAbelianMonoidSup
  V : OrderedSet
  P : RecursivePolynomialCategory(R,E,V)
  TS : SquareFreeRegularTriangularSetCategory(R,E,V,P)
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  LV ==> List V
  LP ==> List P
  PWT ==> Record(val: P, tower: TS)
  LPWT ==> Record(val: LP, tower: TS)
  WIP ==> Record(pol: P, gap: Z, tower: TS)
  BWT ==> Record(val:Boolean, tower: TS)
  polsetpack ==> PolynomialSetUtilitiesPackage(R,E,V,P)
  normpack ==> NormalizationPackage(R,E,V,P,TS)

  Exports ==  with

     rur: (TS,B) -> List TS
       ++ \spad{rur(ts,univ?)} returns a rational univariate representation
       ++ of \spad{ts}. This assumes that the lowest polynomial in \spad{ts}
       ++ is a variable \spad{v} which does not occur in the other polynomials
       ++ of \spad{ts}. This variable will be used to define the simple
       ++ algebraic extension over which these other polynomials will be
       ++ rewritten as univariate polynomials with degree one.
       ++ If \spad{univ?} is \spad{true} then these polynomials will have
       ++ a constant initial.
     checkRur: (TS, List TS) -> Boolean
       ++ \spad{checkRur(ts,lus)} returns \spad{true} if \spad{lus}
       ++ is a rational univariate representation of \spad{ts}.

  Implementation == add

     checkRur(ts: TS, lts: List TS): Boolean ==
       f0 := last(ts)::P
       z := mvar(f0)
       ts := collectUpper(ts,z)
       dts: N := degree(ts)
       lp := parts(ts)
       dlts: N := 0
       for us in lts repeat
         dlts := dlts + degree(us)
         rems := [removeZero(p,us) for p in lp]
         not every?(zero?,rems) => 
           output(us::OutputForm)$OutputPackage
           return false
       (dts =$N dlts)@Boolean

     convert(p:P,sqfr?:B):TS ==
       -- if sqfr? ASSUME p is square-free
       newts: TS := empty()
       sqfr? => internalAugment(p,newts) 
       p := squareFreePart(p)
       internalAugment(p,newts) 

     prepareRur(ts: TS): List LPWT ==
       not purelyAlgebraic?(ts)$TS => 
         error "rur$IRURPK: #1 is not zero-dimensional"
       lp: LP := parts(ts)$TS
       lp := sort(infRittWu?,lp)
       empty? lp =>
         error "rur$IRURPK: #1 is empty"
       f0 := first lp; lp := rest lp
--       not (one?(init(f0)) and one?(mdeg(f0)) and zero?(tail(f0))) =>
       not ((init(f0) = 1) and (mdeg(f0) = 1) and zero?(tail(f0))) =>
         error "rur$IRURPK: #1 has no generating root."
       empty? lp =>
         error "rur$IRURPK: #1 has a generating root but no indeterminates"
       z: V :=  mvar(f0)
       f1 := first lp; lp := rest lp
       x1: V := mvar(f1)
       newf1 := x1::P - z::P
       toSave: List LPWT := []
       for ff1 in irreducibleFactors([f1])$polsetpack repeat
         newf0 := eval(ff1,mvar(f1),f0)
         ts := internalAugment(newf1,convert(newf0,true)@TS)
         toSave := cons([lp,ts],toSave)
       toSave

     makeMonic(z:V,c:P,r:P,ts:TS,s:P,univ?:B): TS ==
       --ASSUME r is a irreducible univariate polynomial in z
       --ASSUME c and s only depends on z and mvar(s)
       --ASSUME c and a have main degree 1
       --ASSUME c and s have a constant initial
       --ASSUME mvar(ts) < mvar(s)
       lp: LP := parts(ts)
       lp := sort(infRittWu?,lp)
       newts: TS := convert(r,true)@TS
       s := remainder(s,newts).polnum
       if univ? 
         then 
           s := normalizedAssociate(s,newts)$normpack
       for p in lp repeat
         p := lazyPrem(eval(p,z,c),s)
         p := remainder(p,newts).polnum
         newts := internalAugment(p,newts)
       internalAugment(s,newts)

     next(lambda:Z):Z == 
       if lambda < 0 then lambda := - lambda + 1 else lambda := - lambda

     makeLinearAndMonic(p: P, xi: V, ts: TS, univ?:B, check?: B, info?: B): List TS ==
       -- if check? THEN some VERIFICATIONS are performed
       -- if info? THEN some INFORMATION is displayed
       f0 := last(ts)::P
       z: V := mvar(f0)
       lambda: Z := 1
       ts := collectUpper(ts,z)
       toSee: List WIP := [[f0,lambda,ts]$WIP]
       toSave: List TS := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         (f0, lambda, ts) := (wip.pol, wip.gap, wip.tower)
         if check? and ((not univariate?(f0)$polsetpack) or (mvar(f0) ~= z))
           then
               output("Bad f0: ")$OutputPackage
               output(f0::OutputForm)$OutputPackage
         c: P := lambda * xi::P + z::P 
         f := eval(f0,z,c); q := eval(p,z,c)
         prs := subResultantChain(q,f)
         r := first prs; prs := rest prs
         check? and ((not zero? degree(r,xi)) or (empty? prs)) =>
           error "rur$IRURPK: should never happen !"
         s := first prs; prs := rest prs
         check? and (zero? degree(s,xi)) and (empty? prs) =>
           error "rur$IRURPK: should never happen !!"
         if zero? degree(s,xi) then s := first prs
--         not one? degree(s,xi) =>            
         not (degree(s,xi) = 1) =>            
           toSee := cons([f0,next(lambda),ts]$WIP,toSee)
         h := init(s)
         r := squareFreePart(r)
         ground?(h) or ground?(gcd(h,r)) =>
           for fr in irreducibleFactors([r])$polsetpack repeat
             ground? fr => "leave"
             toSave := cons(makeMonic(z,c,fr,ts,s,univ?),toSave)
         if info?
           then 
             output("Unlucky lambda")$OutputPackage
             output(h::OutputForm)$OutputPackage
             output(r::OutputForm)$OutputPackage
         toSee := cons([f0,next(lambda),ts]$WIP,toSee)
       toSave

     rur (ts: TS,univ?:Boolean): List TS ==
       toSee: List LPWT := prepareRur(ts)
       toSave: List TS := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         ts: TS := wip.tower
         lp: LP := wip.val
         empty? lp => toSave := cons(ts,toSave)
         p := first lp; lp := rest lp
         xi: V := mvar(p)
         p := remainder(p,ts).polnum
         if not univ?
           then 
             p := primitivePart stronglyReduce(p,ts)
         ground?(p) or (mvar(p) < xi) =>
           error "rur$IRUROK: should never happen"
--         (one? mdeg(p)) and (ground? init(p)) =>
         (mdeg(p) = 1) and (ground? init(p)) =>
           ts := internalAugment(p,ts)
           wip := [lp,ts]
           toSee := cons(wip,toSee)
         lts := makeLinearAndMonic(p,xi,ts,univ?,false,false)
         for ts in lts repeat
           wip := [lp,ts]
           toSee := cons(wip,toSee)
       toSave

@
\section{package RURPK RationalUnivariateRepresentationPackage}
<<package RURPK RationalUnivariateRepresentationPackage>>=
)abbrev package RURPK RationalUnivariateRepresentationPackage
++ Author: Marc Moreno Maza
++ Date Created: 01/1999
++ Date Last Updated: 23/01/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Description: 
++   A package for computing the rational univariate representation
++   of a zero-dimensional algebraic variety given by a regular
++   triangular set. This package is essentially an interface for the
++  \spadtype{InternalRationalUnivariateRepresentationPackage} constructor.
++  It is used in the \spadtype{ZeroDimensionalSolvePackage}
++  for solving polynomial systems with finitely many solutions.
++ Version: 1.

RationalUnivariateRepresentationPackage(R,ls): Exports == Implementation where
  R : Join(EuclideanDomain,CharacteristicZero)
  ls: List Symbol
  N ==> NonNegativeInteger
  Z ==> Integer
  P ==> Polynomial R
  LP ==> List P
  U ==> SparseUnivariatePolynomial(R)
  RUR ==> Record(complexRoots: U, coordinates: LP) 

  Exports ==  with

     rur: (LP,Boolean) -> List RUR
       ++ \spad{rur(lp,univ?)} returns a rational univariate representation
       ++ of \spad{lp}. This assumes that \spad{lp} defines a regular 
       ++ triangular \spad{ts} whose associated variety is zero-dimensional
       ++ over \spad{R}. \spad{rur(lp,univ?)} returns a list of items
       ++ \spad{[u,lc]} where \spad{u} is an irreducible univariate polynomial 
       ++ and each \spad{c} in \spad{lc} involves two variables: one from \spad{ls},
       ++ called the coordinate of \spad{c}, and an extra variable which 
       ++ represents any root of \spad{u}. Every root of \spad{u} leads to
       ++ a tuple of values for the coordinates of \spad{lc}. Moreover,
       ++ a point \spad{x} belongs to the variety associated with \spad{lp} iff
       ++ there exists an item \spad{[u,lc]} in \spad{rur(lp,univ?)} and
       ++ a root \spad{r} of \spad{u} such that \spad{x} is given by the 
       ++ tuple of values for the coordinates of \spad{lc} evaluated at \spad{r}.
       ++ If \spad{univ?} is \spad{true} then each polynomial \spad{c}
       ++ will have a constant leading coefficient w.r.t. its coordinate.
       ++ See the example which illustrates the \spadtype{ZeroDimensionalSolvePackage}
       ++ package constructor.
     rur: (LP) -> List RUR
       ++ \spad{rur(lp)} returns the same as \spad{rur(lp,true)} 
     rur: (LP,Boolean,Boolean) -> List RUR
       ++ \spad{rur(lp,univ?,check?)} returns the same as \spad{rur(lp,true)}.
       ++ Moreover, if \spad{check?} is \spad{true} then the result is checked.

  Implementation == add
     news: Symbol := new()$Symbol
     lv: List Symbol := concat(ls,news)
     V ==> OrderedVariableList(lv)
     Q ==> NewSparseMultivariatePolynomial(R,V)
     E ==> IndexedExponents V
     TS ==> SquareFreeRegularTriangularSet(R,E,V,Q)
     QWT ==> Record(val: Q, tower: TS)
     LQWT ==> Record(val: List Q, tower: TS)
     polsetpack ==> PolynomialSetUtilitiesPackage(R,E,V,Q)
     normpack ==> NormalizationPackage(R,E,V,Q,TS)
     rurpack ==> InternalRationalUnivariateRepresentationPackage(R,E,V,Q,TS)
     newv: V := variable(news)::V
     newq : Q := newv :: Q
     
     rur(lp: List P, univ?: Boolean, check?: Boolean): List RUR ==
       lp := remove(zero?,lp)
       empty? lp =>
         error "rur$RURPACK: #1 is empty"
       any?(ground?,lp) =>
         error "rur$RURPACK: #1 is not a triangular set"
       ts: TS := [[newq]$(List Q)]       
       lq: List Q := []
       for p in lp repeat
         rif: Union(Q,"failed") := retractIfCan(p)$Q
         rif case "failed" =>
           error "rur$RURPACK: #1 is not a subset of R[ls]"
         q: Q := rif::Q
         lq := cons(q,lq)
       lq := sort(infRittWu?,lq)
       toSee: List LQWT := [[lq,ts]$LQWT]
       toSave: List TS := []
       while not empty? toSee repeat
         lqwt := first toSee; toSee := rest toSee
         lq := lqwt.val; ts := lqwt.tower
         empty? lq => 
           -- output(ts::OutputForm)$OutputPackage
           toSave := cons(ts,toSave)
         q := first lq; lq := rest lq
         not (mvar(q) > mvar(ts)) =>
           error "rur$RURPACK: #1 is not a triangular set"
         empty? (rest(ts)::TS) =>  
           lfq := irreducibleFactors([q])$polsetpack 
           for fq in lfq repeat
             newts := internalAugment(fq,ts)
             newlq := [remainder(q,newts).polnum for q in lq]
             toSee := cons([newlq,newts]$LQWT,toSee)
         lsfqwt: List QWT := squareFreePart(q,ts)
         for qwt in lsfqwt repeat
           q := qwt.val; ts := qwt.tower
           if not ground? init(q)
             then
               q := normalizedAssociate(q,ts)$normpack
           newts := internalAugment(q,ts)           
           newlq := [remainder(q,newts).polnum for q in lq]
           toSee := cons([newlq,newts]$LQWT,toSee)
       toReturn: List RUR := []
       for ts in toSave repeat
         lus := rur(ts,univ?)$rurpack 
         check? and (not checkRur(ts,lus)$rurpack) =>
           output("RUR for: ")$OutputPackage
           output(ts::OutputForm)$OutputPackage
           output("Is: ")$OutputPackage
           for us in lus repeat output(us::OutputForm)$OutputPackage
           error "rur$RURPACK: bad result with function rur$IRURPK"
         for us in lus repeat
            g: U  := univariate(select(us,newv)::Q)$Q
            lc: LP := [convert(q)@P for q in parts(collectUpper(us,newv))]
            toReturn := cons([g,lc]$RUR, toReturn)
       toReturn 

     rur(lp: List P, univ?: Boolean): List RUR ==
       rur(lp,univ?,false)

     rur(lp: List P): List RUR == rur(lp,true)

@
\section{package ZDSOLVE ZeroDimensionalSolvePackage}
Based on triangular decompositions and the {\bf RealClosure} constructor,
the pacakge {\bf ZeroDimensionalSolvePackage} provides operations for
computing symbolically the real or complex roots of polynomial systems
with finitely many solutions.
<<ZeroDimensionalSolvePackage.input>>=
-- zerodim.spad.pamphlet ZeroDimensionalSolvePackage.input
)spool ZeroDimensionalSolvePackage.output
)set message test on
)set message auto off
)clear all
--S 1 of 28
R := Integer
--R 
--R
--R   (1)  Integer
--R                                                                 Type: Domain
--E 1

--S 2 of 28
ls : List Symbol := [x,y,z,t]
--R 
--R
--R   (2)  [x,y,z,t]
--R                                                            Type: List Symbol
--E 2

--S 3 of 28
ls2 : List Symbol := [x,y,z,t,new()$Symbol]
--R 
--R
--R   (3)  [x,y,z,t,%A]
--R                                                            Type: List Symbol
--E 3

--S 4 of 28
pack := ZDSOLVE(R,ls,ls2)
--R 
--R
--R   (4)  ZeroDimensionalSolvePackage(Integer,[x,y,z,t],[x,y,z,t,%A])
--R                                                                 Type: Domain
--E 4

--S 5 of 28
p1 := x**2*y*z + x*y**2*z + x*y*z**2 + x*y*z + x*y + x*z + y*z
--R 
--R
--R             2       2     2
--R   (5)  x y z  + (x y  + (x  + x + 1)y + x)z + x y
--R                                                     Type: Polynomial Integer
--E 5

--S 6 of 28
p2 := x**2*y**2*z + x*y**2*z**2 + x**2*y*z + x*y*z + y*z + x + z
--R 
--R
--R           2 2     2 2     2
--R   (6)  x y z  + (x y  + (x  + x + 1)y + 1)z + x
--R                                                     Type: Polynomial Integer
--E 6

--S 7 of 28
p3 := x**2*y**2*z**2 + x**2*y**2*z + x*y**2*z + x*y*z + x*z + z + 1
--R 
--R
--R         2 2 2      2      2
--R   (7)  x y z  + ((x  + x)y  + x y + x + 1)z + 1
--R                                                     Type: Polynomial Integer
--E 7

--S 8 of 28
lp := [p1, p2, p3]
--R 
--R
--R   (8)
--R         2       2     2
--R   [x y z  + (x y  + (x  + x + 1)y + x)z + x y,
--R       2 2     2 2     2
--R    x y z  + (x y  + (x  + x + 1)y + 1)z + x,
--R     2 2 2      2      2
--R    x y z  + ((x  + x)y  + x y + x + 1)z + 1]
--R                                                Type: List Polynomial Integer
--E 8

--S 9 of 28
triangSolve(lp)$pack
--R 
--R
--R   (9)
--R   [
--R     {
--R          20     19      18      17       16      15       14       13       12
--R         z   - 6z   - 41z   + 71z   + 106z   + 92z   + 197z   + 145z   + 257z
--R       + 
--R             11       10       9       8       7       6      5       4      3
--R         278z   + 201z   + 278z  + 257z  + 145z  + 197z  + 92z  + 106z  + 71z
--R       + 
--R              2
--R         - 41z  - 6z + 1
--R       ,
--R
--R                      19            18             17             16
--R             14745844z   + 50357474z   - 130948857z   - 185261586z
--R           + 
--R                         15             14             13             12
--R             - 180077775z   - 338007307z   - 275379623z   - 453190404z
--R           + 
--R                         11             10             9             8
--R             - 474597456z   - 366147695z   - 481433567z  - 430613166z
--R           + 
--R                         7             6             5             4
--R             - 261878358z  - 326073537z  - 163008796z  - 177213227z
--R           + 
--R                         3            2
--R             - 104356755z  + 65241699z  + 9237732z - 1567348
--R        *
--R           y
--R       + 
--R                 19           18            17            16            15
--R         1917314z   + 6508991z   - 16973165z   - 24000259z   - 23349192z
--R       + 
--R                    14            13            12            11            10
--R         - 43786426z   - 35696474z   - 58724172z   - 61480792z   - 47452440z
--R       + 
--R                    9            8            7            6            5
--R         - 62378085z  - 55776527z  - 33940618z  - 42233406z  - 21122875z
--R       + 
--R                    4            3           2
--R         - 22958177z  - 13504569z  + 8448317z  + 1195888z - 202934
--R       ,
--R         3       2       3    2               2              2
--R      ((z  - 2z)y  + (- z  - z  - 2z - 1)y - z  - z + 1)x + z  - 1}
--R     ]
--R                                   Type: List RegularChain(Integer,[x,y,z,t])
--E 9

--S 10 of 28
univariateSolve(lp)$pack
--R 
--R
--R   (10)
--R   [
--R     [
--R       complexRoots =
--R            12      11      10     9     8      7      6      5     4     3
--R           ?   - 12?   + 24?   + 4?  - 9?  + 27?  - 21?  + 27?  - 9?  + 4?
--R         + 
--R              2
--R           24?  - 12? + 1
--R       ,
--R
--R       coordinates =
--R         [
--R                       11        10         9        8        7         6
--R             63x + 62%A   - 721%A   + 1220%A  + 705%A  - 285%A  + 1512%A
--R           + 
--R                    5         4       3        2
--R             - 735%A  + 1401%A  - 21%A  + 215%A  + 1577%A - 142
--R           ,
--R
--R                       11        10         9        8        7         6
--R             63y - 75%A   + 890%A   - 1682%A  - 516%A  + 588%A  - 1953%A
--R           + 
--R                   5         4        3        2
--R             1323%A  - 1815%A  + 426%A  - 243%A  - 1801%A + 679
--R           ,
--R          z - %A]
--R       ]
--R     ,
--R
--R                     6    5    4    3    2
--R     [complexRoots= ?  + ?  + ?  + ?  + ?  + ? + 1,
--R                          5       3
--R      coordinates= [x - %A ,y - %A ,z - %A]]
--R     ,
--R                    2
--R    [complexRoots= ?  + 5? + 1,coordinates= [x - 1,y - 1,z - %A]]]
--RType: List Record(complexRoots: SparseUnivariatePolynomial Integer,coordinates: List Polynomial Integer)
--E 10

--S 11 of 28
lr := realSolve(lp)$pack
--R 
--R
--R   (11)
--R   [
--R     [%B1,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B1   - ------- %B1   - ------- %B1   + -------- %B1
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B1   + -------- %B1   + ------ %B1   + --------- %B1
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B1   + --------- %B1   + --------- %B1  + --------- %B1
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B1  + ------- %B1  + ------ %B1  + ------- %B1
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B1  + -------- %B1  - ---- %B1 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B1   + ------ %B1   + ------- %B1   - ------- %B1
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B1   - -------- %B1   - -------- %B1   - ------ %B1
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B1   - -------- %B1   - -------- %B1  - ------- %B1
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B1  - -------- %B1  - -------- %B1  - -------- %B1
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B1  - -------- %B1  - ------- %B1 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ,
--R
--R     [%B2,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B2   - ------- %B2   - ------- %B2   + -------- %B2
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B2   + -------- %B2   + ------ %B2   + --------- %B2
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B2   + --------- %B2   + --------- %B2  + --------- %B2
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B2  + ------- %B2  + ------ %B2  + ------- %B2
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B2  + -------- %B2  - ---- %B2 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B2   + ------ %B2   + ------- %B2   - ------- %B2
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B2   - -------- %B2   - -------- %B2   - ------ %B2
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B2   - -------- %B2   - -------- %B2  - ------- %B2
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B2  - -------- %B2  - -------- %B2  - -------- %B2
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B2  - -------- %B2  - ------- %B2 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ,
--R
--R     [%B3,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B3   - ------- %B3   - ------- %B3   + -------- %B3
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B3   + -------- %B3   + ------ %B3   + --------- %B3
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B3   + --------- %B3   + --------- %B3  + --------- %B3
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B3  + ------- %B3  + ------ %B3  + ------- %B3
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B3  + -------- %B3  - ---- %B3 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B3   + ------ %B3   + ------- %B3   - ------- %B3
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B3   - -------- %B3   - -------- %B3   - ------ %B3
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B3   - -------- %B3   - -------- %B3  - ------- %B3
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B3  - -------- %B3  - -------- %B3  - -------- %B3
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B3  - -------- %B3  - ------- %B3 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ,
--R
--R     [%B4,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B4   - ------- %B4   - ------- %B4   + -------- %B4
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B4   + -------- %B4   + ------ %B4   + --------- %B4
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B4   + --------- %B4   + --------- %B4  + --------- %B4
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B4  + ------- %B4  + ------ %B4  + ------- %B4
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B4  + -------- %B4  - ---- %B4 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B4   + ------ %B4   + ------- %B4   - ------- %B4
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B4   - -------- %B4   - -------- %B4   - ------ %B4
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B4   - -------- %B4   - -------- %B4  - ------- %B4
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B4  - -------- %B4  - -------- %B4  - -------- %B4
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B4  - -------- %B4  - ------- %B4 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ,
--R
--R     [%B5,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B5   - ------- %B5   - ------- %B5   + -------- %B5
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B5   + -------- %B5   + ------ %B5   + --------- %B5
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B5   + --------- %B5   + --------- %B5  + --------- %B5
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B5  + ------- %B5  + ------ %B5  + ------- %B5
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B5  + -------- %B5  - ---- %B5 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B5   + ------ %B5   + ------- %B5   - ------- %B5
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B5   - -------- %B5   - -------- %B5   - ------ %B5
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B5   - -------- %B5   - -------- %B5  - ------- %B5
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B5  - -------- %B5  - -------- %B5  - -------- %B5
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B5  - -------- %B5  - ------- %B5 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ,
--R
--R     [%B6,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B6   - ------- %B6   - ------- %B6   + -------- %B6
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B6   + -------- %B6   + ------ %B6   + --------- %B6
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B6   + --------- %B6   + --------- %B6  + --------- %B6
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B6  + ------- %B6  + ------ %B6  + ------- %B6
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B6  + -------- %B6  - ---- %B6 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B6   + ------ %B6   + ------- %B6   - ------- %B6
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B6   - -------- %B6   - -------- %B6   - ------ %B6
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B6   - -------- %B6   - -------- %B6  - ------- %B6
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B6  - -------- %B6  - -------- %B6  - -------- %B6
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B6  - -------- %B6  - ------- %B6 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ,
--R
--R     [%B7,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B7   - ------- %B7   - ------- %B7   + -------- %B7
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B7   + -------- %B7   + ------ %B7   + --------- %B7
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B7   + --------- %B7   + --------- %B7  + --------- %B7
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B7  + ------- %B7  + ------ %B7  + ------- %B7
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B7  + -------- %B7  - ---- %B7 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B7   + ------ %B7   + ------- %B7   - ------- %B7
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B7   - -------- %B7   - -------- %B7   - ------ %B7
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B7   - -------- %B7   - -------- %B7  - ------- %B7
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B7  - -------- %B7  - -------- %B7  - -------- %B7
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B7  - -------- %B7  - ------- %B7 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ,
--R
--R     [%B8,
--R
--R         1184459    19   2335702    18   5460230    17   79900378    16
--R         ------- %B8   - ------- %B8   - ------- %B8   + -------- %B8
--R         1645371          548457          182819          1645371
--R       + 
--R         43953929    15   13420192    14   553986    13   193381378    12
--R         -------- %B8   + -------- %B8   + ------ %B8   + --------- %B8
--R          548457           182819           3731           1645371
--R       + 
--R         35978916    11   358660781    10   271667666    9   118784873    8
--R         -------- %B8   + --------- %B8   + --------- %B8  + --------- %B8
--R          182819           1645371           1645371           548457
--R       + 
--R         337505020    7   1389370    6   688291    5   3378002    4
--R         --------- %B8  + ------- %B8  + ------ %B8  + ------- %B8
--R          1645371          11193          4459          42189
--R       + 
--R         140671876    3   32325724    2   8270       9741532
--R         --------- %B8  + -------- %B8  - ---- %B8 - -------
--R          1645371          548457          343       1645371
--R       ,
--R
--R            91729    19   487915    18   4114333    17   1276987    16
--R         - ------ %B8   + ------ %B8   + ------- %B8   - ------- %B8
--R           705159         705159          705159          235053
--R       + 
--R           13243117    15   16292173    14   26536060    13   722714    12
--R         - -------- %B8   - -------- %B8   - -------- %B8   - ------ %B8
--R            705159           705159           705159           18081
--R       + 
--R           5382578    11   15449995    10   14279770    9   6603890    8
--R         - ------- %B8   - -------- %B8   - -------- %B8  - ------- %B8
--R            100737          235053           235053          100737
--R       + 
--R           409930    7   37340389    6   34893715    5   26686318    4
--R         - ------ %B8  - -------- %B8  - -------- %B8  - -------- %B8
--R            6027          705159          705159          705159
--R       + 
--R           801511    3   17206178    2   4406102       377534
--R         - ------ %B8  - -------- %B8  - ------- %B8 + ------
--R            26117         705159          705159       705159
--R       ]
--R     ]
--R                                 Type: List List RealClosure Fraction Integer
--E 11

--S 12 of 28
# lr
--R 
--R
--R   (12)  8
--R                                                        Type: PositiveInteger
--E 12

--S 13 of 28
[ [approximate(r,1/1000000) for r in point] for point in lr]
--R 
--R
--R   (13)
--R   [
--R        10048059
--R     [- --------,
--R         2097152
--R
--R        4503057316985387943524397913838966414596731976211768219335881208385516_
--R         314058924567176091423629695777403099833360761048898228916578137094309_
--R         838597331137202584846939132376157019506760357601165917454986815382098_
--R         789094851523420392811293126141329856546977145464661495487825919941188_
--R         447041722440491921567263542158028061437758844364634410045253024786561_
--R         923163288214175
--R      /
--R        4503057283025245488516511806985826635083100693757320465280554706865644_
--R         949577509916867201889438090408354817931718593862797624551518983570793_
--R         048774424291488708829840324189200301436123314860200821443733790755311_
--R         243632919864895421704228949571290016119498807957023663865443069392027_
--R         148979688266712323356043491523434068924275280417338574817381189277066_
--R         143312396681216
--R       ,
--R
--R        2106260768823475073894798680486016596249607148690685538763683715020639_
--R         680858649650790055889505646893309447097099937802187329095325898785247_
--R         249020717504983660482075156618738724514685333060011202964635166381351_
--R         543255982200250305283981086837110614842307026091211297929876896285681_
--R         830479054760056380762664905618462055306047816191782011588703789138988_
--R         1895
--R      /
--R        2106260609498464192472113804816474175341962953296434102413903142368757_
--R         967685273888585590975965211778862189872881953943640246297357061959812_
--R         326103659799025126863258676567202342106877031710184247484181423288921_
--R         837681237062708470295706218485928867400771937828499200923760593314168_
--R         901000666373896347598118228556731037072026474496776228383762993923280_
--R         0768
--R       ]
--R     ,
--R
--R        2563013
--R     [- -------,
--R        2097152
--R
--R       -
--R           2611346176791927789698617693237757719238259963063541781922752330440_
--R            189899668072928338490768623593207442125925986733815932243504809294_
--R            837523030237337236806668167446173001727271353311571242897
--R         /
--R           1165225400505222530583981916004589143757226610276858990008790134819_
--R            914940922413753983971394019523433320408139928153188829495755455163_
--R            963417619308395977544797140231469234269034921938055593984
--R       ,
--R
--R        3572594550275917221096588729615788272998517054675603239578198141006034_
--R         091735282826590621902304466963941971038923304526273329316373757450061_
--R         9789892286110976997087250466235373
--R      /
--R        1039548269345598936877071244834026055800814551120170592200522366591759_
--R         409659486442339141029452950265179989960104811875822530205346505131581_
--R         2439017247289173865014702966308864
--R       ]
--R     ,
--R
--R        1715967
--R     [- -------,
--R        2097152
--R
--R       -
--R           4213093533784303521084839517977082390377261503969586224828998436606_
--R            030656076359374564813773498376603121267822565801436206939519951465_
--R            18222580524697287410022543952491
--R         /
--R           9441814144185374458649692034349224052436597470966253663930641960795_
--R            805882585493199840191699917659443264824641135187383583888147867340_
--R            19307857605820364195856822304768
--R       ,
--R
--R        7635833347112644222515625424410831225347475669008589338834162172501904_
--R         994376346730876809042845208919919925302105720971453918982731389072591_
--R         4035
--R      /
--R        2624188764086097199784297610478066633934230467895851602278580978503784_
--R         549205788499019640602266966026891580103543567625039018629887141284916_
--R         75648
--R       ]
--R     ,
--R
--R         437701
--R     [- -------,
--R        2097152
--R
--R        1683106908638349588322172332654225913562986313181951031452750161441497_
--R         473455328150721364868355579646781603507777199075077835213366484533654_
--R         91383623741304759
--R      /
--R        1683106868095213389001709982705913638963077668731226111167785188004907_
--R         425226298680325887810962614140298597366984264887998908377068799998454_
--R         23381649008099328
--R       ,
--R
--R        4961550109835010186422681013422108735958714801003760639707968096646912_
--R         82670847283444311723917219104249213450966312411133
--R      /
--R        4961549872757738315509192078210209029852897118611097126236384040829376_
--R         59261914313170254867464792718363492160482442215424
--R       ]
--R     ,
--R
--R       222801
--R     [-------,
--R      2097152
--R
--R       -
--R           8994884880402428265107595121970691427136045692541978275573001865213_
--R            759921588137716696126349101655220195142994932299137183241705867672_
--R            383477
--R         /
--R           1167889998665026372177765100691888582708969960229934769690835752457_
--R            077779416435209473767866507769405888942764587718542434255625992456_
--R            372224
--R       ,
--R
--R       -
--R           2389704888133156878320801544373808395612771509208491019847452991885_
--R            509546519525467839016613593999693886640036283570552321155037871291_
--R            458703265
--R         /
--R           5355487273645096326090403286689931905988225444685411433221593833681_
--R            192957562833671468654290340746993656285925599117602120446183443145_
--R            479421952
--R       ]
--R     ,
--R
--R       765693
--R     [-------,
--R      2097152
--R
--R        8558969219816716267873244761178198088724698958616670140213765754322002_
--R         303251685786118678330840203328837654339523418704917749518340772512899_
--R         000391009630373148561
--R      /
--R        2941442445533010790976428411376393499815580215945856917906452535495723_
--R         013856818941702330228779890141296236721138154231997238917322156711965_
--R         2444639331719460159488
--R       ,
--R
--R       -
--R           2057618230582572101247650324860242561111302581543588808843923662767_
--R            549382241659362712290777612800192921420574408948085193743688582762_
--R            2246433251878894899015
--R         /
--R           2671598203325735538097952353501450220576313759890835097091722520642_
--R            710198771902667183948906289863714759678360292483949204616471537777_
--R            775324180661095366656
--R       ]
--R     ,
--R
--R      5743879
--R     [-------,
--R      2097152
--R
--R        1076288816968906847955546394773570208171456724942618614023663123574768_
--R         960850434263971398072546592772662158833449797698617455397887562900072_
--R         984768000608343553189801693408727205047612559889232757563830528688953_
--R         535421809482771058917542602890060941949620874083007858366669453501766_
--R         24841488732463225
--R      /
--R        3131768957080317946648461940023552044190376613458584986228549631916196_
--R         601616219781765615532532294746529648276430583810894079374566460757823_
--R         146888581195556029208515218838883200318658407469399426063260589828612_
--R         309231596669129707986481319851571942927230340622934023923486703042068_
--R         1530440845099008
--R       ,
--R
--R       -
--R           2113286699185750918364120475565458437870172489865485994389828135335_
--R            264444665284557526492734931691731407872701432935503473348172076098_
--R            720545849008780077564160534317894688366119529739980502944162668550_
--R            098127961950496210221942878089359674925850594427768502251789758706_
--R            752831632503615
--R         /
--R           1627615584937987580242906624347104580889144466168459718043153839408_
--R            372525533309808070363699585502216011211087103263609551026027769414_
--R            087391148126221168139781682587438075322591466131939975457200522349_
--R            838568964285634448018562038272378787354460106106141518010935617205_
--R            1706396253618176
--R       ]
--R     ,
--R
--R      19739877
--R     [--------,
--R       2097152
--R
--R       -
--R           2997249936832703303799015804861520949215040387500707177701285766720_
--R            192530579422478953566024359860143101547801638082771611160372212874_
--R            847778035809872843149225484238365858013629341705321702582333350918_
--R            009601789937023985935304900460493389873837030853410347089908880814_
--R            853981132018464582458800615394770741699487295875960210750215891948_
--R            814476854871031530931295467332190133702671098200902282300510751860_
--R            7185928457030277807397796525813862762239286996106809728023675
--R         /
--R           2308433274852278590728910081191811023906504141321432646123936794873_
--R            933319270608960702138193417647898360620229519176632937631786851455_
--R            014766027206259022252505551741823688896883806636602574431760472240_
--R            292093196729475160247268834121141893318848728661844434927287285112_
--R            897080767552864895056585864033178565910387065006112801516403522741_
--R            037360990556054476949527059227070809593049491257519554708879259595_
--R            52929920110858560812556635485429471554031675979542656381353984
--R       ,
--R
--R       -
--R           5128189263548228489096276397868940080600938410663080459407966335845_
--R            009264109490520459825316250084723010047035024497436523038925818959_
--R            289312931584701353927621435434398674263047293909122850133851990696_
--R            490231566094371994333795070782624011727587749989296611277318372294_
--R            624207116537910436554574146082884701305543912620419354885410735940_
--R            157775896602822364575864611831512943973974715166920465061850603762_
--R            87516256195847052412587282839139194642913955
--R         /
--R           2288281939778439330531208793181290471183631092455368990386390824243_
--R            509463644236249773080647438987739144921607794682653851741189091711_
--R            741868145114978337284191822497675868358729486644730856622552687209_
--R            203724411800481405702837198310642291275676195774614443815996713502_
--R            629391749783590041470860127752372996488627742672487622480063268808_
--R            889324891850842494934347337603075939980268208482904859678177751444_
--R            65749979827872616963053217673201717237252096
--R       ]
--R     ]
--R                                             Type: List List Fraction Integer
--E 13

--S 14 of 28
lpr := positiveSolve(lp)$pack
--R 
--R
--R   (14)  []
--R                                 Type: List List RealClosure Fraction Integer
--E 14

--S 15 of 28
f0 := x**3 + y + z + t- 1
--R 
--R
--R                  3
--R   (15)  z + y + x  + t - 1
--R                                                     Type: Polynomial Integer
--E 15

--S 16 of 28
f1 := x + y**3 + z + t -1
--R 
--R
--R              3
--R   (16)  z + y  + x + t - 1
--R                                                     Type: Polynomial Integer
--E 16

--S 17 of 28
f2 := x + y + z**3 + t-1
--R 
--R
--R          3
--R   (17)  z  + y + x + t - 1
--R                                                     Type: Polynomial Integer
--E 17

--S 18 of 28
f3 := x + y + z + t**3 -1
--R 
--R
--R                      3
--R   (18)  z + y + x + t  - 1
--R                                                     Type: Polynomial Integer
--E 18

--S 19 of 28
lf := [f0, f1, f2, f3]
--R 
--R
--R   (19)
--R             3              3              3                              3
--R   [z + y + x  + t - 1,z + y  + x + t - 1,z  + y + x + t - 1,z + y + x + t  - 1]
--R                                                Type: List Polynomial Integer
--E 19

--S 20 of 28
lts := triangSolve(lf)$pack
--R 
--R
--R   (20)
--R   [
--R       2           3        3
--R     {t  + t + 1, z  - z - t  + t,
--R
--R                 3      2      2      3           6     3            3      2
--R         (3z + 3t  - 3)y  + (3z  + (6t  - 6)z + 3t  - 6t  + 3)y + (3t  - 3)z
--R       + 
--R            6     3          9     6     3
--R         (3t  - 6t  + 3)z + t  - 3t  + 5t  - 3t
--R       ,
--R      x + y + z}
--R     ,
--R
--R       16     13     10     7      4      2
--R     {t   - 6t   + 9t   + 4t  + 15t  - 54t  + 27,
--R
--R                     15            14             13            12            11
--R             4907232t   + 40893984t   - 115013088t   + 22805712t   + 36330336t
--R           + 
--R                       10             9             8             7
--R             162959040t   - 159859440t  - 156802608t  + 117168768t
--R           + 
--R                       6             5             4             3
--R             126282384t  - 129351600t  + 306646992t  + 475302816t
--R           + 
--R                          2
--R             - 1006837776t  - 237269088t + 480716208
--R        *
--R           z
--R       + 
--R            54       51        48      46         45        43          42
--R         48t   - 912t   + 8232t   - 72t   - 46848t   + 1152t   + 186324t
--R       + 
--R                40          39        38         37           36         35
--R         - 3780t   - 543144t   - 3168t   - 21384t   + 1175251t   + 41184t
--R       + 
--R                34           33          32           31           30
--R         278003t   - 1843242t   - 301815t   - 1440726t   + 1912012t
--R       + 
--R                 29           28          27           26            25
--R         1442826t   + 4696262t   - 922481t   - 4816188t   - 10583524t
--R       + 
--R                  24            23            22          21            20
--R         - 208751t   + 11472138t   + 16762859t   - 857663t   - 19328175t
--R       + 
--R                    19           18            17            16           15
--R         - 18270421t   + 4914903t   + 22483044t   + 12926517t   - 8605511t
--R       + 
--R                    14           13           12           11          10
--R         - 17455518t   - 5014597t   + 8108814t   + 8465535t   + 190542t
--R       + 
--R                   9           8          7           6          5          4
--R         - 4305624t  - 2226123t  + 661905t  + 1169775t  + 226260t  - 209952t
--R       + 
--R                  3
--R         - 141183t  + 27216t
--R       ,
--R
--R                 3      2      2      3           6     3            3      2
--R         (3z + 3t  - 3)y  + (3z  + (6t  - 6)z + 3t  - 6t  + 3)y + (3t  - 3)z
--R       + 
--R            6     3          9     6     3
--R         (3t  - 6t  + 3)z + t  - 3t  + 5t  - 3t
--R       ,
--R                   3
--R      x + y + z + t  - 1}
--R     ,
--R              2                       2                     2
--R    {t,z - 1,y  - 1,x + y}, {t - 1,z,y  - 1,x + y}, {t - 1,z  - 1,z y + 1,x},
--R
--R       16     13     10     7      4      2
--R     {t   - 6t   + 9t   + 4t  + 15t  - 54t  + 27,
--R
--R                     29            28             27           26             25
--R             4907232t   + 40893984t   - 115013088t   - 1730448t   - 168139584t
--R           + 
--R                       24             23             22              21
--R             738024480t   - 195372288t   + 315849456t   - 2567279232t
--R           + 
--R                       20              19              18              17
--R             937147968t   + 1026357696t   + 4780488240t   - 2893767696t
--R           + 
--R                          16              15              14              13
--R             - 5617160352t   - 3427651728t   + 5001100848t   + 8720098416t
--R           + 
--R                        12             11               10              9
--R             2331732960t   - 499046544t   - 16243306272t   - 9748123200t
--R           + 
--R                        8               7               6               5
--R             3927244320t  + 25257280896t  + 10348032096t  - 17128672128t
--R           + 
--R                           4             3               2
--R             - 14755488768t  + 544086720t  + 10848188736t  + 1423614528t
--R           + 
--R             - 2884297248
--R        *
--R           z
--R       + 
--R              68        65         62       60          59        57          56
--R         - 48t   + 1152t   - 13560t   + 360t   + 103656t   - 7560t   - 572820t
--R       + 
--R               54           53        52          51           50         49
--R         71316t   + 2414556t   + 2736t   - 402876t   - 7985131t   - 49248t
--R       + 
--R                 48            47          46           45            44
--R         1431133t   + 20977409t   + 521487t   - 2697635t   - 43763654t
--R       + 
--R                   43           42            41            40            39
--R         - 3756573t   - 2093410t   + 71546495t   + 19699032t   + 35025028t
--R       + 
--R                    38            37             36            35             34
--R         - 89623786t   - 77798760t   - 138654191t   + 87596128t   + 235642497t
--R       + 
--R                   33            32             31             30             29
--R         349607642t   - 93299834t   - 551563167t   - 630995176t   + 186818962t
--R       + 
--R                   28             27             26              25
--R         995427468t   + 828416204t   - 393919231t   - 1076617485t
--R       + 
--R                      24             23              22              21
--R         - 1609479791t   + 595738126t   + 1198787136t   + 4342832069t
--R       + 
--R                      20              19              18              17
--R         - 2075938757t   - 4390835799t   - 4822843033t   + 6932747678t
--R       + 
--R                    16              15              14              13
--R         6172196808t   + 1141517740t   - 4981677585t   - 9819815280t
--R       + 
--R                      12             11               10               9
--R         - 7404299976t   - 157295760t   + 29124027630t   + 14856038208t
--R       + 
--R                       8               7              6               5
--R         - 16184101410t  - 26935440354t  - 3574164258t  + 10271338974t
--R       + 
--R                     4              3              2
--R         11191425264t  + 6869861262t  - 9780477840t  - 3586674168t + 2884297248
--R       ,
--R
--R            3      3      2      6      3           9     6    3
--R         (3z  + (6t  - 6)z  + (6t  - 12t  + 3)z + 2t  - 6t  + t  + 3t)y
--R       + 
--R            3      3      6      3      2      9      6      3          12     9
--R         (3t  - 3)z  + (6t  - 12t  + 6)z  + (4t  - 12t  + 11t  - 3)z + t   - 4t
--R       + 
--R           6     3
--R         5t  - 2t
--R       ,
--R                   3
--R      x + y + z + t  - 1}
--R     ,
--R            2
--R    {t - 1,z  - 1,y,x + z},
--R
--R       8    7    6     5     4     3      2
--R     {t  + t  + t  - 2t  - 2t  - 2t  + 19t  + 19t - 8,
--R
--R                     7           6           5            4           3
--R             2395770t  + 3934440t  - 3902067t  - 10084164t  - 1010448t
--R           + 
--R                      2
--R             32386932t  + 22413225t - 10432368
--R        *
--R           z
--R       + 
--R                  7           6           5           4            3
--R         - 463519t  + 3586833t  + 9494955t  - 8539305t  - 33283098t
--R       + 
--R                  2
--R         35479377t  + 46263256t - 17419896
--R       ,
--R
--R               4      3      3       6      3      2          3
--R             3z  + (9t  - 9)z  + (12t  - 24t  + 9)z  + (- 152t  + 219t - 67)z
--R           + 
--R                  6      4      3
--R             - 41t  + 57t  + 25t  - 57t + 16
--R        *
--R           y
--R       + 
--R            3      4      6      3      3          3              2
--R         (3t  - 3)z  + (9t  - 18t  + 9)z  + (- 181t  + 270t - 89)z
--R       + 
--R               6       4      3                    7      6      4       3
--R         (- 92t  + 135t  + 49t  - 135t + 43)z + 27t  - 27t  - 54t  + 396t
--R       + 
--R         - 486t + 144
--R       ,
--R                   3
--R      x + y + z + t  - 1}
--R     ,
--R            3
--R    {t,z - t  + 1,y - 1,x - 1}, {t - 1,z,y,x}, {t,z - 1,y,x}, {t,z,y - 1,x},
--R    {t,z,y,x - 1}]
--R                                   Type: List RegularChain(Integer,[x,y,z,t])
--E 20

--S 21 of 28
univariateSolve(lf)$pack
--R 
--R
--R   (21)
--R   [[complexRoots= ?,coordinates= [x - 1,y - 1,z + 1,t - %A]],
--R    [complexRoots= ?,coordinates= [x,y - 1,z,t - %A]],
--R    [complexRoots= ? - 1,coordinates= [x,y,z,t - %A]],
--R    [complexRoots= ?,coordinates= [x - 1,y,z,t - %A]],
--R    [complexRoots= ?,coordinates= [x,y,z - 1,t - %A]],
--R    [complexRoots= ? - 2,coordinates= [x - 1,y + 1,z,t - 1]],
--R    [complexRoots= ?,coordinates= [x + 1,y - 1,z,t - 1]],
--R    [complexRoots= ? - 1,coordinates= [x - 1,y + 1,z - 1,t]],
--R    [complexRoots= ? + 1,coordinates= [x + 1,y - 1,z - 1,t]],
--R
--R                     6     3     2
--R     [complexRoots= ?  - 2?  + 3?  - 3,
--R                           3                 3
--R      coordinates= [2x + %A  + %A - 1,2y + %A  + %A - 1,z - %A,t - %A]]
--R     ,
--R
--R                     5     3     2
--R     [complexRoots= ?  + 3?  - 2?  + 3? - 3,
--R                                        3
--R      coordinates= [x - %A,y - %A,z + %A  + 2%A - 1,t - %A]]
--R     ,
--R
--R                     4    3     2
--R     [complexRoots= ?  - ?  - 2?  + 3,
--R                          3                3                3
--R      coordinates= [x + %A  - %A - 1,y + %A  - %A - 1,z - %A  + 2%A + 1,t - %A]]
--R     ,
--R    [complexRoots= ? + 1,coordinates= [x - 1,y - 1,z,t - %A]],
--R
--R                     6     3     2
--R     [complexRoots= ?  + 2?  + 3?  - 3,
--R                           3                        3
--R      coordinates= [2x - %A  - %A - 1,y + %A,2z - %A  - %A - 1,t + %A]]
--R     ,
--R
--R                     6      4      3      2
--R     [complexRoots= ?  + 12?  + 20?  - 45?  - 42? - 953,
--R
--R       coordinates =
--R                       5       4       3        2
--R         [12609x + 23%A  + 49%A  - 46%A  + 362%A  - 5015%A - 8239,
--R                       5       4       3        2
--R          25218y + 23%A  + 49%A  - 46%A  + 362%A  + 7594%A - 8239,
--R                       5       4       3        2
--R          25218z + 23%A  + 49%A  - 46%A  + 362%A  + 7594%A - 8239,
--R                       5       4       3        2
--R          12609t + 23%A  + 49%A  - 46%A  + 362%A  - 5015%A - 8239]
--R       ]
--R     ,
--R
--R                     5      3      2
--R     [complexRoots= ?  + 12?  - 16?  + 48? - 96,
--R                           3
--R      coordinates= [8x + %A  + 8%A - 8,2y - %A,2z - %A,2t - %A]]
--R     ,
--R
--R                     5    4     3     2
--R     [complexRoots= ?  + ?  - 5?  - 3?  + 9? + 3,
--R
--R       coordinates =
--R                 3                   3                   3
--R         [2x - %A  + 2%A - 1, 2y + %A  - 4%A + 1, 2z - %A  + 2%A - 1,
--R                 3
--R          2t - %A  + 2%A - 1]
--R       ]
--R     ,
--R
--R                     4     3     2
--R     [complexRoots= ?  - 3?  + 4?  - 6? + 13,
--R
--R       coordinates =
--R                  3      2                  3      2
--R         [9x - 2%A  + 4%A  - %A + 2, 9y + %A  - 2%A  + 5%A - 1,
--R                 3      2                   3      2
--R          9z + %A  - 2%A  + 5%A - 1, 9t + %A  - 2%A  - 4%A - 1]
--R       ]
--R     ,
--R
--R                     4      2
--R     [complexRoots= ?  - 11?  + 37,
--R
--R       coordinates =
--R                 2            2                  2            2
--R         [3x - %A  + 7,6y + %A  + 3%A - 7,3z - %A  + 7,6t + %A  - 3%A - 7]
--R       ]
--R     ,
--R    [complexRoots= ? + 1,coordinates= [x - 1,y,z - 1,t + 1]],
--R    [complexRoots= ? + 2,coordinates= [x,y - 1,z - 1,t + 1]],
--R    [complexRoots= ? - 2,coordinates= [x,y - 1,z + 1,t - 1]],
--R    [complexRoots= ?,coordinates= [x,y + 1,z - 1,t - 1]],
--R    [complexRoots= ? - 2,coordinates= [x - 1,y,z + 1,t - 1]],
--R    [complexRoots= ?,coordinates= [x + 1,y,z - 1,t - 1]],
--R
--R                     4     3      2
--R     [complexRoots= ?  + 5?  + 16?  + 30? + 57,
--R
--R       coordinates =
--R                     3       2                          3       2
--R         [151x + 15%A  + 54%A  + 104%A + 93, 151y - 10%A  - 36%A  - 19%A - 62,
--R                    3       2                        3       2
--R          151z - 5%A  - 18%A  - 85%A - 31, 151t - 5%A  - 18%A  - 85%A - 31]
--R       ]
--R     ,
--R
--R                     4    3     2
--R     [complexRoots= ?  - ?  - 2?  + 3,
--R                          3                 3                       3
--R      coordinates= [x - %A  + 2%A + 1,y + %A  - %A - 1,z - %A,t + %A  - %A - 1]]
--R     ,
--R
--R                     4     3     2
--R     [complexRoots= ?  + 2?  - 8?  + 48,
--R
--R       coordinates =
--R                 3                          3                  3
--R         [8x - %A  + 4%A - 8,2y + %A,8z + %A  - 8%A + 8,8t - %A  + 4%A - 8]
--R       ]
--R     ,
--R
--R                     5    4     3     2
--R     [complexRoots= ?  + ?  - 2?  - 4?  + 5? + 8,
--R                           3            3            3
--R      coordinates= [3x + %A  - 1,3y + %A  - 1,3z + %A  - 1,t - %A]]
--R     ,
--R                    3
--R    [complexRoots= ?  + 3? - 1,coordinates= [x - %A,y - %A,z - %A,t - %A]]]
--RType: List Record(complexRoots: SparseUnivariatePolynomial Integer,coordinates: List Polynomial Integer)
--E 21

--S 22 of 28
ts := lts.1
--R 
--R
--R   (22)
--R     2           3        3
--R   {t  + t + 1, z  - z - t  + t,
--R
--R               3      2      2      3           6     3            3      2
--R       (3z + 3t  - 3)y  + (3z  + (6t  - 6)z + 3t  - 6t  + 3)y + (3t  - 3)z
--R     + 
--R          6     3          9     6     3
--R       (3t  - 6t  + 3)z + t  - 3t  + 5t  - 3t
--R     ,
--R    x + y + z}
--R                                        Type: RegularChain(Integer,[x,y,z,t])
--E 22

univariateSolve(ts)$pack
--S 23 of 28
--R 
--R
--R   (23)
--R   [
--R                     4     3      2
--R     [complexRoots= ?  + 5?  + 16?  + 30? + 57,
--R
--R       coordinates =
--R                     3       2                          3       2
--R         [151x + 15%A  + 54%A  + 104%A + 93, 151y - 10%A  - 36%A  - 19%A - 62,
--R                    3       2                        3       2
--R          151z - 5%A  - 18%A  - 85%A - 31, 151t - 5%A  - 18%A  - 85%A - 31]
--R       ]
--R     ,
--R
--R                     4    3     2
--R     [complexRoots= ?  - ?  - 2?  + 3,
--R                          3                 3                       3
--R      coordinates= [x - %A  + 2%A + 1,y + %A  - %A - 1,z - %A,t + %A  - %A - 1]]
--R     ,
--R
--R                     4     3     2
--R     [complexRoots= ?  + 2?  - 8?  + 48,
--R
--R       coordinates =
--R                 3                          3                  3
--R         [8x - %A  + 4%A - 8,2y + %A,8z + %A  - 8%A + 8,8t - %A  + 4%A - 8]
--R       ]
--R     ]
--RType: List Record(complexRoots: SparseUnivariatePolynomial Integer,coordinates: List Polynomial Integer)
--E 23

--S 24 of 28
realSolve(ts)$pack
--R 
--R
--R   (24)  []
--R                                 Type: List List RealClosure Fraction Integer
--E 24

--S 25 of 28
lr2 := realSolve(lf)$pack
--R 
--R
--R   (25)
--R   [[0,- 1,1,1], [0,0,1,0], [1,0,0,0], [0,0,0,1], [0,1,0,0], [1,0,%B37,- %B37],
--R    [1,0,%B38,- %B38], [0,1,%B35,- %B35], [0,1,%B36,- %B36], [- 1,0,1,1],
--R
--R     [%B32,
--R
--R          1     15    2     14    1     13    4     12   11     11    4     10
--R         -- %B32   + -- %B32   + -- %B32   - -- %B32   - -- %B32   - -- %B32
--R         27          27          27          27          27          27
--R       + 
--R          1     9   14     8    1     7   2     6   1     5   2     4       3
--R         -- %B32  + -- %B32  + -- %B32  + - %B32  + - %B32  + - %B32  + %B32
--R         27         27         27         9         3         9
--R       + 
--R         4     2
--R         - %B32  - %B32 - 2
--R         3
--R       ,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B32   - -- %B32   - -- %B32   + -- %B32   + -- %B32   + -- %B32
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B32  - -- %B32  - -- %B32  - - %B32  - - %B32  - - %B32  - %B32
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B32  + - %B32 + -
--R           3         2        2
--R       ,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B32   - -- %B32   - -- %B32   + -- %B32   + -- %B32   + -- %B32
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B32  - -- %B32  - -- %B32  - - %B32  - - %B32  - - %B32  - %B32
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B32  + - %B32 + -
--R           3         2        2
--R       ]
--R     ,
--R
--R     [%B33,
--R
--R          1     15    2     14    1     13    4     12   11     11    4     10
--R         -- %B33   + -- %B33   + -- %B33   - -- %B33   - -- %B33   - -- %B33
--R         27          27          27          27          27          27
--R       + 
--R          1     9   14     8    1     7   2     6   1     5   2     4       3
--R         -- %B33  + -- %B33  + -- %B33  + - %B33  + - %B33  + - %B33  + %B33
--R         27         27         27         9         3         9
--R       + 
--R         4     2
--R         - %B33  - %B33 - 2
--R         3
--R       ,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B33   - -- %B33   - -- %B33   + -- %B33   + -- %B33   + -- %B33
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B33  - -- %B33  - -- %B33  - - %B33  - - %B33  - - %B33  - %B33
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B33  + - %B33 + -
--R           3         2        2
--R       ,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B33   - -- %B33   - -- %B33   + -- %B33   + -- %B33   + -- %B33
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B33  - -- %B33  - -- %B33  - - %B33  - - %B33  - - %B33  - %B33
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B33  + - %B33 + -
--R           3         2        2
--R       ]
--R     ,
--R
--R     [%B34,
--R
--R          1     15    2     14    1     13    4     12   11     11    4     10
--R         -- %B34   + -- %B34   + -- %B34   - -- %B34   - -- %B34   - -- %B34
--R         27          27          27          27          27          27
--R       + 
--R          1     9   14     8    1     7   2     6   1     5   2     4       3
--R         -- %B34  + -- %B34  + -- %B34  + - %B34  + - %B34  + - %B34  + %B34
--R         27         27         27         9         3         9
--R       + 
--R         4     2
--R         - %B34  - %B34 - 2
--R         3
--R       ,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B34   - -- %B34   - -- %B34   + -- %B34   + -- %B34   + -- %B34
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B34  - -- %B34  - -- %B34  - - %B34  - - %B34  - - %B34  - %B34
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B34  + - %B34 + -
--R           3         2        2
--R       ,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B34   - -- %B34   - -- %B34   + -- %B34   + -- %B34   + -- %B34
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B34  - -- %B34  - -- %B34  - - %B34  - - %B34  - - %B34  - %B34
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B34  + - %B34 + -
--R           3         2        2
--R       ]
--R     ,
--R    [- 1,1,0,1], [- 1,1,1,0],
--R
--R     [%B23,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B23   - -- %B23   - -- %B23   + -- %B23   + -- %B23   + -- %B23
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B23  - -- %B23  - -- %B23  - - %B23  - - %B23  - - %B23  - %B23
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B23  + - %B23 + -
--R           3         2        2
--R       ,
--R      %B30,
--R
--R                   1     15    1     14    1     13    2     12   11     11
--R         - %B30 + -- %B23   + -- %B23   + -- %B23   - -- %B23   - -- %B23
--R                  54          27          54          27          54
--R       + 
--R            2     10    1     9    7     8    1     7   1     6   1     5
--R         - -- %B23   + -- %B23  + -- %B23  + -- %B23  + - %B23  + - %B23
--R           27          54         27         54         9         6
--R       + 
--R         1     4   2     2   1        1
--R         - %B23  + - %B23  - - %B23 - -
--R         9         3         2        2
--R       ]
--R     ,
--R
--R     [%B23,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B23   - -- %B23   - -- %B23   + -- %B23   + -- %B23   + -- %B23
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B23  - -- %B23  - -- %B23  - - %B23  - - %B23  - - %B23  - %B23
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B23  + - %B23 + -
--R           3         2        2
--R       ,
--R      %B31,
--R
--R                   1     15    1     14    1     13    2     12   11     11
--R         - %B31 + -- %B23   + -- %B23   + -- %B23   - -- %B23   - -- %B23
--R                  54          27          54          27          54
--R       + 
--R            2     10    1     9    7     8    1     7   1     6   1     5
--R         - -- %B23   + -- %B23  + -- %B23  + -- %B23  + - %B23  + - %B23
--R           27          54         27         54         9         6
--R       + 
--R         1     4   2     2   1        1
--R         - %B23  + - %B23  - - %B23 - -
--R         9         3         2        2
--R       ]
--R     ,
--R
--R     [%B24,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B24   - -- %B24   - -- %B24   + -- %B24   + -- %B24   + -- %B24
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B24  - -- %B24  - -- %B24  - - %B24  - - %B24  - - %B24  - %B24
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B24  + - %B24 + -
--R           3         2        2
--R       ,
--R      %B28,
--R
--R                   1     15    1     14    1     13    2     12   11     11
--R         - %B28 + -- %B24   + -- %B24   + -- %B24   - -- %B24   - -- %B24
--R                  54          27          54          27          54
--R       + 
--R            2     10    1     9    7     8    1     7   1     6   1     5
--R         - -- %B24   + -- %B24  + -- %B24  + -- %B24  + - %B24  + - %B24
--R           27          54         27         54         9         6
--R       + 
--R         1     4   2     2   1        1
--R         - %B24  + - %B24  - - %B24 - -
--R         9         3         2        2
--R       ]
--R     ,
--R
--R     [%B24,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B24   - -- %B24   - -- %B24   + -- %B24   + -- %B24   + -- %B24
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B24  - -- %B24  - -- %B24  - - %B24  - - %B24  - - %B24  - %B24
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B24  + - %B24 + -
--R           3         2        2
--R       ,
--R      %B29,
--R
--R                   1     15    1     14    1     13    2     12   11     11
--R         - %B29 + -- %B24   + -- %B24   + -- %B24   - -- %B24   - -- %B24
--R                  54          27          54          27          54
--R       + 
--R            2     10    1     9    7     8    1     7   1     6   1     5
--R         - -- %B24   + -- %B24  + -- %B24  + -- %B24  + - %B24  + - %B24
--R           27          54         27         54         9         6
--R       + 
--R         1     4   2     2   1        1
--R         - %B24  + - %B24  - - %B24 - -
--R         9         3         2        2
--R       ]
--R     ,
--R
--R     [%B25,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B25   - -- %B25   - -- %B25   + -- %B25   + -- %B25   + -- %B25
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B25  - -- %B25  - -- %B25  - - %B25  - - %B25  - - %B25  - %B25
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B25  + - %B25 + -
--R           3         2        2
--R       ,
--R      %B26,
--R
--R                   1     15    1     14    1     13    2     12   11     11
--R         - %B26 + -- %B25   + -- %B25   + -- %B25   - -- %B25   - -- %B25
--R                  54          27          54          27          54
--R       + 
--R            2     10    1     9    7     8    1     7   1     6   1     5
--R         - -- %B25   + -- %B25  + -- %B25  + -- %B25  + - %B25  + - %B25
--R           27          54         27         54         9         6
--R       + 
--R         1     4   2     2   1        1
--R         - %B25  + - %B25  - - %B25 - -
--R         9         3         2        2
--R       ]
--R     ,
--R
--R     [%B25,
--R
--R            1     15    1     14    1     13    2     12   11     11    2     10
--R         - -- %B25   - -- %B25   - -- %B25   + -- %B25   + -- %B25   + -- %B25
--R           54          27          54          27          54          27
--R       + 
--R            1     9    7     8    1     7   1     6   1     5   1     4       3
--R         - -- %B25  - -- %B25  - -- %B25  - - %B25  - - %B25  - - %B25  - %B25
--R           54         27         54         9         6         9
--R       + 
--R           2     2   1        3
--R         - - %B25  + - %B25 + -
--R           3         2        2
--R       ,
--R      %B27,
--R
--R                   1     15    1     14    1     13    2     12   11     11
--R         - %B27 + -- %B25   + -- %B25   + -- %B25   - -- %B25   - -- %B25
--R                  54          27          54          27          54
--R       + 
--R            2     10    1     9    7     8    1     7   1     6   1     5
--R         - -- %B25   + -- %B25  + -- %B25  + -- %B25  + - %B25  + - %B25
--R           27          54         27         54         9         6
--R       + 
--R         1     4   2     2   1        1
--R         - %B25  + - %B25  - - %B25 - -
--R         9         3         2        2
--R       ]
--R     ,
--R    [1,%B21,- %B21,0], [1,%B22,- %B22,0], [1,%B19,0,- %B19], [1,%B20,0,- %B20],
--R            1     3   1   1     3   1   1     3   1
--R    [%B17,- - %B17  + -,- - %B17  + -,- - %B17  + -],
--R            3         3   3         3   3         3
--R            1     3   1   1     3   1   1     3   1
--R    [%B18,- - %B18  + -,- - %B18  + -,- - %B18  + -]]
--R            3         3   3         3   3         3
--R                                 Type: List List RealClosure Fraction Integer
--E 25

--S 26 of 28
#lr2
--R 
--R
--R   (26)  27
--R                                                        Type: PositiveInteger
--E 26

--S 27 of 28
lpr2 := positiveSolve(lf)$pack
--R 
--R
--R                  1     3   1   1     3   1   1     3   1
--R   (27)  [[%B40,- - %B40  + -,- - %B40  + -,- - %B40  + -]]
--R                  3         3   3         3   3         3
--R                                 Type: List List RealClosure Fraction Integer
--E 27

--S 28 of 28
[approximate(r,1/10**21)::Float for r in lpr2.1]
--R 
--R
--R   (28)
--R   [0.3221853546 2608559291, 0.3221853546 2608559291, 0.3221853546 2608559291,
--R    0.3221853546 2608559291]
--R                                                             Type: List Float
--E 28
)spool
)lisp (bye)
@
<<ZeroDimensionalSolvePackage.help>>=
====================================================================
ZeroDimensionalSolvePackage examples
====================================================================

The ZeroDimensionalSolvePackage package constructor provides
operations for computing symbolically the complex or real roots of
zero-dimensional algebraic systems.

The package provides no multiplicity information (i.e. some returned
roots may be double or higher) but only distinct roots are returned.

Complex roots are given by means of univariate representations of
irreducible regular chains.  These representations are computed by the
univariateSolve operation (by calling the
InternalRationalUnivariateRepresentationPackage package constructor
which does the job).

Real roots are given by means of tuples of coordinates lying in the
RealClosure of the coefficient ring.  They are computed by the
realSolve and positiveSolve operations.  The former computes all the
solutions of the input system with real coordinates whereas the later
concentrate on the solutions with (strictly) positive coordinates.  In
both cases, the computations are performed by the RealClosure constructor.

Both computations of complex roots and real roots rely on triangular
decompositions.  These decompositions can be computed in two different
ways.  First, by a applying the zeroSetSplit operation from the REGSET
domain constructor.  In that case, no Groebner bases are computed.
This strategy is used by default.  Secondly, by applying the zeroSetSplit 
from LEXTRIPK.  To use this later strategy with the operations 
univariateSolve, realSolve and positiveSolve one just needs to use an 
extra boolean argument.

Note that the way of understanding triangular decompositions is
detailed in the example of the RegularTriangularSet constructor.

The ZeroDimensionalSolvePackage constructor takes three arguments.The 
first one R is the coefficient ring; it must belong to the categories 
OrderedRing, EuclideanDomain, CharacteristicZero and RealConstant. This 
means essentially that R is Integer or Fraction(Integer).  The second 
argument ls is the list of variables involved in the systems to solve.  
The third one MUST BE concat(ls,s) where s is an additional symbol used 
for the univariate representations. The abbreviation for 
ZeroDimensionalSolvePackage is ZDSOLVE.

We illustrate now how to use the constructor ZDSOLVE by two examples:
the Arnborg and Lazard system and the L-3 system (Aubry and Moreno
Maza).  Note that the use of this package is also demonstrated in the
example of the LexTriangularPackage constructor.

Define the coefficient ring.

  R := Integer
    Integer
                        Type: Domain

Define the lists of variables:

  ls : List Symbol := [x,y,z,t]
    [x,y,z,t]
                        Type: List Symbol

and:

  ls2 : List Symbol := [x,y,z,t,new()$Symbol]
    [x,y,z,t,%A]
                        Type: List Symbol

Call the package:

  pack := ZDSOLVE(R,ls,ls2)
    ZeroDimensionalSolvePackage(Integer,[x,y,z,t],[x,y,z,t,%A])
                        Type: Domain

Define a polynomial system (Arnborg-Lazard)

  p1 := x**2*y*z + x*y**2*z + x*y*z**2 + x*y*z + x*y + x*z + y*z
         2       2     2
    x y z  + (x y  + (x  + x + 1)y + x)z + x y
                        Type: Polynomial Integer

  p2 := x**2*y**2*z + x*y**2*z**2 + x**2*y*z + x*y*z + y*z + x + z
       2 2     2 2     2
    x y z  + (x y  + (x  + x + 1)y + 1)z + x
                        Type: Polynomial Integer

  p3 := x**2*y**2*z**2 + x**2*y**2*z + x*y**2*z + x*y*z + x*z + z + 1
     2 2 2      2      2
    x y z  + ((x  + x)y  + x y + x + 1)z + 1
                        Type: Polynomial Integer

  lp := [p1, p2, p3]
         2       2     2
   [x y z  + (x y  + (x  + x + 1)y + x)z + x y,
       2 2     2 2     2
    x y z  + (x y  + (x  + x + 1)y + 1)z + x,
     2 2 2      2      2
    x y z  + ((x  + x)y  + x y + x + 1)z + 1]
                        Type: List Polynomial Integer

Note that these polynomials do not involve the variable t; we will use
it in the second example.

First compute a decomposition into regular chains (i.e. regular 
triangular sets).

  triangSolve(lp)$pack
   [
    {
         20     19      18      17       16      15       14       13       12
        z   - 6z   - 41z   + 71z   + 106z   + 92z   + 197z   + 145z   + 257z
      + 
            11       10       9       8       7       6      5       4      3
        278z   + 201z   + 278z  + 257z  + 145z  + 197z  + 92z  + 106z  + 71z
      + 
             2
        - 41z  - 6z + 1
      ,
                      19            18             17             16
            14745844z   + 50357474z   - 130948857z   - 185261586z
          + 
                        15             14             13             12
            - 180077775z   - 338007307z   - 275379623z   - 453190404z
          + 
                        11             10             9             8
            - 474597456z   - 366147695z   - 481433567z  - 430613166z
          + 
                        7             6             5             4
            - 261878358z  - 326073537z  - 163008796z  - 177213227z
          + 
                        3            2
            - 104356755z  + 65241699z  + 9237732z - 1567348
       *
          y
      + 
                19           18            17            16            15
        1917314z   + 6508991z   - 16973165z   - 24000259z   - 23349192z
      + 
                   14            13            12            11            10
        - 43786426z   - 35696474z   - 58724172z   - 61480792z   - 47452440z
      + 
                   9            8            7            6            5
        - 62378085z  - 55776527z  - 33940618z  - 42233406z  - 21122875z
      + 
                   4            3           2
        - 22958177z  - 13504569z  + 8448317z  + 1195888z - 202934
      ,
        3       2       3    2               2              2
     ((z  - 2z)y  + (- z  - z  - 2z - 1)y - z  - z + 1)x + z  - 1}
    ]
                     Type: List RegularChain(Integer,[x,y,z,t])

We can see easily from this decomposition (consisting of a single
regular chain) that the input system has 20 complex roots.

Then we compute a univariate representation of this regular chain.

  univariateSolve(lp)$pack
   [
    [
      complexRoots =
           12      11      10     9     8      7      6      5     4     3
          ?   - 12?   + 24?   + 4?  - 9?  + 27?  - 21?  + 27?  - 9?  + 4?
        + 
             2
          24?  - 12? + 1
      ,
       coordinates =
        [
                      11        10         9        8        7         6
            63x + 62%A   - 721%A   + 1220%A  + 705%A  - 285%A  + 1512%A
          + 
                   5         4       3        2
            - 735%A  + 1401%A  - 21%A  + 215%A  + 1577%A - 142
          ,
                       11        10         9        8        7         6
            63y - 75%A   + 890%A   - 1682%A  - 516%A  + 588%A  - 1953%A
          + 
                  5         4        3        2
            1323%A  - 1815%A  + 426%A  - 243%A  - 1801%A + 679
          ,
         z - %A]
      ]
    ,
                     6    5    4    3    2
    [complexRoots= ?  + ?  + ?  + ?  + ?  + ? + 1,
                         5       3
     coordinates= [x - %A ,y - %A ,z - %A]]
    ,
                   2
   [complexRoots= ?  + 5? + 1,coordinates= [x - 1,y - 1,z - %A]]]
           Type: List Record(complexRoots: SparseUnivariatePolynomial Integer,
                             coordinates: List Polynomial Integer)

We see that the zeros of our regular chain are split into three components.
This is due to the use of univariate polynomial factorization.

Each of these components consist of two parts.  The first one is an
irreducible univariate polynomial p(?) which defines a simple
algebraic extension of the field of fractions of R.  The second one
consists of multivariate polynomials pol1(x,%A), pol2(y,%A) and
pol3(z,%A).  Each of these polynomials involve two variables: one is
an indeterminate x, y or z of the input system lp and the other is %A
which represents any root of p(?).  Recall that this %A is the last
element of the third parameter of ZDSOLVE.  Thus any complex root ? of
p(?) leads to a solution of the input system lp by replacing %A by
this ? in pol1(x,%A), pol2(y,%A) and pol3(z,%A).  Note that the
polynomials pol1(x,%A), pol2(y,%A) and pol3(z,%A) have degree one
w.r.t. x, y or z respectively.  This is always the case for all
univariate representations.  Hence the operation univariateSolve
replaces a system of multivariate polynomials by a list of univariate
polynomials, what justifies its name.  Another example of univariate
representations illustrates the LexTriangularPackage package constructor.

We now compute the solutions with real coordinates:

  lr := realSolve(lp)$pack
   [
    [%B1,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B1   - ------- %B1   - ------- %B1   + -------- %B1
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B1   + -------- %B1   + ------ %B1   + --------- %B1
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B1   + --------- %B1   + --------- %B1  + --------- %B1
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B1  + ------- %B1  + ------ %B1  + ------- %B1
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B1  + -------- %B1  - ---- %B1 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B1   + ------ %B1   + ------- %B1   - ------- %B1
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B1   - -------- %B1   - -------- %B1   - ------ %B1
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B1   - -------- %B1   - -------- %B1  - ------- %B1
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B1  - -------- %B1  - -------- %B1  - -------- %B1
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B1  - -------- %B1  - ------- %B1 + ------
           26117         705159          705159       705159
      ]
    ,
     [%B2,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B2   - ------- %B2   - ------- %B2   + -------- %B2
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B2   + -------- %B2   + ------ %B2   + --------- %B2
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B2   + --------- %B2   + --------- %B2  + --------- %B2
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B2  + ------- %B2  + ------ %B2  + ------- %B2
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B2  + -------- %B2  - ---- %B2 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B2   + ------ %B2   + ------- %B2   - ------- %B2
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B2   - -------- %B2   - -------- %B2   - ------ %B2
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B2   - -------- %B2   - -------- %B2  - ------- %B2
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B2  - -------- %B2  - -------- %B2  - -------- %B2
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B2  - -------- %B2  - ------- %B2 + ------
           26117         705159          705159       705159
      ]
    ,
     [%B3,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B3   - ------- %B3   - ------- %B3   + -------- %B3
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B3   + -------- %B3   + ------ %B3   + --------- %B3
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B3   + --------- %B3   + --------- %B3  + --------- %B3
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B3  + ------- %B3  + ------ %B3  + ------- %B3
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B3  + -------- %B3  - ---- %B3 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B3   + ------ %B3   + ------- %B3   - ------- %B3
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B3   - -------- %B3   - -------- %B3   - ------ %B3
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B3   - -------- %B3   - -------- %B3  - ------- %B3
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B3  - -------- %B3  - -------- %B3  - -------- %B3
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B3  - -------- %B3  - ------- %B3 + ------
           26117         705159          705159       705159
      ]
    ,
     [%B4,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B4   - ------- %B4   - ------- %B4   + -------- %B4
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B4   + -------- %B4   + ------ %B4   + --------- %B4
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B4   + --------- %B4   + --------- %B4  + --------- %B4
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B4  + ------- %B4  + ------ %B4  + ------- %B4
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B4  + -------- %B4  - ---- %B4 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B4   + ------ %B4   + ------- %B4   - ------- %B4
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B4   - -------- %B4   - -------- %B4   - ------ %B4
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B4   - -------- %B4   - -------- %B4  - ------- %B4
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B4  - -------- %B4  - -------- %B4  - -------- %B4
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B4  - -------- %B4  - ------- %B4 + ------
           26117         705159          705159       705159
      ]
    ,
     [%B5,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B5   - ------- %B5   - ------- %B5   + -------- %B5
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B5   + -------- %B5   + ------ %B5   + --------- %B5
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B5   + --------- %B5   + --------- %B5  + --------- %B5
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B5  + ------- %B5  + ------ %B5  + ------- %B5
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B5  + -------- %B5  - ---- %B5 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B5   + ------ %B5   + ------- %B5   - ------- %B5
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B5   - -------- %B5   - -------- %B5   - ------ %B5
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B5   - -------- %B5   - -------- %B5  - ------- %B5
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B5  - -------- %B5  - -------- %B5  - -------- %B5
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B5  - -------- %B5  - ------- %B5 + ------
           26117         705159          705159       705159
      ]
    ,
     [%B6,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B6   - ------- %B6   - ------- %B6   + -------- %B6
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B6   + -------- %B6   + ------ %B6   + --------- %B6
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B6   + --------- %B6   + --------- %B6  + --------- %B6
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B6  + ------- %B6  + ------ %B6  + ------- %B6
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B6  + -------- %B6  - ---- %B6 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B6   + ------ %B6   + ------- %B6   - ------- %B6
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B6   - -------- %B6   - -------- %B6   - ------ %B6
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B6   - -------- %B6   - -------- %B6  - ------- %B6
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B6  - -------- %B6  - -------- %B6  - -------- %B6
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B6  - -------- %B6  - ------- %B6 + ------
           26117         705159          705159       705159
      ]
    ,
     [%B7,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B7   - ------- %B7   - ------- %B7   + -------- %B7
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B7   + -------- %B7   + ------ %B7   + --------- %B7
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B7   + --------- %B7   + --------- %B7  + --------- %B7
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B7  + ------- %B7  + ------ %B7  + ------- %B7
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B7  + -------- %B7  - ---- %B7 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B7   + ------ %B7   + ------- %B7   - ------- %B7
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B7   - -------- %B7   - -------- %B7   - ------ %B7
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B7   - -------- %B7   - -------- %B7  - ------- %B7
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B7  - -------- %B7  - -------- %B7  - -------- %B7
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B7  - -------- %B7  - ------- %B7 + ------
           26117         705159          705159       705159
      ]
    ,
     [%B8,
        1184459    19   2335702    18   5460230    17   79900378    16
        ------- %B8   - ------- %B8   - ------- %B8   + -------- %B8
        1645371          548457          182819          1645371
      + 
        43953929    15   13420192    14   553986    13   193381378    12
        -------- %B8   + -------- %B8   + ------ %B8   + --------- %B8
         548457           182819           3731           1645371
      + 
        35978916    11   358660781    10   271667666    9   118784873    8
        -------- %B8   + --------- %B8   + --------- %B8  + --------- %B8
         182819           1645371           1645371           548457
      + 
        337505020    7   1389370    6   688291    5   3378002    4
        --------- %B8  + ------- %B8  + ------ %B8  + ------- %B8
         1645371          11193          4459          42189
      + 
        140671876    3   32325724    2   8270       9741532
        --------- %B8  + -------- %B8  - ---- %B8 - -------
         1645371          548457          343       1645371
      ,
           91729    19   487915    18   4114333    17   1276987    16
        - ------ %B8   + ------ %B8   + ------- %B8   - ------- %B8
          705159         705159          705159          235053
      + 
          13243117    15   16292173    14   26536060    13   722714    12
        - -------- %B8   - -------- %B8   - -------- %B8   - ------ %B8
           705159           705159           705159           18081
      + 
          5382578    11   15449995    10   14279770    9   6603890    8
        - ------- %B8   - -------- %B8   - -------- %B8  - ------- %B8
           100737          235053           235053          100737
      + 
          409930    7   37340389    6   34893715    5   26686318    4
        - ------ %B8  - -------- %B8  - -------- %B8  - -------- %B8
           6027          705159          705159          705159
      + 
          801511    3   17206178    2   4406102       377534
        - ------ %B8  - -------- %B8  - ------- %B8 + ------
           26117         705159          705159       705159
      ]
    ]
                    Type: List List RealClosure Fraction Integer

The number of real solutions for the input system is:

  # lr
    8
                    Type: PositiveInteger

Each of these real solutions is given by a list of elements in
RealClosure(R).  In these 8 lists, the first element is a value of z,
the second of y and the last of x.  This is logical since by setting
the list of variables of the package to [x,y,z,t] we mean that the
elimination ordering on the variables is t < z < y < x.  Note that
each system treated by the ZDSOLVE package constructor needs only to
be zero-dimensional w.r.t. the variables involved in the system it-self 
and not necessarily w.r.t. all the variables used to define the package.

We can approximate these real numbers as follows.  This computation
takes between 30 sec. and 5 min, depending on your machine.

  [ [approximate(r,1/1000000) for r in point] for point in lr]
   [
        10048059
     [- --------,
         2097152

        4503057316985387943524397913838966414596731976211768219335881208385516_
         314058924567176091423629695777403099833360761048898228916578137094309_
         838597331137202584846939132376157019506760357601165917454986815382098_
         789094851523420392811293126141329856546977145464661495487825919941188_
         447041722440491921567263542158028061437758844364634410045253024786561_
         923163288214175
      /
        4503057283025245488516511806985826635083100693757320465280554706865644_
         949577509916867201889438090408354817931718593862797624551518983570793_
         048774424291488708829840324189200301436123314860200821443733790755311_
         243632919864895421704228949571290016119498807957023663865443069392027_
         148979688266712323356043491523434068924275280417338574817381189277066_
         143312396681216
       ,

        2106260768823475073894798680486016596249607148690685538763683715020639_
         680858649650790055889505646893309447097099937802187329095325898785247_
         249020717504983660482075156618738724514685333060011202964635166381351_
         543255982200250305283981086837110614842307026091211297929876896285681_
         830479054760056380762664905618462055306047816191782011588703789138988_
         1895
      /
        2106260609498464192472113804816474175341962953296434102413903142368757_
         967685273888585590975965211778862189872881953943640246297357061959812_
         326103659799025126863258676567202342106877031710184247484181423288921_
         837681237062708470295706218485928867400771937828499200923760593314168_
         901000666373896347598118228556731037072026474496776228383762993923280_
         0768
       ]
     ,

        2563013
     [- -------,
        2097152

       -
           2611346176791927789698617693237757719238259963063541781922752330440_
            189899668072928338490768623593207442125925986733815932243504809294_
            837523030237337236806668167446173001727271353311571242897
         /
           1165225400505222530583981916004589143757226610276858990008790134819_
            914940922413753983971394019523433320408139928153188829495755455163_
            963417619308395977544797140231469234269034921938055593984
       ,

        3572594550275917221096588729615788272998517054675603239578198141006034_
         091735282826590621902304466963941971038923304526273329316373757450061_
         9789892286110976997087250466235373
      /
        1039548269345598936877071244834026055800814551120170592200522366591759_
         409659486442339141029452950265179989960104811875822530205346505131581_
         2439017247289173865014702966308864
       ]
     ,

        1715967
     [- -------,
        2097152

       -
           4213093533784303521084839517977082390377261503969586224828998436606_
            030656076359374564813773498376603121267822565801436206939519951465_
            18222580524697287410022543952491
         /
           9441814144185374458649692034349224052436597470966253663930641960795_
            805882585493199840191699917659443264824641135187383583888147867340_
            19307857605820364195856822304768
       ,

        7635833347112644222515625424410831225347475669008589338834162172501904_
         994376346730876809042845208919919925302105720971453918982731389072591_
         4035
      /
        2624188764086097199784297610478066633934230467895851602278580978503784_
         549205788499019640602266966026891580103543567625039018629887141284916_
         75648
       ]
     ,

         437701
     [- -------,
        2097152

        1683106908638349588322172332654225913562986313181951031452750161441497_
         473455328150721364868355579646781603507777199075077835213366484533654_
         91383623741304759
      /
        1683106868095213389001709982705913638963077668731226111167785188004907_
         425226298680325887810962614140298597366984264887998908377068799998454_
         23381649008099328
       ,

        4961550109835010186422681013422108735958714801003760639707968096646912_
         82670847283444311723917219104249213450966312411133
      /
        4961549872757738315509192078210209029852897118611097126236384040829376_
         59261914313170254867464792718363492160482442215424
       ]
     ,

       222801
     [-------,
      2097152

       -
           8994884880402428265107595121970691427136045692541978275573001865213_
            759921588137716696126349101655220195142994932299137183241705867672_
            383477
         /
           1167889998665026372177765100691888582708969960229934769690835752457_
            077779416435209473767866507769405888942764587718542434255625992456_
            372224
       ,

       -
           2389704888133156878320801544373808395612771509208491019847452991885_
            509546519525467839016613593999693886640036283570552321155037871291_
            458703265
         /
           5355487273645096326090403286689931905988225444685411433221593833681_
            192957562833671468654290340746993656285925599117602120446183443145_
            479421952
       ]
     ,

       765693
     [-------,
      2097152

        8558969219816716267873244761178198088724698958616670140213765754322002_
         303251685786118678330840203328837654339523418704917749518340772512899_
         000391009630373148561
      /
        2941442445533010790976428411376393499815580215945856917906452535495723_
         013856818941702330228779890141296236721138154231997238917322156711965_
         2444639331719460159488
       ,

       -
           2057618230582572101247650324860242561111302581543588808843923662767_
            549382241659362712290777612800192921420574408948085193743688582762_
            2246433251878894899015
         /
           2671598203325735538097952353501450220576313759890835097091722520642_
            710198771902667183948906289863714759678360292483949204616471537777_
            775324180661095366656
       ]
     ,

      5743879
     [-------,
      2097152

        1076288816968906847955546394773570208171456724942618614023663123574768_
         960850434263971398072546592772662158833449797698617455397887562900072_
         984768000608343553189801693408727205047612559889232757563830528688953_
         535421809482771058917542602890060941949620874083007858366669453501766_
         24841488732463225
      /
        3131768957080317946648461940023552044190376613458584986228549631916196_
         601616219781765615532532294746529648276430583810894079374566460757823_
         146888581195556029208515218838883200318658407469399426063260589828612_
         309231596669129707986481319851571942927230340622934023923486703042068_
         1530440845099008
       ,

       -
           2113286699185750918364120475565458437870172489865485994389828135335_
            264444665284557526492734931691731407872701432935503473348172076098_
            720545849008780077564160534317894688366119529739980502944162668550_
            098127961950496210221942878089359674925850594427768502251789758706_
            752831632503615
         /
           1627615584937987580242906624347104580889144466168459718043153839408_
            372525533309808070363699585502216011211087103263609551026027769414_
            087391148126221168139781682587438075322591466131939975457200522349_
            838568964285634448018562038272378787354460106106141518010935617205_
            1706396253618176
       ]
     ,

      19739877
     [--------,
       2097152

       -
           2997249936832703303799015804861520949215040387500707177701285766720_
            192530579422478953566024359860143101547801638082771611160372212874_
            847778035809872843149225484238365858013629341705321702582333350918_
            009601789937023985935304900460493389873837030853410347089908880814_
            853981132018464582458800615394770741699487295875960210750215891948_
            814476854871031530931295467332190133702671098200902282300510751860_
            7185928457030277807397796525813862762239286996106809728023675
         /
           2308433274852278590728910081191811023906504141321432646123936794873_
            933319270608960702138193417647898360620229519176632937631786851455_
            014766027206259022252505551741823688896883806636602574431760472240_
            292093196729475160247268834121141893318848728661844434927287285112_
            897080767552864895056585864033178565910387065006112801516403522741_
            037360990556054476949527059227070809593049491257519554708879259595_
            52929920110858560812556635485429471554031675979542656381353984
       ,

       -
           5128189263548228489096276397868940080600938410663080459407966335845_
            009264109490520459825316250084723010047035024497436523038925818959_
            289312931584701353927621435434398674263047293909122850133851990696_
            490231566094371994333795070782624011727587749989296611277318372294_
            624207116537910436554574146082884701305543912620419354885410735940_
            157775896602822364575864611831512943973974715166920465061850603762_
            87516256195847052412587282839139194642913955
         /
           2288281939778439330531208793181290471183631092455368990386390824243_
            509463644236249773080647438987739144921607794682653851741189091711_
            741868145114978337284191822497675868358729486644730856622552687209_
            203724411800481405702837198310642291275676195774614443815996713502_
            629391749783590041470860127752372996488627742672487622480063268808_
            889324891850842494934347337603075939980268208482904859678177751444_
            65749979827872616963053217673201717237252096
       ]
     ]
                     Type: List List Fraction Integer

We can also concentrate on the solutions with real (strictly) positive
coordinates:

  lpr := positiveSolve(lp)$pack
    []
                     Type: List List RealClosure Fraction Integer

Thus we have checked that the input system has no solution with
strictly positive coordinates.

Let us define another polynomial system (L-3).

  f0 := x**3 + y + z + t- 1
              3
     z + y + x  + t - 1
                      Type: Polynomial Integer

  f1 := x + y**3 + z + t -1
          3
     z + y  + x + t - 1
                      Type: Polynomial Integer

  f2 := x + y + z**3 + t-1
      3
     z  + y + x + t - 1
                      Type: Polynomial Integer

  f3 := x + y + z + t**3 -1
                  3
     z + y + x + t  - 1
                      Type: Polynomial Integer

  lf := [f0, f1, f2, f3]
            3              3              3                              3
  [z + y + x  + t - 1,z + y  + x + t - 1,z  + y + x + t - 1,z + y + x + t  - 1]
                      Type: List Polynomial Integer

First compute a decomposition into regular chains (i.e. regular 
triangular sets).

  lts := triangSolve(lf)$pack
  [
      2           3        3
    {t  + t + 1, z  - z - t  + t,
                3      2      2      3           6     3            3      2
        (3z + 3t  - 3)y  + (3z  + (6t  - 6)z + 3t  - 6t  + 3)y + (3t  - 3)z
      + 
           6     3          9     6     3
        (3t  - 6t  + 3)z + t  - 3t  + 5t  - 3t
      ,
     x + y + z}
    ,
      16     13     10     7      4      2
    {t   - 6t   + 9t   + 4t  + 15t  - 54t  + 27,
                    15            14             13            12            11
            4907232t   + 40893984t   - 115013088t   + 22805712t   + 36330336t
          + 
                      10             9             8             7
            162959040t   - 159859440t  - 156802608t  + 117168768t
          + 
                      6             5             4             3
            126282384t  - 129351600t  + 306646992t  + 475302816t
          + 
                         2
            - 1006837776t  - 237269088t + 480716208
       *
          z
      + 
           54       51        48      46         45        43          42
        48t   - 912t   + 8232t   - 72t   - 46848t   + 1152t   + 186324t
      + 
               40          39        38         37           36         35
        - 3780t   - 543144t   - 3168t   - 21384t   + 1175251t   + 41184t
      + 
               34           33          32           31           30
        278003t   - 1843242t   - 301815t   - 1440726t   + 1912012t
      + 
                29           28          27           26            25
        1442826t   + 4696262t   - 922481t   - 4816188t   - 10583524t
      + 
                 24            23            22          21            20
        - 208751t   + 11472138t   + 16762859t   - 857663t   - 19328175t
      + 
                   19           18            17            16           15
        - 18270421t   + 4914903t   + 22483044t   + 12926517t   - 8605511t
      + 
                   14           13           12           11          10
        - 17455518t   - 5014597t   + 8108814t   + 8465535t   + 190542t
      + 
                  9           8          7           6          5          4
        - 4305624t  - 2226123t  + 661905t  + 1169775t  + 226260t  - 209952t
      + 
                 3
        - 141183t  + 27216t
      ,
                3      2      2      3           6     3            3      2
        (3z + 3t  - 3)y  + (3z  + (6t  - 6)z + 3t  - 6t  + 3)y + (3t  - 3)z
      + 
           6     3          9     6     3
        (3t  - 6t  + 3)z + t  - 3t  + 5t  - 3t
      ,
                  3
     x + y + z + t  - 1}
    ,
             2                       2                     2
   {t,z - 1,y  - 1,x + y}, {t - 1,z,y  - 1,x + y}, {t - 1,z  - 1,z y + 1,x},
      16     13     10     7      4      2
    {t   - 6t   + 9t   + 4t  + 15t  - 54t  + 27,
                    29            28             27           26             25
            4907232t   + 40893984t   - 115013088t   - 1730448t   - 168139584t
          + 
                      24             23             22              21
            738024480t   - 195372288t   + 315849456t   - 2567279232t
          + 
                      20              19              18              17
            937147968t   + 1026357696t   + 4780488240t   - 2893767696t
          + 
                         16              15              14              13
            - 5617160352t   - 3427651728t   + 5001100848t   + 8720098416t
          + 
                       12             11               10              9
            2331732960t   - 499046544t   - 16243306272t   - 9748123200t
          + 
                       8               7               6               5
            3927244320t  + 25257280896t  + 10348032096t  - 17128672128t
          + 
                          4             3               2
            - 14755488768t  + 544086720t  + 10848188736t  + 1423614528t
          + 
            - 2884297248
       *
          z
      + 
            68        65         62       60          59        57          56
       - 48t   + 1152t   - 13560t   + 360t   + 103656t   - 7560t   - 572820t
      + 
              54           53        52          51           50         49
        71316t   + 2414556t   + 2736t   - 402876t   - 7985131t   - 49248t
      + 
                48            47          46           45            44
        1431133t   + 20977409t   + 521487t   - 2697635t   - 43763654t
      + 
                  43           42            41            40            39
        - 3756573t   - 2093410t   + 71546495t   + 19699032t   + 35025028t
      + 
                   38            37             36            35             34
        - 89623786t   - 77798760t   - 138654191t   + 87596128t   + 235642497t
      + 
                  33            32             31             30             29
        349607642t   - 93299834t   - 551563167t   - 630995176t   + 186818962t
      + 
                  28             27             26              25
        995427468t   + 828416204t   - 393919231t   - 1076617485t
      + 
                     24             23              22              21
        - 1609479791t   + 595738126t   + 1198787136t   + 4342832069t
      + 
                     20              19              18              17
        - 2075938757t   - 4390835799t   - 4822843033t   + 6932747678t
      + 
                   16              15              14              13
        6172196808t   + 1141517740t   - 4981677585t   - 9819815280t
      + 
                     12             11               10               9
        - 7404299976t   - 157295760t   + 29124027630t   + 14856038208t
      + 
                      8               7              6               5
        - 16184101410t  - 26935440354t  - 3574164258t  + 10271338974t
      + 
                    4              3              2
        11191425264t  + 6869861262t  - 9780477840t  - 3586674168t + 2884297248
      ,
           3      3      2      6      3           9     6    3
        (3z  + (6t  - 6)z  + (6t  - 12t  + 3)z + 2t  - 6t  + t  + 3t)y
      + 
           3      3      6      3      2      9      6      3          12     9
        (3t  - 3)z  + (6t  - 12t  + 6)z  + (4t  - 12t  + 11t  - 3)z + t   - 4t
      + 
          6     3
        5t  - 2t
      ,
                  3
     x + y + z + t  - 1}
    ,
           2
   {t - 1,z  - 1,y,x + z},
      8    7    6     5     4     3      2
    {t  + t  + t  - 2t  - 2t  - 2t  + 19t  + 19t - 8,
                    7           6           5            4           3
            2395770t  + 3934440t  - 3902067t  - 10084164t  - 1010448t
          + 
                     2
            32386932t  + 22413225t - 10432368
       *
          z
      + 
                 7           6           5           4            3
        - 463519t  + 3586833t  + 9494955t  - 8539305t  - 33283098t
      + 
                 2
        35479377t  + 46263256t - 17419896
      ,
              4      3      3       6      3      2          3
            3z  + (9t  - 9)z  + (12t  - 24t  + 9)z  + (- 152t  + 219t - 67)z
          + 
                 6      4      3
            - 41t  + 57t  + 25t  - 57t + 16
       *
          y
      + 
           3      4      6      3      3          3              2
        (3t  - 3)z  + (9t  - 18t  + 9)z  + (- 181t  + 270t - 89)z
      + 
              6       4      3                    7      6      4       3
        (- 92t  + 135t  + 49t  - 135t + 43)z + 27t  - 27t  - 54t  + 396t
      + 
        - 486t + 144
      ,
                  3
     x + y + z + t  - 1}
    ,
           3
   {t,z - t  + 1,y - 1,x - 1}, {t - 1,z,y,x}, {t,z - 1,y,x}, {t,z,y - 1,x},
   {t,z,y,x - 1}]
                     Type: List RegularChain(Integer,[x,y,z,t])

Then we compute a univariate representation.

  univariateSolve(lf)$pack
  [[complexRoots= ?,coordinates= [x - 1,y - 1,z + 1,t - %A]],
   [complexRoots= ?,coordinates= [x,y - 1,z,t - %A]],
   [complexRoots= ? - 1,coordinates= [x,y,z,t - %A]],
   [complexRoots= ?,coordinates= [x - 1,y,z,t - %A]],
   [complexRoots= ?,coordinates= [x,y,z - 1,t - %A]],
   [complexRoots= ? - 2,coordinates= [x - 1,y + 1,z,t - 1]],
   [complexRoots= ?,coordinates= [x + 1,y - 1,z,t - 1]],
   [complexRoots= ? - 1,coordinates= [x - 1,y + 1,z - 1,t]],
   [complexRoots= ? + 1,coordinates= [x + 1,y - 1,z - 1,t]],

                    6     3     2
    [complexRoots= ?  - 2?  + 3?  - 3,
                          3                 3
     coordinates= [2x + %A  + %A - 1,2y + %A  + %A - 1,z - %A,t - %A]]
    ,

                    5     3     2
    [complexRoots= ?  + 3?  - 2?  + 3? - 3,
                                       3
     coordinates= [x - %A,y - %A,z + %A  + 2%A - 1,t - %A]]
    ,

                    4    3     2
    [complexRoots= ?  - ?  - 2?  + 3,
                         3                3                3
     coordinates= [x + %A  - %A - 1,y + %A  - %A - 1,z - %A  + 2%A + 1,t - %A]]
    ,
   [complexRoots= ? + 1,coordinates= [x - 1,y - 1,z,t - %A]],

                    6     3     2
    [complexRoots= ?  + 2?  + 3?  - 3,
                          3                        3
     coordinates= [2x - %A  - %A - 1,y + %A,2z - %A  - %A - 1,t + %A]]
    ,

                    6      4      3      2
    [complexRoots= ?  + 12?  + 20?  - 45?  - 42? - 953,

      coordinates =
                      5       4       3        2
        [12609x + 23%A  + 49%A  - 46%A  + 362%A  - 5015%A - 8239,
                      5       4       3        2
         25218y + 23%A  + 49%A  - 46%A  + 362%A  + 7594%A - 8239,
                      5       4       3        2
         25218z + 23%A  + 49%A  - 46%A  + 362%A  + 7594%A - 8239,
                      5       4       3        2
         12609t + 23%A  + 49%A  - 46%A  + 362%A  - 5015%A - 8239]
      ]
    ,

                    5      3      2
    [complexRoots= ?  + 12?  - 16?  + 48? - 96,
                          3
     coordinates= [8x + %A  + 8%A - 8,2y - %A,2z - %A,2t - %A]]
    ,

                    5    4     3     2
    [complexRoots= ?  + ?  - 5?  - 3?  + 9? + 3,

      coordinates =
                3                   3                   3
        [2x - %A  + 2%A - 1, 2y + %A  - 4%A + 1, 2z - %A  + 2%A - 1,
                3
         2t - %A  + 2%A - 1]
      ]
    ,

                    4     3     2
    [complexRoots= ?  - 3?  + 4?  - 6? + 13,

      coordinates =
                 3      2                  3      2
        [9x - 2%A  + 4%A  - %A + 2, 9y + %A  - 2%A  + 5%A - 1,
                3      2                   3      2
         9z + %A  - 2%A  + 5%A - 1, 9t + %A  - 2%A  - 4%A - 1]
      ]
    ,

                    4      2
    [complexRoots= ?  - 11?  + 37,

      coordinates =
                2            2                  2            2
        [3x - %A  + 7,6y + %A  + 3%A - 7,3z - %A  + 7,6t + %A  - 3%A - 7]
      ]
    ,
   [complexRoots= ? + 1,coordinates= [x - 1,y,z - 1,t + 1]],
   [complexRoots= ? + 2,coordinates= [x,y - 1,z - 1,t + 1]],
   [complexRoots= ? - 2,coordinates= [x,y - 1,z + 1,t - 1]],
   [complexRoots= ?,coordinates= [x,y + 1,z - 1,t - 1]],
   [complexRoots= ? - 2,coordinates= [x - 1,y,z + 1,t - 1]],
   [complexRoots= ?,coordinates= [x + 1,y,z - 1,t - 1]],

                    4     3      2
    [complexRoots= ?  + 5?  + 16?  + 30? + 57,

      coordinates =
                    3       2                          3       2
        [151x + 15%A  + 54%A  + 104%A + 93, 151y - 10%A  - 36%A  - 19%A - 62,
                   3       2                        3       2
         151z - 5%A  - 18%A  - 85%A - 31, 151t - 5%A  - 18%A  - 85%A - 31]
      ]
    ,

                    4    3     2
    [complexRoots= ?  - ?  - 2?  + 3,
                         3                 3                       3
     coordinates= [x - %A  + 2%A + 1,y + %A  - %A - 1,z - %A,t + %A  - %A - 1]]
    ,

                    4     3     2
    [complexRoots= ?  + 2?  - 8?  + 48,

      coordinates =
                3                          3                  3
        [8x - %A  + 4%A - 8,2y + %A,8z + %A  - 8%A + 8,8t - %A  + 4%A - 8]
      ]
    ,

                    5    4     3     2
    [complexRoots= ?  + ?  - 2?  - 4?  + 5? + 8,
                          3            3            3
     coordinates= [3x + %A  - 1,3y + %A  - 1,3z + %A  - 1,t - %A]]
    ,
                   3
   [complexRoots= ?  + 3? - 1,coordinates= [x - %A,y - %A,z - %A,t - %A]]]
          Type: List Record(complexRoots: SparseUnivariatePolynomial Integer,
                            coordinates: List Polynomial Integer)

Note that this computation is made from the input system lf.

However it is possible to reuse a pre-computed regular chain as follows:

  ts := lts.1
     2           3        3
   {t  + t + 1, z  - z - t  + t,

               3      2      2      3           6     3            3      2
       (3z + 3t  - 3)y  + (3z  + (6t  - 6)z + 3t  - 6t  + 3)y + (3t  - 3)z
     + 
          6     3          9     6     3
       (3t  - 6t  + 3)z + t  - 3t  + 5t  - 3t
     ,
    x + y + z}
                       Type: RegularChain(Integer,[x,y,z,t])

  univariateSolve(ts)$pack
  [
                    4     3      2
    [complexRoots= ?  + 5?  + 16?  + 30? + 57,
      coordinates =
                    3       2                          3       2
        [151x + 15%A  + 54%A  + 104%A + 93, 151y - 10%A  - 36%A  - 19%A - 62,
                   3       2                        3       2
         151z - 5%A  - 18%A  - 85%A - 31, 151t - 5%A  - 18%A  - 85%A - 31]
      ]
    ,
                    4    3     2
    [complexRoots= ?  - ?  - 2?  + 3,
                         3                 3                       3
     coordinates= [x - %A  + 2%A + 1,y + %A  - %A - 1,z - %A,t + %A  - %A - 1]]
    ,
                    4     3     2
    [complexRoots= ?  + 2?  - 8?  + 48,
      coordinates =
                3                          3                  3
        [8x - %A  + 4%A - 8,2y + %A,8z + %A  - 8%A + 8,8t - %A  + 4%A - 8]
      ]
    ]
         Type: List Record(complexRoots: SparseUnivariatePolynomial Integer,
                           coordinates: List Polynomial Integer)

  realSolve(ts)$pack
    []
                        Type: List List RealClosure Fraction Integer

We compute now the full set of points with real coordinates:

  lr2 := realSolve(lf)$pack
  [[0,- 1,1,1], [0,0,1,0], [1,0,0,0], [0,0,0,1], [0,1,0,0], [1,0,%B37,- %B37],
   [1,0,%B38,- %B38], [0,1,%B35,- %B35], [0,1,%B36,- %B36], [- 1,0,1,1],
    [%B32,
         1     15    2     14    1     13    4     12   11     11    4     10
        -- %B32   + -- %B32   + -- %B32   - -- %B32   - -- %B32   - -- %B32
        27          27          27          27          27          27
      + 
         1     9   14     8    1     7   2     6   1     5   2     4       3
        -- %B32  + -- %B32  + -- %B32  + - %B32  + - %B32  + - %B32  + %B32
        27         27         27         9         3         9
      + 
        4     2
        - %B32  - %B32 - 2
        3
      ,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B32   - -- %B32   - -- %B32   + -- %B32   + -- %B32   + -- %B32
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B32  - -- %B32  - -- %B32  - - %B32  - - %B32  - - %B32  - %B32
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B32  + - %B32 + -
          3         2        2
      ,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B32   - -- %B32   - -- %B32   + -- %B32   + -- %B32   + -- %B32
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B32  - -- %B32  - -- %B32  - - %B32  - - %B32  - - %B32  - %B32
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B32  + - %B32 + -
          3         2        2
      ]
    ,
    [%B33,
         1     15    2     14    1     13    4     12   11     11    4     10
        -- %B33   + -- %B33   + -- %B33   - -- %B33   - -- %B33   - -- %B33
        27          27          27          27          27          27
      + 
         1     9   14     8    1     7   2     6   1     5   2     4       3
        -- %B33  + -- %B33  + -- %B33  + - %B33  + - %B33  + - %B33  + %B33
        27         27         27         9         3         9
      + 
        4     2
        - %B33  - %B33 - 2
        3
      ,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B33   - -- %B33   - -- %B33   + -- %B33   + -- %B33   + -- %B33
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B33  - -- %B33  - -- %B33  - - %B33  - - %B33  - - %B33  - %B33
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B33  + - %B33 + -
          3         2        2
      ,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B33   - -- %B33   - -- %B33   + -- %B33   + -- %B33   + -- %B33
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B33  - -- %B33  - -- %B33  - - %B33  - - %B33  - - %B33  - %B33
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B33  + - %B33 + -
          3         2        2
      ]
    ,
    [%B34,
         1     15    2     14    1     13    4     12   11     11    4     10
        -- %B34   + -- %B34   + -- %B34   - -- %B34   - -- %B34   - -- %B34
        27          27          27          27          27          27
      + 
         1     9   14     8    1     7   2     6   1     5   2     4       3
        -- %B34  + -- %B34  + -- %B34  + - %B34  + - %B34  + - %B34  + %B34
        27         27         27         9         3         9
      + 
        4     2
        - %B34  - %B34 - 2
        3
      ,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B34   - -- %B34   - -- %B34   + -- %B34   + -- %B34   + -- %B34
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B34  - -- %B34  - -- %B34  - - %B34  - - %B34  - - %B34  - %B34
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B34  + - %B34 + -
          3         2        2
      ,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B34   - -- %B34   - -- %B34   + -- %B34   + -- %B34   + -- %B34
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B34  - -- %B34  - -- %B34  - - %B34  - - %B34  - - %B34  - %B34
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B34  + - %B34 + -
          3         2        2
      ]
    ,
   [- 1,1,0,1], [- 1,1,1,0],
    [%B23,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B23   - -- %B23   - -- %B23   + -- %B23   + -- %B23   + -- %B23
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B23  - -- %B23  - -- %B23  - - %B23  - - %B23  - - %B23  - %B23
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B23  + - %B23 + -
          3         2        2
      ,
     %B30,
                  1     15    1     14    1     13    2     12   11     11
        - %B30 + -- %B23   + -- %B23   + -- %B23   - -- %B23   - -- %B23
                 54          27          54          27          54
      + 
           2     10    1     9    7     8    1     7   1     6   1     5
        - -- %B23   + -- %B23  + -- %B23  + -- %B23  + - %B23  + - %B23
          27          54         27         54         9         6
      + 
        1     4   2     2   1        1
        - %B23  + - %B23  - - %B23 - -
        9         3         2        2
      ]
    ,
    [%B23,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B23   - -- %B23   - -- %B23   + -- %B23   + -- %B23   + -- %B23
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B23  - -- %B23  - -- %B23  - - %B23  - - %B23  - - %B23  - %B23
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B23  + - %B23 + -
          3         2        2
      ,
     %B31,
                  1     15    1     14    1     13    2     12   11     11
        - %B31 + -- %B23   + -- %B23   + -- %B23   - -- %B23   - -- %B23
                 54          27          54          27          54
      + 
           2     10    1     9    7     8    1     7   1     6   1     5
        - -- %B23   + -- %B23  + -- %B23  + -- %B23  + - %B23  + - %B23
          27          54         27         54         9         6
      + 
        1     4   2     2   1        1
        - %B23  + - %B23  - - %B23 - -
        9         3         2        2
      ]
    ,
    [%B24,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B24   - -- %B24   - -- %B24   + -- %B24   + -- %B24   + -- %B24
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B24  - -- %B24  - -- %B24  - - %B24  - - %B24  - - %B24  - %B24
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B24  + - %B24 + -
          3         2        2
      ,
     %B28,
                  1     15    1     14    1     13    2     12   11     11
        - %B28 + -- %B24   + -- %B24   + -- %B24   - -- %B24   - -- %B24
                 54          27          54          27          54
      + 
           2     10    1     9    7     8    1     7   1     6   1     5
        - -- %B24   + -- %B24  + -- %B24  + -- %B24  + - %B24  + - %B24
          27          54         27         54         9         6
      + 
        1     4   2     2   1        1
        - %B24  + - %B24  - - %B24 - -
        9         3         2        2
      ]
    ,
    [%B24,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B24   - -- %B24   - -- %B24   + -- %B24   + -- %B24   + -- %B24
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B24  - -- %B24  - -- %B24  - - %B24  - - %B24  - - %B24  - %B24
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B24  + - %B24 + -
          3         2        2
      ,
     %B29,
                  1     15    1     14    1     13    2     12   11     11
        - %B29 + -- %B24   + -- %B24   + -- %B24   - -- %B24   - -- %B24
                 54          27          54          27          54
      + 
           2     10    1     9    7     8    1     7   1     6   1     5
        - -- %B24   + -- %B24  + -- %B24  + -- %B24  + - %B24  + - %B24
          27          54         27         54         9         6
      + 
        1     4   2     2   1        1
        - %B24  + - %B24  - - %B24 - -
        9         3         2        2
      ]
    ,
    [%B25,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B25   - -- %B25   - -- %B25   + -- %B25   + -- %B25   + -- %B25
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B25  - -- %B25  - -- %B25  - - %B25  - - %B25  - - %B25  - %B25
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B25  + - %B25 + -
          3         2        2
      ,
     %B26,
                  1     15    1     14    1     13    2     12   11     11
        - %B26 + -- %B25   + -- %B25   + -- %B25   - -- %B25   - -- %B25
                 54          27          54          27          54
      + 
           2     10    1     9    7     8    1     7   1     6   1     5
        - -- %B25   + -- %B25  + -- %B25  + -- %B25  + - %B25  + - %B25
          27          54         27         54         9         6
      + 
        1     4   2     2   1        1
        - %B25  + - %B25  - - %B25 - -
        9         3         2        2
      ]
    ,
    [%B25,
           1     15    1     14    1     13    2     12   11     11    2     10
        - -- %B25   - -- %B25   - -- %B25   + -- %B25   + -- %B25   + -- %B25
          54          27          54          27          54          27
      + 
           1     9    7     8    1     7   1     6   1     5   1     4       3
        - -- %B25  - -- %B25  - -- %B25  - - %B25  - - %B25  - - %B25  - %B25
          54         27         54         9         6         9
      + 
          2     2   1        3
        - - %B25  + - %B25 + -
          3         2        2
      ,
     %B27,
                  1     15    1     14    1     13    2     12   11     11
        - %B27 + -- %B25   + -- %B25   + -- %B25   - -- %B25   - -- %B25
                 54          27          54          27          54
      + 
           2     10    1     9    7     8    1     7   1     6   1     5
        - -- %B25   + -- %B25  + -- %B25  + -- %B25  + - %B25  + - %B25
          27          54         27         54         9         6
      + 
        1     4   2     2   1        1
        - %B25  + - %B25  - - %B25 - -
        9         3         2        2
      ]
    ,
   [1,%B21,- %B21,0], [1,%B22,- %B22,0], [1,%B19,0,- %B19], [1,%B20,0,- %B20],
           1     3   1   1     3   1   1     3   1
   [%B17,- - %B17  + -,- - %B17  + -,- - %B17  + -],
           3         3   3         3   3         3
           1     3   1   1     3   1   1     3   1
   [%B18,- - %B18  + -,- - %B18  + -,- - %B18  + -]]
           3         3   3         3   3         3
                      Type: List List RealClosure Fraction Integer

The number of real solutions for the input system is:

  #lr2
    27
                               Type: PositiveInteger

Another example of computation of real solutions illustrates the 
LexTriangularPackage package constructor.

We concentrate now on the solutions with real (strictly) positive
coordinates:

  lpr2 := positiveSolve(lf)$pack
              1     3   1   1     3   1   1     3   1
     [[%B40,- - %B40  + -,- - %B40  + -,- - %B40  + -]]
              3         3   3         3   3         3
                             Type: List List RealClosure Fraction Integer

Finally, we approximate the coordinates of this point with 20 exact digits:

  [approximate(r,1/10**21)::Float for r in lpr2.1]
   [0.3221853546 2608559291, 0.3221853546 2608559291, 0.3221853546 2608559291,
    0.3221853546 2608559291]
                             Type: List Float

See Also:
o )show ZeroDimensionalSolvePackage
o $AXIOM/doc/src/algebra/zerodim.spad.dvi

@
<<package ZDSOLVE ZeroDimensionalSolvePackage>>=
)abbrev package ZDSOLVE ZeroDimensionalSolvePackage
++ Author: Marc Moreno Maza
++ Date Created: 23/01/1999
++ Date Last Updated: 08/02/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Keywords:
++ References:
++ Description: 
++   A package for computing symbolically the complex and real roots of 
++   zero-dimensional algebraic systems over the integer or rational
++   numbers. Complex roots are given by means of univariate representations
++   of irreducible regular chains. Real roots are given by means of tuples
++   of coordinates lying in the \spadtype{RealClosure} of the coefficient ring.
++   This constructor takes three arguments. The first one \spad{R} is the
++   coefficient ring. The second one \spad{ls} is the list of variables involved 
++   in the systems to solve. The third one must be \spad{concat(ls,s)} where
++   \spad{s} is an additional symbol used for the univariate representations.
++   WARNING: The third argument is not checked.
++   All operations are based on triangular decompositions.
++   The default is to compute these decompositions directly from the input
++   system by using the \spadtype{RegularChain} domain constructor.
++   The lexTriangular algorithm can also be used for computing these decompositions
++   (see the \spadtype{LexTriangularPackage} package constructor).
++   For that purpose, the operations \axiomOpFrom{univariateSolve}{ZeroDimensionalSolvePackage},
++   \axiomOpFrom{realSolve}{ZeroDimensionalSolvePackage} and 
++   \axiomOpFrom{positiveSolve}{ZeroDimensionalSolvePackage} admit an optional 
++   argument. \newline Author: Marc Moreno Maza.
 
++ Version: 1.

ZeroDimensionalSolvePackage(R,ls,ls2): Exports == Implementation where
  R : Join(OrderedRing,EuclideanDomain,CharacteristicZero,RealConstant)
  ls: List Symbol
  ls2: List Symbol
  V ==> OrderedVariableList(ls)
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  P ==> Polynomial R
  LP ==> List P
  LS ==> List Symbol
  Q ==> NewSparseMultivariatePolynomial(R,V)
  U ==> SparseUnivariatePolynomial(R)
  TS ==> RegularChain(R,ls)
  RUR ==> Record(complexRoots: U, coordinates: LP) 
  K ==> Fraction R
  RC ==> RealClosure(K)
  PRC ==> Polynomial RC
  REALSOL ==> List RC
  URC ==> SparseUnivariatePolynomial RC
  V2 ==> OrderedVariableList(ls2)
  Q2 ==> NewSparseMultivariatePolynomial(R,V2)
  E2 ==> IndexedExponents V2
  ST ==> SquareFreeRegularTriangularSet(R,E2,V2,Q2)
  Q2WT ==> Record(val: Q2, tower: ST)
  LQ2WT ==> Record(val: List(Q2), tower: ST)
  WIP ==> Record(reals: List(RC), vars: List(Symbol), pols: List(Q2))
  polsetpack ==> PolynomialSetUtilitiesPackage(R,E2,V2,Q2)
  normpack ==> NormalizationPackage(R,E2,V2,Q2,ST)
  rurpack ==> InternalRationalUnivariateRepresentationPackage(R,E2,V2,Q2,ST)
  quasicomppack ==> SquareFreeQuasiComponentPackage(R,E2,V2,Q2,ST)
  lextripack ==> LexTriangularPackage(R,ls)

  Exports ==  with
     triangSolve: (LP,B,B) -> List RegularChain(R,ls)
       ++ \spad{triangSolve(lp,info?,lextri?)} decomposes the variety
       ++ associated with \axiom{lp} into regular chains.
       ++ Thus a point belongs to this variety iff it is a regular
       ++ zero of a regular set in in the output.
       ++ Note that \axiom{lp} needs to generate a zero-dimensional ideal.
       ++ If \axiom{lp} is not zero-dimensional then the result is only
       ++ a decomposition of its zero-set in the sense of the closure
       ++ (w.r.t. Zarisky topology).
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during the computations.
       ++ See \axiomOpFrom{zeroSetSplit}{RegularTriangularSetCategory}(lp,true,info?).
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
     triangSolve: (LP,B) -> List RegularChain(R,ls)
       ++ \spad{triangSolve(lp,info?)} returns the same as \spad{triangSolve(lp,false)}
     triangSolve: LP -> List RegularChain(R,ls)
       ++ \spad{triangSolve(lp)} returns the same as \spad{triangSolve(lp,false,false)}
     univariateSolve: RegularChain(R,ls) -> List Record(complexRoots: U, coordinates: LP) 
       ++ \spad{univariateSolve(ts)} returns a univariate representation
       ++ of \spad{ts}.
       ++ See \axiomOpFrom{rur}{RationalUnivariateRepresentationPackage}(lp,true).
     univariateSolve: (LP,B,B,B) -> List RUR
       ++ \spad{univariateSolve(lp,info?,check?,lextri?)} returns a univariate 
       ++ representation of the variety associated with \spad{lp}. 
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during the decomposition into regular chains.
       ++ If \spad{check?} is \spad{true} then the result is checked.
       ++ See \axiomOpFrom{rur}{RationalUnivariateRepresentationPackage}(lp,true).
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
     univariateSolve: (LP,B,B) -> List RUR
       ++ \spad{univariateSolve(lp,info?,check?)} returns the same as
       ++ \spad{univariateSolve(lp,info?,check?,false)}.
     univariateSolve: (LP,B) -> List RUR
       ++ \spad{univariateSolve(lp,info?)} returns the same as
       ++ \spad{univariateSolve(lp,info?,false,false)}.
     univariateSolve: LP -> List RUR
       ++ \spad{univariateSolve(lp)} returns the same as
       ++ \spad{univariateSolve(lp,false,false,false)}.
     realSolve: RegularChain(R,ls) -> List REALSOL
       ++ \spad{realSolve(ts)} returns the set of the points in the regular
       ++ zero set of \spad{ts} whose coordinates are all real.
       ++ WARNING: For each set of coordinates given by \spad{realSolve(ts)} 
       ++ the ordering of the indeterminates is reversed w.r.t. \spad{ls}.
     realSolve: (LP,B,B,B) -> List REALSOL
       ++ \spad{realSolve(ts,info?,check?,lextri?)} returns the set of the points 
       ++ in the variety associated with \spad{lp} whose coordinates are all real.
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during decomposition into regular chains.
       ++ If \spad{check?} is \spad{true} then the result is checked.
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
       ++ WARNING: For each set of coordinates given by \spad{realSolve(ts,info?,check?,lextri?)}
       ++ the ordering of the indeterminates is reversed w.r.t. \spad{ls}.
     realSolve: (LP,B,B) -> List REALSOL
       ++ \spad{realSolve(ts,info?,check?)} returns the same as \spad{realSolve(ts,info?,check?,false)}.
     realSolve: (LP,B) -> List REALSOL
       ++ \spad{realSolve(ts,info?)} returns the same as \spad{realSolve(ts,info?,false,false)}.
     realSolve: LP -> List REALSOL
       ++ \spad{realSolve(lp)} returns the same as \spad{realSolve(ts,false,false,false)} 
     positiveSolve: RegularChain(R,ls)  -> List REALSOL
       ++ \spad{positiveSolve(ts)} returns the points of the regular
       ++ set of \spad{ts} with (real) strictly positive coordinates.
     positiveSolve: (LP,B,B) -> List REALSOL
       ++ \spad{positiveSolve(lp,info?,lextri?)} returns the set of the points 
       ++ in the variety associated with \spad{lp} whose coordinates are (real) strictly positive.
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during decomposition into regular chains.
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
       ++ WARNING: For each set of coordinates given by \spad{positiveSolve(lp,info?,lextri?)} 
       ++ the ordering of the indeterminates is reversed w.r.t. \spad{ls}.
     positiveSolve: (LP,B) -> List REALSOL
       ++ \spad{positiveSolve(lp)} returns the same as \spad{positiveSolve(lp,info?,false)}.
     positiveSolve: LP -> List REALSOL
       ++ \spad{positiveSolve(lp)} returns the same as \spad{positiveSolve(lp,false,false)}.
     squareFree: (TS) -> List ST
       ++ \spad{squareFree(ts)} returns the square-free factorization of \spad{ts}.
       ++ Moreover, each factor is a Lazard triangular set and the decomposition 
       ++ is a Kalkbrener split of \spad{ts}, which is enough here for
       ++ the matter of solving zero-dimensional algebraic systems.
       ++ WARNING: \spad{ts} is not checked to be zero-dimensional.
     convert: Q -> Q2
       ++ \spad{convert(q)} converts \spad{q}.
     convert: P -> PRC
       ++ \spad{convert(p)} converts \spad{p}.
     convert: Q2 -> PRC
       ++ \spad{convert(q)} converts \spad{q}.
     convert: U -> URC
       ++ \spad{convert(u)} converts \spad{u}.
     convert: ST -> List Q2
       ++ \spad{convert(st)} returns the members of \spad{st}.	

  Implementation == add
     news: Symbol := last(ls2)$(List Symbol)
     newv: V2 := (variable(news)$V2)::V2
     newq: Q2 :=  newv :: Q2

     convert(q:Q):Q2 ==
       ground? q => (ground(q))::Q2
       q2: Q2 := 0
       while not ground?(q) repeat
         v: V := mvar(q)
         d: N := mdeg(q)
         v2: V2 := (variable(convert(v)@Symbol)$V2)::V2
         iq2: Q2 := convert(init(q))@Q2 
         lq2: Q2 := (v2 :: Q2)
         lq2 := lq2 ** d
         q2 := iq2 * lq2 + q2
         q := tail(q)
       q2 + (ground(q))::Q2

     squareFree(ts:TS):List(ST) == 
       irred?: Boolean := false
       st: ST := [[newq]$(List Q2)]      
       lq: List(Q2) := [convert(p)@Q2 for p in parts(ts)]
       lq := sort(infRittWu?,lq)
       toSee: List LQ2WT := []
       if irred?
         then
           lf := irreducibleFactors([first lq])$polsetpack
           lq := rest lq
           for f in lf repeat
             toSee := cons([cons(f,lq),st]$LQ2WT, toSee)
         else
           toSee := [[lq,st]$LQ2WT]
       toSave: List ST := []
       while not empty? toSee repeat
         lqwt := first toSee; toSee := rest toSee
         lq := lqwt.val; st := lqwt.tower
         empty? lq => 
           toSave := cons(st,toSave)
         q := first lq; lq := rest lq
         lsfqwt: List Q2WT := squareFreePart(q,st)$ST
         for sfqwt in lsfqwt repeat
           q := sfqwt.val; st := sfqwt.tower
           if not ground? init(q)
             then
               q := normalizedAssociate(q,st)$normpack
           newts := internalAugment(q,st)$ST      
           newlq := [remainder(q,newts).polnum for q in lq]
           toSee := cons([newlq,newts]$LQ2WT,toSee)
       toSave


     triangSolve(lp: LP, info?: B, lextri?: B): List TS ==
       lq: List(Q) := [convert(p)$Q for p in lp]
       lextri? => zeroSetSplit(lq,false)$lextripack
       zeroSetSplit(lq,true,info?)$TS

     triangSolve(lp: LP, info?: B): List TS == triangSolve(lp,info?,false)

     triangSolve(lp: LP): List TS == triangSolve(lp,false)

     convert(u: U): URC ==
       zero? u => 0
       ground? u => ((ground(u) :: K)::RC)::URC
       uu: URC := 0
       while not ground? u repeat
         uu := monomial((leadingCoefficient(u) :: K):: RC,degree(u)) + uu
         u := reductum u
       uu + ((ground(u) :: K)::RC)::URC

     coerceFromRtoRC(r:R): RC ==
       (r::K)::RC

     convert(p:P): PRC ==
       map(coerceFromRtoRC,p)$PolynomialFunctions2(R,RC)

     convert(q2:Q2): PRC ==
       p: P := coerce(q2)$Q2
       convert(p)@PRC
       
     convert(sts:ST): List Q2 ==
       lq2: List(Q2) := parts(sts)$ST
       lq2 := sort(infRittWu?,lq2)
       rest(lq2)

     realSolve(ts: TS): List REALSOL ==
       lsts: List ST := squareFree(ts)
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       toSave

     realSolve(lp: List(P), info?:Boolean, check?:Boolean, lextri?: Boolean): List REALSOL  ==
       lts: List TS
       lq: List(Q) := [convert(p)$Q for p in lp]
       if lextri?
         then
           lts := zeroSetSplit(lq,false)$lextripack
         else
           lts := zeroSetSplit(lq,true,info?)$TS
       lsts:  List ST := []
       for ts in lts repeat 
         lsts := concat(squareFree(ts), lsts)
       lsts := removeSuperfluousQuasiComponents(lsts)$quasicomppack   
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       if check?
         then
           for p in lp repeat
             for realsol in toSave repeat
               prc: PRC := convert(p)@PRC
               for rr in realsol for symb in reverse(ls) repeat
                 prc := eval(prc,symb,rr)
               not zero? prc =>
                 error "realSolve$ZDSOLVE: bad result"
       toSave

     realSolve(lp: List(P), info?:Boolean, check?:Boolean): List REALSOL  ==
       realSolve(lp,info?,check?,false)
         
     realSolve(lp: List(P), info?:Boolean): List REALSOL  ==
       realSolve(lp,info?,false,false)

     realSolve(lp: List(P)): List REALSOL  ==
       realSolve(lp,false,false,false)

     positiveSolve(ts: TS): List REALSOL ==
       lsts: List ST := squareFree(ts)
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           if positive? urcRoot
             then 
               toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       toSave

     positiveSolve(lp: List(P), info?:Boolean, lextri?: Boolean): List REALSOL  ==
       lts: List TS
       lq: List(Q) := [convert(p)$Q for p in lp]
       if lextri?
         then
           lts := zeroSetSplit(lq,false)$lextripack
         else
           lts := zeroSetSplit(lq,true,info?)$TS
       lsts:  List ST := []
       for ts in lts repeat 
         lsts := concat(squareFree(ts), lsts)
       lsts := removeSuperfluousQuasiComponents(lsts)$quasicomppack   
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           if positive? urcRoot
             then 
               toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       toSave

     positiveSolve(lp: List(P), info?:Boolean): List REALSOL  ==
       positiveSolve(lp, info?, false)

     positiveSolve(lp: List(P)): List REALSOL  ==
       positiveSolve(lp, false, false)

     univariateSolve(ts: TS): List RUR ==
       toSee: List ST := squareFree(ts)
       toSave: List RUR := []
       for st in toSee repeat
         lus: List ST := rur(st,true)$rurpack 
         for us in lus repeat
           g: U  := univariate(select(us,newv)::Q2)$Q2
           lc: LP := [convert(q2)@P for q2 in parts(collectUpper(us,newv)$ST)$ST]
           toSave := cons([g,lc]$RUR, toSave)
       toSave

     univariateSolve(lp: List(P), info?:Boolean, check?:Boolean, lextri?: Boolean): List RUR ==
       lts: List TS
       lq: List(Q) := [convert(p)$Q for p in lp]
       if lextri?
         then
           lts := zeroSetSplit(lq,false)$lextripack
         else
           lts := zeroSetSplit(lq,true,info?)$TS
       toSee:  List ST := []
       for ts in lts repeat 
         toSee := concat(squareFree(ts), toSee)
       toSee := removeSuperfluousQuasiComponents(toSee)$quasicomppack   
       toSave: List RUR := []
       if check?
         then
           lq2: List(Q2) := [convert(p)$Q2 for p in lp]
       for st in toSee repeat
         lus: List ST := rur(st,true)$rurpack 
         for us in lus repeat
            if check?
              then
                rems: List(Q2) := [removeZero(q2,us)$ST for q2 in lq2]
                not every?(zero?,rems) =>
                  output(st::OutputForm)$OutputPackage
                  output("Has a bad RUR component:")$OutputPackage
                  output(us::OutputForm)$OutputPackage
                  error "univariateSolve$ZDSOLVE: bad RUR"
            g: U  := univariate(select(us,newv)::Q2)$Q2
            lc: LP := [convert(q2)@P for q2 in parts(collectUpper(us,newv)$ST)$ST]
            toSave := cons([g,lc]$RUR, toSave)
       toSave

     univariateSolve(lp: List(P), info?:Boolean, check?:Boolean): List RUR ==
       univariateSolve(lp,info?,check?,false)

     univariateSolve(lp: List(P), info?:Boolean): List RUR ==
       univariateSolve(lp,info?,false,false)

     univariateSolve(lp: List(P)): List RUR ==
       univariateSolve(lp,false,false,false)

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<package FGLMICPK FGLMIfCanPackage>>
<<package LEXTRIPK LexTriangularPackage>>
<<package IRURPK InternalRationalUnivariateRepresentationPackage>>
<<package RURPK RationalUnivariateRepresentationPackage>>
<<package ZDSOLVE ZeroDimensionalSolvePackage>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
