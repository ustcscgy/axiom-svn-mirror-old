\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra zerodim.spad}
\author{Marc Moreno Maza}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{package FGLMICPK FGLMIfCanPackage}
<<package FGLMICPK FGLMIfCanPackage>>=
)abbrev package FGLMICPK FGLMIfCanPackage
++ Author: Marc Moreno Maza
++ Date Created: 08/02/1999
++ Date Last Updated: 08/02/1999
++ Description: 
++ This is just an interface between several packages and domains.
++ The goal is to compute lexicographical Groebner bases 
++ of sets of polynomial with type \spadtype{Polynomial R}
++ by the {\em FGLM} algorithm if this is possible (i.e.
++ if the input system generates a zero-dimensional ideal).
++ Version: 1.
FGLMIfCanPackage(R,ls): Exports == Implementation where
  R: GcdDomain
  ls: List Symbol
  V ==> OrderedVariableList ls
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  Q1 ==> Polynomial R
  Q2 ==> HomogeneousDistributedMultivariatePolynomial(ls,R) 
  Q3 ==> DistributedMultivariatePolynomial(ls,R)
  E2 ==> HomogeneousDirectProduct(#ls,NonNegativeInteger)
  E3 ==>  DirectProduct(#ls,NonNegativeInteger)
  poltopol ==> PolToPol(ls, R)
  lingrobpack ==> LinGroebnerPackage(ls,R)
  groebnerpack2 ==> GroebnerPackage(R,E2,V,Q2)
  groebnerpack3 ==> GroebnerPackage(R,E3,V,Q3)
  Exports ==  with

     zeroDimensional?: List(Q1) -> B
         ++ \axiom{zeroDimensional?(lq1)} returns true iff
         ++ \axiom{lq1} generates a zero-dimensional ideal
         ++ w.r.t. the variables of \axiom{ls}.
     fglmIfCan: List(Q1) -> Union(List(Q1), "failed")
         ++ \axiom{fglmIfCan(lq1)} returns the lexicographical Groebner 
         ++ basis of \axiom{lq1} by using the {\em FGLM} strategy,
         ++ if \axiom{zeroDimensional?(lq1)} holds.
     groebner: List(Q1) -> List(Q1) 
         ++ \axiom{groebner(lq1)} returns the lexicographical Groebner 
         ++ basis of \axiom{lq1}. If \axiom{lq1} generates a zero-dimensional
         ++ ideal then the {\em FGLM} strategy is used, otherwise
         ++ the {\em Sugar} strategy is used.

  Implementation == add

     zeroDim?(lq2: List Q2): Boolean ==
       lq2 := groebner(lq2)$groebnerpack2
       empty? lq2 => false
       #lq2 < #ls => false
       lv: List(V) := [(variable(s)$V)::V for s in ls]
       for q2 in lq2 while not empty?(lv) repeat
          m := leadingMonomial(q2)
          x := mainVariable(m)::V
          if ground?(leadingCoefficient(univariate(m,x))) then
               lv := remove(x, lv)
       empty? lv

     zeroDimensional?(lq1: List(Q1)): Boolean ==
       lq2: List(Q2) := [pToHdmp(q1)$poltopol for q1 in lq1]
       zeroDim?(lq2)

     fglmIfCan(lq1:List(Q1)): Union(List(Q1),"failed") == 
       lq2: List(Q2) := [pToHdmp(q1)$poltopol for q1 in lq1]
       lq2 := groebner(lq2)$groebnerpack2
       not zeroDim?(lq2) => "failed"::Union(List(Q1),"failed")
       lq3: List(Q3) := totolex(lq2)$lingrobpack
       lq1 := [dmpToP(q3)$poltopol for q3 in lq3]
       lq1::Union(List(Q1),"failed")

     groebner(lq1:List(Q1)): List(Q1) ==
       lq2: List(Q2) := [pToHdmp(q1)$poltopol for q1 in lq1]
       lq2 := groebner(lq2)$groebnerpack2
       not zeroDim?(lq2) => 
         lq3: List(Q3) := [pToDmp(q1)$poltopol for q1 in lq1]
         lq3 := groebner(lq3)$groebnerpack3
         [dmpToP(q3)$poltopol for q3 in lq3]
       lq3: List(Q3) := totolex(lq2)$lingrobpack
       [dmpToP(q3)$poltopol for q3 in lq3]

@
\section{domain RGCHAIN RegularChain}
<<domain RGCHAIN RegularChain>>=
)abbrev domain RGCHAIN RegularChain
++ Author: Marc Moreno Maza
++ Date Created: 01/1999
++ Date Last Updated: 23/01/1999
++ Description: 
++   A domain for regular chains (i.e. regular triangular sets) over
++   a Gcd-Domain and with a fix list of variables.
++   This is just a front-end for the \spadtype{RegularTriangularSet}
++   domain constructor.
++ Version: 1.

RegularChain(R,ls): Exports == Implementation where
  R : GcdDomain
  ls: List Symbol
  V ==> OrderedVariableList ls
  E ==> IndexedExponents V
  P ==> NewSparseMultivariatePolynomial(R,V)
  TS ==> RegularTriangularSet(R,E,V,P)

  Exports ==  RegularTriangularSetCategory(R,E,V,P) with
     zeroSetSplit: (List P, Boolean, Boolean) -> List $
       ++ \spad{zeroSetSplit(lp,clos?,info?)} returns a list \spad{lts} of regular
       ++ chains such that the union of the closures of their regular zero sets
       ++ equals the affine variety associated with \spad{lp}. Moreover, 
       ++ if \spad{clos?} is \spad{false} then the union of the regular zero 
       ++ set of the \spad{ts} (for \spad{ts} in \spad{lts}) equals this variety.
       ++ If \spad{info?} is \spad{true} then some information is 
       ++ displayed during the computations. See 
       ++ \axiomOpFrom{zeroSetSplit}{RegularTriangularSet}.

  Implementation == RegularTriangularSet(R,E,V,P) 

@
\section{package LEXTRIPK LexTriangularPackage}
<<LexTriangularPackage.input>>=
-- zerodim.spad.pamphlet LexTriangularPackage.input
)spool LexTriangularPackage.output
)set message test on
)set message auto off
)clear all
--S 1 of 22
R := Integer
--R 
--R
--R   (1)  Integer
--R                                                                 Type: Domain
--E 1

--S 2 of 22
ls : List Symbol := [a,b,c,d,e,f]
--R 
--R
--R   (2)  [a,b,c,d,e,f]
--R                                                            Type: List Symbol
--E 2

--S 3 of 22
V := OVAR(ls)
--R 
--R
--R   (3)  OrderedVariableList [a,b,c,d,e,f]
--R                                                                 Type: Domain
--E 3

--S 4 of 22
P := NSMP(R, V)
--R 
--R
--R   (4)
--R   NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--R                                                                 Type: Domain
--E 4

--S 5 of 22
p1: P :=  a*b*c*d*e*f - 1
--R 
--R
--R   (5)  f e d c b a - 1
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 5

--S 6 of 22
p2: P := a*b*c*d*e +a*b*c*d*f +a*b*c*e*f +a*b*d*e*f +a*c*d*e*f +b*c*d*e*f 
--R 
--R
--R   (6)  ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 6

--S 7 of 22
p3: P :=  a*b*c*d + a*b*c*f + a*b*e*f + a*d*e*f + b*c*d*e + c*d*e*f 
--R 
--R
--R   (7)  (((d + f)c + f e)b + f e d)a + e d c b + f e d c
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 7

--S 8 of 22
p4: P := a*b*c + a*b*f + a*e*f + b*c*d + c*d*e + d*e*f 
--R 
--R
--R   (8)  ((c + f)b + f e)a + d c b + e d c + f e d
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 8

--S 9 of 22
p5: P := a*b + a*f + b*c + c*d + d*e + e*f 
--R 
--R
--R   (9)  (b + f)a + c b + d c + e d + f e
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 9

--S 10 of 22
p6: P := a + b + c + d + e + f 
--R 
--R
--R   (10)  a + b + c + d + e + f
--RType: NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 10

--S 11 of 22
lp := [p1, p2, p3, p4, p5, p6]
--R 
--R
--R   (11)
--R   [f e d c b a - 1, ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b,
--R    (((d + f)c + f e)b + f e d)a + e d c b + f e d c,
--R    ((c + f)b + f e)a + d c b + e d c + f e d,
--R    (b + f)a + c b + d c + e d + f e, a + b + c + d + e + f]
--RType: List NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 11

--S 12 of 22
lextripack :=  LEXTRIPK(R,ls)
--R 
--R
--R   (12)  LexTriangularPackage(Integer,[a,b,c,d,e,f])
--R                                                                 Type: Domain
--E 12

--S 13 of 22
lg := groebner(lp)$lextripack
--R 
--R
--R   (13)
--R   [a + b + c + d + e + f,
--R
--R                        2                                           2
--R       3968379498283200b  + 15873517993132800f b + 3968379498283200d
--R     + 
--R                                               3 5                     4 4
--R       15873517993132800f d + 3968379498283200f e  - 15873517993132800f e
--R     + 
--R                         5 3                       6                       2
--R       23810276989699200f e  + (206355733910726400f  + 230166010900425600)e
--R     + 
--R                             43                       37
--R           - 729705987316687f   + 1863667496867205421f
--R         + 
--R                                 31                         25
--R           291674853771731104461f   + 365285994691106921745f
--R         + 
--R                              19                         13
--R           549961185828911895f   - 365048404038768439269f
--R         + 
--R                                   7
--R           - 292382820431504027669f  - 2271898467631865497f
--R      *
--R         e
--R     + 
--R                          44                        38
--R       - 3988812642545399f   + 10187423878429609997f
--R     + 
--R                              32                          26
--R       1594377523424314053637f   + 1994739308439916238065f
--R     + 
--R                           20                          14
--R       1596840088052642815f   - 1993494118301162145413f
--R     + 
--R                                8                        2
--R       - 1596049742289689815053f  - 11488171330159667449f
--R     ,
--R
--R                                                                      2
--R       (23810276989699200c - 23810276989699200f)b + 23810276989699200c
--R     + 
--R                                                2
--R       71430830969097600f c - 23810276989699200d  - 95241107958796800f d
--R     + 
--R                           3 5                      4 4                      5 3
--R       - 55557312975964800f e  + 174608697924460800f e  - 174608697924460800f e
--R     + 
--R                              6                        2
--R       (- 2428648252949318400f  - 2611193709870345600)e
--R     + 
--R                            43                        37
--R           8305444561289527f   - 21212087151945459641f
--R         + 
--R                                    31                          25
--R           - 3319815883093451385381f   - 4157691646261657136445f
--R         + 
--R                                 19                          13
--R           - 6072721607510764095f   + 4154986709036460221649f
--R         + 
--R                                  7
--R           3327761311138587096749f  + 25885340608290841637f
--R      *
--R         e
--R     + 
--R                         44                         38
--R       45815897629010329f   - 117013765582151891207f
--R     + 
--R                                 32                           26
--R       - 18313166848970865074187f   - 22909971239649297438915f
--R     + 
--R                              20                           14
--R       - 16133250761305157265f   + 22897305857636178256623f
--R     + 
--R                               8                         2
--R       18329944781867242497923f  + 130258531002020420699f
--R     ,
--R
--R       (7936758996566400d - 7936758996566400f)b - 7936758996566400f d
--R     + 
--R                          3 5                     4 4                     5 3
--R       - 7936758996566400f e  + 23810276989699200f e  - 23810276989699200f e
--R     + 
--R                             6                       2
--R       (- 337312257354072000f  - 369059293340337600)e
--R     + 
--R                            43                       37
--R           1176345388640471f   - 3004383582891473073f
--R         + 
--R                                   31                         25
--R           - 470203502707246105653f   - 588858183402644348085f
--R         + 
--R                                19                         13
--R           - 856939308623513535f   + 588472674242340526377f
--R         + 
--R                                 7
--R           471313241958371103517f  + 3659742549078552381f
--R      *
--R         e
--R     + 
--R                        44                        38                          32
--R       6423170513956901f   - 16404772137036480803f   - 2567419165227528774463f
--R     + 
--R                                26                       20
--R       - 3211938090825682172335f   - 2330490332697587485f
--R     + 
--R                              14                          8
--R       3210100109444754864587f   + 2569858315395162617847f
--R     + 
--R                            2
--R       18326089487427735751f
--R     ,
--R
--R                                                                     3 5
--R       (11905138494849600e - 11905138494849600f)b - 3968379498283200f e
--R     + 
--R                         4 4                     5 3
--R       15873517993132800f e  - 27778656487982400f e
--R     + 
--R                             6                       2
--R       (- 208339923659868000f  - 240086959646133600)e
--R     + 
--R                           43                       37
--R           786029984751110f   - 2007519008182245250f
--R         + 
--R                                   31                         25
--R           - 314188062908073807090f   - 393423667537929575250f
--R         + 
--R                                19                         13
--R           - 550329120654394950f   + 393196408728889612770f
--R         + 
--R                                 7
--R           314892372799176495730f  + 2409386515146668530f
--R      *
--R         e
--R     + 
--R                        44                        38                          32
--R       4177638546747827f   - 10669685294602576381f   - 1669852980419949524601f
--R     + 
--R                                26                       20
--R       - 2089077057287904170745f   - 1569899763580278795f
--R     + 
--R                              14                          8
--R       2087864026859015573349f   + 1671496085945199577969f
--R     + 
--R                            2
--R       11940257226216280177f
--R     ,
--R
--R                          6                                           2 5
--R       (11905138494849600f  - 11905138494849600)b - 15873517993132800f e
--R     + 
--R                         3 4                     4 3
--R       39683794982832000f e  - 39683794982832000f e
--R     + 
--R                             11                      5  2
--R       (- 686529653202993600f   - 607162063237329600f )e
--R     + 
--R                          42                      36                        30
--R           65144531306704f   - 166381280901088652f   - 26033434502470283472f
--R         + 
--R                                  24                      18
--R           - 31696259583860650140f   + 971492093167581360f
--R         + 
--R                              12                        6
--R         32220085033691389548f   + 25526177666070529808f  + 138603268355749244
--R      *
--R         e
--R     + 
--R                       43                      37                        31
--R       167620036074811f   - 428102417974791473f   - 66997243801231679313f
--R     + 
--R                              25                      19
--R       - 83426716722148750485f   + 203673895369980765f
--R     + 
--R                            13                        7
--R       83523056326010432457f   + 66995789640238066937f  + 478592855549587901f
--R     ,
--R
--R                    3                   2                 2                45
--R       801692827936c  + 2405078483808f c  - 2405078483808f c - 13752945467f
--R     + 
--R                      39                    33                    27
--R       35125117815561f   + 5496946957826433f   + 6834659447749117f
--R     + 
--R                        21                    15                    9
--R       - 44484880462461f   - 6873406230093057f   - 5450844938762633f
--R     + 
--R                     3
--R       1216586044571f
--R     ,
--R
--R                                                                      2
--R       (23810276989699200d - 23810276989699200f)c + 23810276989699200d
--R     + 
--R                                               3 5                     4 4
--R       71430830969097600f d + 7936758996566400f e  - 31747035986265600f e
--R     + 
--R                         5 3                       6                       2
--R       31747035986265600f e  + (404774708824886400f  + 396837949828320000)e
--R     + 
--R                              43                       37
--R           - 1247372229446701f   + 3185785654596621203f
--R         + 
--R                                 31                         25
--R           498594866849974751463f   + 624542545845791047935f
--R         + 
--R                              19                         13
--R           931085755769682885f   - 624150663582417063387f
--R         + 
--R                                   7
--R           - 499881859388360475647f  - 3926885313819527351f
--R      *
--R         e
--R     + 
--R                          44                        38
--R       - 7026011547118141f   + 17944427051950691243f
--R     + 
--R                              32                          26
--R       2808383522593986603543f   + 3513624142354807530135f
--R     + 
--R                           20                          14
--R       2860757006705537685f   - 3511356735642190737267f
--R     + 
--R                                8                        2
--R       - 2811332494697103819887f  - 20315011631522847311f
--R     ,
--R
--R       (7936758996566400e - 7936758996566400f)c
--R     + 
--R                           43                     37                       31
--R           - 4418748183673f   + 11285568707456559f   + 1765998617294451019f
--R         + 
--R                               25                     19
--R           2173749283622606155f   - 55788292195402895f
--R         + 
--R                               13                       7
--R         - 2215291421788292951f   - 1718142665347430851f  + 30256569458230237f
--R      *
--R         e
--R     + 
--R                     44                     38                       32
--R       4418748183673f   - 11285568707456559f   - 1765998617294451019f
--R     + 
--R                             26                     20                       14
--R       - 2173749283622606155f   + 55788292195402895f   + 2215291421788292951f
--R     + 
--R                           8                     2
--R       1718142665347430851f  - 30256569458230237f
--R     ,
--R
--R                       6                                  43
--R       (72152354514240f  - 72152354514240)c + 40950859449f
--R     + 
--R                         37                     31                     25
--R       - 104588980990367f   - 16367227395575307f   - 20268523416527355f
--R     + 
--R                       19                     13                     7
--R       442205002259535f   + 20576059935789063f   + 15997133796970563f
--R     + 
--R       - 275099892785581f
--R     ,
--R
--R                        3                      2                    2
--R       1984189749141600d  + 5952569247424800f d  - 5952569247424800f d
--R     + 
--R                          4 5                     5 4                     3
--R       - 3968379498283200f e  + 15873517993132800f e  + 17857707742274400e
--R     + 
--R                             7                        2
--R       (- 148814231185620000f  - 162703559429611200f)e
--R     + 
--R                             44                      38
--R           - 390000914678878f   + 996062704593756434f
--R         + 
--R                                 32                         26
--R           155886323972034823914f   + 194745956143985421330f
--R         + 
--R                            20                         14
--R           6205077595574430f   - 194596512653299068786f
--R         + 
--R                                   8                       2
--R           - 155796897940756922666f  - 1036375759077320978f
--R      *
--R         e
--R     + 
--R                         45                      39                         33
--R       - 374998630035991f   + 957747106595453993f   + 149889155566764891693f
--R     + 
--R                             27                      21
--R       187154171443494641685f   - 127129015426348065f
--R     + 
--R                             15                         9                      3
--R     - 187241533243115040417f   - 149719983567976534037f  - 836654081239648061f
--R     ,
--R
--R                                                                   3 5
--R       (5952569247424800e - 5952569247424800f)d - 3968379498283200f e
--R     + 
--R                        4 4                    5 3
--R       9920948745708000f e  - 3968379498283200f e
--R     + 
--R                             6                       2
--R       (- 148814231185620000f  - 150798420934761600)e
--R     + 
--R                           43                       37
--R           492558110242553f   - 1257992359608074599f
--R         + 
--R                                   31                         25
--R           - 196883094539368513959f   - 246562115745735428055f
--R         + 
--R                                19                         13
--R           - 325698701993885505f   + 246417769883651808111f
--R         + 
--R                                 7
--R           197327352068200652911f  + 1523373796389332143f
--R      *
--R         e
--R     + 
--R                        44                       38                          32
--R       2679481081803026f   - 6843392695421906608f   - 1071020459642646913578f
--R     + 
--R                                26                      20
--R       - 1339789169692041240060f   - 852746750910750210f
--R     + 
--R                              14                          8
--R       1339105101971878401312f   + 1071900289758712984762f
--R     + 
--R                           2
--R       7555239072072727756f
--R     ,
--R
--R                          6                                          2 5
--R       (11905138494849600f  - 11905138494849600)d - 7936758996566400f e
--R     + 
--R                         3 4                     4 3
--R       31747035986265600f e  - 31747035986265600f e
--R     + 
--R                             11                      5  2
--R       (- 420648226818019200f   - 404774708824886400f )e
--R     + 
--R                          42                     36                       30
--R           15336187600889f   - 39169739565161107f   - 6127176127489690827f
--R         + 
--R                                 24                      18
--R           - 7217708742310509615f   + 538628483890722735f
--R         + 
--R                               12                       6
--R           7506804353843507643f   + 5886160769782607203f  + 63576108396535879
--R      *
--R         e
--R     + 
--R                      43                      37                        31
--R       71737781777066f   - 183218856207557938f   - 28672874271132276078f
--R     + 
--R                              25                      19
--R       - 35625223686939812010f   + 164831339634084390f
--R     + 
--R                            13                        7
--R       35724160423073052642f   + 28627022578664910622f  + 187459987029680506f
--R     ,
--R
--R                        6                      5                    2 4
--R       1322793166094400e  - 3968379498283200f e  + 3968379498283200f e
--R     + 
--R                          3 3
--R       - 5291172664377600f e
--R     + 
--R                             10                      4  2
--R       (- 230166010900425600f   - 226197631402142400f )e
--R     + 
--R                                47                         41
--R           - 152375364610443885f   + 389166626064854890415f
--R         + 
--R                                   35                           29
--R           60906097841360558987335f   + 76167367934608798697275f
--R         + 
--R                                23                           17
--R           27855066785995181125f   - 76144952817052723145495f
--R         + 
--R                                     11                         5
--R           - 60933629892463517546975f   - 411415071682002547795f
--R      *
--R         e
--R     + 
--R                         42                      36                        30
--R       - 209493533143822f   + 535045979490560586f   + 83737947964973553146f
--R     + 
--R                             24                      18
--R       104889507084213371570f   + 167117997269207870f
--R     + 
--R                               12                        6
--R       - 104793725781390615514f   - 83842685189903180394f  - 569978796672974242
--R     ,
--R
--R                       6                   3
--R       (25438330117200f  + 25438330117200)e
--R     + 
--R                       7                    2
--R       (76314990351600f  + 76314990351600f)e
--R     + 
--R                           44                    38                      32
--R           - 1594966552735f   + 4073543370415745f   + 637527159231148925f
--R         + 
--R                              26                   20                      14
--R           797521176113606525f   + 530440941097175f   - 797160527306433145f
--R         + 
--R                                8                    2
--R           - 638132320196044965f  - 4510507167940725f
--R      *
--R         e
--R     + 
--R                       45                     39                       33
--R       - 6036376800443f   + 15416903421476909f   + 2412807646192304449f
--R     + 
--R                           27                    21                       15
--R       3017679923028013705f   + 1422320037411955f   - 3016560402417843941f
--R     + 
--R                             9                     3
--R       - 2414249368183033161f  - 16561862361763873f
--R     ,
--R
--R                      12                  2
--R       (1387545279120f   - 1387545279120)e
--R     + 
--R                      43                  37                    31
--R           4321823003f   - 11037922310209f   - 1727510711947989f
--R         + 
--R                              25                 19                    13
--R           - 2165150991154425f   - 5114342560755f   + 2162682824948601f
--R         + 
--R                            7
--R           1732620732685741f  + 13506088516033f
--R      *
--R         e
--R     + 
--R                   44                  38                    32
--R       24177661775f   - 61749727185325f   - 9664106795754225f
--R     + 
--R                           26                 20                     14
--R       - 12090487758628245f   - 8787672733575f   + 12083693383005045f
--R     + 
--R                        8                  2
--R       9672870290826025f  + 68544102808525f
--R     ,
--R     48        42          36          30          18          12        6
--R    f   - 2554f   - 399710f   - 499722f   + 499722f   + 399710f   + 2554f  - 1]
--RType: List NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 13

--S 14 of 22
lexTriangular(lg,false)$lextripack
--R 
--R
--R   (14)
--R   [
--R       6       6       5     2 4     3 3     4 2     5
--R     {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
--R            2 5     3 4     4 3     5 2
--R      3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
--R             2 5     3 4     4 3      5 2
--R      3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
--R           2 5     3 4     4 3     5 2
--R      a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
--R     ,
--R      6                  2           2                    2
--R    {f  - 1,e - f,d - f,c  + 4f c + f ,(c - f)b - f c - 5f ,a + b + c + 3f},
--R      6                        2           2
--R    {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
--R      6            2           2                    2
--R    {f  - 1,e - f,d  + 4f d + f ,(d - f)c - f d - 5f ,b - f,a + c + d + 3f},
--R
--R       36        30          24          18          12        6
--R     {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
--R
--R                    12              2
--R         (161718564f   - 161718564)e
--R       + 
--R                      31              25                19                13
--R             - 504205f   + 1287737951f   + 201539391380f   + 253982817368f
--R           + 
--R                          7
--R             201940704665f  + 1574134601f
--R        *
--R           e
--R       + 
--R                   32              26                 20                 14
--R         - 2818405f   + 7198203911f   + 1126548149060f   + 1416530563364f
--R       + 
--R                       8              2
--R         1127377589345f  + 7988820725f
--R       ,
--R
--R                       6                                 2 5                 3 4
--R         (693772639560f  - 693772639560)d - 462515093040f e  + 1850060372160f e
--R       + 
--R                         4 3                     11                  5  2
--R         - 1850060372160f e  + (- 24513299931120f   - 23588269745040f )e
--R       + 
--R                         30                 24                   18
--R             - 890810428f   + 2275181044754f   + 355937263869776f
--R           + 
--R                             12                   6
--R             413736880104344f   + 342849304487996f  + 3704966481878
--R        *
--R           e
--R       + 
--R                      31                  25                    19
--R         - 4163798003f   + 10634395752169f   + 1664161760192806f
--R       + 
--R                          13                    7
--R         2079424391370694f   + 1668153650635921f  + 10924274392693f
--R       ,
--R
--R                      6                           31               25
--R         (12614047992f  - 12614047992)c - 7246825f   + 18508536599f
--R       + 
--R                       19                 13                 7
--R         2896249516034f   + 3581539649666f   + 2796477571739f  - 48094301893f
--R       ,
--R
--R                       6                                 2 5                 3 4
--R         (693772639560f  - 693772639560)b - 925030186080f e  + 2312575465200f e
--R       + 
--R                         4 3                     11                  5  2
--R         - 2312575465200f e  + (- 40007555547960f   - 35382404617560f )e
--R       + 
--R                          30                 24                    18
--R             - 3781280823f   + 9657492291789f   + 1511158913397906f
--R           + 
--R                              12                    6
--R             1837290892286154f   + 1487216006594361f  + 8077238712093
--R        *
--R           e
--R       + 
--R                      31                  25                    19
--R         - 9736390478f   + 24866827916734f   + 3891495681905296f
--R       + 
--R                          13                    7
--R         4872556418871424f   + 3904047887269606f  + 27890075838538f
--R       ,
--R      a + b + c + d + e + f}
--R     ,
--R      6      2           2                    2
--R    {f  - 1,e  + 4f e + f ,(e - f)d - f e - 5f ,c - f,b - f,a + d + e + 3f}]
--R                               Type: List RegularChain(Integer,[a,b,c,d,e,f])
--E 14

--S 15 of 22
lts := lexTriangular(lg,true)$lextripack
--R 
--R
--R   (15)
--R   [
--R       6       6       5     2 4     3 3     4 2     5
--R     {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
--R            2 5     3 4     4 3     5 2
--R      3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
--R             2 5     3 4     4 3      5 2
--R      3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
--R           2 5     3 4     4 3     5 2
--R      a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
--R     ,
--R      6                  2           2
--R    {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
--R      6                        2           2
--R    {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
--R      6            2           2
--R    {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
--R
--R       36        30          24          18          12        6
--R     {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
--R
--R                       2
--R         1387545279120e
--R       + 
--R                        31                  25                    19
--R             4321823003f   - 11037922310209f   - 1727506390124986f
--R           + 
--R                                13                    7
--R             - 2176188913464634f   - 1732620732685741f  - 13506088516033f
--R        *
--R           e
--R       + 
--R                     32                  26                    20
--R         24177661775f   - 61749727185325f   - 9664082618092450f
--R       + 
--R                             14                    8                  2
--R         - 12152237485813570f   - 9672870290826025f  - 68544102808525f
--R       ,
--R
--R         1387545279120d
--R       + 
--R                          30                 24                   18
--R             - 1128983050f   + 2883434331830f   + 451234998755840f
--R           + 
--R                             12                   6
--R             562426491685760f   + 447129055314890f  - 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                   19
--R         - 1816935351f   + 4640452214013f   + 726247129626942f
--R       + 
--R                         13                   7
--R         912871801716798f   + 726583262666877f  + 4909358645961f
--R       ,
--R
--R                                    31                 25                   19
--R         1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
--R       + 
--R                           13                   7
--R         - 383262822316802f   - 300335488637543f  + 5289595037041f
--R       ,
--R
--R         1387545279120b
--R       + 
--R                        30                 24                   18
--R             1128983050f   - 2883434331830f   - 451234998755840f
--R           + 
--R                               12                   6
--R             - 562426491685760f   - 447129055314890f  + 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                    19
--R         - 3283058841f   + 8384938292463f   + 1312252817452422f
--R       + 
--R                          13                    7
--R         1646579934064638f   + 1306372958656407f  + 4694680112151f
--R       ,
--R
--R                                                      31                  25
--R         1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
--R       + 
--R                            19                    13                    7
--R         - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
--R       + 
--R         - 13506088516033f
--R       }
--R     ,
--R      6      2           2
--R    {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
--R                               Type: List RegularChain(Integer,[a,b,c,d,e,f])
--E 15

--S 16 of 22
[ [init(p) for p in (ts :: List(P))] for ts in lts]
--R 
--R
--R   (16)
--R   [[1,3,1,3,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1],
--R    [1387545279120,1387545279120,1387545279120,1387545279120,1387545279120,1],
--R    [1,1,1,1,1,1]]
--RType: List List NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
--E 16

--S 17 of 22
squareFreeLexTriangular(lg,true)$lextripack
--R 
--R
--R   (17)
--R   [
--R       6       6       5     2 4     3 3     4 2     5
--R     {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
--R            2 5     3 4     4 3     5 2
--R      3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
--R             2 5     3 4     4 3      5 2
--R      3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
--R           2 5     3 4     4 3     5 2
--R      a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
--R     ,
--R      6                  2           2
--R    {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
--R      6                        2           2
--R    {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
--R      6            2           2
--R    {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
--R
--R       36        30          24          18          12        6
--R     {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
--R
--R                       2
--R         1387545279120e
--R       + 
--R                        31                  25                    19
--R             4321823003f   - 11037922310209f   - 1727506390124986f
--R           + 
--R                                13                    7
--R             - 2176188913464634f   - 1732620732685741f  - 13506088516033f
--R        *
--R           e
--R       + 
--R                     32                  26                    20
--R         24177661775f   - 61749727185325f   - 9664082618092450f
--R       + 
--R                             14                    8                  2
--R         - 12152237485813570f   - 9672870290826025f  - 68544102808525f
--R       ,
--R
--R         1387545279120d
--R       + 
--R                          30                 24                   18
--R             - 1128983050f   + 2883434331830f   + 451234998755840f
--R           + 
--R                             12                   6
--R             562426491685760f   + 447129055314890f  - 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                   19
--R         - 1816935351f   + 4640452214013f   + 726247129626942f
--R       + 
--R                         13                   7
--R         912871801716798f   + 726583262666877f  + 4909358645961f
--R       ,
--R
--R                                    31                 25                   19
--R         1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
--R       + 
--R                           13                   7
--R         - 383262822316802f   - 300335488637543f  + 5289595037041f
--R       ,
--R
--R         1387545279120b
--R       + 
--R                        30                 24                   18
--R             1128983050f   - 2883434331830f   - 451234998755840f
--R           + 
--R                               12                   6
--R             - 562426491685760f   - 447129055314890f  + 165557857270
--R        *
--R           e
--R       + 
--R                      31                 25                    19
--R         - 3283058841f   + 8384938292463f   + 1312252817452422f
--R       + 
--R                          13                    7
--R         1646579934064638f   + 1306372958656407f  + 4694680112151f
--R       ,
--R
--R                                                      31                  25
--R         1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
--R       + 
--R                            19                    13                    7
--R         - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
--R       + 
--R         - 13506088516033f
--R       }
--R     ,
--R      6      2           2
--R    {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
--RType: List SquareFreeRegularTriangularSet(Integer,IndexedExponents OrderedVariableList [a,b,c,d,e,f],OrderedVariableList [a,b,c,d,e,f],NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f]))
--E 17

--S 18 of 22
reduce(+,[degree(ts) for ts in lts])
--R 
--R
--R   (18)  156
--R                                                        Type: PositiveInteger
--E 18

--S 19 of 22
ls2 : List Symbol := concat(ls,new()$Symbol)
--R 
--R
--R   (19)  [a,b,c,d,e,f,%A]
--R                                                            Type: List Symbol
--E 19

--S 20 of 22
zdpack := ZDSOLVE(R,ls,ls2)
--R 
--R
--R   (20)  ZeroDimensionalSolvePackage(Integer,[a,b,c,d,e,f],[a,b,c,d,e,f,%A])
--R                                                                 Type: Domain
--E 20

--S 21 of 22
concat [univariateSolve(ts)$zdpack for ts in lts]
--R 
--R
--R   (21)
--R   [
--R                     4      2
--R     [complexRoots= ?  - 13?  + 49,
--R
--R       coordinates =
--R                 3                3                3                3
--R         [7a + %A  - 6%A, 21b + %A  + %A, 21c - 2%A  + 19%A, 7d - %A  + 6%A,
--R                  3                3
--R          21e - %A  - %A, 21f + 2%A  - 19%A]
--R       ]
--R     ,
--R
--R                     4      2
--R     [complexRoots= ?  + 11?  + 49,
--R
--R       coordinates =
--R                   3                 3                  3
--R         [35a + 3%A  + 19%A, 35b + %A  + 18%A, 35c - 2%A  - %A,
--R                   3                 3                  3
--R          35d - 3%A  - 19%A, 35e - %A  - 18%A, 35f + 2%A  + %A]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3       2
--R         ?  - 12?  + 58?  - 120?  + 207?  - 360?  + 802?  - 1332? + 1369
--R       ,
--R
--R       coordinates =
--R         [
--R                                7           6            5            4
--R             43054532a + 33782%A  - 546673%A  + 3127348%A  - 6927123%A
--R           + 
--R                      3             2
--R             4365212%A  - 25086957%A  + 39582814%A - 107313172
--R           ,
--R
--R                                7           6            5            4
--R             43054532b - 33782%A  + 546673%A  - 3127348%A  + 6927123%A
--R           + 
--R                        3             2
--R             - 4365212%A  + 25086957%A  - 39582814%A + 107313172
--R           ,
--R
--R                                7           6            5            4
--R             21527266c - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  + 10322663%A  - 9026596%A + 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532d + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  - 10322663%A  + 30553862%A - 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532e - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  + 10322663%A  - 30553862%A + 12950740
--R           ,
--R
--R                                7           6            5            4
--R             21527266f + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  - 10322663%A  + 9026596%A - 12950740
--R           ]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3       2
--R         ?  + 12?  + 58?  + 120?  + 207?  + 360?  + 802?  + 1332? + 1369
--R       ,
--R
--R       coordinates =
--R         [
--R                                7           6            5            4
--R             43054532a + 33782%A  + 546673%A  + 3127348%A  + 6927123%A
--R           + 
--R                      3             2
--R             4365212%A  + 25086957%A  + 39582814%A + 107313172
--R           ,
--R
--R                                7           6            5            4
--R             43054532b - 33782%A  - 546673%A  - 3127348%A  - 6927123%A
--R           + 
--R                        3             2
--R             - 4365212%A  - 25086957%A  - 39582814%A - 107313172
--R           ,
--R
--R                                7           6            5            4
--R             21527266c - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  - 10322663%A  - 9026596%A - 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532d + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  + 10322663%A  + 30553862%A + 12950740
--R           ,
--R
--R                                7           6            5            4
--R             43054532e - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
--R           + 
--R                        3             2
--R             - 2892788%A  - 10322663%A  - 30553862%A - 12950740
--R           ,
--R
--R                                7           6            5            4
--R             21527266f + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
--R           + 
--R                      3             2
--R             2892788%A  + 10322663%A  + 9026596%A + 12950740
--R           ]
--R       ]
--R     ,
--R
--R                     4    2
--R     [complexRoots= ?  - ?  + 1,
--R                                 3            3              3            3
--R      coordinates= [a - %A,b + %A  - %A,c + %A ,d + %A,e - %A  + %A,f - %A ]]
--R     ,
--R
--R                     8     6      4      2
--R     [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
--R
--R       coordinates =
--R                  7      5       3                 7      5       3
--R         [4a - 2%A  - 7%A  - 20%A  - 22%A, 4b + 2%A  + 7%A  + 20%A  + 22%A,
--R                 7      5       3                7      5       3
--R          4c + %A  + 3%A  + 10%A  + 10%A, 4d + %A  + 3%A  + 10%A  + 6%A,
--R                 7      5       3               7      5       3
--R          4e - %A  - 3%A  - 10%A  - 6%A, 4f - %A  - 3%A  - 10%A  - 10%A]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                  3      2                    3      2
--R         [30a - %A  - 5%A  - 30%A - 6, 6b + %A  + 5%A  + 24%A + 6,
--R                  3      2              3      2
--R          30c - %A  - 5%A  - 6, 30d - %A  - 5%A  - 30%A - 6,
--R                  3      2                     3      2
--R          30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                  3      2                    3      2
--R         [30a - %A  + 5%A  - 30%A + 6, 6b + %A  - 5%A  + 24%A - 6,
--R                  3      2              3      2
--R          30c - %A  + 5%A  + 6, 30d - %A  + 5%A  - 30%A + 6,
--R                  3      2                     3      2
--R          30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + 1,b - %A - 5,c + %A + 1,d + 1,e + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - 1,b - %A + 5,c + %A - 1,d - 1,e - 1,f - 1]]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a + %A  + 5%A  + 24%A + 6, 30b - %A  - 5%A  - 6,
--R                  3      2                     3      2
--R          30c - %A  - 5%A  - 30%A - 6, 30d - %A  - 5%A  - 30%A - 6,
--R                  3      2                     3      2
--R          30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a + %A  - 5%A  + 24%A - 6, 30b - %A  + 5%A  + 6,
--R                  3      2                     3      2
--R          30c - %A  + 5%A  - 30%A + 6, 30d - %A  + 5%A  - 30%A + 6,
--R                  3      2                     3      2
--R          30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a - %A - 5,b + %A + 1,c + 1,d + 1,e + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - %A + 5,b + %A - 1,c - 1,d - 1,e - 1,f - 1]]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
--R                 3      2                     3      2
--R          6c + %A  + 5%A  + 24%A + 6, 30d - %A  - 5%A  - 6,
--R                  3      2                     3      2
--R          30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
--R                 3      2                     3      2
--R          6c + %A  - 5%A  + 24%A - 6, 30d - %A  + 5%A  + 6,
--R                  3      2                     3      2
--R          30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + 1,b + 1,c - %A - 5,d + %A + 1,e + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - 1,b - 1,c - %A + 5,d + %A - 1,e - 1,f - 1]]
--R     ,
--R
--R                     8     7      6      5      4     2
--R     [complexRoots= ?  + 6?  + 16?  + 24?  + 18?  - 8?  + 4,
--R
--R       coordinates =
--R                  7      6       5       4      3       2
--R         [2a + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 2%A + 4,
--R                  7      6       5       4      3       2
--R          2b + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 4%A + 4,
--R                 7      6      5      4      3
--R          2c - %A  - 4%A  - 8%A  - 9%A  - 4%A  - 2%A - 4,
--R                 7      6      5      4      3
--R          2d + %A  + 4%A  + 8%A  + 9%A  + 4%A  + 2%A + 4,
--R                  7      6       5       4      3       2
--R          2e - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 4%A - 4,
--R                  7      6       5       4      3       2
--R          2f - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 2%A - 4]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3        2
--R         ?  + 12?  + 64?  + 192?  + 432?  + 768?  + 1024?  + 768? + 256
--R       ,
--R
--R       coordinates =
--R         [
--R                         7        6        5         4         3         2
--R             1408a - 19%A  - 200%A  - 912%A  - 2216%A  - 4544%A  - 6784%A
--R           + 
--R             - 6976%A - 1792
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408b - 37%A  - 408%A  - 1952%A  - 5024%A  - 10368%A  - 16768%A
--R           + 
--R             - 17920%A - 5120
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408c + 37%A  + 408%A  + 1952%A  + 5024%A  + 10368%A  + 16768%A
--R           + 
--R             17920%A + 5120
--R           ,
--R
--R                         7        6        5         4         3         2
--R             1408d + 19%A  + 200%A  + 912%A  + 2216%A  + 4544%A  + 6784%A
--R           + 
--R             6976%A + 1792
--R           ,
--R          2e + %A, 2f - %A]
--R       ]
--R     ,
--R
--R                     8     6      4      2
--R     [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
--R
--R       coordinates =
--R                 7      5       3               7      5       3
--R         [4a - %A  - 3%A  - 10%A  - 6%A, 4b - %A  - 3%A  - 10%A  - 10%A,
--R                  7      5       3                 7      5       3
--R          4c - 2%A  - 7%A  - 20%A  - 22%A, 4d + 2%A  + 7%A  + 20%A  + 22%A,
--R                 7      5       3                7      5       3
--R          4e + %A  + 3%A  + 10%A  + 10%A, 4f + %A  + 3%A  + 10%A  + 6%A]
--R       ]
--R     ,
--R
--R                     8      6      4       2
--R     [complexRoots= ?  + 16?  - 96?  + 256?  + 256,
--R
--R       coordinates =
--R                   7       5        3
--R         [512a - %A  - 12%A  + 176%A  - 448%A,
--R                   7       5       3
--R          128b - %A  - 16%A  + 96%A  - 256%A,
--R                   7       5       3
--R          128c + %A  + 16%A  - 96%A  + 256%A,
--R                   7       5        3
--R          512d + %A  + 12%A  - 176%A  + 448%A, 2e + %A, 2f - %A]
--R       ]
--R     ,
--R
--R     [
--R       complexRoots =
--R          8      7      6       5       4       3        2
--R         ?  - 12?  + 64?  - 192?  + 432?  - 768?  + 1024?  - 768? + 256
--R       ,
--R
--R       coordinates =
--R         [
--R                         7        6        5         4         3         2
--R             1408a - 19%A  + 200%A  - 912%A  + 2216%A  - 4544%A  + 6784%A
--R           + 
--R             - 6976%A + 1792
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408b - 37%A  + 408%A  - 1952%A  + 5024%A  - 10368%A  + 16768%A
--R           + 
--R             - 17920%A + 5120
--R           ,
--R
--R                         7        6         5         4          3          2
--R             1408c + 37%A  - 408%A  + 1952%A  - 5024%A  + 10368%A  - 16768%A
--R           + 
--R             17920%A - 5120
--R           ,
--R
--R                         7        6        5         4         3         2
--R             1408d + 19%A  - 200%A  + 912%A  - 2216%A  + 4544%A  - 6784%A
--R           + 
--R             6976%A - 1792
--R           ,
--R          2e + %A, 2f - %A]
--R       ]
--R     ,
--R
--R                     8     7      6      5      4     2
--R     [complexRoots= ?  - 6?  + 16?  - 24?  + 18?  - 8?  + 4,
--R
--R       coordinates =
--R                  7      6       5       4      3       2
--R         [2a + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 2%A - 4,
--R                  7      6       5       4      3       2
--R          2b + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 4%A - 4,
--R                 7      6      5      4      3
--R          2c - %A  + 4%A  - 8%A  + 9%A  - 4%A  - 2%A + 4,
--R                 7      6      5      4      3
--R          2d + %A  - 4%A  + 8%A  - 9%A  + 4%A  + 2%A - 4,
--R                  7      6       5       4      3       2
--R          2e - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 4%A + 4,
--R                  7      6       5       4      3       2
--R          2f - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 2%A + 4]
--R       ]
--R     ,
--R
--R                     4      2
--R     [complexRoots= ?  + 12?  + 144,
--R
--R       coordinates =
--R                  2               2               2               2
--R         [12a - %A  - 12, 12b - %A  - 12, 12c - %A  - 12, 12d - %A  - 12,
--R                 2                    2
--R          6e + %A  + 3%A + 12, 6f + %A  - 3%A + 12]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a - %A  - 5%A  - 24%A - 6, 30b + %A  + 5%A  + 30%A + 6,
--R                  3      2                     3      2
--R          30c + %A  + 5%A  + 30%A + 6, 30d + %A  + 5%A  + 30%A + 6,
--R                  3      2                     3      2
--R          30e + %A  + 5%A  + 30%A + 6, 30f + %A  + 5%A  + 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                 3      2                     3      2
--R         [6a - %A  + 5%A  - 24%A + 6, 30b + %A  - 5%A  + 30%A - 6,
--R                  3      2                     3      2
--R          30c + %A  - 5%A  + 30%A - 6, 30d + %A  - 5%A  + 30%A - 6,
--R                  3      2                     3      2
--R          30e + %A  - 5%A  + 30%A - 6, 30f + %A  - 5%A  - 6]
--R       ]
--R     ,
--R
--R                     4      2
--R     [complexRoots= ?  + 12?  + 144,
--R
--R       coordinates =
--R                  2               2               2               2
--R         [12a + %A  + 12, 12b + %A  + 12, 12c + %A  + 12, 12d + %A  + 12,
--R                 2                    2
--R          6e - %A  + 3%A - 12, 6f - %A  - 3%A - 12]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 12,
--R      coordinates= [a - 1,b - 1,c - 1,d - 1,2e + %A + 4,2f - %A + 4]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + %A + 5,b - 1,c - 1,d - 1,e - 1,f - %A - 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a + %A - 5,b + 1,c + 1,d + 1,e + 1,f - %A + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 12,
--R      coordinates= [a + 1,b + 1,c + 1,d + 1,2e + %A - 4,2f - %A - 4]]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  + 6?  + 30?  + 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
--R                  3      2                    3      2
--R          30c - %A  - 5%A  - 30%A - 6, 6d + %A  + 5%A  + 24%A + 6,
--R                  3      2              3      2
--R          30e - %A  - 5%A  - 6, 30f - %A  - 5%A  - 30%A - 6]
--R       ]
--R     ,
--R
--R                     4     3      2
--R     [complexRoots= ?  - 6?  + 30?  - 36? + 36,
--R
--R       coordinates =
--R                  3      2                     3      2
--R         [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
--R                  3      2                    3      2
--R          30c - %A  + 5%A  - 30%A + 6, 6d + %A  - 5%A  + 24%A - 6,
--R                  3      2              3      2
--R          30e - %A  + 5%A  + 6, 30f - %A  + 5%A  - 30%A + 6]
--R       ]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  + 6? + 6,
--R      coordinates= [a + 1,b + 1,c + 1,d - %A - 5,e + %A + 1,f + 1]]
--R     ,
--R
--R                     2
--R     [complexRoots= ?  - 6? + 6,
--R      coordinates= [a - 1,b - 1,c - 1,d - %A + 5,e + %A - 1,f - 1]]
--R     ]
--RType: List Record(complexRoots: SparseUnivariatePolynomial Integer,coordinates: List Polynomial Integer)
--E 21

--S 22 of 22
concat [realSolve(ts)$zdpack for ts in lts] 
--R 
--R
--R   (22)
--R   [[%B1,%B1,%B1,%B5,- %B5 - 4%B1,%B1], [%B1,%B1,%B1,%B6,- %B6 - 4%B1,%B1],
--R    [%B2,%B2,%B2,%B3,- %B3 - 4%B2,%B2], [%B2,%B2,%B2,%B4,- %B4 - 4%B2,%B2],
--R    [%B7,%B7,%B7,%B7,%B11,- %B11 - 4%B7], [%B7,%B7,%B7,%B7,%B12,- %B12 - 4%B7],
--R    [%B8,%B8,%B8,%B8,%B9,- %B9 - 4%B8], [%B8,%B8,%B8,%B8,%B10,- %B10 - 4%B8],
--R    [%B13,%B13,%B17,- %B17 - 4%B13,%B13,%B13],
--R    [%B13,%B13,%B18,- %B18 - 4%B13,%B13,%B13],
--R    [%B14,%B14,%B15,- %B15 - 4%B14,%B14,%B14],
--R    [%B14,%B14,%B16,- %B16 - 4%B14,%B14,%B14],
--R
--R     [%B19, %B29,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B19   - ---------- %B19   - ----------- %B19
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B19   - ------------- %B19  - ----------- %B19
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B19   + ------------- %B19   + --------------- %B19
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B19   + --------------- %B19  - ------------ %B19
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B19   - ------------- %B19   - --------------- %B19
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B19   - --------------- %B19  - ------------- %B19
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B29 - ------------- %B19   + ------------ %B19
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B19   + ---------------- %B19
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B19  + -------------- %B19
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B19, %B30,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B19   - ---------- %B19   - ----------- %B19
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B19   - ------------- %B19  - ----------- %B19
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B19   + ------------- %B19   + --------------- %B19
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B19   + --------------- %B19  - ------------ %B19
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B19   - ------------- %B19   - --------------- %B19
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B19   - --------------- %B19  - ------------- %B19
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B30 - ------------- %B19   + ------------ %B19
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B19   + ---------------- %B19
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B19  + -------------- %B19
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B20, %B27,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B20   - ---------- %B20   - ----------- %B20
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B20   - ------------- %B20  - ----------- %B20
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B20   + ------------- %B20   + --------------- %B20
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B20   + --------------- %B20  - ------------ %B20
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B20   - ------------- %B20   - --------------- %B20
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B20   - --------------- %B20  - ------------- %B20
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B27 - ------------- %B20   + ------------ %B20
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B20   + ---------------- %B20
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B20  + -------------- %B20
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B20, %B28,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B20   - ---------- %B20   - ----------- %B20
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B20   - ------------- %B20  - ----------- %B20
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B20   + ------------- %B20   + --------------- %B20
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B20   + --------------- %B20  - ------------ %B20
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B20   - ------------- %B20   - --------------- %B20
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B20   - --------------- %B20  - ------------- %B20
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B28 - ------------- %B20   + ------------ %B20
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B20   + ---------------- %B20
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B20  + -------------- %B20
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B21, %B25,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B21   - ---------- %B21   - ----------- %B21
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B21   - ------------- %B21  - ----------- %B21
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B21   + ------------- %B21   + --------------- %B21
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B21   + --------------- %B21  - ------------ %B21
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B21   - ------------- %B21   - --------------- %B21
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B21   - --------------- %B21  - ------------- %B21
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B25 - ------------- %B21   + ------------ %B21
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B21   + ---------------- %B21
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B21  + -------------- %B21
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B21, %B26,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B21   - ---------- %B21   - ----------- %B21
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B21   - ------------- %B21  - ----------- %B21
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B21   + ------------- %B21   + --------------- %B21
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B21   + --------------- %B21  - ------------ %B21
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B21   - ------------- %B21   - --------------- %B21
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B21   - --------------- %B21  - ------------- %B21
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B26 - ------------- %B21   + ------------ %B21
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B21   + ---------------- %B21
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B21  + -------------- %B21
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B22, %B23,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B22   - ---------- %B22   - ----------- %B22
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B22   - ------------- %B22  - ----------- %B22
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B22   + ------------- %B22   + --------------- %B22
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B22   + --------------- %B22  - ------------ %B22
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B22   - ------------- %B22   - --------------- %B22
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B22   - --------------- %B22  - ------------- %B22
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B23 - ------------- %B22   + ------------ %B22
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B22   + ---------------- %B22
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B22  + -------------- %B22
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R
--R     [%B22, %B24,
--R
--R           7865521      31   6696179241     25   25769893181     19
--R         ---------- %B22   - ---------- %B22   - ----------- %B22
--R         6006689520          2002229840            49235160
--R       + 
--R           1975912990729     13   1048460696489     7   21252634831
--R         - ------------- %B22   - ------------- %B22  - ----------- %B22
--R             3003344760             2002229840           6006689520
--R       ,
--R
--R             778171189       31   1987468196267     25   155496778477189     19
--R         - ------------- %B22   + ------------- %B22   + --------------- %B22
--R           1387545279120          1387545279120            693772639560
--R       + 
--R         191631411158401     13   300335488637543     7   755656433863
--R         --------------- %B22   + --------------- %B22  - ------------ %B22
--R           693772639560            1387545279120          198220754160
--R       ,
--R
--R          1094352947      31   2794979430821     25   218708802908737     19
--R         ------------ %B22   - ------------- %B22   - --------------- %B22
--R         462515093040           462515093040            231257546520
--R       + 
--R           91476663003591     13   145152550961823     7   1564893370717
--R         - -------------- %B22   - --------------- %B22  - ------------- %B22
--R             77085848840             154171697680           462515093040
--R       ,
--R
--R                    4321823003      31   180949546069     25
--R         - %B24 - ------------- %B22   + ------------ %B22
--R                  1387545279120           22746643920
--R       + 
--R         863753195062493     19   1088094456732317     13
--R         --------------- %B22   + ---------------- %B22
--R           693772639560             693772639560
--R       + 
--R         1732620732685741     7   13506088516033
--R         ---------------- %B22  + -------------- %B22
--R           1387545279120           1387545279120
--R       ]
--R     ,
--R    [%B31,%B35,- %B35 - 4%B31,%B31,%B31,%B31],
--R    [%B31,%B36,- %B36 - 4%B31,%B31,%B31,%B31],
--R    [%B32,%B33,- %B33 - 4%B32,%B32,%B32,%B32],
--R    [%B32,%B34,- %B34 - 4%B32,%B32,%B32,%B32]]
--R                                 Type: List List RealClosure Fraction Integer
--E 22
)spool
 
)spool
)lisp (bye)
@
<<LexTriangularPackage.help>>=
====================================================================
LexTriangularPackage examples
====================================================================

The LexTriangularPackage package constructor provides an
implementation of the lexTriangular algorithm (D. Lazard "Solving
Zero-dimensional Algebraic Systems", J. of Symbol. Comput., 1992).
This algorithm decomposes a zero-dimensional variety into zero-sets of
regular triangular sets.  Thus the input system must have a finite
number of complex solutions.  Moreover, this system needs to be a
lexicographical Groebner basis.

This package takes two arguments: the coefficient-ring R of the
polynomials, which must be a GcdDomain and their set of variables
given by ls a List Symbol.  The type of the input polynomials must be
NewSparseMultivariatePolynomial(R,V) where V is OrderedVariableList(ls).  
The abbreviation for LexTriangularPackage is LEXTRIPK.  The main operations 
are lexTriangular and squareFreeLexTriangular.  The later provide 
decompositions by means of square-free regular triangular sets, built 
with the SquareFreeRegularTriangularSet constructor, whereas the former 
uses the RegularTriangularSet constructor.  Note that these constructors
also implement another algorithm for solving algebraic systems by
means of regular triangular sets; in that case no computations of
Groebner bases are needed and the input system may have any dimension
(i.e. it may have an infinite number of solutions).

The implementation of the lexTriangular algorithm provided in the
LexTriangularPackage constructor differs from that reported in
"Computations of gcd over algebraic towers of simple extensions" by
M. Moreno Maza and R. Rioboo (in proceedings of AAECC11, Paris, 1995).
Indeed, the squareFreeLexTriangular operation removes all multiplicities 
of the solutions (i.e. the computed solutions are pairwise different) 
and the lexTriangular operation may keep some multiplicities; this 
later operation runs generally faster than the former.

The interest of the lexTriangular algorithm is due to the
following experimental remark.  For some examples, a triangular
decomposition of a zero-dimensional variety can be computed faster via
a lexicographical Groebner basis computation than by using a direct method 
(like that of SquareFreeRegularTriangularSet and RegularTriangularSet).  
This happens typically when the total degree of the system relies 
essentially on its smallest variable (like in the Katsura systems).  
When this is not the case, the direct method may give better timings 
(like in the Rose system).

Of course, the direct method can also be applied to a lexicographical
Groebner basis.  However, the lexTriangular algorithm takes advantage 
of the structure of this basis and avoids many unnecessary computations 
which are performed by the direct method.

For this purpose of solving algebraic systems with a finite number of
solutions, see also the ZeroDimensionalSolvePackage.  It allows
to use both strategies (the lexTriangular algorithm and the direct
method) for computing either the complex or real roots of a system.

Note that the way of understanding triangular decompositions is
detailed in the example of the RegularTriangularSet constructor.

Since the LexTriangularPackage package constructor is limited to
zero-dimensional systems, it provides a zeroDimensional? operation to
check whether this requirement holds.  There is also a groebner operation 
to compute the lexicographical Groebner basis of a set of polynomials 
with type NewSparseMultivariatePolynomial(R,V).  The elimination ordering 
is that given by ls (the greatest variable being the first element
of ls).  This basis is computed by the FLGM algorithm (Faugere et al. 
"Efficient Computation of Zero-Dimensional Groebner Bases by Change 
of Ordering" , J. of Symbol. Comput., 1993) implemented in the 
LinGroebnerPackage package constructor.

Once a lexicographical Groebner basis is computed, then one can call
the operations lexTriangular and squareFreeLexTriangular.  Note that
these operations admit an optional argument to produce normalized
triangular sets.  There is also a zeroSetSplit operation which does
all the job from the input system; an error is produced if this system
is not zero-dimensional.

Let us illustrate the facilities of the LexTriangularPackage constructor
by a famous example, the cyclic-6 root system.

Define the coefficient ring.

  R := Integer
   Integer
                       Type: Domain

Define the list of variables,

  ls : List Symbol := [a,b,c,d,e,f]
    [a,b,c,d,e,f]
                      Type: List Symbol

and make it an ordered set.

  V := OVAR(ls)
    OrderedVariableList [a,b,c,d,e,f]
                      Type: Domain

Define the polynomial ring.

  P := NSMP(R, V)
   NewSparseMultivariatePolynomial(Integer,OrderedVariableList [a,b,c,d,e,f])
                      Type: Domain

Define the polynomials.

  p1: P :=  a*b*c*d*e*f - 1
   f e d c b a - 1
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p2: P := a*b*c*d*e +a*b*c*d*f +a*b*c*e*f +a*b*d*e*f +a*c*d*e*f +b*c*d*e*f 
   ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p3: P :=  a*b*c*d + a*b*c*f + a*b*e*f + a*d*e*f + b*c*d*e + c*d*e*f 
   (((d + f)c + f e)b + f e d)a + e d c b + f e d c
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p4: P := a*b*c + a*b*f + a*e*f + b*c*d + c*d*e + d*e*f 
   ((c + f)b + f e)a + d c b + e d c + f e d
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p5: P := a*b + a*f + b*c + c*d + d*e + e*f 
   (b + f)a + c b + d c + e d + f e
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  p6: P := a + b + c + d + e + f 
   a + b + c + d + e + f
    Type: NewSparseMultivariatePolynomial(Integer,
                                          OrderedVariableList [a,b,c,d,e,f])

  lp := [p1, p2, p3, p4, p5, p6]
    [f e d c b a - 1, ((((e + f)d + f e)c + f e d)b + f e d c)a + f e d c b,
     (((d + f)c + f e)b + f e d)a + e d c b + f e d c,
     ((c + f)b + f e)a + d c b + e d c + f e d,
     (b + f)a + c b + d c + e d + f e, a + b + c + d + e + f]
   Type: List NewSparseMultivariatePolynomial(Integer,
                                           OrderedVariableList [a,b,c,d,e,f])

Now call LEXTRIPK.

  lextripack :=  LEXTRIPK(R,ls)
    LexTriangularPackage(Integer,[a,b,c,d,e,f])
                        Type: Domain

Compute the lexicographical Groebner basis of the system.  This may
take between 5 minutes and one hour, depending on your machine.

  lg := groebner(lp)$lextripack
   [a + b + c + d + e + f,
                        2                                           2
      3968379498283200b  + 15873517993132800f b + 3968379498283200d
    + 
                                              3 5                     4 4
      15873517993132800f d + 3968379498283200f e  - 15873517993132800f e
    + 
                        5 3                       6                       2
      23810276989699200f e  + (206355733910726400f  + 230166010900425600)e
    + 
                            43                       37
          - 729705987316687f   + 1863667496867205421f
        + 
                                31                         25
          291674853771731104461f   + 365285994691106921745f
        + 
                             19                         13
          549961185828911895f   - 365048404038768439269f
        + 
                                  7
          - 292382820431504027669f  - 2271898467631865497f
     *
        e
    + 
                         44                        38
      - 3988812642545399f   + 10187423878429609997f
    + 
                             32                          26
      1594377523424314053637f   + 1994739308439916238065f
    + 
                          20                          14
      1596840088052642815f   - 1993494118301162145413f
    + 
                               8                        2
      - 1596049742289689815053f  - 11488171330159667449f
    ,
                                                                      2
      (23810276989699200c - 23810276989699200f)b + 23810276989699200c
    + 
                                               2
      71430830969097600f c - 23810276989699200d  - 95241107958796800f d
    + 
                          3 5                      4 4                      5 3
      - 55557312975964800f e  + 174608697924460800f e  - 174608697924460800f e
    + 
                             6                        2
      (- 2428648252949318400f  - 2611193709870345600)e
    + 
                           43                        37
          8305444561289527f   - 21212087151945459641f
        + 
                                   31                          25
          - 3319815883093451385381f   - 4157691646261657136445f
        + 
                                19                          13
          - 6072721607510764095f   + 4154986709036460221649f
        + 
                                 7
          3327761311138587096749f  + 25885340608290841637f
     *
        e
    + 
                        44                         38
      45815897629010329f   - 117013765582151891207f
    + 
                                32                           26
      - 18313166848970865074187f   - 22909971239649297438915f
    + 
                             20                           14
      - 16133250761305157265f   + 22897305857636178256623f
    + 
                              8                         2
      18329944781867242497923f  + 130258531002020420699f
    ,
       (7936758996566400d - 7936758996566400f)b - 7936758996566400f d
    + 
                         3 5                     4 4                     5 3
      - 7936758996566400f e  + 23810276989699200f e  - 23810276989699200f e
    + 
                            6                       2
      (- 337312257354072000f  - 369059293340337600)e
    + 
                           43                       37
          1176345388640471f   - 3004383582891473073f
        + 
                                  31                         25
          - 470203502707246105653f   - 588858183402644348085f
        + 
                               19                         13
          - 856939308623513535f   + 588472674242340526377f
        + 
                                7
          471313241958371103517f  + 3659742549078552381f
     *
        e
    + 
                       44                        38                          32
      6423170513956901f   - 16404772137036480803f   - 2567419165227528774463f
    + 
                               26                       20
      - 3211938090825682172335f   - 2330490332697587485f
    + 
                             14                          8
      3210100109444754864587f   + 2569858315395162617847f
    + 
                           2
      18326089487427735751f
    ,
                                                                     3 5
      (11905138494849600e - 11905138494849600f)b - 3968379498283200f e
    + 
                        4 4                     5 3
      15873517993132800f e  - 27778656487982400f e
    + 
                            6                       2
      (- 208339923659868000f  - 240086959646133600)e
    + 
                          43                       37
          786029984751110f   - 2007519008182245250f
        + 
                                  31                         25
          - 314188062908073807090f   - 393423667537929575250f
        + 
                               19                         13
          - 550329120654394950f   + 393196408728889612770f
        + 
                                7
          314892372799176495730f  + 2409386515146668530f
     *
        e
    + 
                       44                        38                          32
      4177638546747827f   - 10669685294602576381f   - 1669852980419949524601f
    + 
                               26                       20
      - 2089077057287904170745f   - 1569899763580278795f
    + 
                             14                          8
      2087864026859015573349f   + 1671496085945199577969f
    + 
                           2
      11940257226216280177f
    ,
                          6                                           2 5
      (11905138494849600f  - 11905138494849600)b - 15873517993132800f e
    + 
                        3 4                     4 3
      39683794982832000f e  - 39683794982832000f e
    + 
                            11                      5  2
      (- 686529653202993600f   - 607162063237329600f )e
    + 
                         42                      36                        30
          65144531306704f   - 166381280901088652f   - 26033434502470283472f
        + 
                                 24                      18
          - 31696259583860650140f   + 971492093167581360f
        + 
                             12                        6
        32220085033691389548f   + 25526177666070529808f  + 138603268355749244
     *
        e
    + 
                      43                      37                        31
      167620036074811f   - 428102417974791473f   - 66997243801231679313f
    + 
                             25                      19
      - 83426716722148750485f   + 203673895369980765f
    + 
                           13                        7
      83523056326010432457f   + 66995789640238066937f  + 478592855549587901f
    ,
                    3                   2                 2                45
      801692827936c  + 2405078483808f c  - 2405078483808f c - 13752945467f
    + 
                     39                    33                    27
      35125117815561f   + 5496946957826433f   + 6834659447749117f
    + 
                       21                    15                    9
      - 44484880462461f   - 6873406230093057f   - 5450844938762633f
    + 
                    3
      1216586044571f
    ,
                                                                      2
      (23810276989699200d - 23810276989699200f)c + 23810276989699200d
    + 
                                              3 5                     4 4
      71430830969097600f d + 7936758996566400f e  - 31747035986265600f e
    + 
                        5 3                       6                       2
      31747035986265600f e  + (404774708824886400f  + 396837949828320000)e
    + 
                             43                       37
          - 1247372229446701f   + 3185785654596621203f
        + 
                                31                         25
          498594866849974751463f   + 624542545845791047935f
        + 
                             19                         13
          931085755769682885f   - 624150663582417063387f
        + 
                                  7
          - 499881859388360475647f  - 3926885313819527351f
     *
        e
    + 
                         44                        38
      - 7026011547118141f   + 17944427051950691243f
    + 
                             32                          26
      2808383522593986603543f   + 3513624142354807530135f
    + 
                          20                          14
      2860757006705537685f   - 3511356735642190737267f
    + 
                               8                        2
      - 2811332494697103819887f  - 20315011631522847311f
    ,
       (7936758996566400e - 7936758996566400f)c
    + 
                          43                     37                       31
          - 4418748183673f   + 11285568707456559f   + 1765998617294451019f
        + 
                              25                     19
          2173749283622606155f   - 55788292195402895f
        + 
                              13                       7
        - 2215291421788292951f   - 1718142665347430851f  + 30256569458230237f
     *
        e
    + 
                    44                     38                       32
      4418748183673f   - 11285568707456559f   - 1765998617294451019f
    + 
                            26                     20                       14
      - 2173749283622606155f   + 55788292195402895f   + 2215291421788292951f
    + 
                          8                     2
      1718142665347430851f  - 30256569458230237f
    ,
                       6                                  43
      (72152354514240f  - 72152354514240)c + 40950859449f
    + 
                        37                     31                     25
      - 104588980990367f   - 16367227395575307f   - 20268523416527355f
    + 
                      19                     13                     7
      442205002259535f   + 20576059935789063f   + 15997133796970563f
    + 
      - 275099892785581f
    ,
                        3                      2                    2
      1984189749141600d  + 5952569247424800f d  - 5952569247424800f d
    + 
                         4 5                     5 4                     3
      - 3968379498283200f e  + 15873517993132800f e  + 17857707742274400e
    + 
                            7                        2
      (- 148814231185620000f  - 162703559429611200f)e
    + 
                            44                      38
          - 390000914678878f   + 996062704593756434f
        + 
                                32                         26
          155886323972034823914f   + 194745956143985421330f
        + 
                           20                         14
          6205077595574430f   - 194596512653299068786f
        + 
                                  8                       2
          - 155796897940756922666f  - 1036375759077320978f
     *
        e
    + 
                        45                      39                         33
      - 374998630035991f   + 957747106595453993f   + 149889155566764891693f
    + 
                            27                      21
      187154171443494641685f   - 127129015426348065f
    + 
                            15                         9                      3
    - 187241533243115040417f   - 149719983567976534037f  - 836654081239648061f
    ,
                                                                   3 5
      (5952569247424800e - 5952569247424800f)d - 3968379498283200f e
    + 
                       4 4                    5 3
      9920948745708000f e  - 3968379498283200f e
    + 
                            6                       2
      (- 148814231185620000f  - 150798420934761600)e
    + 
                          43                       37
          492558110242553f   - 1257992359608074599f
        + 
                                  31                         25
          - 196883094539368513959f   - 246562115745735428055f
        + 
                               19                         13
          - 325698701993885505f   + 246417769883651808111f
        + 
                                7
          197327352068200652911f  + 1523373796389332143f
     *
        e
    + 
                       44                       38                          32
      2679481081803026f   - 6843392695421906608f   - 1071020459642646913578f
    + 
                               26                      20
      - 1339789169692041240060f   - 852746750910750210f
    + 
                             14                          8
      1339105101971878401312f   + 1071900289758712984762f
    + 
                          2
      7555239072072727756f
    ,
                          6                                          2 5
      (11905138494849600f  - 11905138494849600)d - 7936758996566400f e
    + 
                        3 4                     4 3
      31747035986265600f e  - 31747035986265600f e
    + 
                            11                      5  2
      (- 420648226818019200f   - 404774708824886400f )e
    + 
                         42                     36                       30
          15336187600889f   - 39169739565161107f   - 6127176127489690827f
        + 
                                24                      18
          - 7217708742310509615f   + 538628483890722735f
        + 
                              12                       6
          7506804353843507643f   + 5886160769782607203f  + 63576108396535879
     *
        e
    + 
                     43                      37                        31
      71737781777066f   - 183218856207557938f   - 28672874271132276078f
    + 
                             25                      19
      - 35625223686939812010f   + 164831339634084390f
    + 
                           13                        7
      35724160423073052642f   + 28627022578664910622f  + 187459987029680506f
    ,
                        6                      5                    2 4
      1322793166094400e  - 3968379498283200f e  + 3968379498283200f e
    + 
                         3 3
      - 5291172664377600f e
    + 
                            10                      4  2
      (- 230166010900425600f   - 226197631402142400f )e
    + 
                               47                         41
          - 152375364610443885f   + 389166626064854890415f
        + 
                                  35                           29
          60906097841360558987335f   + 76167367934608798697275f
        + 
                               23                           17
          27855066785995181125f   - 76144952817052723145495f
        + 
                                    11                         5
          - 60933629892463517546975f   - 411415071682002547795f
     *
        e
    + 
                        42                      36                        30
      - 209493533143822f   + 535045979490560586f   + 83737947964973553146f
    + 
                            24                      18
      104889507084213371570f   + 167117997269207870f
    + 
                              12                        6
      - 104793725781390615514f   - 83842685189903180394f  - 569978796672974242
    ,
                       6                   3
      (25438330117200f  + 25438330117200)e
    + 
                      7                    2
      (76314990351600f  + 76314990351600f)e
    + 
                          44                    38                      32
          - 1594966552735f   + 4073543370415745f   + 637527159231148925f
        + 
                             26                   20                      14
          797521176113606525f   + 530440941097175f   - 797160527306433145f
        + 
                               8                    2
          - 638132320196044965f  - 4510507167940725f
     *
        e
    + 
                      45                     39                       33
      - 6036376800443f   + 15416903421476909f   + 2412807646192304449f
    + 
                          27                    21                       15
      3017679923028013705f   + 1422320037411955f   - 3016560402417843941f
    + 
                            9                     3
      - 2414249368183033161f  - 16561862361763873f
    ,
                      12                  2
      (1387545279120f   - 1387545279120)e
    + 
                     43                  37                    31
          4321823003f   - 11037922310209f   - 1727510711947989f
        + 
                             25                 19                    13
          - 2165150991154425f   - 5114342560755f   + 2162682824948601f
        + 
                           7
          1732620732685741f  + 13506088516033f
     *
        e
    + 
                  44                  38                    32
      24177661775f   - 61749727185325f   - 9664106795754225f
    + 
                          26                 20                     14
      - 12090487758628245f   - 8787672733575f   + 12083693383005045f
    + 
                       8                  2
      9672870290826025f  + 68544102808525f
    ,
    48        42          36          30          18          12        6
   f   - 2554f   - 399710f   - 499722f   + 499722f   + 399710f   + 2554f  - 1]
  Type: List NewSparseMultivariatePolynomial(Integer,
    OrderedVariableList [a,b,c,d,e,f])

Apply lexTriangular to compute a decomposition into regular triangular sets.
This should not take more than 5 seconds.

  lexTriangular(lg,false)$lextripack
  [
     6       6       5     2 4     3 3     4 2     5
   {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
          2 5     3 4     4 3     5 2
    3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
           2 5     3 4     4 3      5 2
    3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
         2 5     3 4     4 3     5 2
    a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
   ,
    6                  2           2                    2
  {f  - 1,e - f,d - f,c  + 4f c + f ,(c - f)b - f c - 5f ,a + b + c + 3f},
    6                        2           2
  {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
    6            2           2                    2
  {f  - 1,e - f,d  + 4f d + f ,(d - f)c - f d - 5f ,b - f,a + c + d + 3f},
      36        30          24          18          12        6
   {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
                   12              2
       (161718564f   - 161718564)e
     + 
                    31              25                19                13
           - 504205f   + 1287737951f   + 201539391380f   + 253982817368f
         + 
                        7
           201940704665f  + 1574134601f
      *
         e
     + 
                 32              26                 20                 14
       - 2818405f   + 7198203911f   + 1126548149060f   + 1416530563364f
     + 
                     8              2
       1127377589345f  + 7988820725f
     ,
                      6                                 2 5                 3 4
       (693772639560f  - 693772639560)d - 462515093040f e  + 1850060372160f e
     + 
                       4 3                     11                  5  2
       - 1850060372160f e  + (- 24513299931120f   - 23588269745040f )e
     + 
                       30                 24                   18
           - 890810428f   + 2275181044754f   + 355937263869776f
         + 
                           12                   6
           413736880104344f   + 342849304487996f  + 3704966481878
      *
         e
     + 
                    31                  25                    19
       - 4163798003f   + 10634395752169f   + 1664161760192806f
     + 
                        13                    7
       2079424391370694f   + 1668153650635921f  + 10924274392693f
     ,
                     6                           31               25
       (12614047992f  - 12614047992)c - 7246825f   + 18508536599f
     + 
                     19                 13                 7
       2896249516034f   + 3581539649666f   + 2796477571739f  - 48094301893f
     ,
                      6                                 2 5                 3 4
       (693772639560f  - 693772639560)b - 925030186080f e  + 2312575465200f e
     + 
                       4 3                     11                  5  2
       - 2312575465200f e  + (- 40007555547960f   - 35382404617560f )e
     + 
                        30                 24                    18
           - 3781280823f   + 9657492291789f   + 1511158913397906f
         + 
                            12                    6
           1837290892286154f   + 1487216006594361f  + 8077238712093
      *
         e
     + 
                    31                  25                    19
       - 9736390478f   + 24866827916734f   + 3891495681905296f
     + 
                        13                    7
       4872556418871424f   + 3904047887269606f  + 27890075838538f
     ,
    a + b + c + d + e + f}
   ,
    6      2           2                    2
  {f  - 1,e  + 4f e + f ,(e - f)d - f e - 5f ,c - f,b - f,a + d + e + 3f}]
                             Type: List RegularChain(Integer,[a,b,c,d,e,f])

Note that the first set of the decomposition is normalized (all
initials are integer numbers) but not the second one (normalized
triangular sets are defined in the description of the 
NormalizedTriangularSetCategory constructor).

So apply now lexTriangular to produce normalized triangular sets.

  lts := lexTriangular(lg,true)$lextripack
   [
      6       6       5     2 4     3 3     4 2     5
    {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
           2 5     3 4     4 3     5 2
     3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
            2 5     3 4     4 3      5 2
     3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
          2 5     3 4     4 3     5 2
     a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
    ,
     6                  2           2
   {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
     6                        2           2
   {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
     6            2           2
   {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
       36        30          24          18          12        6
    {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
                       2
        1387545279120e
      + 
                       31                  25                    19
            4321823003f   - 11037922310209f   - 1727506390124986f
          + 
                               13                    7
            - 2176188913464634f   - 1732620732685741f  - 13506088516033f
       *
          e
      + 
                    32                  26                    20
        24177661775f   - 61749727185325f   - 9664082618092450f
      + 
                            14                    8                  2
        - 12152237485813570f   - 9672870290826025f  - 68544102808525f
      ,
         1387545279120d
      + 
                         30                 24                   18
            - 1128983050f   + 2883434331830f   + 451234998755840f
          + 
                            12                   6
            562426491685760f   + 447129055314890f  - 165557857270
       *
          e
      + 
                     31                 25                   19
        - 1816935351f   + 4640452214013f   + 726247129626942f
      + 
                        13                   7
        912871801716798f   + 726583262666877f  + 4909358645961f
      ,
                                    31                 25                   19
        1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
      + 
                          13                   7
        - 383262822316802f   - 300335488637543f  + 5289595037041f
      ,
         1387545279120b
      + 
                       30                 24                   18
            1128983050f   - 2883434331830f   - 451234998755840f
          + 
                              12                   6
            - 562426491685760f   - 447129055314890f  + 165557857270
       *
          e
      + 
                     31                 25                    19
        - 3283058841f   + 8384938292463f   + 1312252817452422f
      + 
                         13                    7
        1646579934064638f   + 1306372958656407f  + 4694680112151f
      ,
                                                      31                  25
        1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
      + 
                           19                    13                    7
        - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
      + 
        - 13506088516033f
      }
    ,
     6      2           2
   {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
                              Type: List RegularChain(Integer,[a,b,c,d,e,f])

We check that all initials are constant.

  [ [init(p) for p in (ts :: List(P))] for ts in lts]
   [[1,3,1,3,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1],
    [1387545279120,1387545279120,1387545279120,1387545279120,1387545279120,1],
    [1,1,1,1,1,1]]
     Type: List List NewSparseMultivariatePolynomial(Integer,
                                       OrderedVariableList [a,b,c,d,e,f])

Note that each triangular set in lts is a lexicographical Groebner
basis.  Recall that a point belongs to the variety associated with lp
if and only if it belongs to that associated with one triangular set
ts in lts.

By running the squareFreeLexTriangular operation, we retrieve the
above decomposition.

  squareFreeLexTriangular(lg,true)$lextripack
  [
      6       6       5     2 4     3 3     4 2     5
    {f  + 1, e  - 3f e  + 3f e  - 4f e  + 3f e  - 3f e - 1,
           2 5     3 4     4 3     5 2
     3d + f e  - 4f e  + 4f e  - 2f e  - 2e + 2f, c + f,
            2 5     3 4     4 3      5 2
     3b + 2f e  - 5f e  + 5f e  - 10f e  - 4e + 7f,
          2 5     3 4     4 3     5 2
     a - f e  + 3f e  - 3f e  + 4f e  + 3e - 3f}
    ,
     6                  2           2
   {f  - 1,e - f,d - f,c  + 4f c + f ,b + c + 4f,a - f},
     6                        2           2
   {f  - 1,e - f,d - f,c - f,b  + 4f b + f ,a + b + 4f},
     6            2           2
   {f  - 1,e - f,d  + 4f d + f ,c + d + 4f,b - f,a - f},
       36        30          24          18          12        6
    {f   - 2554f   - 399709f   - 502276f   - 399709f   - 2554f  + 1,
                       2
        1387545279120e
      + 
                       31                  25                    19
            4321823003f   - 11037922310209f   - 1727506390124986f
          + 
                               13                    7
            - 2176188913464634f   - 1732620732685741f  - 13506088516033f
       *
          e
      + 
                    32                  26                    20
        24177661775f   - 61749727185325f   - 9664082618092450f
      + 
                            14                    8                  2
        - 12152237485813570f   - 9672870290826025f  - 68544102808525f
      ,
         1387545279120d
      + 
                         30                 24                   18
            - 1128983050f   + 2883434331830f   + 451234998755840f
          + 
                            12                   6
            562426491685760f   + 447129055314890f  - 165557857270
       *
          e
      + 
                     31                 25                   19
        - 1816935351f   + 4640452214013f   + 726247129626942f
      + 
                        13                   7
        912871801716798f   + 726583262666877f  + 4909358645961f
      ,
                                    31                 25                   19
        1387545279120c + 778171189f   - 1987468196267f   - 310993556954378f
      + 
                          13                   7
        - 383262822316802f   - 300335488637543f  + 5289595037041f
      ,
         1387545279120b
      + 
                       30                 24                   18
            1128983050f   - 2883434331830f   - 451234998755840f
          + 
                              12                   6
            - 562426491685760f   - 447129055314890f  + 165557857270
       *
          e
      + 
                     31                 25                    19
        - 3283058841f   + 8384938292463f   + 1312252817452422f
      + 
                         13                    7
        1646579934064638f   + 1306372958656407f  + 4694680112151f
      ,
                                                      31                  25
        1387545279120a + 1387545279120e + 4321823003f   - 11037922310209f
      + 
                           19                    13                    7
        - 1727506390124986f   - 2176188913464634f   - 1732620732685741f
      + 
        - 13506088516033f
      }
    ,
     6      2           2
   {f  - 1,e  + 4f e + f ,d + e + 4f,c - f,b - f,a - f}]
  Type: List SquareFreeRegularTriangularSet(Integer,
               IndexedExponents OrderedVariableList [a,b,c,d,e,f],
               OrderedVariableList [a,b,c,d,e,f],
               NewSparseMultivariatePolynomial(Integer,
                                OrderedVariableList [a,b,c,d,e,f]))

Thus the solutions given by lts are pairwise different.

We count them as follows.

  reduce(+,[degree(ts) for ts in lts])
    156
                      Type: PositiveInteger

We can investigate the triangular decomposition lts by using the
ZeroDimensionalSolvePackage.

This requires to add an extra variable (smaller than the others) as follows.

  ls2 : List Symbol := concat(ls,new()$Symbol)
    [a,b,c,d,e,f,%A]
                      Type: List Symbol

Then we call the package.

  zdpack := ZDSOLVE(R,ls,ls2)
   (20)  ZeroDimensionalSolvePackage(Integer,[a,b,c,d,e,f],[a,b,c,d,e,f,%A])
                      Type: Domain

We compute a univariate representation of the variety associated with
the input system as follows.

  concat [univariateSolve(ts)$zdpack for ts in lts]
  [
                    4      2
    [complexRoots= ?  - 13?  + 49,
       coordinates =
                3                3                3                3
        [7a + %A  - 6%A, 21b + %A  + %A, 21c - 2%A  + 19%A, 7d - %A  + 6%A,
                 3                3
         21e - %A  - %A, 21f + 2%A  - 19%A]
      ]
    ,
                     4      2
    [complexRoots= ?  + 11?  + 49,
       coordinates =
                  3                 3                  3
        [35a + 3%A  + 19%A, 35b + %A  + 18%A, 35c - 2%A  - %A,
                  3                 3                  3
         35d - 3%A  - 19%A, 35e - %A  - 18%A, 35f + 2%A  + %A]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3       2
        ?  - 12?  + 58?  - 120?  + 207?  - 360?  + 802?  - 1332? + 1369
      ,
       coordinates =
        [
                               7           6            5            4
            43054532a + 33782%A  - 546673%A  + 3127348%A  - 6927123%A
          + 
                     3             2
            4365212%A  - 25086957%A  + 39582814%A - 107313172
          ,
                                7           6            5            4
            43054532b - 33782%A  + 546673%A  - 3127348%A  + 6927123%A
          + 
                       3             2
            - 4365212%A  + 25086957%A  - 39582814%A + 107313172
          ,
                                7           6            5            4
            21527266c - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
          + 
                       3             2
            - 2892788%A  + 10322663%A  - 9026596%A + 12950740
          ,
                                7           6            5            4
            43054532d + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
          + 
                     3             2
            2892788%A  - 10322663%A  + 30553862%A - 12950740
          ,
                                7           6            5            4
            43054532e - 22306%A  + 263139%A  - 1166076%A  + 1821805%A
          + 
                       3             2
            - 2892788%A  + 10322663%A  - 30553862%A + 12950740
          ,
                                7           6            5            4
            21527266f + 22306%A  - 263139%A  + 1166076%A  - 1821805%A
          + 
                     3             2
            2892788%A  - 10322663%A  + 9026596%A - 12950740
          ]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3       2
        ?  + 12?  + 58?  + 120?  + 207?  + 360?  + 802?  + 1332? + 1369
      ,
       coordinates =
        [
                               7           6            5            4
            43054532a + 33782%A  + 546673%A  + 3127348%A  + 6927123%A
          + 
                     3             2
            4365212%A  + 25086957%A  + 39582814%A + 107313172
          ,
                                7           6            5            4
            43054532b - 33782%A  - 546673%A  - 3127348%A  - 6927123%A
          + 
                       3             2
            - 4365212%A  - 25086957%A  - 39582814%A - 107313172
          ,
                                7           6            5            4
            21527266c - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
          + 
                       3             2
            - 2892788%A  - 10322663%A  - 9026596%A - 12950740
          ,
                                7           6            5            4
            43054532d + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
          + 
                     3             2
            2892788%A  + 10322663%A  + 30553862%A + 12950740
          ,
                                7           6            5            4
            43054532e - 22306%A  - 263139%A  - 1166076%A  - 1821805%A
          + 
                       3             2
            - 2892788%A  - 10322663%A  - 30553862%A - 12950740
          ,
                                7           6            5            4
            21527266f + 22306%A  + 263139%A  + 1166076%A  + 1821805%A
          + 
                     3             2
            2892788%A  + 10322663%A  + 9026596%A + 12950740
          ]
      ]
    ,
                     4    2
    [complexRoots= ?  - ?  + 1,
                                3            3              3            3
     coordinates= [a - %A,b + %A  - %A,c + %A ,d + %A,e - %A  + %A,f - %A ]]
    ,
                     8     6      4      2
    [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
       coordinates =
                 7      5       3                 7      5       3
        [4a - 2%A  - 7%A  - 20%A  - 22%A, 4b + 2%A  + 7%A  + 20%A  + 22%A,
                7      5       3                7      5       3
         4c + %A  + 3%A  + 10%A  + 10%A, 4d + %A  + 3%A  + 10%A  + 6%A,
                7      5       3               7      5       3
         4e - %A  - 3%A  - 10%A  - 6%A, 4f - %A  - 3%A  - 10%A  - 10%A]
      ]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                 3      2                    3      2
        [30a - %A  - 5%A  - 30%A - 6, 6b + %A  + 5%A  + 24%A + 6,
                 3      2              3      2
         30c - %A  - 5%A  - 6, 30d - %A  - 5%A  - 30%A - 6,
                 3      2                     3      2
         30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                 3      2                    3      2
        [30a - %A  + 5%A  - 30%A + 6, 6b + %A  - 5%A  + 24%A - 6,
                 3      2              3      2
         30c - %A  + 5%A  + 6, 30d - %A  + 5%A  - 30%A + 6,
                 3      2                     3      2
         30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + 1,b - %A - 5,c + %A + 1,d + 1,e + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - 1,b - %A + 5,c + %A - 1,d - 1,e - 1,f - 1]]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                3      2                     3      2
        [6a + %A  + 5%A  + 24%A + 6, 30b - %A  - 5%A  - 6,
                 3      2                     3      2
         30c - %A  - 5%A  - 30%A - 6, 30d - %A  - 5%A  - 30%A - 6,
                 3      2                     3      2
         30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                3      2                     3      2
        [6a + %A  - 5%A  + 24%A - 6, 30b - %A  + 5%A  + 6,
                 3      2                     3      2
         30c - %A  + 5%A  - 30%A + 6, 30d - %A  + 5%A  - 30%A + 6,
                 3      2                     3      2
         30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a - %A - 5,b + %A + 1,c + 1,d + 1,e + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - %A + 5,b + %A - 1,c - 1,d - 1,e - 1,f - 1]]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
                3      2                     3      2
         6c + %A  + 5%A  + 24%A + 6, 30d - %A  - 5%A  - 6,
                 3      2                     3      2
         30e - %A  - 5%A  - 30%A - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
                3      2                     3      2
         6c + %A  - 5%A  + 24%A - 6, 30d - %A  + 5%A  + 6,
                 3      2                     3      2
         30e - %A  + 5%A  - 30%A + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + 1,b + 1,c - %A - 5,d + %A + 1,e + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - 1,b - 1,c - %A + 5,d + %A - 1,e - 1,f - 1]]
    ,
                     8     7      6      5      4     2
    [complexRoots= ?  + 6?  + 16?  + 24?  + 18?  - 8?  + 4,
       coordinates =
                 7      6       5       4      3       2
        [2a + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 2%A + 4,
                 7      6       5       4      3       2
         2b + 2%A  + 9%A  + 18%A  + 19%A  + 4%A  - 10%A  - 4%A + 4,
                7      6      5      4      3
         2c - %A  - 4%A  - 8%A  - 9%A  - 4%A  - 2%A - 4,
                7      6      5      4      3
         2d + %A  + 4%A  + 8%A  + 9%A  + 4%A  + 2%A + 4,
                 7      6       5       4      3       2
         2e - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 4%A - 4,
                 7      6       5       4      3       2
         2f - 2%A  - 9%A  - 18%A  - 19%A  - 4%A  + 10%A  + 2%A - 4]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3        2
        ?  + 12?  + 64?  + 192?  + 432?  + 768?  + 1024?  + 768? + 256
      ,
       coordinates =
        [
                        7        6        5         4         3         2
            1408a - 19%A  - 200%A  - 912%A  - 2216%A  - 4544%A  - 6784%A
          + 
            - 6976%A - 1792
          ,
                         7        6         5         4          3          2
            1408b - 37%A  - 408%A  - 1952%A  - 5024%A  - 10368%A  - 16768%A
          + 
            - 17920%A - 5120
          ,
                         7        6         5         4          3          2
            1408c + 37%A  + 408%A  + 1952%A  + 5024%A  + 10368%A  + 16768%A
          + 
            17920%A + 5120
          ,
                         7        6        5         4         3         2
            1408d + 19%A  + 200%A  + 912%A  + 2216%A  + 4544%A  + 6784%A
          + 
            6976%A + 1792
          ,
         2e + %A, 2f - %A]
      ]
    ,
                     8     6      4      2
    [complexRoots= ?  + 4?  + 12?  + 16?  + 4,
       coordinates =
                7      5       3               7      5       3
        [4a - %A  - 3%A  - 10%A  - 6%A, 4b - %A  - 3%A  - 10%A  - 10%A,
                 7      5       3                 7      5       3
         4c - 2%A  - 7%A  - 20%A  - 22%A, 4d + 2%A  + 7%A  + 20%A  + 22%A,
                7      5       3                7      5       3
         4e + %A  + 3%A  + 10%A  + 10%A, 4f + %A  + 3%A  + 10%A  + 6%A]
      ]
    ,
                     8      6      4       2
    [complexRoots= ?  + 16?  - 96?  + 256?  + 256,
       coordinates =
                  7       5        3
        [512a - %A  - 12%A  + 176%A  - 448%A,
                  7       5       3
         128b - %A  - 16%A  + 96%A  - 256%A,
                  7       5       3
         128c + %A  + 16%A  - 96%A  + 256%A,
                  7       5        3
         512d + %A  + 12%A  - 176%A  + 448%A, 2e + %A, 2f - %A]
      ]
    ,
     [
      complexRoots =
         8      7      6       5       4       3        2
        ?  - 12?  + 64?  - 192?  + 432?  - 768?  + 1024?  - 768? + 256
      ,
       coordinates =
        [
                        7        6        5         4         3         2
            1408a - 19%A  + 200%A  - 912%A  + 2216%A  - 4544%A  + 6784%A
          + 
            - 6976%A + 1792
          ,
                         7        6         5         4          3          2
            1408b - 37%A  + 408%A  - 1952%A  + 5024%A  - 10368%A  + 16768%A
          + 
            - 17920%A + 5120
          ,
                         7        6         5         4          3          2
            1408c + 37%A  - 408%A  + 1952%A  - 5024%A  + 10368%A  - 16768%A
          + 
            17920%A - 5120
          ,
                         7        6        5         4         3         2
            1408d + 19%A  - 200%A  + 912%A  - 2216%A  + 4544%A  - 6784%A
          + 
            6976%A - 1792
          ,
         2e + %A, 2f - %A]
      ]
    ,
                     8     7      6      5      4     2
    [complexRoots= ?  - 6?  + 16?  - 24?  + 18?  - 8?  + 4,
       coordinates =
                 7      6       5       4      3       2
        [2a + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 2%A - 4,
                 7      6       5       4      3       2
         2b + 2%A  - 9%A  + 18%A  - 19%A  + 4%A  + 10%A  - 4%A - 4,
                7      6      5      4      3
         2c - %A  + 4%A  - 8%A  + 9%A  - 4%A  - 2%A + 4,
                7      6      5      4      3
         2d + %A  - 4%A  + 8%A  - 9%A  + 4%A  + 2%A - 4,
                 7      6       5       4      3       2
         2e - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 4%A + 4,
                 7      6       5       4      3       2
         2f - 2%A  + 9%A  - 18%A  + 19%A  - 4%A  - 10%A  + 2%A + 4]
      ]
    ,
                     4      2
    [complexRoots= ?  + 12?  + 144,
       coordinates =
                 2               2               2               2
        [12a - %A  - 12, 12b - %A  - 12, 12c - %A  - 12, 12d - %A  - 12,
                2                    2
         6e + %A  + 3%A + 12, 6f + %A  - 3%A + 12]
      ]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                3      2                     3      2
        [6a - %A  - 5%A  - 24%A - 6, 30b + %A  + 5%A  + 30%A + 6,
                 3      2                     3      2
         30c + %A  + 5%A  + 30%A + 6, 30d + %A  + 5%A  + 30%A + 6,
                 3      2                     3      2
         30e + %A  + 5%A  + 30%A + 6, 30f + %A  + 5%A  + 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                3      2                     3      2
        [6a - %A  + 5%A  - 24%A + 6, 30b + %A  - 5%A  + 30%A - 6,
                 3      2                     3      2
         30c + %A  - 5%A  + 30%A - 6, 30d + %A  - 5%A  + 30%A - 6,
                 3      2                     3      2
         30e + %A  - 5%A  + 30%A - 6, 30f + %A  - 5%A  - 6]
      ]
    ,
                     4      2
    [complexRoots= ?  + 12?  + 144,
       coordinates =
                 2               2               2               2
        [12a + %A  + 12, 12b + %A  + 12, 12c + %A  + 12, 12d + %A  + 12,
                2                    2
         6e - %A  + 3%A - 12, 6f - %A  - 3%A - 12]
      ]
    ,
                     2
    [complexRoots= ?  - 12,
     coordinates= [a - 1,b - 1,c - 1,d - 1,2e + %A + 4,2f - %A + 4]]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + %A + 5,b - 1,c - 1,d - 1,e - 1,f - %A - 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a + %A - 5,b + 1,c + 1,d + 1,e + 1,f - %A + 1]]
    ,
                     2
    [complexRoots= ?  - 12,
     coordinates= [a + 1,b + 1,c + 1,d + 1,2e + %A - 4,2f - %A - 4]]
    ,
                     4     3      2
    [complexRoots= ?  + 6?  + 30?  + 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  - 5%A  - 30%A - 6, 30b - %A  - 5%A  - 30%A - 6,
                 3      2                    3      2
         30c - %A  - 5%A  - 30%A - 6, 6d + %A  + 5%A  + 24%A + 6,
                 3      2              3      2
         30e - %A  - 5%A  - 6, 30f - %A  - 5%A  - 30%A - 6]
      ]
    ,
                     4     3      2
    [complexRoots= ?  - 6?  + 30?  - 36? + 36,
       coordinates =
                 3      2                     3      2
        [30a - %A  + 5%A  - 30%A + 6, 30b - %A  + 5%A  - 30%A + 6,
                 3      2                    3      2
         30c - %A  + 5%A  - 30%A + 6, 6d + %A  - 5%A  + 24%A - 6,
                 3      2              3      2
         30e - %A  + 5%A  + 6, 30f - %A  + 5%A  - 30%A + 6]
      ]
    ,
                     2
    [complexRoots= ?  + 6? + 6,
     coordinates= [a + 1,b + 1,c + 1,d - %A - 5,e + %A + 1,f + 1]]
    ,
                     2
    [complexRoots= ?  - 6? + 6,
     coordinates= [a - 1,b - 1,c - 1,d - %A + 5,e + %A - 1,f - 1]]
    ]
  Type: List Record(complexRoots: SparseUnivariatePolynomial Integer,
                    coordinates: List Polynomial Integer)

Since the univariateSolve operation may split a regular set, it
returns a list. This explains the use of concat.

Look at the last item of the result. It consists of two parts.  For
any complex root ? of the univariate polynomial in the first part, we
get a tuple of univariate polynomials (in a, ...,f respectively) by
replacing %A by ? in the second part.  Each of these tuples t
describes a point of the variety associated with lp by equaling to
zero the polynomials in t.

Note that the way of reading these univariate representations is
explained also in the example illustrating the ZeroDimensionalSolvePackage 
constructor.

Now, we compute the points of the variety with real coordinates.

  concat [realSolve(ts)$zdpack for ts in lts] 
  [[%B1,%B1,%B1,%B5,- %B5 - 4%B1,%B1], [%B1,%B1,%B1,%B6,- %B6 - 4%B1,%B1],
   [%B2,%B2,%B2,%B3,- %B3 - 4%B2,%B2], [%B2,%B2,%B2,%B4,- %B4 - 4%B2,%B2],
   [%B7,%B7,%B7,%B7,%B11,- %B11 - 4%B7], [%B7,%B7,%B7,%B7,%B12,- %B12 - 4%B7],
   [%B8,%B8,%B8,%B8,%B9,- %B9 - 4%B8], [%B8,%B8,%B8,%B8,%B10,- %B10 - 4%B8],
   [%B13,%B13,%B17,- %B17 - 4%B13,%B13,%B13],
   [%B13,%B13,%B18,- %B18 - 4%B13,%B13,%B13],
   [%B14,%B14,%B15,- %B15 - 4%B14,%B14,%B14],
   [%B14,%B14,%B16,- %B16 - 4%B14,%B14,%B14],
     [%B19, %B29,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B19   - ---------- %B19   - ----------- %B19
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B19   - ------------- %B19  - ----------- %B19
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B19   + ------------- %B19   + --------------- %B19
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B19   + --------------- %B19  - ------------ %B19
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B19   - ------------- %B19   - --------------- %B19
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B19   - --------------- %B19  - ------------- %B19
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B29 - ------------- %B19   + ------------ %B19
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B19   + ---------------- %B19
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B19  + -------------- %B19
          1387545279120           1387545279120
      ]
    ,
     [%B19, %B30,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B19   - ---------- %B19   - ----------- %B19
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B19   - ------------- %B19  - ----------- %B19
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B19   + ------------- %B19   + --------------- %B19
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B19   + --------------- %B19  - ------------ %B19
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B19   - ------------- %B19   - --------------- %B19
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B19   - --------------- %B19  - ------------- %B19
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B30 - ------------- %B19   + ------------ %B19
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B19   + ---------------- %B19
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B19  + -------------- %B19
          1387545279120           1387545279120
      ]
    ,
     [%B20, %B27,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B20   - ---------- %B20   - ----------- %B20
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B20   - ------------- %B20  - ----------- %B20
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B20   + ------------- %B20   + --------------- %B20
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B20   + --------------- %B20  - ------------ %B20
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B20   - ------------- %B20   - --------------- %B20
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B20   - --------------- %B20  - ------------- %B20
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B27 - ------------- %B20   + ------------ %B20
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B20   + ---------------- %B20
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B20  + -------------- %B20
          1387545279120           1387545279120
      ]
    ,
     [%B20, %B28,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B20   - ---------- %B20   - ----------- %B20
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B20   - ------------- %B20  - ----------- %B20
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B20   + ------------- %B20   + --------------- %B20
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B20   + --------------- %B20  - ------------ %B20
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B20   - ------------- %B20   - --------------- %B20
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B20   - --------------- %B20  - ------------- %B20
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B28 - ------------- %B20   + ------------ %B20
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B20   + ---------------- %B20
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B20  + -------------- %B20
          1387545279120           1387545279120
      ]
    ,
     [%B21, %B25,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B21   - ---------- %B21   - ----------- %B21
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B21   - ------------- %B21  - ----------- %B21
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B21   + ------------- %B21   + --------------- %B21
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B21   + --------------- %B21  - ------------ %B21
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B21   - ------------- %B21   - --------------- %B21
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B21   - --------------- %B21  - ------------- %B21
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B25 - ------------- %B21   + ------------ %B21
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B21   + ---------------- %B21
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B21  + -------------- %B21
          1387545279120           1387545279120
      ]
    ,
     [%B21, %B26,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B21   - ---------- %B21   - ----------- %B21
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B21   - ------------- %B21  - ----------- %B21
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B21   + ------------- %B21   + --------------- %B21
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B21   + --------------- %B21  - ------------ %B21
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B21   - ------------- %B21   - --------------- %B21
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B21   - --------------- %B21  - ------------- %B21
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B26 - ------------- %B21   + ------------ %B21
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B21   + ---------------- %B21
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B21  + -------------- %B21
          1387545279120           1387545279120
      ]
    ,
     [%B22, %B23,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B22   - ---------- %B22   - ----------- %B22
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B22   - ------------- %B22  - ----------- %B22
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B22   + ------------- %B22   + --------------- %B22
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B22   + --------------- %B22  - ------------ %B22
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B22   - ------------- %B22   - --------------- %B22
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B22   - --------------- %B22  - ------------- %B22
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B23 - ------------- %B22   + ------------ %B22
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B22   + ---------------- %B22
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B22  + -------------- %B22
          1387545279120           1387545279120
      ]
    ,
     [%B22, %B24,
           7865521      31   6696179241     25   25769893181     19
        ---------- %B22   - ---------- %B22   - ----------- %B22
        6006689520          2002229840            49235160
      + 
          1975912990729     13   1048460696489     7   21252634831
        - ------------- %B22   - ------------- %B22  - ----------- %B22
            3003344760             2002229840           6006689520
      ,
             778171189       31   1987468196267     25   155496778477189     19
        - ------------- %B22   + ------------- %B22   + --------------- %B22
          1387545279120          1387545279120            693772639560
      + 
        191631411158401     13   300335488637543     7   755656433863
        --------------- %B22   + --------------- %B22  - ------------ %B22
          693772639560            1387545279120          198220754160
      ,
          1094352947      31   2794979430821     25   218708802908737     19
        ------------ %B22   - ------------- %B22   - --------------- %B22
        462515093040           462515093040            231257546520
      + 
          91476663003591     13   145152550961823     7   1564893370717
        - -------------- %B22   - --------------- %B22  - ------------- %B22
            77085848840             154171697680           462515093040
      ,
                    4321823003      31   180949546069     25
        - %B24 - ------------- %B22   + ------------ %B22
                 1387545279120           22746643920
      + 
        863753195062493     19   1088094456732317     13
        --------------- %B22   + ---------------- %B22
          693772639560             693772639560
      + 
        1732620732685741     7   13506088516033
        ---------------- %B22  + -------------- %B22
          1387545279120           1387545279120
      ]
    ,
   [%B31,%B35,- %B35 - 4%B31,%B31,%B31,%B31],
   [%B31,%B36,- %B36 - 4%B31,%B31,%B31,%B31],
   [%B32,%B33,- %B33 - 4%B32,%B32,%B32,%B32],
   [%B32,%B34,- %B34 - 4%B32,%B32,%B32,%B32]]
                                Type: List List RealClosure Fraction Integer

We obtain 24 points given by lists of elements in the RealClosure
of Fraction of R.  In each list, the first value corresponds 
to the indeterminate f, the second to e and so on. 

See Also:
o )help RegularChain
o )help RegularTriangularSet
o )help SquareFreeRegularTriangularSet
o )help ZeroDimensionalSolvePackage
o )help NewSparseMultivariatePolynomial
o )help LinGroebnerPackage
o )help NormalizedTriangularSetCategory
o )help RealClosure
o )help Fraction
o )show LexTriangularPackage
o $AXIOM/doc/src/algebra/zerodim.spad.dvi

@
<<package LEXTRIPK LexTriangularPackage>>=
)abbrev package LEXTRIPK LexTriangularPackage
++ Author: Marc Moreno Maza
++ Date Created: 08/02/1999
++ Date Last Updated: 08/02/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Keywords:
++ Description: 
++ A package for solving polynomial systems with finitely many solutions.
++ The decompositions are given by means of regular triangular sets.
++ The computations use lexicographical Groebner bases. 
++ The main operations are \axiomOpFrom{lexTriangular}{LexTriangularPackage}
++ and \axiomOpFrom{squareFreeLexTriangular}{LexTriangularPackage}.
++ The second one provide decompositions by means of square-free regular triangular sets.
++ Both are based on the {\em lexTriangular} method described in [1].
++ They differ from the algorithm described in [2] by the fact that
++ multiciplities of the roots are not kept.
++ With the \axiomOpFrom{squareFreeLexTriangular}{LexTriangularPackage} operation
++ all multiciplities are removed. With the other operation some multiciplities may remain. 
++ Both operations admit an optional argument to produce normalized triangular sets.  \newline 
++ References: \newline
++ [1] D. LAZARD "Solving Zero-dimensional Algebraic Systems" 
++ published in the J. of Symbol. Comput. (1992) 13, 117-131.\newline
++ [2] M. MORENO MAZA and R. RIOBOO "Computations of gcd over
++ algebraic towers of simple extensions" In proceedings of AAECC11, Paris, 1995.\newline
++ Version: 2.

LexTriangularPackage(R,ls): Exports == Implementation where

  R: GcdDomain
  ls: List Symbol
  V ==> OrderedVariableList ls
  E ==> IndexedExponents V
  P ==> NewSparseMultivariatePolynomial(R,V)
  TS  ==> RegularChain(R,ls)
  ST ==> SquareFreeRegularTriangularSet(R,E,V,P)
  Q1 ==> Polynomial R
  PS ==> GeneralPolynomialSet(R,E,V,P)
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  S ==> String
  K ==> Fraction R
  LP ==> List P
  BWTS ==> Record(val : Boolean, tower : TS)
  LpWTS ==> Record(val : (List P), tower : TS)
  BWST ==> Record(val : Boolean, tower : ST)
  LpWST ==> Record(val : (List P), tower : ST)
  polsetpack ==> PolynomialSetUtilitiesPackage(R,E,V,P)
  quasicomppackTS ==> QuasiComponentPackage(R,E,V,P,TS)
  regsetgcdpackTS ==> SquareFreeRegularTriangularSetGcdPackage(R,E,V,P,TS)
  normalizpackTS ==> NormalizationPackage(R,E,V,P,TS)
  quasicomppackST ==> QuasiComponentPackage(R,E,V,P,ST)
  regsetgcdpackST ==> SquareFreeRegularTriangularSetGcdPackage(R,E,V,P,ST)
  normalizpackST ==> NormalizationPackage(R,E,V,P,ST)

  Exports ==  with

     zeroDimensional?: LP -> B
         ++ \axiom{zeroDimensional?(lp)} returns true iff
         ++ \axiom{lp} generates a zero-dimensional ideal
         ++ w.r.t. the variables involved in \axiom{lp}.
     fglmIfCan:  LP -> Union(LP, "failed")
         ++ \axiom{fglmIfCan(lp)} returns the lexicographical Groebner 
         ++ basis of \axiom{lp} by using the {\em FGLM} strategy,
         ++ if \axiom{zeroDimensional?(lp)} holds .
     groebner: LP -> LP
         ++ \axiom{groebner(lp)} returns the lexicographical Groebner 
         ++ basis of \axiom{lp}. If \axiom{lp} generates a zero-dimensional
         ++ ideal then the {\em FGLM} strategy is used, otherwise
         ++ the {\em Sugar} strategy is used.
     lexTriangular: (LP, B) -> List TS
         ++ \axiom{lexTriangular(base, norm?)} decomposes the variety
         ++ associated with \axiom{base} into regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{base} needs to be a lexicographical Groebner basis
         ++ of a zero-dimensional ideal. If \axiom{norm?} is \axiom{true} 
         ++ then the regular sets are normalized. 
     squareFreeLexTriangular: (LP, B) -> List ST
         ++ \axiom{squareFreeLexTriangular(base, norm?)} decomposes the variety
         ++ associated with \axiom{base} into square-free regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{base} needs to be a lexicographical Groebner basis
         ++ of a zero-dimensional ideal. If \axiom{norm?} is \axiom{true} 
         ++ then the regular sets are normalized. 
     zeroSetSplit: (LP, B) -> List TS
         ++ \axiom{zeroSetSplit(lp, norm?)} decomposes the variety
         ++ associated with \axiom{lp} into regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{lp} needs to generate a zero-dimensional ideal.
         ++ If \axiom{norm?} is \axiom{true} then the regular sets are normalized.
     zeroSetSplit: (LP, B) -> List ST
         ++ \axiom{zeroSetSplit(lp, norm?)} decomposes the variety
         ++ associated with \axiom{lp} into square-free regular chains.
         ++ Thus a point belongs to this variety iff it is a regular
         ++ zero of a regular set in in the output.
         ++ Note that \axiom{lp} needs to generate a zero-dimensional ideal.
         ++ If \axiom{norm?} is \axiom{true} then the regular sets are normalized.

  Implementation == add

     trueVariables(lp: List(P)): List Symbol ==
       lv: List V := variables([lp]$PS)
       truels: List Symbol := []
       for s in ls repeat
         if member?(variable(s)::V, lv) then truels := cons(s,truels)
       reverse truels

     zeroDimensional?(lp:List(P)): Boolean ==
       truels: List Symbol := trueVariables(lp)
       fglmpack := FGLMIfCanPackage(R,truels)
       lq1: List(Q1) := [p::Q1 for p in lp]
       zeroDimensional?(lq1)$fglmpack

     fglmIfCan(lp:List(P)): Union(List(P), "failed") ==
       truels: List Symbol := trueVariables(lp)
       fglmpack := FGLMIfCanPackage(R,truels)
       lq1: List(Q1) := [p::Q1 for p in lp]
       foo := fglmIfCan(lq1)$fglmpack
       foo case "failed" => return("failed" :: Union(List(P), "failed"))
       lp := [retract(q1)$P for q1 in (foo :: List(Q1))]
       lp::Union(List(P), "failed")

     groebner(lp:List(P)): List(P) ==
       truels: List Symbol := trueVariables(lp)
       fglmpack := FGLMIfCanPackage(R,truels)
       lq1: List(Q1) := [p::Q1 for p in lp]
       lq1 := groebner(lq1)$fglmpack
       lp := [retract(q1)$P for q1 in lq1]

     lexTriangular(base: List(P), norm?: Boolean): List(TS) ==
       base := sort(infRittWu?,base)
       base := remove(zero?, base)
       any?(ground?, base) => []
       ts: TS := empty()
       toSee: List LpWTS := [[base,ts]$LpWTS]
       toSave: List TS := []
       while not empty? toSee repeat
         lpwt := first toSee; toSee := rest toSee
         lp := lpwt.val; ts := lpwt.tower
         empty? lp => toSave := cons(ts, toSave)
         p := first lp; lp := rest lp; v := mvar(p)
         algebraic?(v,ts) =>
           error "lexTriangular$LEXTRIPK: should never happen !"
         norm? and zero? remainder(init(p),ts).polnum => 
           toSee := cons([lp, ts]$LpWTS, toSee)
         (not norm?) and zero? (initiallyReduce(init(p),ts)) => 
           toSee := cons([lp, ts]$LpWTS, toSee)
         lbwt: List BWTS := invertible?(init(p),ts)$TS
         while (not empty? lbwt) repeat
           bwt := first lbwt; lbwt := rest lbwt
           b := bwt.val; us := bwt.tower
           (not b) => toSee := cons([lp, us], toSee)
           lus: List TS
           if norm?
             then 
               newp := normalizedAssociate(p,us)$normalizpackTS
               lus := [internalAugment(newp,us)$TS]
             else 
               newp := p
               lus := augment(newp,us)$TS
           newlp := lp 
           while (not empty? newlp) and (mvar(first newlp) = v) repeat
             newlp := rest newlp
           for us in lus repeat
             toSee := cons([newlp, us]$LpWTS, toSee)
       algebraicSort(toSave)$quasicomppackTS

     zeroSetSplit(lp:List(P), norm?:B): List TS ==
       bar := fglmIfCan(lp)
       bar case "failed" =>
         error "zeroSetSplit$LEXTRIPK: #1 not zero-dimensional"
       lexTriangular(bar::(List P),norm?)

     squareFreeLexTriangular(base: List(P), norm?: Boolean): List(ST) ==
       base := sort(infRittWu?,base)
       base := remove(zero?, base)
       any?(ground?, base) => []
       ts: ST := empty()
       toSee: List LpWST := [[base,ts]$LpWST]
       toSave: List ST := []
       while not empty? toSee repeat
         lpwt := first toSee; toSee := rest toSee
         lp := lpwt.val; ts := lpwt.tower
         empty? lp => toSave := cons(ts, toSave)
         p := first lp; lp := rest lp; v := mvar(p)
         algebraic?(v,ts) =>
           error "lexTriangular$LEXTRIPK: should never happen !"
         norm? and zero? remainder(init(p),ts).polnum => 
           toSee := cons([lp, ts]$LpWST, toSee)
         (not norm?) and zero? (initiallyReduce(init(p),ts)) => 
           toSee := cons([lp, ts]$LpWST, toSee)
         lbwt: List BWST := invertible?(init(p),ts)$ST
         while (not empty? lbwt) repeat
           bwt := first lbwt; lbwt := rest lbwt
           b := bwt.val; us := bwt.tower
           (not b) => toSee := cons([lp, us], toSee)
           lus: List ST
           if norm?
             then 
               newp := normalizedAssociate(p,us)$normalizpackST
               lus := augment(newp,us)$ST
             else
               lus := augment(p,us)$ST
           newlp := lp 
           while (not empty? newlp) and (mvar(first newlp) = v) repeat
             newlp := rest newlp
           for us in lus repeat
             toSee := cons([newlp, us]$LpWST, toSee)
       algebraicSort(toSave)$quasicomppackST

     zeroSetSplit(lp:List(P), norm?:B): List ST ==
       bar := fglmIfCan(lp)
       bar case "failed" =>
         error "zeroSetSplit$LEXTRIPK: #1 not zero-dimensional"
       squareFreeLexTriangular(bar::(List P),norm?)

@
\section{package IRURPK InternalRationalUnivariateRepresentationPackage}
<<package IRURPK InternalRationalUnivariateRepresentationPackage>>=
)abbrev package IRURPK InternalRationalUnivariateRepresentationPackage
++ Author: Marc Moreno Maza
++ Date Created: 01/1999
++ Date Last Updated: 23/01/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Keywords:
++ Description: 
++   An internal package for computing the rational univariate representation
++   of a zero-dimensional algebraic variety given by a square-free 
++   triangular set. 
++   The main operation is \axiomOpFrom{rur}{InternalRationalUnivariateRepresentationPackage}.
++   It is based on the {\em generic} algorithm description in [1]. \newline References:
++  [1] D. LAZARD "Solving Zero-dimensional Algebraic Systems"
++      Journal of Symbolic Computation, 1992, 13, 117-131
++ Version: 1.

InternalRationalUnivariateRepresentationPackage(R,E,V,P,TS): Exports == Implementation where
  R : Join(EuclideanDomain,CharacteristicZero)
  E : OrderedAbelianMonoidSup
  V : OrderedSet
  P : RecursivePolynomialCategory(R,E,V)
  TS : SquareFreeRegularTriangularSetCategory(R,E,V,P)
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  LV ==> List V
  LP ==> List P
  PWT ==> Record(val: P, tower: TS)
  LPWT ==> Record(val: LP, tower: TS)
  WIP ==> Record(pol: P, gap: Z, tower: TS)
  BWT ==> Record(val:Boolean, tower: TS)
  polsetpack ==> PolynomialSetUtilitiesPackage(R,E,V,P)
  normpack ==> NormalizationPackage(R,E,V,P,TS)

  Exports ==  with

     rur: (TS,B) -> List TS
       ++ \spad{rur(ts,univ?)} returns a rational univariate representation
       ++ of \spad{ts}. This assumes that the lowest polynomial in \spad{ts}
       ++ is a variable \spad{v} which does not occur in the other polynomials
       ++ of \spad{ts}. This variable will be used to define the simple
       ++ algebraic extension over which these other polynomials will be
       ++ rewritten as univariate polynomials with degree one.
       ++ If \spad{univ?} is \spad{true} then these polynomials will have
       ++ a constant initial.
     checkRur: (TS, List TS) -> Boolean
       ++ \spad{checkRur(ts,lus)} returns \spad{true} if \spad{lus}
       ++ is a rational univariate representation of \spad{ts}.

  Implementation == add

     checkRur(ts: TS, lts: List TS): Boolean ==
       f0 := last(ts)::P
       z := mvar(f0)
       ts := collectUpper(ts,z)
       dts: N := degree(ts)
       lp := parts(ts)
       dlts: N := 0
       for us in lts repeat
         dlts := dlts + degree(us)
         rems := [removeZero(p,us) for p in lp]
         not every?(zero?,rems) => 
           output(us::OutputForm)$OutputPackage
           return false
       (dts =$N dlts)@Boolean

     convert(p:P,sqfr?:B):TS ==
       -- if sqfr? ASSUME p is square-free
       newts: TS := empty()
       sqfr? => internalAugment(p,newts) 
       p := squareFreePart(p)
       internalAugment(p,newts) 

     prepareRur(ts: TS): List LPWT ==
       not purelyAlgebraic?(ts)$TS => 
         error "rur$IRURPK: #1 is not zero-dimensional"
       lp: LP := parts(ts)$TS
       lp := sort(infRittWu?,lp)
       empty? lp =>
         error "rur$IRURPK: #1 is empty"
       f0 := first lp; lp := rest lp
--       not (one?(init(f0)) and one?(mdeg(f0)) and zero?(tail(f0))) =>
       not ((init(f0) = 1) and (mdeg(f0) = 1) and zero?(tail(f0))) =>
         error "rur$IRURPK: #1 has no generating root."
       empty? lp =>
         error "rur$IRURPK: #1 has a generating root but no indeterminates"
       z: V :=  mvar(f0)
       f1 := first lp; lp := rest lp
       x1: V := mvar(f1)
       newf1 := x1::P - z::P
       toSave: List LPWT := []
       for ff1 in irreducibleFactors([f1])$polsetpack repeat
         newf0 := eval(ff1,mvar(f1),f0)
         ts := internalAugment(newf1,convert(newf0,true)@TS)
         toSave := cons([lp,ts],toSave)
       toSave

     makeMonic(z:V,c:P,r:P,ts:TS,s:P,univ?:B): TS ==
       --ASSUME r is a irreducible univariate polynomial in z
       --ASSUME c and s only depends on z and mvar(s)
       --ASSUME c and a have main degree 1
       --ASSUME c and s have a constant initial
       --ASSUME mvar(ts) < mvar(s)
       lp: LP := parts(ts)
       lp := sort(infRittWu?,lp)
       newts: TS := convert(r,true)@TS
       s := remainder(s,newts).polnum
       if univ? 
         then 
           s := normalizedAssociate(s,newts)$normpack
       for p in lp repeat
         p := lazyPrem(eval(p,z,c),s)
         p := remainder(p,newts).polnum
         newts := internalAugment(p,newts)
       internalAugment(s,newts)

     next(lambda:Z):Z == 
       if lambda < 0 then lambda := - lambda + 1 else lambda := - lambda

     makeLinearAndMonic(p: P, xi: V, ts: TS, univ?:B, check?: B, info?: B): List TS ==
       -- if check? THEN some VERIFICATIONS are performed
       -- if info? THEN some INFORMATION is displayed
       f0 := last(ts)::P
       z: V := mvar(f0)
       lambda: Z := 1
       ts := collectUpper(ts,z)
       toSee: List WIP := [[f0,lambda,ts]$WIP]
       toSave: List TS := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         (f0, lambda, ts) := (wip.pol, wip.gap, wip.tower)
         if check? and ((not univariate?(f0)$polsetpack) or (mvar(f0) ~= z))
           then
               output("Bad f0: ")$OutputPackage
               output(f0::OutputForm)$OutputPackage
         c: P := lambda * xi::P + z::P 
         f := eval(f0,z,c); q := eval(p,z,c)
         prs := subResultantChain(q,f)
         r := first prs; prs := rest prs
         check? and ((not zero? degree(r,xi)) or (empty? prs)) =>
           error "rur$IRURPK: should never happen !"
         s := first prs; prs := rest prs
         check? and (zero? degree(s,xi)) and (empty? prs) =>
           error "rur$IRURPK: should never happen !!"
         if zero? degree(s,xi) then s := first prs
--         not one? degree(s,xi) =>            
         not (degree(s,xi) = 1) =>            
           toSee := cons([f0,next(lambda),ts]$WIP,toSee)
         h := init(s)
         r := squareFreePart(r)
         ground?(h) or ground?(gcd(h,r)) =>
           for fr in irreducibleFactors([r])$polsetpack repeat
             ground? fr => "leave"
             toSave := cons(makeMonic(z,c,fr,ts,s,univ?),toSave)
         if info?
           then 
             output("Unlucky lambda")$OutputPackage
             output(h::OutputForm)$OutputPackage
             output(r::OutputForm)$OutputPackage
         toSee := cons([f0,next(lambda),ts]$WIP,toSee)
       toSave

     rur (ts: TS,univ?:Boolean): List TS ==
       toSee: List LPWT := prepareRur(ts)
       toSave: List TS := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         ts: TS := wip.tower
         lp: LP := wip.val
         empty? lp => toSave := cons(ts,toSave)
         p := first lp; lp := rest lp
         xi: V := mvar(p)
         p := remainder(p,ts).polnum
         if not univ?
           then 
             p := primitivePart stronglyReduce(p,ts)
         ground?(p) or (mvar(p) < xi) =>
           error "rur$IRUROK: should never happen"
--         (one? mdeg(p)) and (ground? init(p)) =>
         (mdeg(p) = 1) and (ground? init(p)) =>
           ts := internalAugment(p,ts)
           wip := [lp,ts]
           toSee := cons(wip,toSee)
         lts := makeLinearAndMonic(p,xi,ts,univ?,false,false)
         for ts in lts repeat
           wip := [lp,ts]
           toSee := cons(wip,toSee)
       toSave

@
\section{package RURPK RationalUnivariateRepresentationPackage}
<<package RURPK RationalUnivariateRepresentationPackage>>=
)abbrev package RURPK RationalUnivariateRepresentationPackage
++ Author: Marc Moreno Maza
++ Date Created: 01/1999
++ Date Last Updated: 23/01/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Description: 
++   A package for computing the rational univariate representation
++   of a zero-dimensional algebraic variety given by a regular
++   triangular set. This package is essentially an interface for the
++  \spadtype{InternalRationalUnivariateRepresentationPackage} constructor.
++  It is used in the \spadtype{ZeroDimensionalSolvePackage}
++  for solving polynomial systems with finitely many solutions.
++ Version: 1.

RationalUnivariateRepresentationPackage(R,ls): Exports == Implementation where
  R : Join(EuclideanDomain,CharacteristicZero)
  ls: List Symbol
  N ==> NonNegativeInteger
  Z ==> Integer
  P ==> Polynomial R
  LP ==> List P
  U ==> SparseUnivariatePolynomial(R)
  RUR ==> Record(complexRoots: U, coordinates: LP) 

  Exports ==  with

     rur: (LP,Boolean) -> List RUR
       ++ \spad{rur(lp,univ?)} returns a rational univariate representation
       ++ of \spad{lp}. This assumes that \spad{lp} defines a regular 
       ++ triangular \spad{ts} whose associated variety is zero-dimensional
       ++ over \spad{R}. \spad{rur(lp,univ?)} returns a list of items
       ++ \spad{[u,lc]} where \spad{u} is an irreducible univariate polynomial 
       ++ and each \spad{c} in \spad{lc} involves two variables: one from \spad{ls},
       ++ called the coordinate of \spad{c}, and an extra variable which 
       ++ represents any root of \spad{u}. Every root of \spad{u} leads to
       ++ a tuple of values for the coordinates of \spad{lc}. Moreover,
       ++ a point \spad{x} belongs to the variety associated with \spad{lp} iff
       ++ there exists an item \spad{[u,lc]} in \spad{rur(lp,univ?)} and
       ++ a root \spad{r} of \spad{u} such that \spad{x} is given by the 
       ++ tuple of values for the coordinates of \spad{lc} evaluated at \spad{r}.
       ++ If \spad{univ?} is \spad{true} then each polynomial \spad{c}
       ++ will have a constant leading coefficient w.r.t. its coordinate.
       ++ See the example which illustrates the \spadtype{ZeroDimensionalSolvePackage}
       ++ package constructor.
     rur: (LP) -> List RUR
       ++ \spad{rur(lp)} returns the same as \spad{rur(lp,true)} 
     rur: (LP,Boolean,Boolean) -> List RUR
       ++ \spad{rur(lp,univ?,check?)} returns the same as \spad{rur(lp,true)}.
       ++ Moreover, if \spad{check?} is \spad{true} then the result is checked.

  Implementation == add
     news: Symbol := new()$Symbol
     lv: List Symbol := concat(ls,news)
     V ==> OrderedVariableList(lv)
     Q ==> NewSparseMultivariatePolynomial(R,V)
     E ==> IndexedExponents V
     TS ==> SquareFreeRegularTriangularSet(R,E,V,Q)
     QWT ==> Record(val: Q, tower: TS)
     LQWT ==> Record(val: List Q, tower: TS)
     polsetpack ==> PolynomialSetUtilitiesPackage(R,E,V,Q)
     normpack ==> NormalizationPackage(R,E,V,Q,TS)
     rurpack ==> InternalRationalUnivariateRepresentationPackage(R,E,V,Q,TS)
     newv: V := variable(news)::V
     newq : Q := newv :: Q
     
     rur(lp: List P, univ?: Boolean, check?: Boolean): List RUR ==
       lp := remove(zero?,lp)
       empty? lp =>
         error "rur$RURPACK: #1 is empty"
       any?(ground?,lp) =>
         error "rur$RURPACK: #1 is not a triangular set"
       ts: TS := [[newq]$(List Q)]       
       lq: List Q := []
       for p in lp repeat
         rif: Union(Q,"failed") := retractIfCan(p)$Q
         rif case "failed" =>
           error "rur$RURPACK: #1 is not a subset of R[ls]"
         q: Q := rif::Q
         lq := cons(q,lq)
       lq := sort(infRittWu?,lq)
       toSee: List LQWT := [[lq,ts]$LQWT]
       toSave: List TS := []
       while not empty? toSee repeat
         lqwt := first toSee; toSee := rest toSee
         lq := lqwt.val; ts := lqwt.tower
         empty? lq => 
           -- output(ts::OutputForm)$OutputPackage
           toSave := cons(ts,toSave)
         q := first lq; lq := rest lq
         not (mvar(q) > mvar(ts)) =>
           error "rur$RURPACK: #1 is not a triangular set"
         empty? (rest(ts)::TS) =>  
           lfq := irreducibleFactors([q])$polsetpack 
           for fq in lfq repeat
             newts := internalAugment(fq,ts)
             newlq := [remainder(q,newts).polnum for q in lq]
             toSee := cons([newlq,newts]$LQWT,toSee)
         lsfqwt: List QWT := squareFreePart(q,ts)
         for qwt in lsfqwt repeat
           q := qwt.val; ts := qwt.tower
           if not ground? init(q)
             then
               q := normalizedAssociate(q,ts)$normpack
           newts := internalAugment(q,ts)           
           newlq := [remainder(q,newts).polnum for q in lq]
           toSee := cons([newlq,newts]$LQWT,toSee)
       toReturn: List RUR := []
       for ts in toSave repeat
         lus := rur(ts,univ?)$rurpack 
         check? and (not checkRur(ts,lus)$rurpack) =>
           output("RUR for: ")$OutputPackage
           output(ts::OutputForm)$OutputPackage
           output("Is: ")$OutputPackage
           for us in lus repeat output(us::OutputForm)$OutputPackage
           error "rur$RURPACK: bad result with function rur$IRURPK"
         for us in lus repeat
            g: U  := univariate(select(us,newv)::Q)$Q
            lc: LP := [convert(q)@P for q in parts(collectUpper(us,newv))]
            toReturn := cons([g,lc]$RUR, toReturn)
       toReturn 

     rur(lp: List P, univ?: Boolean): List RUR ==
       rur(lp,univ?,false)

     rur(lp: List P): List RUR == rur(lp,true)

@
\section{package ZDSOLVE ZeroDimensionalSolvePackage}
Based on triangular decompositions and the {\bf RealClosure} constructor,
the pacakge {\bf ZeroDimensionalSolvePackage} provides operations for
computing symbolically the real or complex roots of polynomial systems
with finitely many solutions.
<<package ZDSOLVE ZeroDimensionalSolvePackage>>=
)abbrev package ZDSOLVE ZeroDimensionalSolvePackage
++ Author: Marc Moreno Maza
++ Date Created: 23/01/1999
++ Date Last Updated: 08/02/1999
++ Basic Functions:
++ Related Constructors:
++ Also See: 
++ AMS Classifications:
++ Keywords:
++ References:
++ Description: 
++   A package for computing symbolically the complex and real roots of 
++   zero-dimensional algebraic systems over the integer or rational
++   numbers. Complex roots are given by means of univariate representations
++   of irreducible regular chains. Real roots are given by means of tuples
++   of coordinates lying in the \spadtype{RealClosure} of the coefficient ring.
++   This constructor takes three arguments. The first one \spad{R} is the
++   coefficient ring. The second one \spad{ls} is the list of variables involved 
++   in the systems to solve. The third one must be \spad{concat(ls,s)} where
++   \spad{s} is an additional symbol used for the univariate representations.
++   WARNING: The third argument is not checked.
++   All operations are based on triangular decompositions.
++   The default is to compute these decompositions directly from the input
++   system by using the \spadtype{RegularChain} domain constructor.
++   The lexTriangular algorithm can also be used for computing these decompositions
++   (see the \spadtype{LexTriangularPackage} package constructor).
++   For that purpose, the operations \axiomOpFrom{univariateSolve}{ZeroDimensionalSolvePackage},
++   \axiomOpFrom{realSolve}{ZeroDimensionalSolvePackage} and 
++   \axiomOpFrom{positiveSolve}{ZeroDimensionalSolvePackage} admit an optional 
++   argument. \newline Author: Marc Moreno Maza.
 
++ Version: 1.

ZeroDimensionalSolvePackage(R,ls,ls2): Exports == Implementation where
  R : Join(OrderedRing,EuclideanDomain,CharacteristicZero,RealConstant)
  ls: List Symbol
  ls2: List Symbol
  V ==> OrderedVariableList(ls)
  N ==> NonNegativeInteger
  Z ==> Integer
  B ==> Boolean
  P ==> Polynomial R
  LP ==> List P
  LS ==> List Symbol
  Q ==> NewSparseMultivariatePolynomial(R,V)
  U ==> SparseUnivariatePolynomial(R)
  TS ==> RegularChain(R,ls)
  RUR ==> Record(complexRoots: U, coordinates: LP) 
  K ==> Fraction R
  RC ==> RealClosure(K)
  PRC ==> Polynomial RC
  REALSOL ==> List RC
  URC ==> SparseUnivariatePolynomial RC
  V2 ==> OrderedVariableList(ls2)
  Q2 ==> NewSparseMultivariatePolynomial(R,V2)
  E2 ==> IndexedExponents V2
  ST ==> SquareFreeRegularTriangularSet(R,E2,V2,Q2)
  Q2WT ==> Record(val: Q2, tower: ST)
  LQ2WT ==> Record(val: List(Q2), tower: ST)
  WIP ==> Record(reals: List(RC), vars: List(Symbol), pols: List(Q2))
  polsetpack ==> PolynomialSetUtilitiesPackage(R,E2,V2,Q2)
  normpack ==> NormalizationPackage(R,E2,V2,Q2,ST)
  rurpack ==> InternalRationalUnivariateRepresentationPackage(R,E2,V2,Q2,ST)
  quasicomppack ==> SquareFreeQuasiComponentPackage(R,E2,V2,Q2,ST)
  lextripack ==> LexTriangularPackage(R,ls)

  Exports ==  with
     triangSolve: (LP,B,B) -> List RegularChain(R,ls)
       ++ \spad{triangSolve(lp,info?,lextri?)} decomposes the variety
       ++ associated with \axiom{lp} into regular chains.
       ++ Thus a point belongs to this variety iff it is a regular
       ++ zero of a regular set in in the output.
       ++ Note that \axiom{lp} needs to generate a zero-dimensional ideal.
       ++ If \axiom{lp} is not zero-dimensional then the result is only
       ++ a decomposition of its zero-set in the sense of the closure
       ++ (w.r.t. Zarisky topology).
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during the computations.
       ++ See \axiomOpFrom{zeroSetSplit}{RegularTriangularSetCategory}(lp,true,info?).
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
     triangSolve: (LP,B) -> List RegularChain(R,ls)
       ++ \spad{triangSolve(lp,info?)} returns the same as \spad{triangSolve(lp,false)}
     triangSolve: LP -> List RegularChain(R,ls)
       ++ \spad{triangSolve(lp)} returns the same as \spad{triangSolve(lp,false,false)}
     univariateSolve: RegularChain(R,ls) -> List Record(complexRoots: U, coordinates: LP) 
       ++ \spad{univariateSolve(ts)} returns a univariate representation
       ++ of \spad{ts}.
       ++ See \axiomOpFrom{rur}{RationalUnivariateRepresentationPackage}(lp,true).
     univariateSolve: (LP,B,B,B) -> List RUR
       ++ \spad{univariateSolve(lp,info?,check?,lextri?)} returns a univariate 
       ++ representation of the variety associated with \spad{lp}. 
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during the decomposition into regular chains.
       ++ If \spad{check?} is \spad{true} then the result is checked.
       ++ See \axiomOpFrom{rur}{RationalUnivariateRepresentationPackage}(lp,true).
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
     univariateSolve: (LP,B,B) -> List RUR
       ++ \spad{univariateSolve(lp,info?,check?)} returns the same as
       ++ \spad{univariateSolve(lp,info?,check?,false)}.
     univariateSolve: (LP,B) -> List RUR
       ++ \spad{univariateSolve(lp,info?)} returns the same as
       ++ \spad{univariateSolve(lp,info?,false,false)}.
     univariateSolve: LP -> List RUR
       ++ \spad{univariateSolve(lp)} returns the same as
       ++ \spad{univariateSolve(lp,false,false,false)}.
     realSolve: RegularChain(R,ls) -> List REALSOL
       ++ \spad{realSolve(ts)} returns the set of the points in the regular
       ++ zero set of \spad{ts} whose coordinates are all real.
       ++ WARNING: For each set of coordinates given by \spad{realSolve(ts)} 
       ++ the ordering of the indeterminates is reversed w.r.t. \spad{ls}.
     realSolve: (LP,B,B,B) -> List REALSOL
       ++ \spad{realSolve(ts,info?,check?,lextri?)} returns the set of the points 
       ++ in the variety associated with \spad{lp} whose coordinates are all real.
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during decomposition into regular chains.
       ++ If \spad{check?} is \spad{true} then the result is checked.
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
       ++ WARNING: For each set of coordinates given by \spad{realSolve(ts,info?,check?,lextri?)}
       ++ the ordering of the indeterminates is reversed w.r.t. \spad{ls}.
     realSolve: (LP,B,B) -> List REALSOL
       ++ \spad{realSolve(ts,info?,check?)} returns the same as \spad{realSolve(ts,info?,check?,false)}.
     realSolve: (LP,B) -> List REALSOL
       ++ \spad{realSolve(ts,info?)} returns the same as \spad{realSolve(ts,info?,false,false)}.
     realSolve: LP -> List REALSOL
       ++ \spad{realSolve(lp)} returns the same as \spad{realSolve(ts,false,false,false)} 
     positiveSolve: RegularChain(R,ls)  -> List REALSOL
       ++ \spad{positiveSolve(ts)} returns the points of the regular
       ++ set of \spad{ts} with (real) strictly positive coordinates.
     positiveSolve: (LP,B,B) -> List REALSOL
       ++ \spad{positiveSolve(lp,info?,lextri?)} returns the set of the points 
       ++ in the variety associated with \spad{lp} whose coordinates are (real) strictly positive.
       ++ Moreover, if \spad{info?} is \spad{true} then some information is 
       ++ displayed during decomposition into regular chains.
       ++ If \spad{lextri?} is \spad{true} then the lexTriangular algorithm is called
       ++ from the \spadtype{LexTriangularPackage} constructor
       ++ (see \axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,false)).
       ++ Otherwise, the triangular decomposition is computed directly from the input
       ++ system by using the \axiomOpFrom{zeroSetSplit}{RegularChain} from \spadtype{RegularChain}.
       ++ WARNING: For each set of coordinates given by \spad{positiveSolve(lp,info?,lextri?)} 
       ++ the ordering of the indeterminates is reversed w.r.t. \spad{ls}.
     positiveSolve: (LP,B) -> List REALSOL
       ++ \spad{positiveSolve(lp)} returns the same as \spad{positiveSolve(lp,info?,false)}.
     positiveSolve: LP -> List REALSOL
       ++ \spad{positiveSolve(lp)} returns the same as \spad{positiveSolve(lp,false,false)}.
     squareFree: (TS) -> List ST
       ++ \spad{squareFree(ts)} returns the square-free factorization of \spad{ts}.
       ++ Moreover, each factor is a Lazard triangular set and the decomposition 
       ++ is a Kalkbrener split of \spad{ts}, which is enough here for
       ++ the matter of solving zero-dimensional algebraic systems.
       ++ WARNING: \spad{ts} is not checked to be zero-dimensional.
     convert: Q -> Q2
       ++ \spad{convert(q)} converts \spad{q}.
     convert: P -> PRC
       ++ \spad{convert(p)} converts \spad{p}.
     convert: Q2 -> PRC
       ++ \spad{convert(q)} converts \spad{q}.
     convert: U -> URC
       ++ \spad{convert(u)} converts \spad{u}.
     convert: ST -> List Q2
       ++ \spad{convert(st)} returns the members of \spad{st}.	

  Implementation == add
     news: Symbol := last(ls2)$(List Symbol)
     newv: V2 := (variable(news)$V2)::V2
     newq: Q2 :=  newv :: Q2

     convert(q:Q):Q2 ==
       ground? q => (ground(q))::Q2
       q2: Q2 := 0
       while not ground?(q) repeat
         v: V := mvar(q)
         d: N := mdeg(q)
         v2: V2 := (variable(convert(v)@Symbol)$V2)::V2
         iq2: Q2 := convert(init(q))@Q2 
         lq2: Q2 := (v2 :: Q2)
         lq2 := lq2 ** d
         q2 := iq2 * lq2 + q2
         q := tail(q)
       q2 + (ground(q))::Q2

     squareFree(ts:TS):List(ST) == 
       irred?: Boolean := false
       st: ST := [[newq]$(List Q2)]      
       lq: List(Q2) := [convert(p)@Q2 for p in parts(ts)]
       lq := sort(infRittWu?,lq)
       toSee: List LQ2WT := []
       if irred?
         then
           lf := irreducibleFactors([first lq])$polsetpack
           lq := rest lq
           for f in lf repeat
             toSee := cons([cons(f,lq),st]$LQ2WT, toSee)
         else
           toSee := [[lq,st]$LQ2WT]
       toSave: List ST := []
       while not empty? toSee repeat
         lqwt := first toSee; toSee := rest toSee
         lq := lqwt.val; st := lqwt.tower
         empty? lq => 
           toSave := cons(st,toSave)
         q := first lq; lq := rest lq
         lsfqwt: List Q2WT := squareFreePart(q,st)$ST
         for sfqwt in lsfqwt repeat
           q := sfqwt.val; st := sfqwt.tower
           if not ground? init(q)
             then
               q := normalizedAssociate(q,st)$normpack
           newts := internalAugment(q,st)$ST      
           newlq := [remainder(q,newts).polnum for q in lq]
           toSee := cons([newlq,newts]$LQ2WT,toSee)
       toSave


     triangSolve(lp: LP, info?: B, lextri?: B): List TS ==
       lq: List(Q) := [convert(p)$Q for p in lp]
       lextri? => zeroSetSplit(lq,false)$lextripack
       zeroSetSplit(lq,true,info?)$TS

     triangSolve(lp: LP, info?: B): List TS == triangSolve(lp,info?,false)

     triangSolve(lp: LP): List TS == triangSolve(lp,false)

     convert(u: U): URC ==
       zero? u => 0
       ground? u => ((ground(u) :: K)::RC)::URC
       uu: URC := 0
       while not ground? u repeat
         uu := monomial((leadingCoefficient(u) :: K):: RC,degree(u)) + uu
         u := reductum u
       uu + ((ground(u) :: K)::RC)::URC

     coerceFromRtoRC(r:R): RC ==
       (r::K)::RC

     convert(p:P): PRC ==
       map(coerceFromRtoRC,p)$PolynomialFunctions2(R,RC)

     convert(q2:Q2): PRC ==
       p: P := coerce(q2)$Q2
       convert(p)@PRC
       
     convert(sts:ST): List Q2 ==
       lq2: List(Q2) := parts(sts)$ST
       lq2 := sort(infRittWu?,lq2)
       rest(lq2)

     realSolve(ts: TS): List REALSOL ==
       lsts: List ST := squareFree(ts)
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       toSave

     realSolve(lp: List(P), info?:Boolean, check?:Boolean, lextri?: Boolean): List REALSOL  ==
       lts: List TS
       lq: List(Q) := [convert(p)$Q for p in lp]
       if lextri?
         then
           lts := zeroSetSplit(lq,false)$lextripack
         else
           lts := zeroSetSplit(lq,true,info?)$TS
       lsts:  List ST := []
       for ts in lts repeat 
         lsts := concat(squareFree(ts), lsts)
       lsts := removeSuperfluousQuasiComponents(lsts)$quasicomppack   
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       if check?
         then
           for p in lp repeat
             for realsol in toSave repeat
               prc: PRC := convert(p)@PRC
               for rr in realsol for symb in reverse(ls) repeat
                 prc := eval(prc,symb,rr)
               not zero? prc =>
                 error "realSolve$ZDSOLVE: bad result"
       toSave

     realSolve(lp: List(P), info?:Boolean, check?:Boolean): List REALSOL  ==
       realSolve(lp,info?,check?,false)
         
     realSolve(lp: List(P), info?:Boolean): List REALSOL  ==
       realSolve(lp,info?,false,false)

     realSolve(lp: List(P)): List REALSOL  ==
       realSolve(lp,false,false,false)

     positiveSolve(ts: TS): List REALSOL ==
       lsts: List ST := squareFree(ts)
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           if positive? urcRoot
             then 
               toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       toSave

     positiveSolve(lp: List(P), info?:Boolean, lextri?: Boolean): List REALSOL  ==
       lts: List TS
       lq: List(Q) := [convert(p)$Q for p in lp]
       if lextri?
         then
           lts := zeroSetSplit(lq,false)$lextripack
         else
           lts := zeroSetSplit(lq,true,info?)$TS
       lsts:  List ST := []
       for ts in lts repeat 
         lsts := concat(squareFree(ts), lsts)
       lsts := removeSuperfluousQuasiComponents(lsts)$quasicomppack   
       lr: REALSOL := []
       lv: List Symbol := []
       toSee := [[lr,lv,convert(sts)@(List Q2)]$WIP for sts in lsts]
       toSave: List REALSOL := []
       while not empty? toSee repeat
         wip := first toSee; toSee := rest toSee
         lr := wip.reals; lv := wip.vars; lq2 := wip.pols
         (empty? lq2) and (not empty? lr) => 
            toSave := cons(reverse(lr),toSave)
         q2 := first lq2; lq2 := rest lq2
         qrc := convert(q2)@PRC
         if not empty? lr 
           then
             for r in reverse(lr) for v in reverse(lv) repeat
               qrc := eval(qrc,v,r)
         lv := cons((mainVariable(qrc) :: Symbol),lv)
         urc: URC := univariate(qrc)@URC
         urcRoots := allRootsOf(urc)$RC
         for urcRoot in urcRoots repeat
           if positive? urcRoot
             then 
               toSee := cons([cons(urcRoot,lr),lv,lq2]$WIP, toSee)
       toSave

     positiveSolve(lp: List(P), info?:Boolean): List REALSOL  ==
       positiveSolve(lp, info?, false)

     positiveSolve(lp: List(P)): List REALSOL  ==
       positiveSolve(lp, false, false)

     univariateSolve(ts: TS): List RUR ==
       toSee: List ST := squareFree(ts)
       toSave: List RUR := []
       for st in toSee repeat
         lus: List ST := rur(st,true)$rurpack 
         for us in lus repeat
           g: U  := univariate(select(us,newv)::Q2)$Q2
           lc: LP := [convert(q2)@P for q2 in parts(collectUpper(us,newv)$ST)$ST]
           toSave := cons([g,lc]$RUR, toSave)
       toSave

     univariateSolve(lp: List(P), info?:Boolean, check?:Boolean, lextri?: Boolean): List RUR ==
       lts: List TS
       lq: List(Q) := [convert(p)$Q for p in lp]
       if lextri?
         then
           lts := zeroSetSplit(lq,false)$lextripack
         else
           lts := zeroSetSplit(lq,true,info?)$TS
       toSee:  List ST := []
       for ts in lts repeat 
         toSee := concat(squareFree(ts), toSee)
       toSee := removeSuperfluousQuasiComponents(toSee)$quasicomppack   
       toSave: List RUR := []
       if check?
         then
           lq2: List(Q2) := [convert(p)$Q2 for p in lp]
       for st in toSee repeat
         lus: List ST := rur(st,true)$rurpack 
         for us in lus repeat
            if check?
              then
                rems: List(Q2) := [removeZero(q2,us)$ST for q2 in lq2]
                not every?(zero?,rems) =>
                  output(st::OutputForm)$OutputPackage
                  output("Has a bad RUR component:")$OutputPackage
                  output(us::OutputForm)$OutputPackage
                  error "univariateSolve$ZDSOLVE: bad RUR"
            g: U  := univariate(select(us,newv)::Q2)$Q2
            lc: LP := [convert(q2)@P for q2 in parts(collectUpper(us,newv)$ST)$ST]
            toSave := cons([g,lc]$RUR, toSave)
       toSave

     univariateSolve(lp: List(P), info?:Boolean, check?:Boolean): List RUR ==
       univariateSolve(lp,info?,check?,false)

     univariateSolve(lp: List(P), info?:Boolean): List RUR ==
       univariateSolve(lp,info?,false,false)

     univariateSolve(lp: List(P)): List RUR ==
       univariateSolve(lp,false,false,false)

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<package FGLMICPK FGLMIfCanPackage>>
<<domain RGCHAIN RegularChain>>
<<package LEXTRIPK LexTriangularPackage>>
<<package IRURPK InternalRationalUnivariateRepresentationPackage>>
<<package RURPK RationalUnivariateRepresentationPackage>>
<<package ZDSOLVE ZeroDimensionalSolvePackage>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
