\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra retract.spad}
\author{Manuel Bronstein}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{package INTRET IntegerRetractions}
<<dot>>=
"INTRET" -> "PACKAGE"
"IntegerRetractions(a:RetractableTo(Integer))" -> "Package"
@
<<package INTRET IntegerRetractions>>=
)abbrev package INTRET IntegerRetractions
++ Author: Manuel Bronstein
++ Description: Provides integer testing and retraction functions.
++ Date Created: March 1990
++ Date Last Updated: 9 April 1991
IntegerRetractions(S:RetractableTo(Integer)): with
    integer     : S -> Integer
      ++ integer(x) returns x as an integer;
      ++ error if x is not an integer;
    integer?    : S -> Boolean
      ++ integer?(x) is true if x is an integer, false otherwise;
    integerIfCan: S -> Union(Integer, "failed")
      ++ integerIfCan(x) returns x as an integer,
      ++ "failed" if x is not an integer;
  == add
    integer s      == retract s
    integer? s     == retractIfCan(s) case Integer
    integerIfCan s == retractIfCan s

@
\section{package RATRET RationalRetractions}
<<dot>>=
"RATRET" -> "PACKAGE"
"RationalRetractions(a:RetractableTo(Fraction Integer))" -> "Package"
@
<<package RATRET RationalRetractions>>=
)abbrev package RATRET RationalRetractions
++ Author: Manuel Bronstein
++ Description: rational number testing and retraction functions.
++ Date Created: March 1990
++ Date Last Updated: 9 April 1991
RationalRetractions(S:RetractableTo(Fraction Integer)): with
    rational     : S -> Fraction Integer
      ++ rational(x) returns x as a rational number;
      ++ error if x is not a rational number;
    rational?    : S -> Boolean
      ++ rational?(x) returns true if x is a rational number,
      ++ false otherwise;
    rationalIfCan: S -> Union(Fraction Integer, "failed")
      ++ rationalIfCan(x) returns x as a rational number,
      ++ "failed" if x is not a rational number;
  == add
    rational s      == retract s
    rational? s     == retractIfCan(s) case Fraction(Integer)
    rationalIfCan s == retractIfCan s

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>
 
<<package INTRET IntegerRetractions>>
<<package RATRET RationalRetractions>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
