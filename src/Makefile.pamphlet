%% Oh Emacs, this is a -*- Makefile -*-, so give me tabs.
\documentclass{article}
\usepackage{scripts/tex/axiom}
\begin{document}
\title{\$SPAD/src Makefile}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject

\section{Directory overview}

\subsection{Environment variables}

These variables are used to drive the make, make document, and
make clean processes, respectively.

There is a partial order of the directories which is not apparent.

The [[boot]] must occur first as it builds the boot language
compiler and the [[bootsys]] image.

The [[interp]] must come second because it builds the interpreter
and the [[interpsys]] image, which is the basic algebra engine.

The [[share]] must occur before the [[algebra]] because it
needs to put the databases in the proper location.

The [[algebra]] comes next. It contains the source code for all
of the algebra that Axiom knows.

The [[etc]] must occur after the [[algebra]] because it
builds the databases from all of the [[*.NRLIB]] directories
constructed by [[algebra]].

The [[input]] needs to occur last because it tests
various other parts of the system. 

The [[SUBDIRS]] variable is a list of directory targets. 
Since this varies from system to system it has been lifted
up to the top level [[configure.ac.pamphlet]]. If you add a new
stanza to this Makefile you should check that list. 
<<environment>>=

SUBDIRS = @SRC_SUBDIRS@

clef-stamp = clef/stamp
sman-stamp = sman/stamp
hyper-stamp = hyper/stamp
share-stamp = share/stamp
book-stamp = booklets/stamp
lib-stamp = lib/stamp
boot-stamp = boot/stamp
interp-stamp = interp/stamp
alg-stamp = algebra/stamp
input-stamp = input/stamp
etc-stamp = etc/stamp
doc-stamp = doc/stamp
graph-stamp = graph/stamp

@
\subsection{The scripts directory}

The {\bf scripts} directory contains shell scripts that we use
to simplify system builds. They are generally either generated by
[[confiugure]], or directly copied to the final directory.   We might
want to revisit that design point.

\subsection{The clef directory}

The {\bf clef} directory contains an Axiom command that works similar
to GNU Readline.
<<clefdir>>=
$(clef-stamp): 
	@echo 5 making $(axiom_src_srcdir)/clef
	@ $(mkinstalldirs) ${OBJ}/${SYS}/clef
	@ cd clef && ${ENV} ${MAKE}
@

\subsection{The clef directory}

Superman (sman) is the master process that runs all of the other
processes including axiom, clef, nagman, graphics, and hyperdoc
<<smandir>>=
$(sman-stamp): $(lib-stamp)
	@echo 5 making $(axiom_src_srcdir)/sman
	@ $(mkinstalldirs) ${INT}/sman
	@ $(mkinstalldirs) ${OBJ}/${SYS}/sman
	@ cd sman && ${ENV} ${MAKE}
@

\subsection{The hyper directory}

Hyperdoc is the Axiom document browser.
<<hyperdir>>=
$(hyper-stamp): $(lib-stamp)
	@echo 13 making $(axiom_src_srcdir)/hyper
	@ $(mkinstalldirs) ${INT}/hyper
	@ $(mkinstalldirs) ${OBJ}/${SYS}/hyper
	@ $(mkinstalldirs) ${OBJ}/${SYS}/bin
	@ $(mkinstalldirs) ${OBJ}/${SYS}/lib
	@ cd hyper && ${ENV} ${MAKE}
@

\subsection{The share directory}

The {\bf share} directory files that are shared by all version of the
system.

<<sharedir>>=
$(share-stamp): $(interp-stamp)
	@echo 9 making $(axiom_src_srcdir)/share
	@ cd share && ${ENV} ${MAKE}
@

\subsection{The booklet directory}

The {\bf booklet} directory contains pamphlet files that document
Axiom at a "higher level" than any particular pamphlet file. Booklets
can be stand-alone descriptions (e.g. the Rosetta.pamphlet), 
top-down slices thru the system (e.g. the Integration.pamphlet),
or horizontal slices thru the system (e.g. the Matrix.pamphlet).
<<bookletsdir>>=
$(book-stamp): 
	@echo 13 making $(axiom_src_srcdir)/booklets
	@cd booklets && ${ENV} ${MAKE}
@

\subsection{The lib directory}

The {\bf lib} directory is used to build {\bf libspad.a} which 
contains C code for extending the underlying Common Lisp systems.
It is built early in the process of system building because we
need to make {\bf libspad.a} before we make the Common Lisps.

<<libdir>>=
$(lib-stamp):
	@echo 17 making $(builddir)/lib
	@$(mkinstalldirs) ${INT}/lib
	@$(mkinstalldirs) ${OBJ}/${SYS}/lib
	@$(mkinstalldirs) ${INT}/doc/src/lib
	@cd lib && ${ENV} ${MAKE}
@

\subsection{The boot directory}

Axiom is built in layers. The first layer is contructed into
an image called {\bf bootsys}. The {\bf bootsys} image is used
to translate boot code to common lisp code. Since a boot coded
interpreter is needed to translate the code for the boot coded
interpreter we have a "boot-strapping" problem. In order to get
the whole process to start we need certain files kept in 
common lisp form. This directory contains those files.

<<bootdir>>=
$(boot-stamp): $(lib-stamp)
	@echo 21 making $(srcdir)/boot
	@cd boot && ${ENV} ${MAKE}
@

\subsection{The interp directory}

Once {\bf bootsys} exists we need to build {\bf depsys}
and {\bf interpsys}. Since these two images share a lot of
files they are built in the interp subdirectory using the
same Makefile.
<<interpdir>>=
$(interp-stamp): $(boot-stamp)
	@echo 25 making ${INT}/interp
	@$(mkinstalldirs) ${INT}/interp
	@$(mkinstalldirs) ${INT}/algebra
	@$(mkinstalldirs) ${OBJ}/${SYS}/interp
	@cd interp && ${ENV} ${MAKE}
@

\subsection{The algebra directory}

The algebra directory contains code written in Axiom's computer
algebra language called {\bf spad}. There are two compilers for
this language, the spad compiler and the {\bf Aldor}\cite{1} compiler.

Both of these compilers accept the same input language except for
some platform-dependent differences. The spad compiler is written
in Common Lisp (well, in boot, anyway) and is built into the 
interpreter. The Aldor compiler is written in C and runs
stand-alone. Both compile files that will run in Axiom's 
interpreter. Files which end in ``.spad'' use the internal 
spad compiler. Files which end in ``.as'' use the external
Aldor compiler.

\subsubsection{Making the Makefile}

The main body of the algebra Makefile is extracted from the
Makefile.pamphlet file as usual. It contains generic rules for
making all the .spad files in a series of ``layers'' such that
each layer depends on only those layers that preceed it, beginning
with the bootstap layer. Because the individual .spad files are
grouped into higher-level algebra pamphlet files, the rules for
extracting them are derived from a simple script [[findAlgebraFiles]] which
appends these additional rules to the Makefile.

The [[src/algebra/Makefile]] is specially constructed in two
steps. The first step uses the [[document]] command to extract
the normal Makefile information.

The second step is to extend the [[src/algebra/Makefile]] with
stanzas that describe the steps to extract the algebra from the
[[src/algebra/*.pamphlet]] files into the [[int/algebra/*.spad]] files.
Further details are provided in [[src/algebra/Makefile.dvi]] file.

<<algebradir>>=
$(alg-stamp): $(share-stamp)
	@echo 29 making $(builddir)/algebra
	@ $(mkinstalldirs) ${INT}/algebra
	@ $(mkinstalldirs) ${INT}/input
	@ $(mkinstalldirs) ${OBJ}/${SYS}/algebra
	$(TANGLE) -t8 -RfindAlgebraFiles $(srcdir)/algebra/Makefile.pamphlet \
                  > $(INT)/algebra/findAlgebraFiles && \
	echo 30b running ${INT}/algebra/findAlgebraFiles && \
	(cd $(srcdir)/algebra && . $(INT)/algebra/findAlgebraFiles) \
          >> $(builddir)/algebra/more-rules.mk
	cd algebra && ${ENV} ${MAKE}
@

\subsection{The input directory}

The input directory contains code used for examples, regression
testing, and bug tracking. In a shipped system the working examples
are collected and documented so a user can learn how to use Axiom's
many domains and packages.

During development the input files can be used for tracking bugs
and testing fixes of known bugs. Once a bug is fixed it is moved
to the regression test set.

Prior to building a shippable system all of the input files are
run with the example code and the regression test code. Regression
test input files are compared against known good results to ensure
that nothing has been broken in the process of fixing bugs.

<<inputdir>>=
$(input-stamp): $(alg-stamp) $(etc-stamp) $(clef-stamp)
	@echo 33 making ${INT}/input
	@ $(mkinstalldirs) ${INT}/input
	@ cd input && ${ENV} ${MAKE}
@

\subsection{The etc directory}

The etc directory contains code used as tools surrounding Axiom.

The asq \cite{2} command, contained in this directory, is useful
for finding detailed information about domains, packages, and
categories from the shell without running Axiom.
<<etcdir>>=
$(etc-stamp): $(alg-stamp)
	@echo 37 making ${INT}/etc
	@ $(mkinstalldirs) ${OBJ}/${SYS}/etc
	@ cd etc && ${ENV} ${MAKE}
@

\subsection{The doc directory}
The doc directory contains code used for documenting Axiom.

<<docdir>>=
$(doc-stamp):
	@echo 41 making ${INT}/doc
	@ $(mkinstalldirs) ${INT}/doc
	@ cd doc && ${ENV} ${MAKE}
@

\subsection{The graph directory}

<<graphdir>>=
$(graph-stamp): $(lib-stamp)
	@echo 45 making ${INT}/graph
	@ $(mkinstalldirs) ${INT}/graph/parabola
	@ $(mkinstalldirs) ${OBJ}/${SYS}/graph
	@ cd graph && ${ENV} ${MAKE}
@

\section{The Makefile}
This Makefile gets called by the {\bf libdir} stanza is executed to
build {\bf libspad.a} which contains code needed by the underlying lisp.

The second call will execute the {\bf all} stanza. This stanza walks 
all of the lower level directories.
<<*>>=

<<environment>>

pamphlets = Makefile.pamphlet

subdir = src/

all: $(addsuffix /stamp, $(SUBDIRS))
	@echo 49 finished $(builddir)

<<clefdir>>
<<smandir>>
<<hyperdir>>
<<sharedir>>
<<docdir>>
<<bookletsdir>>
<<libdir>>
<<bootdir>>
<<interpdir>>
<<algebradir>>
<<inputdir>>
<<etcdir>>
<<graphdir>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} Watt, Stephen, The Aldor compiler, {\bf www.aldor.org}
\bibitem{2} \$AXIOM/src/etc/asq.c.pamphlet
\bibitem{3} \$AXIOM/src/clef/edible.c.pamphlet
\end{thebibliography}
\end{document}
