\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/input int.input}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{License}
\begin{chunk}{license}
--Copyright The Numerical Algorithms Group Limited 1991.
\end{chunk}
\begin{chunk}{*}
)set break resume
)spool int.output
)set message test on
)set message auto off
)clear all
--S 1 of 47
2**(5678 - 4856 + 2 * 17)
--R 
--R
--R   (1)
--R  4804810770435008147181540925125924391239526139871682263473855610088084200076_
--R   308293086342527091412083743074572278211496076276922026433435687527334980249_
--R   539302425425230458177649495442143929053063884787051467457680738771416988598_
--R   15495632935288783334250628775936
--R                                                        Type: PositiveInteger
--E 1

--S 2 of 47
x := -101
--R 
--R
--R   (2)  - 101
--R                                                                Type: Integer
--E 2

--S 3 of 47
abs(x)
--R 
--R
--R   (3)  101
--R                                                        Type: PositiveInteger
--E 3

--S 4 of 47
sign(x)
--R 
--R
--R   (4)  - 1
--R                                                                Type: Integer
--E 4

--S 5 of 47
x < 0
--R 
--R
--R   (5)  true
--R                                                                Type: Boolean
--E 5

--S 6 of 47
x <= -1
--R 
--R
--R   (6)  true
--R                                                                Type: Boolean
--E 6

--S 7 of 47
negative?(x)
--R 
--R
--R   (7)  true
--R                                                                Type: Boolean
--E 7

--S 8 of 47
x > 0
--R 
--R
--R   (8)  false
--R                                                                Type: Boolean
--E 8

--S 9 of 47
x >= 1
--R 
--R
--R   (9)  false
--R                                                                Type: Boolean
--E 9

--S 10 of 47
positive?(x)
--R 
--R
--R   (10)  false
--R                                                                Type: Boolean
--E 10

--S 11 of 47
zero?(x)
--R 
--R
--R   (11)  false
--R                                                                Type: Boolean
--E 11

--S 12 of 47
one?(x)
--R 
--R
--R   (12)  false
--R                                                                Type: Boolean
--E 12

--S 13 of 47
(x = -101)@Boolean
--R 
--R
--R   (13)  true
--R                                                                Type: Boolean
--E 13

--S 14 of 47
odd?(x)
--R 
--R
--R   (14)  true
--R                                                                Type: Boolean
--E 14

--S 15 of 47
even?(x)
--R 
--R
--R   (15)  false
--R                                                                Type: Boolean
--E 15

--S 16 of 47
gcd(56788,43688)
--R 
--R
--R   (16)  4
--R                                                        Type: PositiveInteger
--E 16

--S 17 of 47
lcm(56788,43688)
--R 
--R
--R   (17)  620238536
--R                                                        Type: PositiveInteger
--E 17

--S 18 of 47
max(678,567)
--R 
--R
--R   (18)  678
--R                                                        Type: PositiveInteger
--E 18

--S 19 of 47
min(678,567)
--R 
--R
--R   (19)  567
--R                                                        Type: PositiveInteger
--E 19

--S 20 of 47
reduce(max,[2,45,-89,78,100,-45])
--R 
--R
--R   (20)  100
--R                                                        Type: PositiveInteger
--E 20

--S 21 of 47
reduce(min,[2,45,-89,78,100,-45])
--R 
--R
--R   (21)  - 89
--R                                                                Type: Integer
--E 21

--S 22 of 47
reduce(gcd,[2,45,-89,78,100,-45])
--R 
--R
--R   (22)  1
--R                                                        Type: PositiveInteger
--E 22

--S 23 of 47
reduce(lcm,[2,45,-89,78,100,-45])
--R 
--R
--R   (23)  1041300
--R                                                        Type: PositiveInteger
--E 23

--S 24 of 47
13 / 4
--R 
--R
--R         13
--R   (24)  --
--R          4
--R                                                       Type: Fraction Integer
--E 24

--S 25 of 47
13 quo 4
--R 
--R
--R   (25)  3
--R                                                        Type: PositiveInteger
--E 25

--S 26 of 47
13 rem 4
--R 
--R
--R   (26)  1
--R                                                        Type: PositiveInteger
--E 26

--S 27 of 47
zero?(167604736446952 rem 2003644)
--R 
--R
--R   (27)  true
--R                                                                Type: Boolean
--E 27

--S 28 of 47
d := divide(13,4)
--R 
--R
--R   (28)  [quotient= 3,remainder= 1]
--R                           Type: Record(quotient: Integer,remainder: Integer)
--E 28

--S 29 of 47
d.quotient
--R 
--R
--R   (29)  3
--R                                                        Type: PositiveInteger
--E 29

--S 30 of 47
d.remainder
--R 
--R
--R   (30)  1
--R                                                        Type: PositiveInteger
--E 30

)clear all

--S 31 of 47
factor 102400
--R 
--R
--R         12 2
--R   (1)  2  5
--R                                                       Type: Factored Integer
--E 31

--S 32 of 47
prime? 7
--R 
--R
--R   (2)  true
--R                                                                Type: Boolean
--E 32

--S 33 of 47
prime? 8
--R 
--R
--R   (3)  false
--R                                                                Type: Boolean
--E 33

--S 34 of 47
nextPrime 100
--R 
--R
--R   (4)  101
--R                                                        Type: PositiveInteger
--E 34

--S 35 of 47
prevPrime 100
--R 
--R
--R   (5)  97
--R                                                        Type: PositiveInteger
--E 35

--S 36 of 47
primes(100,175)
--R 
--R
--R   (6)  [173,167,163,157,151,149,139,137,131,127,113,109,107,103,101]
--R                                                           Type: List Integer
--E 36

--S 37 of 47
factor(2 :: Complex Integer)
--R 
--R
--R                     2
--R   (7)  - %i (1 + %i)
--R                                               Type: Factored Complex Integer
--E 37

)clear all

--S 38 of 47
[fibonacci(k) for k in 0..]
--R 
--R
--R   (1)  [0,1,1,2,3,5,8,13,21,34,...]
--R                                                         Type: Stream Integer
--E 38

--S 39 of 47
[legendre(i,11) for i in 0..10]
--R 
--R
--R   (2)  [0,1,- 1,1,1,1,- 1,- 1,- 1,1,- 1]
--R                                                           Type: List Integer
--E 39

--S 40 of 47
[jacobi(i,15) for i in 0..9]
--R 
--R
--R   (3)  [0,1,1,0,1,0,0,- 1,1,0]
--R                                                           Type: List Integer
--E 40

--S 41 of 47
[eulerPhi i for i in 1..]
--R 
--R
--R   (4)  [1,1,2,2,4,2,6,4,6,4,...]
--R                                                         Type: Stream Integer
--E 41

--S 42 of 47
[moebiusMu i for i in 1..]
--R 
--R
--R   (5)  [1,- 1,- 1,0,- 1,1,- 1,0,0,1,...]
--R                                                         Type: Stream Integer
--E 42

--S 43 of 47
a := roman(78)
--R 
--R
--R   (6)  LXXVIII
--R                                                           Type: RomanNumeral
--E 43

--S 44 of 47
b := roman(87)
--R 
--R
--R   (7)  LXXXVII
--R                                                           Type: RomanNumeral
--E 44

--S 45 of 47
a + b
--R 
--R
--R   (8)  CLXV
--R                                                           Type: RomanNumeral
--E 45

--S 46 of 47
a * b
--R 
--R
--R   (9)  MMMMMMDCCLXXXVI
--R                                                           Type: RomanNumeral
--E 46

--S 47 of 47
b rem a
--R 
--R
--R   (10)  IX
--R                                                           Type: RomanNumeral
--E 47
)spool 
)lisp (bye)
 
\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

 
