LISPSYS= $(axiom_build_bindir)/lisp
LOADSYS= $(axiom_build_bindir)/lisp
BOOTSYS_FOR_TARGET = $(axiom_target_bindir)/bootsys
PROCLAIMS=(load "$(srcdir)/boot-proclaims.lisp")

DEPS=   (load (quote $(patsubst %, "%", npextras.lisp)))

boot_objects = $(boot_objects_without_deps) $(boot_objects_with_deps)
boot_sources_without_deps = boothdr.lisp exports.lisp npextras.lisp
boot_objects_without_deps = $(boot_sources_without_deps:.lisp=.$(OBJEXT))
boot_data_without_deps = $(boot_sources_without_deps:.lisp=.data)
boot_fn_without_deps = $(boot_sources_without_deps:.lisp=.fn)
boot_sources_with_deps = ptyout.boot btincl2.boot \
	btscan2.boot typrops.boot btpile2.boot \
	typars.boot tyextra.boot tytree1.boot

boot_clisp_with_deps = $(boot_sources_with_deps:.boot=.clisp)
boot_objects_with_deps = $(boot_sources_with_deps:.boot=.$(OBJEXT))
boot_data_with_deps = $(boot_sources_with_deps:.boot=.data)
boot_fn_with_deps = $(boot_sources_with_deps:.boot=.fn)
boot_cached_clisp = $(boot_sources_with_deps:.boot=.clisp)

COMPILE_LISP = echo '(progn $(PROCLAIMS) \
			    (compile-file "$<" :output-file "$@") \
			    ($(BYE)))' | $(LISPSYS)

COMPILE_LISP_WITH_DEPS = echo '(progn $(PROCLAIMS) $(DEPS) \
				      (compile-file "$<" :output-file "$@") \
				      ($(BYE)))' | $(LISPSYS) 

BOOT_TO_LISP = echo '(progn (boottran::boottocl "$<") ($(BYE)))' \
		| prev-stage/bootsys


subdir = src/boot/
 
# this stanza will create the final bootsys image
all: stage2/bootsys
	$(INSTALL_PROGRAM) stage2/bootsys $(axiom_build_bindir)

.PRECIOUS: stage0/%.clisp
.PRECIOUS: stage0/%.$(OBJEXT)

stage0_boot_clisp_with_deps = $(addprefix stage0/, $(boot_clisp_with_deps))

stage0_boot_objects_with_deps = \
	$(addprefix stage0/, $(boot_objects_with_deps))

stage0_boot_objects = $(boot_objects_without_deps) \
			$(stage0_boot_objects_with_deps)	

stage0/bootsys: 
	@echo Building stage 0
	[ -d stage0 ] || $(mkinstalldirs) stage0
	-rm -f prev-stage
	-rm -f $(stage0_boot_objects_with_deps)
	-rm -f $(stage0_boot_clisp_with_deps)
	-rm -f stage0-build
	$(MAKE) OBJECTS="$(stage0_boot_objects)" bootsys
	mv bootsys stage0
	$(LN_S) stage0 prev-stage

$(stage0_boot_objects): $(boot_sources_without_deps)

stage0/%.$(OBJEXT): stage0/%.clisp
	$(COMPILE_LISP_WITH_DEPS)

stage0/%.clisp: $(srcdir)/%.boot.pamphlet
	$(axiom_build_document) --tangle=$*.clisp --output=$@ $<

stage1/bootsys: stage0/bootsys
	@echo Building stage 1
	[ -d stage1 ] || $(mkinstalldirs) stage1
	$(MAKE) OBJECTS="$(boot_objects)" bootsys
	-rm -f prev-stage
	-rm -f $(addprefix stage1/, $(boot_objects_with_deps))
	-rm -f $(addprefix stage1/, $(boot_clisp_with_deps))
	mv $(boot_objects_with_deps) stage1
	mv $(boot_clisp_with_deps) stage1
	mv $(boot_data_with_deps) $(boot_fn_with_deps) stage1
	mv bootsys stage1
	$(LN_S) stage1 prev-stage

stage2/bootsys: stage1/bootsys
	@echo Building stage 2
	[ -d stage2 ] || $(mkinstalldirs) stage2
	$(MAKE) OBJECTS="$(boot_objects)" bootsys
	-rm -f prev-stage
	-rm -f $(addprefix stage2/, $(boot_objects_with_deps))
	-rm -f $(addprefix stage2/, $(boot_clisp_with_deps))
	mv $(boot_objects_with_deps) stage2
	mv $(boot_clisp_with_deps) stage2
	mv $(boot_data_with_deps) $(boot_fn_with_deps) stage2
	mv bootsys stage2

bootsys: $(OBJECTS)
	echo '(progn (mapcar (function (lambda (x) (load x)))' \
		      ' (quote ($(patsubst %, "%", $(OBJECTS)))))' \
		   ' (system::save-system "$@"))' \
	     | $(LOADSYS)

.PRECIOUS: $(boot_objects_without_deps)
.PRECIOUS: $(boot_sources_without_deps)

$(boot_objects_without_deps): %.$(OBJEXT): %.lisp
	$(COMPILE_LISP)
  
%.lisp: $(srcdir)/%.lisp.pamphlet
	$(axiom_build_document) --tangle $<

.PRECIOUS: %.$(OBJEXT)
.PRECIOUS: %.clisp
.PRECIOUS: %.boot

$(boot_objects_with_deps): $(boot_sources_without_deps)

$(boot_objects_with_deps): %.$(OBJEXT): %.clisp
	$(COMPILE_LISP_WITH_DEPS)

%.clisp: %.boot
	$(BOOT_TO_LISP)

.PRECIOUS: %.boot
%.boot: $(srcdir)/%.boot.pamphlet
	$(axiom_build_document) --tangle $< 
.PRECIOUS: %.boot

%.boot: $(srcdir)/%.boot.pamphlet
	$(axiom_build_document) --tangle $<


mostlyclean-local:
	-rm -f prev-stage
	-rm -rf stage0 stage1 stage2
	-rm -f $(boot_objects_without_deps)

clean-local: mostlyclean-local
	-rm -f $(BOOTSYS_FOR_TARGET)
	-rm -f $(boot_sources)

distclean-local: clean-local
