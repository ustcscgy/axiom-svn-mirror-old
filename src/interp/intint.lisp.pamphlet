\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp intint.lisp}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{License}
<<license>>=
;; Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are
;; met:
;;
;;     - Redistributions of source code must retain the above copyright
;;       notice, this list of conditions and the following disclaimer.
;;
;;     - Redistributions in binary form must reproduce the above copyright
;;       notice, this list of conditions and the following disclaimer in
;;       the documentation and/or other materials provided with the
;;       distribution.
;;
;;     - Neither the name of The Numerical ALgorithms Group Ltd. nor the
;;       names of its contributors may be used to endorse or promote products
;;       derived from this software without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@
<<*>>=
<<license>>

(in-package "BOOT")

(eval-when (eval load)
  (setq |$useNewParser| T))

(defun |rePackageTran| (sex package)
 (let (*package*)
  (declare (special *package*))
  (setq *package* (find-package (string package)))
  (|packageTran| sex)))

(defun |packageTran| (sex)
 (prog () 
  (return
   (cond
    ((symbolp sex)
     (cond
      ((eq *package* (symbol-package sex)) sex)
      (t (intern (string sex)))))
    ((consp sex)
      (rplaca sex (|packageTran| (car sex)))
      (rplacd sex (|packageTran| (cdr sex)))
      sex)
    (t sex)))))

(defun |zeroOneTran| (sex)
 (nsubst '|$EmptyMode| '? sex))

(defun |intSayKeyedMsg| (key args)
  (|sayKeyedMsg| (|packageTran| key) (|packageTran| args)))

(defun |intProcessSynonyms| (str)
  (let ((LINE str))
    (declare (special LINE))
    (|processSynonyms|)
    LINE))

(defun |intInterpretPform| (pf)
  (|processInteractive| (|zeroOneTran| (|packageTran| (|pf2Sex| pf))) pf))

(defvar |$intCoerceFailure| '|coerceFailure|)
(defvar |$intTopLevel| '|top_level|)
(defvar |$intSpadReader| 'SPAD_READER)
(defvar |$intRestart| '|restart|)

(defun |SpadInterpretFile| (fn)
      (|SpadInterpretStream| 1 fn nil) )

(defun |intNewFloat| ()
  (list '|Float|))

(defun |intSetNeedToSignalSessionManager| ()
  (setq |$NeedToSignalSessionManager| T))

(defun |intnplisp| (s)
 (setq |$currentLine| s)
 (|nplisp| |$currentLine|))

(defun |intSetQuiet| ()
  (setq |$QuietCommand| T))

(defun |intUnsetQuiet| ()
  (setq |$QuietCommand| NIL))

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
