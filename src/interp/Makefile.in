
subdir = src/interp/

MID=${INT}/interp
DOC=$(axiom_target_docdir)/src/interp
BOOK=$(axiom_target_docdir)

# Command to translate Boot to Common Lisp
BOOT_TO_LISP = \
	$(axiom_build_document) --tag=boot --mode=translate \
		--use=$(BOOTSYS) $< >> $(TMP)/trace

# Command to translate Common Lisp to native object code
COMPILE_LISP = \
	$(axiom_build_document) --tag=lisp --mode=compile \
		--output=$@ --use=$(DEPSYS) $< >> $(TMP)/trace
AUTO=$(axiom_targetdir)/autoload

autoload_objects =

LISPSYS= $(axiom_build_bindir)/lisp

BOOTSYS= $(axiom_build_bindir)/bootsys    

DEPSYS=	$(axiom_build_bindir)/depsys

depsys_lisp_noncompiled_sources += sys-pkg.lisp nocompil.lisp \
	ncompil.lisp bookvol5.lisp util.lisp

depsys_lisp_compiled_sources += parsing.lisp metalex.lisp bootlex.lisp \
	newaux.lisp preparse.lisp def.lisp metameta.lisp \
	fnewmeta.lisp

depsys_lisp_sources = $(depsys_lisp_noncompiled_sources) \
			$(depsys_lisp_compiled_sources)

DEP=	vmlisp.lisp	ggreater.lisp	\
	hash.lisp	bootfuns.lisp	\
	union.lisp	nlib.lisp	\
	macros.lisp	comp.lisp	\
	spaderror.lisp	debug.lisp	\
	spad.lisp	bits.lisp	\
	setq.lisp	property.lisp	\
	unlisp.lisp      foam_l.lisp      \
	axext_l.lisp

depsys_lisp_macro_sources = vmlisp.lisp ggreater.lisp hash.lisp \
	bootfuns.lisp union.lisp nlib.lisp macros.lisp	\
	comp.lisp spaderror.lisp debug.lisp \
	spad.lisp bits.lisp setq.lisp property.lisp \
	unlisp.lisp foam_l.lisp axext_l.lisp

depsys_lisp_noncompiled_sources += $(depsys_lisp_macro_sources)
depsys_lisp_SOURCES = $(addsuffix .pamphlet, $(depsys_lisp_sources))
LOADSYS= $(axiom_build_bindir)/lisp$(EXEEXT)
SAVESYS= $(axiom_build_bindir)/interpsys$(EXEEXT)
AXIOMSYS= $(axiom_target_bindir)/AXIOMsys$(EXEEXT)

DEBUGSYS=$(axiom_build_bindir)/debugsys$(EXEEXT)

OBJS=	vmlisp.$(OBJEXT)	hash.$(OBJEXT)	\
	bootfuns.lisp	macros.$(OBJEXT)	\
	unlisp.$(OBJEXT)	setq.lisp	\
	astr.$(OBJEXT)	bits.$(OBJEXT)	\
	alql.$(OBJEXT)	buildom.$(OBJEXT)	\
	cattable.$(OBJEXT)				\
	cformat.$(OBJEXT)	cfuns.$(OBJEXT)	\
	clam.$(OBJEXT)	clammed.$(OBJEXT)	\
	comp.$(OBJEXT)	\
	compat.$(OBJEXT)	compress.$(OBJEXT)	\
	cparse.$(OBJEXT)	cstream.$(OBJEXT)	\
	database.$(OBJEXT)	\
	debug.$(OBJEXT)	dq.$(OBJEXT)		\
	fname.$(OBJEXT)	format.$(OBJEXT)	\
	g-boot.$(OBJEXT)	g-cndata.$(OBJEXT)	\
	g-error.$(OBJEXT)	g-opt.$(OBJEXT)	\
	g-timer.$(OBJEXT)	g-util.$(OBJEXT)	\
	ggreater.$(OBJEXT)				\
	hypertex.$(OBJEXT)	i-analy.$(OBJEXT)	\
	i-code.$(OBJEXT)	i-coerce.$(OBJEXT)	\
	i-coerfn.$(OBJEXT)	i-eval.$(OBJEXT)	\
	i-funsel.$(OBJEXT)	bookvol5.$(OBJEXT)	\
	i-intern.$(OBJEXT)	i-map.$(OBJEXT)	\
	i-output.$(OBJEXT)	i-resolv.$(OBJEXT)	\
	i-spec1.$(OBJEXT)				\
	i-spec2.$(OBJEXT)	i-syscmd.$(OBJEXT)	\
	i-toplev.$(OBJEXT)	i-util.$(OBJEXT)	\
	incl.$(OBJEXT)	int-top.$(OBJEXT)	\
	intfile.$(OBJEXT)				\
	lisplib.$(OBJEXT)	macex.$(OBJEXT)	\
	match.$(OBJEXT)				\
	monitor.$(OBJEXT)	msg.$(OBJEXT)		\
	msgdb.$(OBJEXT)	nci.$(OBJEXT)		\
	newaux.$(OBJEXT)	newfort.$(OBJEXT)	\
	nlib.$(OBJEXT)	nrunfast.$(OBJEXT)	\
	nrungo.$(OBJEXT)	nrunopt.$(OBJEXT)	\
	nruntime.$(OBJEXT)	osyscmd.$(OBJEXT)	\
	packtran.$(OBJEXT)	pathname.$(OBJEXT)	\
	pf2sex.$(OBJEXT)	pile.$(OBJEXT)	\
	posit.$(OBJEXT)	property.lisp	\
	ptrees.$(OBJEXT)	ptrop.$(OBJEXT)	\
	record.$(OBJEXT)				\
	rulesets.$(OBJEXT)	\
	scan.$(OBJEXT)	serror.$(OBJEXT)	\
	server.$(OBJEXT)				\
	setvars.$(OBJEXT)	\
	sfsfun-l.$(OBJEXT)	sfsfun.$(OBJEXT)	\
	simpbool.$(OBJEXT)	slam.$(OBJEXT)	\
	sockio.$(OBJEXT)	spad.$(OBJEXT)	\
	spaderror.$(OBJEXT)				\
	template.$(OBJEXT)	termrw.$(OBJEXT)	\
	trace.$(OBJEXT)	\
	union.$(OBJEXT)       daase.$(OBJEXT)  	\
	fortcall.$(OBJEXT)

AXIOMsys_noncompiled_lisp_sources = bootfuns.lisp nocompil.lisp \
	property.lisp setq.lisp 

AXIOMsys_compiled_lisp_sources = bits.lisp \
	bootlex.lisp cfuns.lisp comp.lisp construc.lisp daase.lisp \
	debug.lisp def.lisp fname.lisp fnewmeta.lisp ggreater.lisp \
	hash.lisp macros.lisp metalex.lisp monitor.lisp newaux.lisp \
	nlib.lisp nspadaux.lisp parsing.lisp \
	patches.lisp preparse.lisp \
	sockio.lisp spad.lisp spaderror.lisp \
	union.lisp util.lisp vmlisp.lisp obey.lisp \
	unlisp.lisp intint.lisp nci.lisp sfsfun-l.lisp \
	axext_l.lisp foam_l.lisp

AXIOMsys_boot_sources = astr.boot alql.boot buildom.boot cattable.boot \
	cformat.boot clam.boot clammed.boot compat.boot compress.boot \
	cparse.boot cstream.boot database.boot dq.boot format.boot \
	g-boot.boot g-cndata.boot g-error.boot g-opt.boot g-timer.boot \
	g-util.boot hypertex.boot i-analy.boot i-code.boot i-coerce.boot \
	i-coerfn.boot i-eval.boot i-funsel.boot i-intern.boot i-map.boot \
	i-output.boot i-resolv.boot i-spec1.boot i-spec2.boot \
	i-syscmd.boot i-toplev.boot i-util.boot incl.boot int-top.boot \
	intfile.boot lisplib.boot macex.boot match.boot msg.boot \
	msgdb.boot newfort.boot nrunfast.boot nrungo.boot nrunopt.boot \
	nruntime.boot osyscmd.boot packtran.boot pathname.boot \
	pf2sex.boot pile.boot posit.boot ptrees.boot ptrop.boot \
	record.boot rulesets.boot scan.boot serror.boot server.boot \
	setvars.boot sfsfun.boot simpbool.boot slam.boot template.boot \
	termrw.boot trace.boot fortcall.boot
INOBJS=	varini.$(OBJEXT)	parini.$(OBJEXT)	\
	setvart.$(OBJEXT)	intint.$(OBJEXT)	\
        interop.$(OBJEXT)     \
        patches.$(OBJEXT)

# These are autloaded old parser files
OPOBJS=	${AUTO}/parsing.$(OBJEXT)	${AUTO}/bootlex.$(OBJEXT)	\
        ${AUTO}/def.$(OBJEXT)	\
	${AUTO}/fnewmeta.$(OBJEXT)	${AUTO}/metalex.$(OBJEXT)	\
	${AUTO}/metameta.$(OBJEXT)	\
	${AUTO}/parse.$(OBJEXT)	${AUTO}/postpar.$(OBJEXT)	\
	${AUTO}/preparse.$(OBJEXT)

autoload_objects += $(OPBJS)
OCOBJS=	${AUTO}/apply.$(OBJEXT)	${AUTO}/c-doc.$(OBJEXT)	\
	${AUTO}/c-util.$(OBJEXT)	${AUTO}/profile.$(OBJEXT)	\
	${AUTO}/category.$(OBJEXT)	${AUTO}/compiler.$(OBJEXT)	\
	${AUTO}/define.$(OBJEXT)	${AUTO}/functor.$(OBJEXT)	\
	${AUTO}/info.$(OBJEXT)	${AUTO}/iterator.$(OBJEXT)	\
	${AUTO}/modemap.$(OBJEXT)	${AUTO}/nruncomp.$(OBJEXT)	\
	${AUTO}/package.$(OBJEXT)	${AUTO}/htcheck.$(OBJEXT)

autoload_objects += $(OCOBJS)

BROBJS=	${AUTO}/bc-matrix.$(OBJEXT)				\
	${AUTO}/bc-misc.$(OBJEXT)	${AUTO}/bc-solve.$(OBJEXT)	\
	${AUTO}/bc-util.$(OBJEXT)				\
	${AUTO}/ht-util.$(OBJEXT)	${AUTO}/htsetvar.$(OBJEXT)	\
	${AUTO}/ht-root.$(OBJEXT)	\
	${AUTO}/br-con.$(OBJEXT)	\
	${AUTO}/br-data.$(OBJEXT)	${AUTO}/showimp.$(OBJEXT)    \
	${AUTO}/br-op1.$(OBJEXT)	${AUTO}/br-op2.$(OBJEXT)	\
	${AUTO}/br-search.$(OBJEXT)	${AUTO}/br-util.$(OBJEXT)	\
	${AUTO}/topics.$(OBJEXT)     ${AUTO}/br-prof.$(OBJEXT)    \
	${AUTO}/br-saturn.$(OBJEXT)

autoload_objects += $(BFOBJS)

TRANOBJS= ${AUTO}/wi1.$(OBJEXT) ${AUTO}/wi2.$(OBJEXT) ${AUTO}/pspad1.$(OBJEXT) \
	  ${AUTO}/pspad2.$(OBJEXT) ${AUTO}/mark.$(OBJEXT) ${AUTO}/nspadaux.$(OBJEXT) \
	  ${AUTO}/def.$(OBJEXT)

autoload_objects += $(TRANOBJS)

NAGBROBJS= ${AUTO}/nag-c02.$(OBJEXT)   ${AUTO}/nag-c05.$(OBJEXT) \
           ${AUTO}/nag-c06.$(OBJEXT)   ${AUTO}/nag-d01.$(OBJEXT) \
           ${AUTO}/nag-d02.$(OBJEXT)   ${AUTO}/nag-d03.$(OBJEXT) \
           ${AUTO}/nag-e01.$(OBJEXT)   ${AUTO}/nag-e02.$(OBJEXT) \
           ${AUTO}/nag-e04.$(OBJEXT)   ${AUTO}/nag-f01.$(OBJEXT) \
           ${AUTO}/nag-f02.$(OBJEXT)   ${AUTO}/nag-f04.$(OBJEXT) \
           ${AUTO}/nag-f07.$(OBJEXT)   ${AUTO}/nag-s.$(OBJEXT) 

autoload_objects += $(NAGBROBJS)

ASCOMP= hashcode.$(OBJEXT) as.$(OBJEXT) \
	foam_l.$(OBJEXT) axext_l.$(OBJEXT)

ASAUTO= ${AUTO}/ax.$(OBJEXT)

autoload_objects += $(ASAUTO)
TIMESTAMP=$(axiom_targetdir)/timestamp
YEARWEEK=(progn (setq timestamp "${TIMESTAMP}") (setq boot::*build-version* "${VERSION}") (yearweek))


.PRECIOUS:	${DEPSYS}
.PRECIOUS:	${SAVESYS}
.PRECIOUS:	${AXIOMSYS}

PROCLAIMS=(progn (load "sys-pkg.lisp") (load "$(abs_srcdir)/interp-proclaims.lisp"))

DOCFILES=${DOC}/alql.boot.dvi \
	 ${DOC}/apply.boot.dvi ${DOC}/as.boot.dvi \
	 ${DOC}/astr.boot.dvi ${DOC}/ax.boot.dvi \
	 ${DOC}/axext_l.lisp.dvi \
	 ${DOC}/bc-matrix.boot.dvi ${DOC}/bc-misc.boot.dvi \
	 ${DOC}/bc-solve.boot.dvi ${DOC}/bc-util.boot.dvi \
	 ${DOC}/bits.lisp.dvi ${DOC}/bootfuns.lisp.dvi \
	 ${DOC}/bootlex.lisp.dvi ${DOC}/br-con.boot.dvi \
	 ${DOC}/br-data.boot.dvi ${DOC}/br-op1.boot.dvi \
	 ${DOC}/br-op2.boot.dvi ${DOC}/br-prof.boot.dvi \
	 ${DOC}/br-saturn.boot.dvi ${DOC}/br-search.boot.dvi \
	 ${DOC}/br-util.boot.dvi ${DOC}/buildom.boot.dvi \
	 ${DOC}/category.boot.dvi ${DOC}/cattable.boot.dvi \
	 ${DOC}/c-doc.boot.dvi ${DOC}/cformat.boot.dvi \
	 ${DOC}/cfuns.lisp.dvi ${DOC}/clam.boot.dvi \
	 ${DOC}/clammed.boot.dvi ${DOC}/compat.boot.dvi \
	 ${DOC}/compiler.boot.dvi ${DOC}/comp.lisp.dvi \
	 ${DOC}/compress.boot.dvi \
	 ${DOC}/cparse.boot.dvi ${DOC}/cstream.boot.dvi \
	 ${DOC}/c-util.boot.dvi ${DOC}/daase.lisp.dvi \
	 ${DOC}/database.boot.dvi ${DOC}/debug.lisp.dvi \
	 ${DOC}/define.boot.dvi \
	 ${DOC}/dq.boot.dvi \
	 ${DOC}/fname.lisp.dvi ${DOC}/fnewmeta.lisp.dvi \
	 ${DOC}/foam_l.lisp.dvi \
	 ${DOC}/format.boot.dvi ${DOC}/fortcall.boot.dvi \
	 ${DOC}/functor.boot.dvi ${DOC}/g-boot.boot.dvi \
	 ${DOC}/g-cndata.boot.dvi ${DOC}/g-error.boot.dvi \
	 ${DOC}/ggreater.lisp.dvi ${DOC}/g-opt.boot.dvi \
	 ${DOC}/g-timer.boot.dvi \
	 ${DOC}/g-util.boot.dvi ${DOC}/hashcode.boot.dvi \
	 ${DOC}/hash.lisp.dvi ${DOC}/htcheck.boot.dvi \
	 ${DOC}/ht-root.boot.dvi ${DOC}/htsetvar.boot.dvi \
	 ${DOC}/ht-util.boot.dvi ${DOC}/hypertex.boot.dvi \
	 ${DOC}/i-analy.boot.dvi ${DOC}/i-code.boot.dvi \
	 ${DOC}/i-coerce.boot.dvi ${DOC}/i-coerfn.boot.dvi \
	 ${DOC}/i-eval.boot.dvi ${DOC}/i-funsel.boot.dvi \
	 ${BOOK}/bookvol5.dvi ${DOC}/i-intern.boot.dvi \
	 ${DOC}/i-map.boot.dvi ${DOC}/incl.boot.dvi \
	 ${DOC}/info.boot.dvi ${DOC}/interop.boot.dvi \
	 ${DOC}/intfile.boot.dvi \
	 ${DOC}/intint.lisp.dvi ${DOC}/int-top.boot.dvi \
	 ${DOC}/i-output.boot.dvi ${DOC}/i-resolv.boot.dvi \
	 ${DOC}/i-spec1.boot.dvi ${DOC}/i-spec2.boot.dvi \
	 ${DOC}/i-syscmd.boot.dvi ${DOC}/iterator.boot.dvi \
	 ${DOC}/i-toplev.boot.dvi ${DOC}/i-util.boot.dvi \
	 ${DOC}/lisplib.boot.dvi ${DOC}/macex.boot.dvi \
	 ${DOC}/macros.lisp.dvi ${DOC}/Makefile.dvi \
	 ${DOC}/mark.boot.dvi ${DOC}/match.boot.dvi \
	 ${DOC}/metalex.lisp.dvi ${DOC}/metameta.lisp.dvi \
	 ${DOC}/modemap.boot.dvi ${DOC}/monitor.lisp.dvi \
	 ${DOC}/msg.boot.dvi ${DOC}/msgdb.boot.dvi \
	 ${DOC}/nag-c02.boot.dvi ${DOC}/nag-c05.boot.dvi \
	 ${DOC}/nag-c06.boot.dvi ${DOC}/nag-d01.boot.dvi \
	 ${DOC}/nag-d02.boot.dvi ${DOC}/nag-d03.boot.dvi \
	 ${DOC}/nag-e01.boot.dvi \
	 ${DOC}/nag-e02.boot.dvi \
	 ${DOC}/nag-e04.boot.dvi ${DOC}/nag-f01.boot.dvi \
	 ${DOC}/nag-f02.boot.dvi ${DOC}/nag-f04.boot.dvi \
	 ${DOC}/nag-f07.boot.dvi ${DOC}/nag-s.boot.dvi \
	 ${DOC}/nci.lisp.dvi ${DOC}/newaux.lisp.dvi \
	 ${DOC}/newfort.boot.dvi \
	 ${DOC}/nlib.lisp.dvi ${DOC}/nocompil.lisp.dvi \
	 ${DOC}/nruncomp.boot.dvi ${DOC}/nrunfast.boot.dvi \
	 ${DOC}/nrungo.boot.dvi ${DOC}/nrunopt.boot.dvi \
	 ${DOC}/nruntime.boot.dvi ${DOC}/nspadaux.lisp.dvi \
	 ${DOC}/obey.lisp.dvi ${DOC}/osyscmd.boot.dvi \
	 ${DOC}/package.boot.dvi ${DOC}/packtran.boot.dvi \
	 ${DOC}/parini.boot.dvi ${DOC}/parse.boot.dvi \
	 ${DOC}/parsing.lisp.dvi ${DOC}/patches.lisp.dvi \
	 ${DOC}/pathname.boot.dvi \
	 ${DOC}/pf2sex.boot.dvi ${DOC}/pile.boot.dvi \
	 ${DOC}/posit.boot.dvi ${DOC}/postpar.boot.dvi \
	 ${DOC}/preparse.lisp.dvi \
	 ${DOC}/profile.boot.dvi ${DOC}/property.lisp.dvi \
	 ${DOC}/pspad1.boot.dvi ${DOC}/pspad2.boot.dvi \
	 ${DOC}/ptrees.boot.dvi ${DOC}/ptrop.boot.dvi \
	 ${DOC}/record.boot.dvi \
	 ${DOC}/rulesets.boot.dvi ${DOC}/scan.boot.dvi \
	 ${DOC}/serror.boot.dvi ${DOC}/server.boot.dvi \
	 ${DOC}/setq.lisp.dvi ${DOC}/setvars.boot.dvi \
	 ${DOC}/setvart.boot.dvi ${DOC}/sfsfun.boot.dvi \
	 ${DOC}/sfsfun-l.lisp.dvi \
	 ${DOC}/showimp.boot.dvi ${DOC}/simpbool.boot.dvi \
	 ${DOC}/slam.boot.dvi ${DOC}/sockio.lisp.dvi \
	 ${DOC}/spaderror.lisp.dvi ${DOC}/spad.lisp.dvi \
	 ${DOC}/sys-pkg.lisp.dvi ${DOC}/template.boot.dvi \
	 ${DOC}/termrw.boot.dvi ${DOC}/topics.boot.dvi \
	 ${DOC}/trace.boot.dvi \
	 ${DOC}/union.lisp.dvi ${DOC}/unlisp.lisp.dvi \
	 ${DOC}/util.lisp.dvi ${DOC}/varini.boot.dvi \
	 ${DOC}/vmlisp.lisp.dvi ${DOC}/wi1.boot.dvi \
	 ${DOC}/wi2.boot.dvi

UNUSED= ${DOC}/anna.boot.dvi ${DOC}/construc.lisp.dvi \
	${DOC}/domain.lisp.dvi 	${DOC}/guess.boot.dvi \
	${DOC}/interp-fix.boot.dvi \
	${DOC}/pf2atree.boot.dvi \
	${DOC}/redefs.boot.dvi 	${DOC}/word.boot.dvi 


.SUFFIXES:
.SUFFIXES: .boot .clisp .lisp .pamphlet

.PHONY: all all-ax all-depsys all-interpsys all-axiomsys all-debugsys

all: all-ax

all-ax: stamp
	@echo finished $(srcdir)

stamp: $(MID) $(AUTO) remove-stamp build-images
	$(STAMP) stamp

.PHONY: remove-stamp
remove-stamp:
	-rm -f stamp

.PHONY: build-images
build-images: remove-stamp all-interpsys all-debugsys

all-interpsys: all-depsys 
	$(mkinstalldirs) $(MID)
	$(mkinstalldirs) $(AUTO)
	$(ENV) $(MAKE) $(SAVESYS)

all-axiomsys: all-depsys 
	$(ENV) $(MAKE) $(AXIOMSYS)

all-debugsys: all-interpsys
	$(ENV) $(MAKE) $(DEBUGSYS)

all-depsys: $(DEPSYS)

clean:
	@echo 619 cleaning $(builddir)

.PRECIOUS: %.boot
%.boot: $(srcdir)/%.boot.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<
.PRECIOUS: %.clisp
%.clisp: %.boot
	$(BOOT_TO_LISP)
.PRECIOUS: %.$(OBJEXT)
%.$(OBJEXT): %.clisp
	$(COMPILE_LISP)
# Extract and compile the part of the interpreter written
# in Common Lisp
.PRECIOUS: %.lisp
%.$(OBJEXT): %.lisp
	$(COMPILE_LISP)

%.lisp: $(srcdir)/%.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

mostlyclean-local:
	rm -f *.fn *.data *.o

clean-local: mostlyclean-local
	rm -f *.clisp *.lsp *.boot
	rm -f \
	axext_l.lisp   def.lisp       metalex.lisp   parsing.lisp \
	spad.lisp      bits.lisp      fname.lisp     metameta.lisp \
	patches.lisp   sys-pkg.lisp   bookvol5.lisp  fnewmeta.lisp \
	monitor.lisp   preparse.lisp  union.lisp     bootfuns.lisp \
	foam_l.lisp    nci.lisp       proclaims.lisp unlisp.lisp \
	bootlex.lisp   ggreater.lisp  newaux.lisp    property.lisp \
	util.lisp      cfuns.lisp     hash.lisp      nlib.lisp \
	setq.lisp      vmlisp.lisp    comp.lisp      intint.lisp \
	nocompil.lisp  sfsfun-l.lisp  daase.lisp     macros.lisp \
	nspadaux.lisp  sockio.lisp    debug.lisp     makedep.lisp \
	obey.lisp      spaderror.lisp

distclean-local: clean-local

${SAVESYS} ${AXIOMSYS}: makeint.lisp \
    ${DEPSYS} ${OBJS}  bookvol5.$(OBJEXT) util.$(OBJEXT) \
    nocompil.lisp sys-pkg.lisp \
    ${OCOBJS} ${OPOBJS} ${BROBJS} obey.$(OBJEXT) \
    database.date ${INOBJS} ${ASCOMP} ${ASAUTO} \
    ${NAGBROBJS} ${TRANOBJS} \
    ${LOADSYS} \
    $(axiom_targetdir)/algebra/exposed.$(OBJEXT) \
    $(axiom_src_docdir)/msgs/s2-us.msgs \
    ${INT}/algebra/warm.data

makeint.lisp:
	@ echo 5 invoking make in `pwd` with parms:
	@ echo SYS= ${SYS} 
	@ echo LSP= ${LSP} 
	@ echo PART= ${PART} 
	@ echo SPAD= ${SPAD} 
	@ echo SRC= $(axiom_src_srcdir) 
	@ echo INT= ${INT}
	@ echo MID= ${MID} 
	@ echo OBJ= ${OBJ} 
	@ echo LISP=${LISP} BYE=${BYE}
	$(mkinstalldirs) $(axiom_target_datadir)/msgs
	$(INSTALL_DATA) $(axiom_src_docdir)/msgs/s2-us.msgs \
		 $(axiom_target_datadir)/msgs
	@ echo '${PROCLAIMS}' > makeint.lisp
	@ echo '(load "nocompil.lisp")' >> makeint.lisp
	@ echo '(load "bookvol5")' >> makeint.lisp
	@ echo '(load "util")' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	@ touch ${TIMESTAMP}
	@ echo '${YEARWEEK}' >> makeint.lisp
	@ echo '(build-interpsys (append (quote ($(patsubst %, "%", ${OBJS}))) (quote ($(patsubst %, "%", ${ASCOMP}))) (quote ($(patsubst %, "%", ${INOBJS})))) (quote ($(patsubst %, "%", ${OPOBJS}))) (quote ($(patsubst %, "%", ${OCOBJS}))) (quote ($(patsubst %, "%", ${BROBJS}))) (quote ($(patsubst %, "%", ${TRANOBJS}))) (quote ($(patsubst %, "%", ${NAGBROBJS}))) (quote ($(patsubst %, "%", ${ASAUTO})))  "${SPAD}")' >> makeint.lisp
	@ echo '(in-package "SCRATCHPAD-COMPILER")' >> makeint.lisp
	@ echo '(boot::set-restart-hook)' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	@ echo '(load "${INT}/algebra/warm.data")' >> makeint.lisp
	@ echo '(|clearClams|)' >> makeint.lisp
	@ echo '(load "obey")' >> makeint.lisp
	@ echo '#+:akcl (setq compiler::*suppress-compiler-notes* t)' >> makeint.lisp
	@ echo '#+:akcl (si::gbc-time 0)' >> makeint.lisp

${SAVESYS}:
	@echo '(progn (gbc t) (load "makeint.lisp") (gbc t) (user::spad-save "$@"))' | ${LISPSYS}
	@ echo 6 ${SAVESYS} created
	$(mkinstalldirs) $(axiom_target_bindir)
depsys_lisp_sources += parsing.lisp metalex.lisp bootlex.lisp \
			newaux.lisp preparse.lisp \
			metameta.lisp fnewmeta.lisp

depsys_boot_sources = postpar parse clam slam \
			g-boot g-util

depsys_SOURCES = $(depsys_lisp_SOURCES) $(depsys_boot_SOURCES)

depsys_objects = nocompil.$(OBJEXT) bookvol5.$(OBJEXT) \
		util.$(OBJEXT) postpar.$(OBJEXT) parse.$(OBJEXT) \
		parsing.$(OBJEXT) metalex.$(OBJEXT) bootlex.$(OBJEXT) \
		newaux.$(OBJEXT) preparse.$(OBJEXT) \
		metameta.$(OBJEXT) fnewmeta.$(OBJEXT) clam.$(OBJEXT) \
		slam.$(OBJEXT) g-boot.$(OBJEXT) \
		g-util.$(OBJEXT)

${DEPSYS}:	${DEP} sys-pkg.lisp nocompil.lisp \
	        bookvol5.lisp util.lisp \
	        parsing.lisp metalex.lisp \
	        bootlex.lisp newaux.lisp \
	        preparse.lisp \
	        def.lisp \
	        metameta.lisp fnewmeta.lisp \
	        $(patsubst %, %.clisp, ${depsys_boot_sources})
	@ echo 3 making ${DEPSYS} 
	@ $(mkinstalldirs) $(axiom_build_bindir)
	@ echo '${PROCLAIMS}' > makedep.lisp
	@ echo '(push :oldboot *features*)' >> makedep.lisp
	@ echo '(load "nocompil.lisp")' >> makedep.lisp
	@ echo '(load "bookvol5.lisp")' >> makedep.lisp
	@ echo '(load "util.lisp")' >> makedep.lisp
	@ echo '(in-package "BOOT")' >> makedep.lisp
	@ echo '(build-depsys (quote ($(patsubst %, "%", ${DEP}))) "${SPAD}" "$(builddir)")' >> makedep.lisp
	@ echo '(unless (probe-file "def.$(OBJEXT)") (compile-file "def.lisp" :output-file "def.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "def")' >> makedep.lisp
	for A in postpar.clisp parse.clisp parsing.lisp metalex.lisp \
	         bootlex.lisp newaux.lisp preparse.lisp def.lisp \
	         metameta.lisp fnewmeta.lisp clam.clisp slam.clisp \
	         g-boot.clisp g-util.clisp; do \
	   B=$${A%.*} ; \
	   echo '(unless (probe-file "'$$B'.$(OBJEXT)")' \
	        '(compile-file "'$$A'" :output-file "'$$B'.$(OBJEXT)"))' \
		  >> makedep.lisp ; \
	  echo '(load "'$$B'")' >> makedep.lisp ; \
	done
	@ echo '(progn (load "makedep.lisp") (spad-save "$@"))' \
               | ${LISPSYS}
	@ echo 4 ${DEPSYS} created
.PHONY: all-axiomsys

all-axiomsys: ${AXIOMSYS}

${AXIOMSYS}:
	@echo '(progn (gbc t) (load "makeint.lisp") (gbc t)' \
	   '#+:gcl(setf compiler::*default-system-p* nil)' \
	   '(user::spad-save "$@"))' | DAASE=$(axiom_targetdir) ${LISPSYS}
	@ echo 6a ${AXIOMSYS} created
${DEBUGSYS}: ${MID}/debugsys.lisp
	@ echo 7 building debugsys
	@ echo '(progn (gbc t) (load "${MID}/debugsys.lisp") (user::spad-save "$@"))' | ${LISPSYS}
	@ echo 8 ${DEBUGSYS} created

${MID}/exposed.lsp: $(axiom_src_algdir)/exposed.lsp.pamphlet
	@ echo 615 making ${MID}/exposed.lsp from $(axiom_src_algdir)/exposed.lsp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

$(axiom_targetdir)/algebra/exposed.$(OBJEXT) : ${MID}/exposed.lsp ${LISPSYS}
	@ echo 616 making $@ from ${MID}/exposed.lsp
	$(mkinstalldirs) $(axiom_targetdir)/algebra
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/exposed.lsp" :output-file "$(axiom_targetdir)/algebra/exposed.$(OBJEXT)") (${BYE}))' | ${LISPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/exposed.lsp" :output-file "$(axiom_targetdir)/algebra/exposed.$(OBJEXT)") (${BYE}))' | ${LISPSYS} >> ${TMP}/trace ; \
	  fi

database.date:
	@ echo 617 the database was updated...remaking interpsys
	touch database.date



AUTO_from_IN=\
 apply bootlex def fnewmeta metalex metameta parsing preparse \
 c-util nag-c02 nag-c05 nag-c06 nag-d01 nag-d02 nag-d03 nag-e01 \
 nag-e02 nag-e04 nag-f01 nag-f02 nag-f04 nag-f07 nag-s category \
 c-doc compiler profile define functor info iterator modemap \
 nruncomp package parse postpar bc-matrix bc-misc bc-solve \
 bc-util ht-util htsetvar ht-root htcheck ax br-con br-search \
 br-op1 br-op2 br-data br-util br-saturn topics br-prof nspadaux \
 showimp

$(addprefix $(AUTO)/, $(addsuffix .$(OBJEXT), $(AUTO_from_IN))): \
   $(AUTO)/%.$(OBJEXT) : %.$(OBJEXT)
	cp $< $@

IN_from_MID=\
 apply as ax bc-matrix bc-misc bc-solve bc-util br-con br-data \
 br-op1 br-op2 br-prof br-saturn br-search br-util buildom \
 category cattable c-doc clammed compat compiler compress c-util \
 database define format fortcall functor g-cndata g-error g-opt \
 g-timer hashcode htcheck ht-root htsetvar ht-util hypertex \
 i-analy i-code i-coerce i-coerfn i-eval i-funsel \
 i-intern interop i-map info i-output i-resolv i-spec1 i-spec2 \
 i-syscmd iterator i-toplev i-util lisplib match modemap msgdb \
 nag-c02 nag-c05 nag-c06 nag-d01 nag-d02 nag-d03 nag-e01 nag-e02 \
 nag-e04 nag-f01 nag-f02 nag-f04 nag-f07 nag-s newfort \
 nruncomp nrunfast nrungo nruntime nrunopt package pathname \
 profile record rulesets server setvars setvart simpbool \
 template termrw topics trace

$(addsuffix .$(OBJEXT), $(IN_from_MID)): \
    %.$(OBJEXT) : $(MID)/%.clisp
	@ echo 10 making $@ from $<
	@ ( B=`pwd`;\
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "$<" :output-file "'$$B/'$@") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "$<" :output-file "'$$B/'$@") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

AUTO_from_MID=\
mark pspad1 pspad2 wi1 wi2

$(addprefix $(AUTO)/, $(addsuffix .$(OBJEXT), $(AUTO_from_MID))): \
    $(AUTO)/%.$(OBJEXT) : $(MID)/%.clisp
	@ echo 10 making $@ from $<
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "$<" :output-file "$@") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "$<" :output-file "$@") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

MID_from_IN=\
 apply as ax bc-matrix bc-misc bc-solve bc-util br-con br-data \
 br-op1 br-op2 br-prof br-saturn br-search br-util buildom \
 category cattable c-doc clammed compat compiler compress c-util \
 database define format fortcall functor g-cndata g-error g-opt \
 g-timer hashcode htcheck ht-root htsetvar ht-util hypertex \
 i-analy i-code i-coerce i-coerfn i-eval i-funsel i-intern \
 interop i-map info i-output i-resolv i-spec1 i-spec2 i-syscmd \
 iterator i-toplev i-util lisplib mark match modemap msgdb \
 nag-c02 nag-c05 nag-c06 nag-d01 nag-d02 nag-d03 nag-e01 nag-e02 \
 nag-e04 nag-f01 nag-f02 nag-f04 nag-f07 nag-s newfort nruncomp \
 nrunfast nrungo nruntime nrunopt package pathname profile pspad1 \
 pspad2 record rulesets server setvars setvart simpbool template \
 termrw topics trace wi1 wi2

$(addprefix $(MID)/, $(addsuffix .clisp, $(MID_from_IN))): \
    $(MID)/%.clisp : $(srcdir)/%.boot.pamphlet
	@ echo 11 making $@ from $<
	@( $(axiom_build_document) --tangle --output=$(MID)/$*.boot $<; \
	   cd ${MID} ; \
	   if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "$*.boot") (${BYE}))' | ${DEPSYS} ; \
	   else \
	   echo '(progn (boottran::boottocl "$*.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
           fi ; \
	   rm $*.boot )

${MID}/debugsys.lisp: $(srcdir)/debugsys.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

bookvol5.$(OBJEXT): bookvol5.lisp
	@ echo 297 making $@ from $<
	@ (if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "bookvol5.lisp" :output-file "bookvol5.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "bookvol5.lisp" :output-file "bookvol5.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

bookvol5.lisp: $(srcdir)/bookvol5.pamphlet
	@ echo 298 making $@ from $<
	$(axiom_build_document) --tangle=Interpreter --output=$@ $<

newaux.$(OBJEXT): ${MID}/newaux.lisp
	@ echo 79 making newaux.$(OBJEXT) from ${MID}/newaux.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/newaux.lisp" :output-file "newaux.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/newaux.lisp" :output-file "newaux.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

newaux.${LISP}: ${MID}/newaux.lisp
	cp ${MID}/newaux.lisp newaux.${LISP}

${MID}/newaux.lisp: $(srcdir)/newaux.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${INT}/algebra/warm.data: $(srcdir)/Makefile.pamphlet
	@ echo 2 building warm.data
	$(axiom_build_document) --tangle=warm.data --output=$@ $<


.PRECIOUS: $(builddir)/%.tex
.PRECIOUS: $(builddir)/%.dvi

$(DOCFILES): $(DOC) $(axiom_build_texdir)/diagrams.tex

$(DOC):
	$(mkinstalldirs) $@

$(DOC)/%.dvi: $(builddir)/%.dvi
	$(INSTALL_DATA) $< $@

$(builddir)/%.dvi: $(axiom_build_texdir)/axiom.sty

$(builddir)/%.dvi: $(builddir)/%.tex
	$(axiom_build_document) --latex $< $(SINK_NOISE)

$(builddir)/%.tex: $(srcdir)/%.pamphlet
	$(axiom_build_document) --weave --output=$@ $<

$(axiom_build_texdir)/diagrams.tex: $(axiom_src_docdir)/diagrams.tex
	$(INSTALL_DATA) $< $@

