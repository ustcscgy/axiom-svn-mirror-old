
subdir = src/interp/

IN=${SRC}/interp
MID=${INT}/interp
OUT=${OBJ}/${SYS}/interp
DOC=$(axiom_target_docdir)/src/interp
BOOK=$(axiom_target_docdir)

# Command to translate Boot to Common Lisp
BOOT_TO_LISP = echo '(boottran::boottocl "$<")' | $(BOOTSYS) >> $(TMP)/trace

# Command to translate Common Lisp to native object code
COMPILE_LISP = echo '(compile-file "$<" :output-file "$@")' | $(DEPSYS) \
		    >> $(TMP)/trace
AUTO=$(axiom_targetdir)/autoload

autoload_objects =

LISPSYS= $(axiom_build_bindir)/lisp

BOOTSYS= $(axiom_build_bindir)/bootsys    

DEPSYS=	$(axiom_build_bindir)/depsys

depsys_lisp_noncompiled_sources += sys-pkg.lisp nocompile.lisp \
	ncompil.lisp bookvol5.lisp util.lisp

depsys_lisp_compiled_sources += parsing.lisp metalex.lisp bootlex.lisp \
	newaux.lisp preparse.lisp postprop.lisp def.lisp metameta.lisp \
	fnewmeta.lisp

depsys_lisp_sources = $(depsys_lisp_noncompiled_sources) \
			$(depsys_lisp_compiled_sources)

depsys_boot_sources = postpar.boot parse.boot clam.boot slam.boot \
	g-boot.boot c-util.boot g-util.boot
DEP=	$(MID)/vmlisp.lisp	${MID}/ggreater.lisp	\
	${MID}/hash.lisp	${MID}/bootfuns.lisp	\
	${MID}/union.lisp	${MID}/nlib.lisp	\
	${MID}/macros.lisp	${MID}/comp.lisp	\
	${MID}/spaderror.lisp	${MID}/debug.lisp	\
	${MID}/spad.lisp	${MID}/bits.lisp	\
	${MID}/setq.lisp	${MID}/property.lisp	\
	${MID}/unlisp.lisp      ${MID}/foam_l.lisp      \
	${MID}/axext_l.lisp

depsys_lisp_macro_sources = vmlisp.lisp ggreater.lisp hash.lisp \
	bootfuns.lisp union.lisp nlib.lisp macros.lisp	\
	comp.lisp spaderror.lisp debug.lisp \
	spad.lisp bits.lisp setq.lisp property.lisp \
	unlisp.lisp foam_l.lisp axext_l.lisp

depsys_lisp_noncompiled_sources += $(depsys_lisp_macro_sources)
depsys_lisp_SOURCES = $(addsuffix .pamphlet, $(depsys_lisp_sources))
LOADSYS= $(axiom_build_bindir)/lisp
SAVESYS= $(axiom_build_bindir)/interpsys
AXIOMSYS= $(axiom_target_bindir)/AXIOMsys

DEBUGSYS=$(axiom_build_bindir)/debugsys

OBJS=	${OUT}/vmlisp.$(OBJEXT)	${OUT}/hash.$(OBJEXT)	\
	${OUT}/bootfuns.${LISP}	${OUT}/macros.$(OBJEXT)	\
	${OUT}/unlisp.$(OBJEXT)	${OUT}/setq.${LISP}	\
	${OUT}/astr.$(OBJEXT)	${OUT}/bits.$(OBJEXT)	\
	${OUT}/alql.$(OBJEXT)	${OUT}/buildom.$(OBJEXT)	\
	${OUT}/cattable.$(OBJEXT)				\
	${OUT}/cformat.$(OBJEXT)	${OUT}/cfuns.$(OBJEXT)	\
	${OUT}/clam.$(OBJEXT)	${OUT}/clammed.$(OBJEXT)	\
	${OUT}/comp.$(OBJEXT)	\
	${OUT}/compat.$(OBJEXT)	${OUT}/compress.$(OBJEXT)	\
	${OUT}/cparse.$(OBJEXT)	${OUT}/cstream.$(OBJEXT)	\
	${OUT}/database.$(OBJEXT)	\
	${OUT}/debug.$(OBJEXT)	${OUT}/dq.$(OBJEXT)		\
	${OUT}/fname.$(OBJEXT)	${OUT}/format.$(OBJEXT)	\
	${OUT}/g-boot.$(OBJEXT)	${OUT}/g-cndata.$(OBJEXT)	\
	${OUT}/g-error.$(OBJEXT)	${OUT}/g-opt.$(OBJEXT)	\
	${OUT}/g-timer.$(OBJEXT)	${OUT}/g-util.$(OBJEXT)	\
	${OUT}/ggreater.$(OBJEXT)				\
	${OUT}/hypertex.$(OBJEXT)	${OUT}/i-analy.$(OBJEXT)	\
	${OUT}/i-code.$(OBJEXT)	${OUT}/i-coerce.$(OBJEXT)	\
	${OUT}/i-coerfn.$(OBJEXT)	${OUT}/i-eval.$(OBJEXT)	\
	${OUT}/i-funsel.$(OBJEXT)	${OUT}/bookvol5.$(OBJEXT)	\
	${OUT}/i-intern.$(OBJEXT)	${OUT}/i-map.$(OBJEXT)	\
	${OUT}/i-output.$(OBJEXT)	${OUT}/i-resolv.$(OBJEXT)	\
	${OUT}/i-spec1.$(OBJEXT)				\
	${OUT}/i-spec2.$(OBJEXT)	${OUT}/i-syscmd.$(OBJEXT)	\
	${OUT}/i-toplev.$(OBJEXT)	${OUT}/i-util.$(OBJEXT)	\
	${OUT}/incl.$(OBJEXT)	${OUT}/int-top.$(OBJEXT)	\
	${OUT}/intfile.$(OBJEXT)				\
	${OUT}/lisplib.$(OBJEXT)	${OUT}/macex.$(OBJEXT)	\
	${OUT}/match.$(OBJEXT)				\
	${OUT}/monitor.$(OBJEXT)	${OUT}/msg.$(OBJEXT)		\
	${OUT}/msgdb.$(OBJEXT)	${OUT}/nci.$(OBJEXT)		\
	${OUT}/newaux.$(OBJEXT)	${OUT}/newfort.$(OBJEXT)	\
	${OUT}/nlib.$(OBJEXT)	${OUT}/nrunfast.$(OBJEXT)	\
	${OUT}/nrungo.$(OBJEXT)	${OUT}/nrunopt.$(OBJEXT)	\
	${OUT}/nruntime.$(OBJEXT)	${OUT}/osyscmd.$(OBJEXT)	\
	${OUT}/packtran.$(OBJEXT)	${OUT}/pathname.$(OBJEXT)	\
	${OUT}/pf2sex.$(OBJEXT)	${OUT}/pile.$(OBJEXT)	\
	${OUT}/posit.$(OBJEXT)	${OUT}/property.${LISP}	\
	${OUT}/ptrees.$(OBJEXT)	${OUT}/ptrop.$(OBJEXT)	\
	${OUT}/record.$(OBJEXT)				\
	${OUT}/rulesets.$(OBJEXT)	\
	${OUT}/scan.$(OBJEXT)	${OUT}/serror.$(OBJEXT)	\
	${OUT}/server.$(OBJEXT)				\
	${OUT}/setvars.$(OBJEXT)	\
	${OUT}/sfsfun-l.$(OBJEXT)	${OUT}/sfsfun.$(OBJEXT)	\
	${OUT}/simpbool.$(OBJEXT)	${OUT}/slam.$(OBJEXT)	\
	${OUT}/sockio.$(OBJEXT)	${OUT}/spad.$(OBJEXT)	\
	${OUT}/spaderror.$(OBJEXT)				\
	${OUT}/template.$(OBJEXT)	${OUT}/termrw.$(OBJEXT)	\
	${OUT}/trace.$(OBJEXT)	\
	${OUT}/union.$(OBJEXT)       ${OUT}/daase.$(OBJEXT)  	\
	${OUT}/fortcall.$(OBJEXT)


AXIOMsys_boot_sources = astr.boot alql.boot buildom.boot cattable.boot \
	cformat.boot clam.boot clammed.boot compat.boot compress.boot \
	cparse.boot cstream.boot database.boot dq.boot format.boot \
	g-boot.boot g-cndata.boot g-error.boot g-opt.boot g-timer.boot \
	g-util.boot hypertex.boot i-analy.boot i-code.boot i-coerce.boot \
	i-coerfn.boot i-eval.boot i-funsel.boot i-intern.boot i-map.boot \
	i-output.boot i-resolv.boot i-spec1.boot i-spec2.boot \
	i-syscmd.boot i-toplev.boot i-util.boot incl.boot int-top.boot \
	intfile.boot lisplib.boot macex.boot match.boot msg.boot \
	msgdb.boot newfort.boot nrunfast.boot nrungo.boot nrunopt.boot \
	nruntime.boot osyscmd.boot packtran.boot pathname.boot \
	pf2sex.boot pile.boot posit.boot ptrees.boot ptrop.boot \
	record.boot rulesets.boot scan.boot serror.boot server.boot \
	setvars.boot sfsfun.boot simpbool.boot slam.boot template.boot \
	termrw.boot trace.boot fortcall.boot
INOBJS=	${OUT}/varini.$(OBJEXT)	${OUT}/parini.$(OBJEXT)	\
	${OUT}/setvart.$(OBJEXT)	${OUT}/intint.$(OBJEXT)	\
        ${OUT}/xrun.$(OBJEXT)        ${OUT}/interop.$(OBJEXT)     \
        ${OUT}/patches.$(OBJEXT)

# These are autloaded old parser files
OPOBJS=	${AUTO}/parsing.$(OBJEXT)	${AUTO}/bootlex.$(OBJEXT)	\
        ${AUTO}/def.$(OBJEXT)	\
	${AUTO}/fnewmeta.$(OBJEXT)	${AUTO}/metalex.$(OBJEXT)	\
	${AUTO}/metameta.$(OBJEXT)	\
	${AUTO}/parse.$(OBJEXT)	${AUTO}/postpar.$(OBJEXT)	\
	${AUTO}/postprop.${LISP}	${AUTO}/preparse.$(OBJEXT)

autoload_objects += $(OPBJS)
OCOBJS=	${AUTO}/apply.$(OBJEXT)	${AUTO}/c-doc.$(OBJEXT)	\
	${AUTO}/c-util.$(OBJEXT)	${AUTO}/profile.$(OBJEXT)	\
	${AUTO}/category.$(OBJEXT)	${AUTO}/compiler.$(OBJEXT)	\
	${AUTO}/define.$(OBJEXT)	${AUTO}/functor.$(OBJEXT)	\
	${AUTO}/info.$(OBJEXT)	${AUTO}/iterator.$(OBJEXT)	\
	${AUTO}/modemap.$(OBJEXT)	${AUTO}/nruncomp.$(OBJEXT)	\
	${AUTO}/package.$(OBJEXT)	${AUTO}/htcheck.$(OBJEXT)	\
        ${AUTO}/xruncomp.$(OBJEXT)   

autoload_objects += $(OCOBJS)

BROBJS=	${AUTO}/bc-matrix.$(OBJEXT)				\
	${AUTO}/bc-misc.$(OBJEXT)	${AUTO}/bc-solve.$(OBJEXT)	\
	${AUTO}/bc-util.$(OBJEXT)				\
	${AUTO}/ht-util.$(OBJEXT)	${AUTO}/htsetvar.$(OBJEXT)	\
	${AUTO}/ht-root.$(OBJEXT)	\
	${AUTO}/br-con.$(OBJEXT)	\
	${AUTO}/br-data.$(OBJEXT)	${AUTO}/showimp.$(OBJEXT)    \
	${AUTO}/br-op1.$(OBJEXT)	${AUTO}/br-op2.$(OBJEXT)	\
	${AUTO}/br-search.$(OBJEXT)	${AUTO}/br-util.$(OBJEXT)	\
	${AUTO}/topics.$(OBJEXT)     ${AUTO}/br-prof.$(OBJEXT)    \
	${AUTO}/br-saturn.$(OBJEXT)

autoload_objects += $(BFOBJS)

TRANOBJS= ${AUTO}/wi1.$(OBJEXT) ${AUTO}/wi2.$(OBJEXT) ${AUTO}/pspad1.$(OBJEXT) \
	  ${AUTO}/pspad2.$(OBJEXT) ${AUTO}/mark.$(OBJEXT) ${AUTO}/nspadaux.$(OBJEXT) \
	  ${AUTO}/def.$(OBJEXT)

autoload_objects += $(TRANOBJS)

NAGBROBJS= ${AUTO}/nag-c02.$(OBJEXT)   ${AUTO}/nag-c05.$(OBJEXT) \
           ${AUTO}/nag-c06.$(OBJEXT)   ${AUTO}/nag-d01.$(OBJEXT) \
           ${AUTO}/nag-d02.$(OBJEXT)   ${AUTO}/nag-d03.$(OBJEXT) \
           ${AUTO}/nag-e01.$(OBJEXT)   ${AUTO}/nag-e02.$(OBJEXT) \
           ${AUTO}/nag-e04.$(OBJEXT)   ${AUTO}/nag-f01.$(OBJEXT) \
           ${AUTO}/nag-f02.$(OBJEXT)   ${AUTO}/nag-f04.$(OBJEXT) \
           ${AUTO}/nag-f07.$(OBJEXT)   ${AUTO}/nag-s.$(OBJEXT) 

autoload_objects += $(NAGBROBJS)

ASCOMP= ${OUT}/hashcode.$(OBJEXT) ${OUT}/as.$(OBJEXT) \
	${OUT}/foam_l.$(OBJEXT) ${OUT}/axext_l.$(OBJEXT)

ASAUTO= ${AUTO}/ax.$(OBJEXT)

autoload_objects += $(ASAUTO)
TIMESTAMP=$(axiom_targetdir)/timestamp
YEARWEEK=(progn (setq timestamp "${TIMESTAMP}") (setq boot::*build-version* "${VERSION}") (yearweek))


.PRECIOUS:	${BOOTSYS}
.PRECIOUS:	${DEPSYS}
.PRECIOUS:	${SAVESYS}
.PRECIOUS:	${AXIOMSYS}

PROCLAIMS=(progn (load "${OUT}/sys-pkg.lsp") (load "$(abs_srcdir)/interp-proclaims.lisp"))

DOCFILES=${DOC}/alql.boot.dvi \
	 ${DOC}/apply.boot.dvi ${DOC}/as.boot.dvi \
	 ${DOC}/astr.boot.dvi ${DOC}/ax.boot.dvi \
	 ${DOC}/axext_l.lisp.dvi \
	 ${DOC}/bc-matrix.boot.dvi ${DOC}/bc-misc.boot.dvi \
	 ${DOC}/bc-solve.boot.dvi ${DOC}/bc-util.boot.dvi \
	 ${DOC}/bits.lisp.dvi ${DOC}/bootfuns.lisp.dvi \
	 ${DOC}/bootlex.lisp.dvi ${DOC}/br-con.boot.dvi \
	 ${DOC}/br-data.boot.dvi ${DOC}/br-op1.boot.dvi \
	 ${DOC}/br-op2.boot.dvi ${DOC}/br-prof.boot.dvi \
	 ${DOC}/br-saturn.boot.dvi ${DOC}/br-search.boot.dvi \
	 ${DOC}/br-util.boot.dvi ${DOC}/buildom.boot.dvi \
	 ${DOC}/category.boot.dvi ${DOC}/cattable.boot.dvi \
	 ${DOC}/c-doc.boot.dvi ${DOC}/cformat.boot.dvi \
	 ${DOC}/cfuns.lisp.dvi ${DOC}/clam.boot.dvi \
	 ${DOC}/clammed.boot.dvi ${DOC}/compat.boot.dvi \
	 ${DOC}/compiler.boot.dvi ${DOC}/comp.lisp.dvi \
	 ${DOC}/compress.boot.dvi \
	 ${DOC}/cparse.boot.dvi ${DOC}/cstream.boot.dvi \
	 ${DOC}/c-util.boot.dvi ${DOC}/daase.lisp.dvi \
	 ${DOC}/database.boot.dvi ${DOC}/debug.lisp.dvi \
	 ${DOC}/define.boot.dvi \
	 ${DOC}/dq.boot.dvi \
	 ${DOC}/fname.lisp.dvi ${DOC}/fnewmeta.lisp.dvi \
	 ${DOC}/foam_l.lisp.dvi \
	 ${DOC}/format.boot.dvi ${DOC}/fortcall.boot.dvi \
	 ${DOC}/functor.boot.dvi ${DOC}/g-boot.boot.dvi \
	 ${DOC}/g-cndata.boot.dvi ${DOC}/g-error.boot.dvi \
	 ${DOC}/ggreater.lisp.dvi ${DOC}/g-opt.boot.dvi \
	 ${DOC}/g-timer.boot.dvi \
	 ${DOC}/g-util.boot.dvi ${DOC}/hashcode.boot.dvi \
	 ${DOC}/hash.lisp.dvi ${DOC}/htcheck.boot.dvi \
	 ${DOC}/ht-root.boot.dvi ${DOC}/htsetvar.boot.dvi \
	 ${DOC}/ht-util.boot.dvi ${DOC}/hypertex.boot.dvi \
	 ${DOC}/i-analy.boot.dvi ${DOC}/i-code.boot.dvi \
	 ${DOC}/i-coerce.boot.dvi ${DOC}/i-coerfn.boot.dvi \
	 ${DOC}/i-eval.boot.dvi ${DOC}/i-funsel.boot.dvi \
	 ${BOOK}/bookvol5.dvi ${DOC}/i-intern.boot.dvi \
	 ${DOC}/i-map.boot.dvi ${DOC}/incl.boot.dvi \
	 ${DOC}/info.boot.dvi ${DOC}/interop.boot.dvi \
	 ${DOC}/intfile.boot.dvi \
	 ${DOC}/intint.lisp.dvi ${DOC}/int-top.boot.dvi \
	 ${DOC}/i-output.boot.dvi ${DOC}/i-resolv.boot.dvi \
	 ${DOC}/i-spec1.boot.dvi ${DOC}/i-spec2.boot.dvi \
	 ${DOC}/i-syscmd.boot.dvi ${DOC}/iterator.boot.dvi \
	 ${DOC}/i-toplev.boot.dvi ${DOC}/i-util.boot.dvi \
	 ${DOC}/lisplib.boot.dvi ${DOC}/macex.boot.dvi \
	 ${DOC}/macros.lisp.dvi ${DOC}/Makefile.dvi \
	 ${DOC}/mark.boot.dvi ${DOC}/match.boot.dvi \
	 ${DOC}/metalex.lisp.dvi ${DOC}/metameta.lisp.dvi \
	 ${DOC}/modemap.boot.dvi ${DOC}/monitor.lisp.dvi \
	 ${DOC}/msg.boot.dvi ${DOC}/msgdb.boot.dvi \
	 ${DOC}/nag-c02.boot.dvi ${DOC}/nag-c05.boot.dvi \
	 ${DOC}/nag-c06.boot.dvi ${DOC}/nag-d01.boot.dvi \
	 ${DOC}/nag-d02.boot.dvi ${DOC}/nag-d03.boot.dvi \
	 ${DOC}/nag-e01.boot.dvi \
	 ${DOC}/nag-e02.boot.dvi \
	 ${DOC}/nag-e04.boot.dvi ${DOC}/nag-f01.boot.dvi \
	 ${DOC}/nag-f02.boot.dvi ${DOC}/nag-f04.boot.dvi \
	 ${DOC}/nag-f07.boot.dvi ${DOC}/nag-s.boot.dvi \
	 ${DOC}/nci.lisp.dvi ${DOC}/newaux.lisp.dvi \
	 ${DOC}/newfort.boot.dvi \
	 ${DOC}/nlib.lisp.dvi ${DOC}/nocompil.lisp.dvi \
	 ${DOC}/nruncomp.boot.dvi ${DOC}/nrunfast.boot.dvi \
	 ${DOC}/nrungo.boot.dvi ${DOC}/nrunopt.boot.dvi \
	 ${DOC}/nruntime.boot.dvi ${DOC}/nspadaux.lisp.dvi \
	 ${DOC}/obey.lisp.dvi ${DOC}/osyscmd.boot.dvi \
	 ${DOC}/package.boot.dvi ${DOC}/packtran.boot.dvi \
	 ${DOC}/parini.boot.dvi ${DOC}/parse.boot.dvi \
	 ${DOC}/parsing.lisp.dvi ${DOC}/patches.lisp.dvi \
	 ${DOC}/pathname.boot.dvi \
	 ${DOC}/pf2sex.boot.dvi ${DOC}/pile.boot.dvi \
	 ${DOC}/posit.boot.dvi ${DOC}/postpar.boot.dvi \
	 ${DOC}/postprop.lisp.dvi ${DOC}/preparse.lisp.dvi \
	 ${DOC}/profile.boot.dvi ${DOC}/property.lisp.dvi \
	 ${DOC}/pspad1.boot.dvi ${DOC}/pspad2.boot.dvi \
	 ${DOC}/ptrees.boot.dvi ${DOC}/ptrop.boot.dvi \
	 ${DOC}/record.boot.dvi \
	 ${DOC}/rulesets.boot.dvi ${DOC}/scan.boot.dvi \
	 ${DOC}/serror.boot.dvi ${DOC}/server.boot.dvi \
	 ${DOC}/setq.lisp.dvi ${DOC}/setvars.boot.dvi \
	 ${DOC}/setvart.boot.dvi ${DOC}/sfsfun.boot.dvi \
	 ${DOC}/sfsfun-l.lisp.dvi \
	 ${DOC}/showimp.boot.dvi ${DOC}/simpbool.boot.dvi \
	 ${DOC}/slam.boot.dvi ${DOC}/sockio.lisp.dvi \
	 ${DOC}/spaderror.lisp.dvi ${DOC}/spad.lisp.dvi \
	 ${DOC}/sys-pkg.lisp.dvi ${DOC}/template.boot.dvi \
	 ${DOC}/termrw.boot.dvi ${DOC}/topics.boot.dvi \
	 ${DOC}/trace.boot.dvi \
	 ${DOC}/union.lisp.dvi ${DOC}/unlisp.lisp.dvi \
	 ${DOC}/util.lisp.dvi ${DOC}/varini.boot.dvi \
	 ${DOC}/vmlisp.lisp.dvi ${DOC}/wi1.boot.dvi \
	 ${DOC}/wi2.boot.dvi \
	 ${DOC}/xrun.boot.dvi ${DOC}/xruncomp.boot.dvi 

UNUSED= ${DOC}/anna.boot.dvi ${DOC}/construc.lisp.dvi \
	${DOC}/domain.lisp.dvi 	${DOC}/guess.boot.dvi \
	${DOC}/interp-fix.boot.dvi \
	${DOC}/nhyper.boot.dvi ${DOC}/pf2atree.boot.dvi \
	${DOC}/redefs.boot.dvi 	${DOC}/word.boot.dvi 


all: all-ax

all-ax: $(MID) $(AUTO) stamp
	@echo 618 finished $(srcdir)

stamp: $(MID) $(AUTO) remove-stamp build-images
	$(STAMP) stamp

.PHONY: remove-stamp
remove-stamp:
	-rm -f stamp

.PHONY: build-images
build-images: remove-stamp $(SAVESYS) $(DEBUGSYS)

clean:
	@echo 619 cleaning $(builddir)

$(AUTO):
	$(mkinstalldirs) $@

$(MID):
	$(mkinstalldirs) $@

%.boot: $(srcdir)/%.boot.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<
.PRECIOUS: %.clisp
%.clisp: %.boot
	$(BOOT_TO_LISP)
.PRECIOUS: $(OUT)/%.$(OBJEXT)
$(OUT)/%.$(OBJEXT): %.clisp
	$(COMPILE_LISP)

mostlyclean-local: ;

clean-local: mostlyclean-local
distclean-local: clean-local

$(SAVESYS): $(axiom_build_bindir)
${SAVESYS}:	${DEPSYS} ${OBJS} ${OUT}/bookvol5.$(OBJEXT) ${OUT}/util.$(OBJEXT) \
                ${OUT}/nocompil.${LISP} ${OUT}/sys-pkg.${LISP} \
	        ${OUTINTERP} ${OCOBJS} ${OPOBJS} ${BROBJS} ${OUT}/obey.$(OBJEXT) \
		${OUT}/database.date ${INOBJS} ${ASCOMP} ${ASAUTO} \
		${NAGBROBJS} ${TRANOBJS} \
	        ${LOADSYS} \
		$(axiom_targetdir)/algebra/exposed.$(OBJEXT) \
		$(axiom_src_docdir)/msgs/s2-us.msgs \
	        ${INT}/algebra/warm.data
	@ echo 5 invoking make in `pwd` with parms:
	@ echo SYS= ${SYS} 
	@ echo LSP= ${LSP} 
	@ echo PART= ${PART} 
	@ echo SPAD= ${SPAD} 
	@ echo SRC= $(axiom_src_srcdir) 
	@ echo INT= ${INT}
	@ echo MID= ${MID} 
	@ echo OUT= ${OUT}
	@ echo OBJ= ${OBJ} 
	@ echo LISP=${LISP} BYE=${BYE}
	@ cp -p ${OUT}/*.fn ${MID}
	$(mkinstalldirs) $(axiom_target_datadir)/msgs
	$(INSTALL_DATA) $(axiom_src_docdir)/msgs/s2-us.msgs \
		 $(axiom_target_datadir)/msgs
	@ echo '${PROCLAIMS}' > ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/nocompil")' >> ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/bookvol5")' >> ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/util")' >> ${OUT}/makeint.lisp
	@ echo '(in-package "BOOT")' >> ${OUT}/makeint.lisp
	@ touch ${TIMESTAMP}
	@ echo '${YEARWEEK}' >> ${OUT}/makeint.lisp
	@ echo '(build-interpsys (append (quote ($(patsubst %, "%", ${OBJS}))) (quote ($(patsubst %, "%", ${ASCOMP}))) (quote ($(patsubst %, "%", ${INOBJS})))) (quote ($(patsubst %, "%", ${OPOBJS}))) (quote ($(patsubst %, "%", ${OCOBJS}))) (quote ($(patsubst %, "%", ${BROBJS}))) (quote ($(patsubst %, "%", ${TRANOBJS}))) (quote ($(patsubst %, "%", ${NAGBROBJS}))) (quote ($(patsubst %, "%", ${ASAUTO})))  "${SPAD}")' >> ${OUT}/makeint.lisp
	@ echo '(in-package "SCRATCHPAD-COMPILER")' >> ${OUT}/makeint.lisp
	@ echo '(boot::set-restart-hook)' >> ${OUT}/makeint.lisp
	@ echo '(in-package "BOOT")' >> ${OUT}/makeint.lisp
	@ echo '(load "${INT}/algebra/warm.data")' >> ${OUT}/makeint.lisp
	@ echo '(|clearClams|)' >> ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/obey")' >> ${OUT}/makeint.lisp
	@ echo '#+:akcl (setq compiler::*suppress-compiler-notes* t)' >> ${OUT}/makeint.lisp
	@ echo '#+:akcl (si::gbc-time 0)' >> ${OUT}/makeint.lisp
	@echo '(progn (gbc t) (load "${OUT}/makeint.lisp") (gbc t) (user::spad-save "$@"))' | ${LISPSYS}
	@ echo 6 ${SAVESYS} created
	$(mkinstalldirs) $(axiom_target_bindir)
	@ $(INSTALL_PROGRAM) $(SAVESYS) $(AXIOMSYS)
	@ echo 6a ${AXIOMSYS} created

depsys_lisp_sources += parsing.lisp metalex.lisp bootlex.lisp \
			newaux.lisp preparse.lisp postprop.lisp \
			metameta.lisp fnewmeta.lisp

depsys_boot_sources = postpar.boot parse.boot clam.boot slam.boot \
			g-boot.boot c-util.boot g-util.boot

depsys_SOURCES = $(depsys_lisp_SOURCES) $(depsys_boot_SOURCES)

depsys_objects = nocompil.$(OBJEXT) bookvol5.$(OBJEXT) \
		util.$(OBJEXT) postpar.$(OBJEXT) parse.$(OBJEXT) \
		parsing.$(OBJEXT) metalex.$(OBJEXT) bootlex.$(OBJEXT) \
		newaux.$(OBJEXT) preparse.$(OBJEXT) postprop.$(OBJEXT) \
		metameta.$(OBJEXT) fnewmeta.$(OBJEXT) clam.$(OBJEXT) \
		slam.$(OBJEXT) g-boot.$(OBJEXT) c-util.$(OBJEXT) \
		g-util.$(OBJEXT)

${DEPSYS}:	${DEP} ${OUT}/sys-pkg.${LISP} ${OUT}/nocompil.${LISP} \
	        ${OUT}/bookvol5.${LISP} ${OUT}/util.${LISP} \
	        ${OUT}/postpar.${LISP} ${OUT}/parse.${LISP} \
	        ${OUT}/parsing.${LISP} ${OUT}/metalex.${LISP} \
	        ${OUT}/bootlex.${LISP} ${OUT}/newaux.${LISP} \
	        ${OUT}/preparse.${LISP} \
	        ${OUT}/postprop.${LISP} ${OUT}/def.${LISP} \
	        ${OUT}/metameta.${LISP} ${OUT}/fnewmeta.${LISP} \
	        ${OUT}/g-boot.${LISP} ${OUT}/c-util.${LISP} \
	        ${OUT}/g-util.${LISP} \
	        ${OUT}/clam.${LISP} \
	        ${OUT}/slam.${LISP}
	@ echo 3 making ${DEPSYS} 
	@ echo '${PROCLAIMS}' > makedep.lisp
	@ echo '(push :oldboot *features*)' >> makedep.lisp
	@ echo '(load "${OUT}/nocompil")' >> makedep.lisp
	@ echo '(load "${OUT}/bookvol5")' >> makedep.lisp
	@ echo '(load "${OUT}/util")' >> makedep.lisp
	@ echo '(in-package "BOOT")' >> makedep.lisp
	@ echo '(build-depsys (quote ($(patsubst %, "%", ${DEP}))) "${SPAD}" "$(builddir)")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/postpar.$(OBJEXT)") (compile-file "${OUT}/postpar.${LISP}" :output-file "${OUT}/postpar.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/postpar")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/parse.$(OBJEXT)") (compile-file "${OUT}/parse.${LISP}" :output-file "${OUT}/parse.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/parse")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/parsing.$(OBJEXT)") (compile-file "${OUT}/parsing.${LISP}" :output-file "${OUT}/parsing.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/parsing")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/metalex.$(OBJEXT)") (compile-file "${OUT}/metalex.${LISP}" :output-file "${OUT}/metalex.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/metalex")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/bootlex.$(OBJEXT)") (compile-file "${OUT}/bootlex.${LISP}" :output-file "${OUT}/bootlex.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/bootlex")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/newaux.$(OBJEXT)") (compile-file "${OUT}/newaux.${LISP}" :output-file "${OUT}/newaux.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/newaux")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/preparse.$(OBJEXT)") (compile-file "${OUT}/preparse.${LISP}" :output-file "${OUT}/preparse.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/preparse")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/postprop.$(OBJEXT)") (compile-file "${OUT}/postprop.${LISP}" :output-file "${OUT}/postprop.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/postprop")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/def.$(OBJEXT)") (compile-file "${OUT}/def.${LISP}" :output-file "${OUT}/def.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/def")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/metameta.$(OBJEXT)") (compile-file "${OUT}/metameta.${LISP}" :output-file "${OUT}/metameta.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/metameta")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/fnewmeta.$(OBJEXT)") (compile-file "${OUT}/fnewmeta.${LISP}" :output-file "${OUT}/fnewmeta.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/fnewmeta")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/clam.$(OBJEXT)") (compile-file "${OUT}/clam.${LISP}" :output-file "${OUT}/clam.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/clam")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/slam.$(OBJEXT)") (compile-file "${OUT}/slam.${LISP}" :output-file "${OUT}/slam.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/slam")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/g-boot.$(OBJEXT)") (compile-file "${OUT}/g-boot.${LISP}" :output-file "${OUT}/g-boot.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/g-boot")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/c-util.$(OBJEXT)") (compile-file "${OUT}/c-util.${LISP}" :output-file "${OUT}/c-util.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/c-util")' >> makedep.lisp
	@ echo '(unless (probe-file "${OUT}/g-util.$(OBJEXT)") (compile-file "${OUT}/g-util.${LISP}" :output-file "${OUT}/g-util.$(OBJEXT)"))' >> makedep.lisp
	@ echo '(load "${OUT}/g-util")' >> makedep.lisp
	@ echo '(progn (load "makedep.lisp") (spad-save "$@"))' \
               | ${LISPSYS}
	@ echo 4 ${DEPSYS} created
${DEBUGSYS}: ${MID}/debugsys.lisp
	@ echo 7 building debugsys
	@ echo '(progn (gbc t) (load "${MID}/debugsys.lisp") (user::spad-save "$@"))' | ${LISPSYS}
	@ echo 8 ${DEBUGSYS} created

${MID}/exposed.lsp: $(axiom_src_algdir)/exposed.lsp.pamphlet
	@ echo 615 making ${MID}/exposed.lsp from $(axiom_src_algdir)/exposed.lsp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

$(axiom_targetdir)/algebra/exposed.$(OBJEXT) : ${MID}/exposed.lsp ${LISPSYS}
	@ echo 616 making $@ from ${MID}/exposed.lsp
	$(mkinstalldirs) $(axiom_targetdir)/algebra
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/exposed.lsp" :output-file "$(axiom_targetdir)/algebra/exposed.$(OBJEXT)") (${BYE}))' | ${LISPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/exposed.lsp" :output-file "$(axiom_targetdir)/algebra/exposed.$(OBJEXT)") (${BYE}))' | ${LISPSYS} >> ${TMP}/trace ; \
	  fi

${OUT}/database.date:
	@ echo 617 the database was updated...remaking interpsys
	@ touch ${OUT}/database.date


${OUT}/alql.$(OBJEXT): ${MID}/alql.clisp 
	@ echo 139 making ${OUT}/alql.$(OBJEXT) from ${MID}/alql.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/alql.clisp" :output-file "${OUT}/alql.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/alql.clisp" :output-file "${OUT}/alql.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/alql.clisp: $(srcdir)/alql.boot.pamphlet
	@ echo 140 making ${MID}/alql.clisp from $(srcdir)/alql.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/alql.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "alql.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "alql.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	   rm alql.boot )


${AUTO}/apply.$(OBJEXT): ${OUT}/apply.$(OBJEXT)
	@ echo 9 making ${AUTO}/apply.$(OBJEXT) from ${OUT}/apply.$(OBJEXT)
	@ cp ${OUT}/apply.$(OBJEXT) ${AUTO}

${OUT}/apply.$(OBJEXT): ${MID}/apply.clisp 
	@ echo 10 making ${OUT}/apply.$(OBJEXT) from ${MID}/apply.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/apply.clisp" :output-file "${OUT}/apply.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/apply.clisp" :output-file "${OUT}/apply.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/apply.clisp: $(srcdir)/apply.boot.pamphlet
	@ echo 11 making ${MID}/apply.clisp from $(srcdir)/apply.boot.pamphlet
	@( $(axiom_build_document) --tangle --output=$(MID)/apply.boot $<; \
	   cd ${MID} ; \
	   if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "apply.boot") (${BYE}))' | ${DEPSYS} ; \
	   else \
	   echo '(progn (boottran::boottocl "apply.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
           fi ; \
	   rm apply.boot )


${OUT}/as.$(OBJEXT): ${MID}/as.clisp 
	@ echo 416 making ${OUT}/as.$(OBJEXT) from ${MID}/as.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/as.clisp" :output-file "${OUT}/as.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/as.clisp" :output-file "${OUT}/as.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/as.clisp: $(srcdir)/as.boot.pamphlet
	@ echo 417 making ${MID}/as.clisp from $(srcdir)/as.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/as.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "as.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "as.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm as.boot )


${AUTO}/ax.$(OBJEXT): ${OUT}/ax.$(OBJEXT)
	@ echo 461 making ${AUTO}/ax.$(OBJEXT) from ${OUT}/ax.$(OBJEXT)
	@ cp ${OUT}/ax.$(OBJEXT) ${AUTO}

${OUT}/ax.$(OBJEXT): ${MID}/ax.clisp 
	@ echo 462 making ${OUT}/ax.$(OBJEXT) from ${MID}/ax.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ax.clisp" :output-file "${OUT}/ax.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ax.clisp" :output-file "${OUT}/ax.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ax.clisp: $(srcdir)/ax.boot.pamphlet
	@ echo 463 making ${MID}/ax.clisp from $(srcdir)/ax.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/ax.boot $< ; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ax.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ax.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ax.boot )


# .lisp files for AXIOM-XL support

${OUT}/axext_l.$(OBJEXT): ${MID}/axext_l.lisp
	@ echo 607 making ${OUT}/axext_l.$(OBJEXT) from ${MID}/axext_l.lisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/axext_l.lisp" :output-file "${OUT}/axext_l.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/axext_l.lisp" :output-file "${OUT}/axext_l.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/axext_l.lisp: $(srcdir)/axext_l.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/bc-matrix.$(OBJEXT): ${OUT}/bc-matrix.$(OBJEXT)
	@ echo 422 making ${AUTO}/bc-matrix.$(OBJEXT) from ${OUT}/bc-matrix.$(OBJEXT)
	@ cp ${OUT}/bc-matrix.$(OBJEXT) ${AUTO}

${OUT}/bc-matrix.$(OBJEXT): ${MID}/bc-matrix.clisp 
	@ echo 423 making ${OUT}/bc-matrix.$(OBJEXT) from ${MID}/bc-matrix.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-matrix.clisp" :output-file "${OUT}/bc-matrix.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-matrix.clisp" :output-file "${OUT}/bc-matrix.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-matrix.clisp: $(srcdir)/bc-matrix.boot.pamphlet
	@ echo 424 making ${MID}/bc-matrix.clisp from $(srcdir)/bc-matrix.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/bc-matrix.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-matrix.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-matrix.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-matrix.boot )


${AUTO}/bc-misc.$(OBJEXT): ${OUT}/bc-misc.$(OBJEXT)
	@ echo 426 making ${AUTO}/bc-misc.$(OBJEXT) from ${OUT}/bc-misc.$(OBJEXT)
	@ cp ${OUT}/bc-misc.$(OBJEXT) ${AUTO}

${OUT}/bc-misc.$(OBJEXT): ${MID}/bc-misc.clisp 
	@ echo 427 making ${OUT}/bc-misc.$(OBJEXT) from ${MID}/bc-misc.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-misc.clisp" :output-file "${OUT}/bc-misc.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-misc.clisp" :output-file "${OUT}/bc-misc.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-misc.clisp: $(srcdir)/bc-misc.boot.pamphlet
	@ echo 428 making ${MID}/bc-misc.clisp from $(srcdir)/bc-misc.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/bc-misc.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-misc.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-misc.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-misc.boot )


${AUTO}/bc-solve.$(OBJEXT): ${OUT}/bc-solve.$(OBJEXT)
	@ echo 430 making ${AUTO}/bc-solve.$(OBJEXT) from ${OUT}/bc-solve.$(OBJEXT)
	@ cp ${OUT}/bc-solve.$(OBJEXT) ${AUTO}

${OUT}/bc-solve.$(OBJEXT): ${MID}/bc-solve.clisp 
	@ echo 431 making ${OUT}/bc-solve.$(OBJEXT) from ${MID}/bc-solve.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-solve.clisp" :output-file "${OUT}/bc-solve.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-solve.clisp" :output-file "${OUT}/bc-solve.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-solve.clisp: $(srcdir)/bc-solve.boot.pamphlet
	@ echo 432 making ${MID}/bc-solve.clisp from $(srcdir)/bc-solve.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/bc-solve.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-solve.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-solve.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-solve.boot )


${AUTO}/bc-util.$(OBJEXT): ${OUT}/bc-util.$(OBJEXT)
	@ echo 434 making ${AUTO}/bc-util.$(OBJEXT) from ${OUT}/bc-util.$(OBJEXT)
	@ cp ${OUT}/bc-util.$(OBJEXT) ${AUTO}

${OUT}/bc-util.$(OBJEXT): ${MID}/bc-util.clisp 
	@ echo 435 making ${OUT}/bc-util.$(OBJEXT) from ${MID}/bc-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-util.clisp" :output-file "${OUT}/bc-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-util.clisp" :output-file "${OUT}/bc-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-util.clisp: $(srcdir)/bc-util.boot.pamphlet
	@ echo 436 making ${MID}/bc-util.clisp from $(srcdir)/bc-util.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/bc-util.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-util.boot )


${OUT}/bits.$(OBJEXT): ${MID}/bits.lisp
	@ echo 13 making ${OUT}/bits.$(OBJEXT) from ${MID}/bits.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bits.lisp" :output-file "${OUT}/bits.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bits.lisp" :output-file "${OUT}/bits.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
${MID}/bits.lisp: $(srcdir)/bits.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/bootfuns.${LISP}: ${MID}/bootfuns.lisp
	@ echo 16 making ${OUT}/bootfuns.${LISP} from ${MID}/bootfuns.lisp
	@ cp ${MID}/bootfuns.lisp ${OUT}/bootfuns.${LISP}

${MID}/bootfuns.lisp: $(srcdir)/bootfuns.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/bootlex.$(OBJEXT): ${OUT}/bootlex.$(OBJEXT)
	@ echo 19 making ${AUTO}/bootlex.$(OBJEXT) from ${OUT}/bootlex.$(OBJEXT)
	@ cp ${OUT}/bootlex.$(OBJEXT) ${AUTO}

${OUT}/bootlex.$(OBJEXT): ${MID}/bootlex.lisp 
	@ echo 20 making ${OUT}/bootlex.$(OBJEXT) from ${MID}/bootlex.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bootlex.lisp" :output-file "${OUT}/bootlex.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bootlex.lisp" :output-file "${OUT}/bootlex.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/bootlex.${LISP}: ${MID}/bootlex.lisp
	@ echo 21 making ${OUT}/bootlex.${LISP} from ${MID}/bootlex.lisp
	@cp ${MID}/bootlex.lisp ${OUT}/bootlex.${LISP}

${MID}/bootlex.lisp: $(srcdir)/bootlex.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/br-con.$(OBJEXT): ${OUT}/br-con.$(OBJEXT)
	@ echo 465 making ${AUTO}/br-con.$(OBJEXT) from ${OUT}/br-con.$(OBJEXT)
	@ cp ${OUT}/br-con.$(OBJEXT) ${AUTO}

${OUT}/br-con.$(OBJEXT): ${MID}/br-con.clisp 
	@ echo 466 making ${OUT}/br-con.$(OBJEXT) from ${MID}/br-con.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-con.clisp" :output-file "${OUT}/br-con.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-con.clisp" :output-file "${OUT}/br-con.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-con.clisp: $(srcdir)/br-con.boot.pamphlet
	@ echo 467 making ${MID}/br-con.clisp from $(srcdir)/br-con.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-con.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-con.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-con.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-con.boot )


${AUTO}/br-data.$(OBJEXT): ${OUT}/br-data.$(OBJEXT)
	@ echo 481 making ${AUTO}/br-data.$(OBJEXT) from ${OUT}/br-data.$(OBJEXT)
	@ cp ${OUT}/br-data.$(OBJEXT) ${AUTO}

${OUT}/br-data.$(OBJEXT): ${MID}/br-data.clisp 
	@ echo 482 making ${OUT}/br-data.$(OBJEXT) from ${MID}/br-data.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-data.clisp" :output-file "${OUT}/br-data.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-data.clisp" :output-file "${OUT}/br-data.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-data.clisp: $(srcdir)/br-data.boot.pamphlet
	@ echo 483 making ${MID}/br-data.clisp from $(srcdir)/br-data.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-data.boot $< ; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-data.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-data.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-data.boot )


${AUTO}/br-op1.$(OBJEXT): ${OUT}/br-op1.$(OBJEXT)
	@ echo 473 making ${AUTO}/br-op1.$(OBJEXT) from ${OUT}/br-op1.$(OBJEXT)
	@ cp ${OUT}/br-op1.$(OBJEXT) ${AUTO}

${OUT}/br-op1.$(OBJEXT): ${MID}/br-op1.clisp 
	@ echo 474 making ${OUT}/br-op1.$(OBJEXT) from ${MID}/br-op1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-op1.clisp" :output-file "${OUT}/br-op1.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-op1.clisp" :output-file "${OUT}/br-op1.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-op1.clisp: $(srcdir)/br-op1.boot.pamphlet
	@ echo 475 making ${MID}/br-op1.clisp from $(srcdir)/br-op1.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-op1.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-op1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-op1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-op1.boot )


${AUTO}/br-op2.$(OBJEXT): ${OUT}/br-op2.$(OBJEXT)
	@ echo 477 making ${AUTO}/br-op2.$(OBJEXT) from ${OUT}/br-op2.$(OBJEXT)
	@ cp ${OUT}/br-op2.$(OBJEXT) ${AUTO}

${OUT}/br-op2.$(OBJEXT): ${MID}/br-op2.clisp 
	@ echo 478 making ${OUT}/br-op2.$(OBJEXT) from ${MID}/br-op2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-op2.clisp" :output-file "${OUT}/br-op2.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-op2.clisp" :output-file "${OUT}/br-op2.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-op2.clisp: $(srcdir)/br-op2.boot.pamphlet
	@ echo 479 making ${MID}/br-op2.clisp from $(srcdir)/br-op2.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-op2.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-op2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-op2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-op2.boot )


${AUTO}/br-prof.$(OBJEXT): ${OUT}/br-prof.$(OBJEXT)
	@ echo 497 making ${AUTO}/br-prof.$(OBJEXT) from ${OUT}/br-prof.$(OBJEXT)
	@ cp ${OUT}/br-prof.$(OBJEXT) ${AUTO}

${OUT}/br-prof.$(OBJEXT): ${MID}/br-prof.clisp 
	@ echo 498 making ${OUT}/br-prof.$(OBJEXT) from ${MID}/br-prof.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-prof.clisp" :output-file "${OUT}/br-prof.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-prof.clisp" :output-file "${OUT}/br-prof.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-prof.clisp: $(srcdir)/br-prof.boot.pamphlet
	@ echo 499 making ${MID}/br-prof.clisp from $(srcdir)/br-prof.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-prof.boot $< ;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-prof.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-prof.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-prof.boot )


${AUTO}/br-saturn.$(OBJEXT): ${OUT}/br-saturn.$(OBJEXT)
	@ echo 489 making ${AUTO}/br-saturn.$(OBJEXT) from ${OUT}/br-saturn.$(OBJEXT)
	@ cp ${OUT}/br-saturn.$(OBJEXT) ${AUTO}

${OUT}/br-saturn.$(OBJEXT): ${MID}/br-saturn.clisp 
	@ echo 490 making ${OUT}/br-saturn.$(OBJEXT) from ${MID}/br-saturn.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-saturn.clisp" :output-file "${OUT}/br-saturn.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-saturn.clisp" :output-file "${OUT}/br-saturn.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-saturn.clisp: $(srcdir)/br-saturn.boot.pamphlet
	@ echo 491 making ${MID}/br-saturn.clisp from $(srcdir)/br-saturn.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-saturn.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-saturn.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-saturn.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-saturn.boot )


${AUTO}/br-search.$(OBJEXT): ${OUT}/br-search.$(OBJEXT)
	@ echo 469 making ${AUTO}/br-search.$(OBJEXT) from ${OUT}/br-search.$(OBJEXT)
	@ cp ${OUT}/br-search.$(OBJEXT) ${AUTO}

${OUT}/br-search.$(OBJEXT): ${MID}/br-search.clisp 
	@ echo 470 making ${OUT}/br-search.$(OBJEXT) from ${MID}/br-search.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-search.clisp" :output-file "${OUT}/br-search.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-search.clisp" :output-file "${OUT}/br-search.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-search.clisp: $(srcdir)/br-search.boot.pamphlet
	@ echo 471 making ${MID}/br-search.clisp from $(srcdir)/br-search.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-search.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-search.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-search.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-search.boot )


${AUTO}/br-util.$(OBJEXT): ${OUT}/br-util.$(OBJEXT)
	@ echo 485 making ${AUTO}/br-util.$(OBJEXT) from ${OUT}/br-util.$(OBJEXT)
	@ cp ${OUT}/br-util.$(OBJEXT) ${AUTO}

${OUT}/br-util.$(OBJEXT): ${MID}/br-util.clisp 
	@ echo 486 making ${OUT}/br-util.$(OBJEXT) from ${MID}/br-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-util.clisp" :output-file "${OUT}/br-util.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-util.clisp" :output-file "${OUT}/br-util.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-util.clisp: $(srcdir)/br-util.boot.pamphlet
	@ echo 487 making ${MID}/br-util.clisp from $(srcdir)/br-util.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/br-util.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-util.boot )


${OUT}/buildom.$(OBJEXT): ${MID}/buildom.clisp 
	@ echo 142 making ${OUT}/buildom.$(OBJEXT) from ${MID}/buildom.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/buildom.clisp" :output-file "${OUT}/buildom.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/buildom.clisp" :output-file "${OUT}/buildom.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/buildom.clisp: $(srcdir)/buildom.boot.pamphlet
	@ echo 143 making ${MID}/buildom.clisp from $(srcdir)/buildom.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/buildom.boot $< ;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "buildom.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "buildom.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm buildom.boot )


${AUTO}/category.$(OBJEXT): ${OUT}/category.$(OBJEXT)
	@ echo 210 making ${AUTO}/ category.$(OBJEXT) from ${OUT}/category.$(OBJEXT)
	@ cp ${OUT}/category.$(OBJEXT) ${AUTO}

${OUT}/category.$(OBJEXT): ${MID}/category.clisp 
	@ echo 211 making ${OUT}/category.$(OBJEXT) from ${MID}/category.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/category.clisp" :output-file "${OUT}/category.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/category.clisp" :output-file "${OUT}/category.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/category.clisp: $(srcdir)/category.boot.pamphlet
	@ echo 212 making ${MID}/category.clisp from $(srcdir)/category.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/category.boot $< ;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "category.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "category.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm category.boot )


${OUT}/cattable.$(OBJEXT): ${MID}/cattable.clisp 
	@ echo 214 making ${OUT}/cattable.$(OBJEXT) from ${MID}/cattable.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/cattable.clisp" :output-file "${OUT}/cattable.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/cattable.clisp" :output-file "${OUT}/cattable.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/cattable.clisp: $(srcdir)/cattable.boot.pamphlet
	@ echo 215 making ${MID}/cattable.clisp from $(srcdir)/cattable.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/cattable.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "cattable.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "cattable.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm cattable.boot )


${AUTO}/c-doc.$(OBJEXT): ${OUT}/c-doc.$(OBJEXT)
	@ echo 217 making ${AUTO}/c-doc.$(OBJEXT) from ${OUT}/c-doc.$(OBJEXT)
	@ cp ${OUT}/c-doc.$(OBJEXT) ${AUTO}

${OUT}/c-doc.$(OBJEXT): ${MID}/c-doc.clisp 
	@ echo 218 making ${OUT}/c-doc.$(OBJEXT) from ${MID}/c-doc.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/c-doc.clisp" :output-file "${OUT}/c-doc.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/c-doc.clisp" :output-file "${OUT}/c-doc.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/c-doc.clisp: $(srcdir)/c-doc.boot.pamphlet
	@ echo 219 making ${MID}/c-doc.clisp from $(srcdir)/c-doc.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/c-doc.boot $< ; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "c-doc.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "c-doc.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm c-doc.boot )


${OUT}/cfuns.$(OBJEXT): ${MID}/cfuns.lisp
	@ echo 24 making ${OUT}/cfuns.$(OBJEXT) from ${MID}/cfuns.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/cfuns.lisp" :output-file "${OUT}/cfuns.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/cfuns.lisp" :output-file "${OUT}/cfuns.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/cfuns.lisp: $(srcdir)/cfuns.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/clam.${LISP}: $(srcdir)/clam.boot.pamphlet
	@ echo 221 making ${OUT}/clam.${LISP} from $(srcdir)/clam.boot.pamphlet
	@ rm -f ${OUT}/clam.$(OBJEXT)
	$(axiom_build_document) --tangle=clam.clisp --output=$@ $<
${OUT}/clam.$(OBJEXT): ${MID}/clam.clisp 
	@ echo 222 making ${OUT}/clam.$(OBJEXT) from ${MID}/clam.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/clam.clisp" :output-file "${OUT}/clam.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/clam.clisp" :output-file "${OUT}/clam.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/clam.clisp: $(srcdir)/clam.boot.pamphlet
	@ echo 223 making ${MID}/clam.clisp from $(srcdir)/clam.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/clam.boot $< ; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "clam.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "clam.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm clam.boot )


${OUT}/clammed.$(OBJEXT): ${MID}/clammed.clisp 
	@ echo 225 making ${OUT}/clammed.$(OBJEXT) from ${MID}/clammed.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/clammed.clisp" :output-file "${OUT}/clammed.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/clammed.clisp" :output-file "${OUT}/clammed.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/clammed.clisp: $(srcdir)/clammed.boot.pamphlet
	@ echo 226 making ${MID}/clammed.clisp from $(srcdir)/clammed.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/clammed.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "clammed.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "clammed.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm clammed.boot)


${OUT}/comp.$(OBJEXT): ${MID}/comp.lisp
	@ echo 27 making ${OUT}/comp.$(OBJEXT) from ${MID}/comp.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/comp.lisp" :output-file "${OUT}/comp.$(OBJEXT)") (${BYE}))' | ${DEPSYS}  ; \
	  else \
	   echo '(progn  (compile-file "${MID}/comp.lisp" :output-file "${OUT}/comp.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/comp.lisp: $(srcdir)/comp.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/compat.$(OBJEXT): ${MID}/compat.clisp 
	@ echo 228 making ${OUT}/compat.$(OBJEXT) from ${MID}/compat.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/compat.clisp" :output-file "${OUT}/compat.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/compat.clisp" :output-file "${OUT}/compat.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/compat.clisp: $(srcdir)/compat.boot.pamphlet
	@ echo 229 making ${MID}/compat.clisp from $(srcdir)/compat.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/compat.boot $< ; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compat.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compat.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm compat.boot )


${AUTO}/compiler.$(OBJEXT): ${OUT}/compiler.$(OBJEXT)
	@ echo 231 making ${AUTO}/compiler.$(OBJEXT) from ${OUT}/compiler.$(OBJEXT)
	@ cp ${OUT}/compiler.$(OBJEXT) ${AUTO}

${OUT}/compiler.$(OBJEXT): ${MID}/compiler.clisp 
	@ echo 232 making ${OUT}/compiler.$(OBJEXT) from ${MID}/compiler.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/compiler.clisp" :output-file "${OUT}/compiler.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
          else \
	   echo '(progn  (compile-file "${MID}/compiler.clisp" :output-file "${OUT}/compiler.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/compiler.clisp: $(srcdir)/compiler.boot.pamphlet
	@ echo 233 making ${MID}/compiler.clisp from $(srcdir)/compiler.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/compiler.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compiler.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compiler.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm compiler.boot )


${OUT}/compress.$(OBJEXT): ${MID}/compress.clisp 
	@ echo 239 making ${OUT}/compress.$(OBJEXT) from ${MID}/compress.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/compress.clisp" :output-file "${OUT}/compress.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/compress.clisp" :output-file "${OUT}/compress.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/compress.clisp: $(srcdir)/compress.boot.pamphlet
	@ echo 240 making ${MID}/compress.clisp from $(srcdir)/compress.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/compress.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compress.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compress.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm compress.boot )


${OUT}/construc.$(OBJEXT): ${MID}/construc.lisp
	@ echo 30 making ${OUT}/construc.$(OBJEXT) from ${MID}/construc.lisp
	@ ( cd ${MID} ; \
	   echo '(progn  (compile-file "${MID}/construc.lisp" :output-file "${OUT}/construc.$(OBJEXT)") (${BYE}))' | ${DEPSYS}  )

${MID}/construc.lisp: $(srcdir)/construc.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/c-util.$(OBJEXT): ${OUT}/c-util.$(OBJEXT)
	@ echo 145 making ${AUTO}/c-util.$(OBJEXT) from ${OUT}/c-util.$(OBJEXT)
	@ cp ${OUT}/c-util.$(OBJEXT) ${AUTO}

${OUT}/c-util.${LISP}: $(srcdir)/c-util.boot.pamphlet
	@ echo 146 making ${OUT}/c-util.${LISP} from $(srcdir)/c-util.boot.pamphlet
	@ rm -f ${OUT}/c-util.$(OBJEXT)
	$(axiom_build_document) --tangle=c-util.clisp --output=$@ $<

${OUT}/c-util.$(OBJEXT): ${MID}/c-util.clisp 
	@ echo 147 making ${OUT}/c-util.$(OBJEXT) from ${MID}/c-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/c-util.clisp" :output-file "${OUT}/c-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/c-util.clisp" :output-file "${OUT}/c-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/c-util.clisp: $(srcdir)/c-util.boot.pamphlet
	@ echo 148 making ${MID}/c-util.clisp from $(srcdir)/c-util.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/c-util.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "c-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "c-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm c-util.boot )


${OUT}/daase.$(OBJEXT): ${MID}/daase.lisp
	@ echo 33 making ${OUT}/daase.$(OBJEXT) from ${MID}/daase.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/daase.lisp" :output-file "${OUT}/daase.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/daase.lisp" :output-file "${OUT}/daase.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/daase.lisp: $(srcdir)/daase.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/database.$(OBJEXT): ${MID}/database.clisp 
	@ echo 242 making ${OUT}/database.$(OBJEXT) from ${MID}/database.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/database.clisp" :output-file "${OUT}/database.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/database.clisp" :output-file "${OUT}/database.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/database.clisp: $(srcdir)/database.boot.pamphlet
	@ echo 243 making ${MID}/database.clisp from $(srcdir)/database.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/database.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "database.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "database.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm database.boot )


${OUT}/debug.$(OBJEXT): ${MID}/debug.lisp
	@ echo 36 making ${OUT}/debug.$(OBJEXT) from ${MID}/debug.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/debug.lisp" :output-file "${OUT}/debug.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/debug.lisp" :output-file "${OUT}/debug.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/debug.lisp: $(srcdir)/debug.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${MID}/debugsys.lisp: $(srcdir)/debugsys.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/def.$(OBJEXT): ${OUT}/def.$(OBJEXT)
	@ echo 41 making ${AUTO}/def.$(OBJEXT) from ${OUT}/def.$(OBJEXT)
	@ cp ${OUT}/def.$(OBJEXT) ${AUTO}

${OUT}/def.$(OBJEXT): ${MID}/def.lisp 
	@ echo 42 making ${OUT}/def.$(OBJEXT) from ${MID}/def.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/def.lisp" :output-file "${OUT}/def.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/def.lisp" :output-file "${OUT}/def.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/def.${LISP}: ${MID}/def.lisp
	@ echo 43 making ${OUT}/def.${LISP} from ${MID}/def.lisp
	@ rm -f ${OUT}/def.$(OBJEXT)
	@ cp ${MID}/def.lisp ${OUT}/def.${LISP}

${MID}/def.lisp: $(srcdir)/def.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/define.$(OBJEXT): ${OUT}/define.$(OBJEXT)
	@ echo 245 making ${AUTO}/define.$(OBJEXT) from ${OUT}/define.$(OBJEXT)
	@ cp ${OUT}/define.$(OBJEXT) ${AUTO}

${OUT}/define.$(OBJEXT): ${MID}/define.clisp 
	@ echo 246 making ${OUT}/define.$(OBJEXT) from ${MID}/define.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/define.clisp" :output-file "${OUT}/define.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/define.clisp" :output-file "${OUT}/define.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/define.clisp: $(srcdir)/define.boot.pamphlet
	@ echo 247 making ${MID}/define.clisp from $(srcdir)/define.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/define.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "define.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "define.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm define.boot )


${OUT}/fname.$(OBJEXT): ${MID}/fname.lisp
	@ echo 46 making ${OUT}/fname.$(OBJEXT) from ${MID}/fname.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/fname.lisp" :output-file "${OUT}/fname.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/fname.lisp" :output-file "${OUT}/fname.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/fname.lisp: $(srcdir)/fname.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/fnewmeta.$(OBJEXT): ${OUT}/fnewmeta.$(OBJEXT)
	@ echo 49 making ${AUTO}/fnewmeta.$(OBJEXT) from ${OUT}/fnewmeta.$(OBJEXT)
	@ cp ${OUT}/fnewmeta.$(OBJEXT) ${AUTO}

${OUT}/fnewmeta.$(OBJEXT): ${MID}/fnewmeta.lisp 
	@ echo 50 making ${OUT}/fnewmeta.$(OBJEXT) from ${MID}/fnewmeta.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/fnewmeta.lisp" :output-file "${OUT}/fnewmeta.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/fnewmeta.lisp" :output-file "${OUT}/fnewmeta.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/fnewmeta.${LISP}: $(srcdir)/fnewmeta.lisp.pamphlet
	@ echo 51 making ${OUT}/fnewmeta.${LISP} from ${MID}/fnewmeta.lisp.pamphlet
	@ rm -f ${OUT}/fnewmeta.$(OBJEXT)
	$(axiom_build_document) --tangle --output=$@ $<
${MID}/fnewmeta.lisp: $(srcdir)/fnewmeta.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/format.$(OBJEXT): ${MID}/format.clisp 
	@ echo 249 making ${OUT}/format.$(OBJEXT) from ${MID}/format.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/format.clisp" :output-file "${OUT}/format.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/format.clisp" :output-file "${OUT}/format.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/format.clisp: $(srcdir)/format.boot.pamphlet
	@ echo 250 making ${MID}/format.clisp from $(srcdir)/format.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/format.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "format.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "format.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm format.boot )


${OUT}/fortcall.$(OBJEXT): ${MID}/fortcall.clisp 
	@ echo 54 making ${OUT}/fortcall.$(OBJEXT) from ${MID}/fortcall.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/fortcall.clisp" :output-file "${OUT}/fortcall.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/fortcall.clisp" :output-file "${OUT}/fortcall.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/fortcall.clisp: $(srcdir)/fortcall.boot.pamphlet
	@ echo 55 making ${MID}/fortcall.lisp from $(srcdir)/fortcall.boot.pamphlet
	@( $(axiom_build_document) --tangle --output=$(MID)/fortcall.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "fortcall.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "fortcall.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm fortcall.boot )


${OUT}/foam_l.$(OBJEXT): ${MID}/foam_l.lisp
	@ echo 610 making ${OUT}/foam_l.$(OBJEXT) from ${MID}/foam_l.lisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "foam_l.lisp" :output-file "${OUT}/foam_l.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "foam_l.lisp" :output-file "${OUT}/foam_l.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/foam_l.lisp: $(srcdir)/foam_l.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/functor.$(OBJEXT): ${OUT}/functor.$(OBJEXT)
	@ echo 252 making ${AUTO}/functor.$(OBJEXT) from ${OUT}/functor.$(OBJEXT)
	@ cp ${OUT}/functor.$(OBJEXT) ${AUTO}

${OUT}/functor.$(OBJEXT): ${MID}/functor.clisp 
	@ echo 253 making ${OUT}/functor.$(OBJEXT) from ${MID}/functor.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/functor.clisp" :output-file "${OUT}/functor.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/functor.clisp" :output-file "${OUT}/functor.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/functor.clisp: $(srcdir)/functor.boot.pamphlet
	@ echo 254 making ${MID}/functor.clisp from $(srcdir)/functor.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/functor.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "functor.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "functor.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm functor.boot )


${OUT}/g-boot.${LISP}: $(srcdir)/g-boot.boot.pamphlet
	@ echo 256 making ${OUT}/g-boot.${LISP} from $(srcdir)/g-boot.boot.pamphlet
	@ rm -f ${OUT}/g-boot.$(OBJEXT)
	$(axiom_build_document) --tangle=g-boot.clisp --output=$@ $<
${OUT}/g-boot.$(OBJEXT): ${MID}/g-boot.clisp 
	@ echo 257 making ${OUT}/g-boot.$(OBJEXT) from ${MID}/g-boot.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-boot.clisp" :output-file "${OUT}/g-boot.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-boot.clisp" :output-file "${OUT}/g-boot.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-boot.clisp: $(srcdir)/g-boot.boot.pamphlet
	@ echo 258 making ${MID}/g-boot.clisp from $(srcdir)/g-boot.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/g-boot.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-boot.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-boot.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-boot.boot )


${OUT}/g-cndata.$(OBJEXT): ${MID}/g-cndata.clisp 
	@ echo 260 making ${OUT}/g-cndata.$(OBJEXT) from ${MID}/g-cndata.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-cndata.clisp" :output-file "${OUT}/g-cndata.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-cndata.clisp" :output-file "${OUT}/g-cndata.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-cndata.clisp: $(srcdir)/g-cndata.boot.pamphlet
	@ echo 261 making ${MID}/g-cndata.clisp from $(srcdir)/g-cndata.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/g-cndata.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-cndata.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-cndata.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-cndata.boot )


${OUT}/g-error.$(OBJEXT): ${MID}/g-error.clisp 
	@ echo 263 making ${OUT}/g-error.$(OBJEXT) from ${MID}/g-error.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-error.clisp" :output-file "${OUT}/g-error.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-error.clisp" :output-file "${OUT}/g-error.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-error.clisp: $(srcdir)/g-error.boot.pamphlet
	@ echo 264 making ${MID}/g-error.clisp from $(srcdir)/g-error.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/g-error.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-error.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-error.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-error.boot )


${OUT}/ggreater.$(OBJEXT): ${MID}/ggreater.lisp
	@ echo 57 making ${OUT}/ggreater.$(OBJEXT) from ${MID}/ggreater.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ggreater.lisp" :output-file "${OUT}/ggreater.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ggreater.lisp" :output-file "${OUT}/ggreater.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ggreater.lisp: $(srcdir)/ggreater.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/g-opt.$(OBJEXT): ${MID}/g-opt.clisp 
	@ echo 266 making ${OUT}/g-opt.$(OBJEXT) from ${MID}/g-opt.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-opt.clisp" :output-file "${OUT}/g-opt.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-opt.clisp" :output-file "${OUT}/g-opt.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-opt.clisp: $(srcdir)/g-opt.boot.pamphlet
	@ echo 267 making ${MID}/g-opt.clisp from $(srcdir)/g-opt.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/g-opt.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-opt.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-opt.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-opt.boot )


${OUT}/g-timer.$(OBJEXT): ${MID}/g-timer.clisp 
	@ echo 269 making ${OUT}/g-timer.$(OBJEXT) from ${MID}/g-timer.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-timer.clisp" :output-file "${OUT}/g-timer.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-timer.clisp" :output-file "${OUT}/g-timer.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-timer.clisp: $(srcdir)/g-timer.boot.pamphlet
	@ echo 270 making ${MID}/g-timer.clisp from $(srcdir)/g-timer.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/g-timer.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-timer.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-timer.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-timer.boot )


${OUT}/g-util.${LISP}: $(srcdir)/g-util.boot.pamphlet
	@ echo 272 making ${OUT}/g-util.${LISP} from $(srcdir)/g-util.boot.pamphlet
	@ rm -f ${OUT}/g-util.$(OBJEXT)
	$(axiom_build_document) --tangle=g-util.clisp --output=$@ $<
${OUT}/g-util.$(OBJEXT): ${MID}/g-util.clisp 
	@ echo 273 making ${OUT}/g-util.$(OBJEXT) from ${MID}/g-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-util.clisp" :output-file "${OUT}/g-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-util.clisp" :output-file "${OUT}/g-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-util.clisp: $(srcdir)/g-util.boot.pamphlet
	@ echo 274 making ${MID}/g-util.clisp from $(srcdir)/g-util.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/g-util.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-util.boot )


${OUT}/hash.$(OBJEXT): ${MID}/hash.lisp
	@ echo 60 making ${OUT}/hash.$(OBJEXT) from ${MID}/hash.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/hash.lisp" :output-file "${OUT}/hash.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/hash.lisp" :output-file "${OUT}/hash.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/hash.lisp: $(srcdir)/hash.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<


${OUT}/hashcode.$(OBJEXT): ${MID}/hashcode.clisp 
	@ echo 583 making ${OUT}/hashcode.$(OBJEXT) from ${MID}/hashcode.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/hashcode.clisp" :output-file "${OUT}/hashcode.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/hashcode.clisp" :output-file "${OUT}/hashcode.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/hashcode.clisp: $(srcdir)/hashcode.boot.pamphlet
	@ echo 584 making ${MID}/hashcode.clisp from $(srcdir)/hashcode.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/hashcode.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "hashcode.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "hashcode.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm hashcode.boot )


${AUTO}/htcheck.$(OBJEXT): ${OUT}/htcheck.$(OBJEXT)
	@ echo 453 making ${AUTO}/htcheck.$(OBJEXT) from ${OUT}/htcheck.$(OBJEXT)
	@ cp ${OUT}/htcheck.$(OBJEXT) ${AUTO}

${OUT}/htcheck.$(OBJEXT): ${MID}/htcheck.clisp 
	@ echo 454 making ${OUT}/htcheck.$(OBJEXT) from ${MID}/htcheck.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/htcheck.clisp" :output-file "${OUT}/htcheck.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/htcheck.clisp" :output-file "${OUT}/htcheck.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/htcheck.clisp: $(srcdir)/htcheck.boot.pamphlet
	@ echo 455 making ${MID}/htcheck.clisp from $(srcdir)/htcheck.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/htcheck.boot $< ;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "htcheck.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "htcheck.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm htcheck.boot )


${AUTO}/ht-root.$(OBJEXT): ${OUT}/ht-root.$(OBJEXT)
	@ echo 449 making ${AUTO}/ht-root.$(OBJEXT) from ${OUT}/ht-root.$(OBJEXT)
	@ cp ${OUT}/ht-root.$(OBJEXT) ${AUTO}

${OUT}/ht-root.$(OBJEXT): ${MID}/ht-root.clisp 
	@ echo 450 making ${OUT}/ht-root.$(OBJEXT) from ${MID}/ht-root.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ht-root.clisp" :output-file "${OUT}/ht-root.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ht-root.clisp" :output-file "${OUT}/ht-root.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ht-root.clisp: $(srcdir)/ht-root.boot.pamphlet
	@ echo 451 making ${MID}/ht-root.clisp from $(srcdir)/ht-root.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/ht-root.boot $< ; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ht-root.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ht-root.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ht-root.boot )


${AUTO}/htsetvar.$(OBJEXT): ${OUT}/htsetvar.$(OBJEXT)
	@ echo 442 making ${AUTO}/htsetvar.$(OBJEXT) from ${OUT}/htsetvar.$(OBJEXT)
	@ cp ${OUT}/htsetvar.$(OBJEXT) ${AUTO}

${OUT}/htsetvar.$(OBJEXT): ${MID}/htsetvar.clisp 
	@ echo 443 making ${OUT}/htsetvar.$(OBJEXT) from ${MID}/htsetvar.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/htsetvar.clisp" :output-file "${OUT}/htsetvar.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/htsetvar.clisp" :output-file "${OUT}/htsetvar.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/htsetvar.clisp: $(srcdir)/htsetvar.boot.pamphlet
	@ echo 444 making ${MID}/htsetvar.clisp from $(srcdir)/htsetvar.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/htsetvar.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "htsetvar.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "htsetvar.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm htsetvar.boot )


${AUTO}/ht-util.$(OBJEXT): ${OUT}/ht-util.$(OBJEXT)
	@ echo 438 making ${AUTO}/ht-util.$(OBJEXT) from ${OUT}/ht-util.$(OBJEXT)
	@ cp ${OUT}/ht-util.$(OBJEXT) ${AUTO}

${OUT}/ht-util.$(OBJEXT): ${MID}/ht-util.clisp 
	@ echo 439 making ${OUT}/ht-util.$(OBJEXT) from ${MID}/ht-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ht-util.clisp" :output-file "${OUT}/ht-util.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ht-util.clisp" :output-file "${OUT}/ht-util.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ht-util.clisp: $(srcdir)/ht-util.boot.pamphlet
	@ echo 440 making ${MID}/ht-util.clisp from $(srcdir)/ht-util.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/ht-util.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ht-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ht-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ht-util.boot )


${OUT}/hypertex.$(OBJEXT): ${MID}/hypertex.clisp 
	@ echo 276 making ${OUT}/hypertex.$(OBJEXT) from ${MID}/hypertex.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/hypertex.clisp" :output-file "${OUT}/hypertex.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/hypertex.clisp" :output-file "${OUT}/hypertex.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/hypertex.clisp: $(srcdir)/hypertex.boot.pamphlet
	@ echo 277 making ${MID}/hypertex.clisp from $(srcdir)/hypertex.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/hypertex.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "hypertex.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "hypertex.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm hypertex.boot )


${OUT}/i-analy.$(OBJEXT): ${MID}/i-analy.clisp 
	@ echo 279 making ${OUT}/i-analy.$(OBJEXT) from ${MID}/i-analy.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-analy.clisp" :output-file "${OUT}/i-analy.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-analy.clisp" :output-file "${OUT}/i-analy.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-analy.clisp: $(srcdir)/i-analy.boot.pamphlet
	@ echo 280 making ${MID}/i-analy.clisp from $(srcdir)/i-analy.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-analy.boot $<; \
          cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-analy.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-analy.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-analy.boot )


${OUT}/i-code.$(OBJEXT): ${MID}/i-code.clisp 
	@ echo 282 making ${OUT}/i-code.$(OBJEXT) from ${MID}/i-code.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-code.clisp" :output-file "${OUT}/i-code.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-code.clisp" :output-file "${OUT}/i-code.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-code.clisp: $(srcdir)/i-code.boot.pamphlet
	@ echo 283 making ${MID}/i-code.clisp from $(srcdir)/i-code.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-code.boot $< ;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-code.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-code.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-code.boot )


${OUT}/i-coerce.$(OBJEXT): ${MID}/i-coerce.clisp 
	@ echo 285 making ${OUT}/i-coerce.$(OBJEXT) from ${MID}/i-coerce.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-coerce.clisp" :output-file "${OUT}/i-coerce.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-coerce.clisp" :output-file "${OUT}/i-coerce.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-coerce.clisp: $(srcdir)/i-coerce.boot.pamphlet
	@ echo 286 making ${MID}/i-coerce.clisp from $(srcdir)/i-coerce.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-coerce.boot $<; \
	cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-coerce.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-coerce.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-coerce.boot )


${OUT}/i-coerfn.$(OBJEXT): ${MID}/i-coerfn.clisp 
	@ echo 288 making ${OUT}/i-coerfn.$(OBJEXT) from ${MID}/i-coerfn.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-coerfn.clisp" :output-file "${OUT}/i-coerfn.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-coerfn.clisp" :output-file "${OUT}/i-coerfn.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-coerfn.clisp: $(srcdir)/i-coerfn.boot.pamphlet
	@ echo 289 making ${MID}/i-coerfn.clisp from $(srcdir)/i-coerfn.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-coerfn.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-coerfn.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-coerfn.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-coerfn.boot )


${OUT}/i-eval.$(OBJEXT): ${MID}/i-eval.clisp 
	@ echo 291 making ${OUT}/i-eval.$(OBJEXT) from ${MID}/i-eval.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-eval.clisp" :output-file "${OUT}/i-eval.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-eval.clisp" :output-file "${OUT}/i-eval.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-eval.clisp: $(srcdir)/i-eval.boot.pamphlet
	@ echo 292 making ${MID}/i-eval.clisp from $(srcdir)/i-eval.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-eval.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-eval.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-eval.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-eval.boot )


${OUT}/i-funsel.$(OBJEXT): ${MID}/i-funsel.clisp 
	@ echo 294 making ${OUT}/i-funsel.$(OBJEXT) from ${MID}/i-funsel.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-funsel.clisp" :output-file "${OUT}/i-funsel.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-funsel.clisp" :output-file "${OUT}/i-funsel.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-funsel.clisp: $(srcdir)/i-funsel.boot.pamphlet
	@ echo 295 making ${MID}/i-funsel.clisp from $(srcdir)/i-funsel.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-funsel.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-funsel.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-funsel.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-funsel.boot )


${OUT}/bookvol5.$(OBJEXT): ${MID}/bookvol5.${LISP}
	@ echo 297 making ${OUT}/bookvol5.$(OBJEXT) from ${MID}/bookvol5.${LISP}
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bookvol5.${LISP}" :output-file "${OUT}/bookvol5.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bookvol5.${LISP}" :output-file "${OUT}/bookvol5.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/bookvol5.${LISP}: ${MID}/bookvol5.${LISP}
	@ echo 133 making ${OUT}/bookvol5.${LISP} from ${MID}/bookvol5.${LISP}
	@cp ${MID}/bookvol5.${LISP} ${OUT}/bookvol5.${LISP}

${MID}/bookvol5.${LISP}: $(srcdir)/bookvol5.pamphlet
	@ echo 298 making ${MID}/bookvol5.${LISP} from $(srcdir)/bookvol5.pamphlet
	$(axiom_build_document) --tangle=Interpreter --output=$@ $<

${OUT}/i-intern.$(OBJEXT): ${MID}/i-intern.clisp 
	@ echo 300 making ${OUT}/i-intern.$(OBJEXT) from ${MID}/i-intern.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-intern.clisp" :output-file "${OUT}/i-intern.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-intern.clisp" :output-file "${OUT}/i-intern.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	 fi )

${MID}/i-intern.clisp: $(srcdir)/i-intern.boot.pamphlet
	@ echo 301 making ${MID}/i-intern.clisp from $(srcdir)/i-intern.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-intern.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-intern.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-intern.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-intern.boot )


${OUT}/interop.$(OBJEXT): ${MID}/interop.clisp
	@ echo 586 making ${OUT}/interop.$(OBJEXT) from ${MID}/interop.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/interop.clisp" :output-file "${OUT}/interop.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/interop.clisp" :output-file "${OUT}/interop.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/interop.clisp: $(srcdir)/interop.boot.pamphlet
	@ echo 587 making ${MID}/interop.clisp from $(srcdir)/interop.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/interop.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "interop.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "interop.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm interop.boot )


${OUT}/i-map.$(OBJEXT): ${MID}/i-map.clisp 
	@ echo 303 making ${OUT}/i-map.$(OBJEXT) from ${MID}/i-map.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-map.clisp" :output-file "${OUT}/i-map.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-map.clisp" :output-file "${OUT}/i-map.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-map.clisp: $(srcdir)/i-map.boot.pamphlet
	@ echo 304 making ${MID}/i-map.clisp from $(srcdir)/i-map.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-map.boot $< ; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-map.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-map.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-map.boot )


${AUTO}/info.$(OBJEXT): ${OUT}/info.$(OBJEXT)
	@ echo 327 making ${AUTO}/info.$(OBJEXT) from ${OUT}/info.$(OBJEXT)
	@ cp ${OUT}/info.$(OBJEXT) ${AUTO}

${OUT}/info.$(OBJEXT): ${MID}/info.clisp 
	@ echo 328 making ${OUT}/info.$(OBJEXT) from ${MID}/info.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/info.clisp" :output-file "${OUT}/info.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/info.clisp" :output-file "${OUT}/info.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/info.clisp: $(srcdir)/info.boot.pamphlet
	@ echo 329 making ${MID}/info.clisp from $(srcdir)/info.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/info.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "info.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "info.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm info.boot )


${OUT}/intint.$(OBJEXT): ${MID}/intint.lisp
	@ echo 555 making ${OUT}/intint.$(OBJEXT) from ${MID}/intint.lisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/intint.lisp" :output-file "${OUT}/intint.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/intint.lisp" :output-file "${OUT}/intint.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/intint.lisp: $(srcdir)/intint.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/i-output.$(OBJEXT): ${MID}/i-output.clisp 
	@ echo 306 making ${OUT}/i-output.$(OBJEXT) from ${MID}/i-output.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-output.clisp" :output-file "${OUT}/i-output.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-output.clisp" :output-file "${OUT}/i-output.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-output.clisp: $(srcdir)/i-output.boot.pamphlet
	@ echo 307 making ${MID}/i-output.clisp from $(srcdir)/i-output.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-output.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-output.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-output.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-output.boot )


${OUT}/i-resolv.$(OBJEXT): ${MID}/i-resolv.clisp 
	@ echo 309 making ${OUT}/i-resolv.$(OBJEXT) from ${MID}/i-resolv.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-resolv.clisp" :output-file "${OUT}/i-resolv.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-resolv.clisp" :output-file "${OUT}/i-resolv.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-resolv.clisp: $(srcdir)/i-resolv.boot.pamphlet
	@ echo 310 making ${MID}/i-resolv.clisp from $(srcdir)/i-resolv.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-resolv.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-resolv.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-resolv.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-resolv.boot )


${OUT}/i-spec1.$(OBJEXT): ${MID}/i-spec1.clisp 
	@ echo 312 making ${OUT}/i-spec1.$(OBJEXT) from ${MID}/i-spec1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-spec1.clisp" :output-file "${OUT}/i-spec1.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-spec1.clisp" :output-file "${OUT}/i-spec1.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-spec1.clisp: $(srcdir)/i-spec1.boot.pamphlet
	@ echo 313 making ${MID}/i-spec1.clisp from $(srcdir)/i-spec1.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-spec1.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-spec1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-spec1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-spec1.boot )


${OUT}/i-spec2.$(OBJEXT): ${MID}/i-spec2.clisp 
	@ echo 315 making ${OUT}/i-spec2.$(OBJEXT) from ${MID}/i-spec2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-spec2.clisp" :output-file "${OUT}/i-spec2.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-spec2.clisp" :output-file "${OUT}/i-spec2.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-spec2.clisp: $(srcdir)/i-spec2.boot.pamphlet
	@ echo 316 making ${MID}/i-spec2.clisp from $(srcdir)/i-spec2.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-spec2.boot $< ;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-spec2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-spec2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-spec2.boot )


${OUT}/i-syscmd.$(OBJEXT): ${MID}/i-syscmd.clisp 
	@ echo 318 making ${OUT}/i-syscmd.$(OBJEXT) from ${MID}/i-syscmd.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-syscmd.clisp" :output-file "${OUT}/i-syscmd.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-syscmd.clisp" :output-file "${OUT}/i-syscmd.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-syscmd.clisp: $(srcdir)/i-syscmd.boot.pamphlet
	@ echo 319 making ${MID}/i-syscmd.clisp from $(srcdir)/i-syscmd.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-syscmd.boot $<;\
           cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-syscmd.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-syscmd.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-syscmd.boot )


${AUTO}/iterator.$(OBJEXT): ${OUT}/iterator.$(OBJEXT)
	@ echo 331 making ${AUTO}/iterator.$(OBJEXT) from ${OUT}/iterator.$(OBJEXT)
	@ cp ${OUT}/iterator.$(OBJEXT) ${AUTO}

${OUT}/iterator.$(OBJEXT): ${MID}/iterator.clisp 
	@ echo 332 making ${OUT}/iterator.$(OBJEXT) from ${MID}/iterator.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/iterator.clisp" :output-file "${OUT}/iterator.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/iterator.clisp" :output-file "${OUT}/iterator.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/iterator.clisp: $(srcdir)/iterator.boot.pamphlet
	@ echo 333 making ${MID}/iterator.clisp from $(srcdir)/iterator.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/iterator.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "iterator.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "iterator.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm iterator.boot )


${OUT}/i-toplev.$(OBJEXT): ${MID}/i-toplev.clisp 
	@ echo 321 making ${OUT}/i-toplev.$(OBJEXT) from ${MID}/i-toplev.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-toplev.clisp" :output-file "${OUT}/i-toplev.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-toplev.clisp" :output-file "${OUT}/i-toplev.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
          fi )

${MID}/i-toplev.clisp: $(srcdir)/i-toplev.boot.pamphlet
	@ echo 322 making ${MID}/i-toplev.clisp from $(srcdir)/i-toplev.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-toplev.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-toplev.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-toplev.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-toplev.boot )


${OUT}/i-util.$(OBJEXT): ${MID}/i-util.clisp 
	@ echo 324 making ${OUT}/i-util.$(OBJEXT) from ${MID}/i-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-util.clisp" :output-file "${OUT}/i-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-util.clisp" :output-file "${OUT}/i-util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
          fi )

${MID}/i-util.clisp: $(srcdir)/i-util.boot.pamphlet
	@ echo 325 making ${MID}/i-util.clisp from $(srcdir)/i-util.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/i-util.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-util.boot )


${OUT}/lisplib.$(OBJEXT): ${MID}/lisplib.clisp 
	@ echo 335 making ${OUT}/lisplib.$(OBJEXT) from ${MID}/lisplib.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/lisplib.clisp" :output-file "${OUT}/lisplib.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/lisplib.clisp" :output-file "${OUT}/lisplib.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/lisplib.clisp: $(srcdir)/lisplib.boot.pamphlet
	@ echo 336 making ${MID}/lisplib.clisp from $(srcdir)/lisplib.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/lisplib.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "lisplib.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "lisplib.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm lisplib.boot )


${OUT}/macros.$(OBJEXT): ${MID}/macros.lisp
	@ echo 63 making ${OUT}/macros.$(OBJEXT) from ${MID}/macros.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/macros.lisp" :output-file "${OUT}/macros.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/macros.lisp" :output-file "${OUT}/macros.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/macros.lisp: $(srcdir)/macros.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/mark.$(OBJEXT): ${MID}/mark.clisp 
	@ echo 604 making ${AUTO}/mark.$(OBJEXT) from ${MID}/mark.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/mark.clisp" :output-file "${AUTO}/mark.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/mark.clisp" :output-file "${AUTO}/mark.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/mark.clisp: $(srcdir)/mark.boot.pamphlet
	@ echo 605 making ${MID}/mark.clisp from $(srcdir)/mark.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/mark.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "mark.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "mark.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm mark.boot )


${OUT}/match.$(OBJEXT): ${MID}/match.clisp 
	@ echo 338 making ${OUT}/match.$(OBJEXT) from ${MID}/match.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/match.clisp" :output-file "${OUT}/match.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/match.clisp" :output-file "${OUT}/match.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/match.clisp: $(srcdir)/match.boot.pamphlet
	@ echo 339 making ${MID}/match.clisp from $(srcdir)/match.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/match.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "match.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "match.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm match.boot )


${AUTO}/metalex.$(OBJEXT): ${OUT}/metalex.$(OBJEXT)
	@ echo 66 making ${AUTO}/metalex.$(OBJEXT) from ${OUT}/metalex.$(OBJEXT)
	@ cp ${OUT}/metalex.$(OBJEXT) ${AUTO}

${OUT}/metalex.$(OBJEXT): ${MID}/metalex.lisp 
	@ echo 67 making ${OUT}/metalex.$(OBJEXT) from ${MID}/metalex.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/metalex.lisp" :output-file "${OUT}/metalex.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/metalex.lisp" :output-file "${OUT}/metalex.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/metalex.${LISP}: ${MID}/metalex.lisp
	@ echo 68 making ${OUT}/metalex.${LISP} from ${MID}/metalex.lisp
	@cp ${MID}/metalex.lisp ${OUT}/metalex.${LISP}

${MID}/metalex.lisp: $(srcdir)/metalex.lisp.pamphlet
	@ echo 69 making ${MID}/metalex.lisp from $(srcdir)/metalex.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/metameta.$(OBJEXT): ${OUT}/metameta.$(OBJEXT)
	@ echo 71 making ${AUTO}/metameta.$(OBJEXT) from ${OUT}/metameta.$(OBJEXT)
	@ cp ${OUT}/metameta.$(OBJEXT) ${AUTO}

${OUT}/metameta.$(OBJEXT): ${MID}/metameta.lisp 
	@ echo 72 making ${OUT}/metameta.$(OBJEXT) from ${MID}/metameta.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/metameta.lisp" :output-file "${OUT}/metameta.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/metameta.lisp" :output-file "${OUT}/metameta.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/metameta.${LISP}: ${MID}/metameta.lisp
	@ echo 73 making ${OUT}/metameta.${LISP} from ${MID}/metameta.lisp
	@ rm -f ${OUT}/metameta.$(OBJEXT)
	@ cp ${MID}/metameta.lisp ${OUT}/metameta.${LISP}

${MID}/metameta.lisp: $(srcdir)/metameta.lisp.pamphlet
	@ echo 74 making ${MID}/metameta.lisp from $(srcdir)/metameta.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/modemap.$(OBJEXT): ${OUT}/modemap.$(OBJEXT)
	@ echo 341 making ${AUTO}/modemap.$(OBJEXT) from ${OUT}/modemap.$(OBJEXT)
	@ cp ${OUT}/modemap.$(OBJEXT) ${AUTO}

${OUT}/modemap.$(OBJEXT): ${MID}/modemap.clisp 
	@ echo 342 making ${OUT}/modemap.$(OBJEXT) from ${MID}/modemap.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/modemap.clisp" :output-file "${OUT}/modemap.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/modemap.clisp" :output-file "${OUT}/modemap.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/modemap.clisp: $(srcdir)/modemap.boot.pamphlet
	@ echo 343 making ${MID}/modemap.clisp from $(srcdir)/modemap.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/modemap.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "modemap.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "modemap.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm modemap.boot )


${OUT}/monitor.$(OBJEXT): ${MID}/monitor.lisp
	@ echo 76 making ${OUT}/monitor.$(OBJEXT) from ${MID}/monitor.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/monitor.lisp" :output-file "${OUT}/monitor.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/monitor.lisp" :output-file "${OUT}/monitor.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/monitor.lisp: $(srcdir)/monitor.lisp.pamphlet
	@ echo 77 making ${MID}/monitor.lisp from $(srcdir)/monitor.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/msgdb.$(OBJEXT): ${MID}/msgdb.clisp 
	@ echo 345 making ${OUT}/msgdb.$(OBJEXT) from ${MID}/msgdb.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/msgdb.clisp" :output-file "${OUT}/msgdb.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/msgdb.clisp" :output-file "${OUT}/msgdb.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/msgdb.clisp: $(srcdir)/msgdb.boot.pamphlet
	@ echo 346 making ${MID}/msgdb.clisp from $(srcdir)/msgdb.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/msgdb.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "msgdb.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "msgdb.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm msgdb.boot )


${AUTO}/nag-c02.$(OBJEXT): ${OUT}/nag-c02.$(OBJEXT)
	@ echo 150 making${AUTO}/nag-c02.$(OBJEXT) from ${OUT}/nag-c02.$(OBJEXT)
	@ cp ${OUT}/nag-c02.$(OBJEXT) ${AUTO}

${OUT}/nag-c02.$(OBJEXT): ${MID}/nag-c02.clisp
	@ echo 151 making ${OUT}/nag-c02.$(OBJEXT) from ${MID}/nag-c02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-c02.clisp" :output-file "${OUT}/nag-c02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-c02.clisp" :output-file "${OUT}/nag-c02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-c02.clisp: $(srcdir)/nag-c02.boot.pamphlet
	@ echo 152 making ${MID}/nag-c02.clisp from $(srcdir)/nag-c02.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-c02.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-c02.boot )


${AUTO}/nag-c05.$(OBJEXT): ${OUT}/nag-c05.$(OBJEXT)
	@ echo 154 making ${AUTO}/nag-c05.$(OBJEXT) from ${OUT}/nag-c05.$(OBJEXT)
	@ cp ${OUT}/nag-c05.$(OBJEXT) ${AUTO}

${OUT}/nag-c05.$(OBJEXT): ${MID}/nag-c05.clisp
	@ echo 155 making ${OUT}/nag-c05.$(OBJEXT) from ${MID}/nag-c05.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-c05.clisp" :output-file "${OUT}/nag-c05.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-c05.clisp" :output-file "${OUT}/nag-c05.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-c05.clisp: $(srcdir)/nag-c05.boot.pamphlet
	@ echo 156 making ${MID}/nag-c05.clisp from $(srcdir)/nag-c05.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-c05.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c05.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c05.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-c05.boot )


${AUTO}/nag-c06.$(OBJEXT): ${OUT}/nag-c06.$(OBJEXT)
	@ echo 158 making${AUTO}/nag-c06.$(OBJEXT) from ${OUT}/nag-c06.$(OBJEXT)
	@ cp ${OUT}/nag-c06.$(OBJEXT) ${AUTO}

${OUT}/nag-c06.$(OBJEXT): ${MID}/nag-c06.clisp
	@ echo 159 making ${OUT}/nag-c06.$(OBJEXT) from ${MID}/nag-c06.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-c06.clisp" :output-file "${OUT}/nag-c06.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-c06.clisp" :output-file "${OUT}/nag-c06.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-c06.clisp: $(srcdir)/nag-c06.boot.pamphlet
	@ echo 160 making ${MID}/nag-c06.clisp from $(srcdir)/nag-c06.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-c06.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c06.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c06.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-c06.boot )


${AUTO}/nag-d01.$(OBJEXT): ${OUT}/nag-d01.$(OBJEXT)
	@ echo 162 making${AUTO}/nag-d01.$(OBJEXT) from ${OUT}/nag-d01.$(OBJEXT)
	@ cp ${OUT}/nag-d01.$(OBJEXT) ${AUTO}

${OUT}/nag-d01.$(OBJEXT): ${MID}/nag-d01.clisp
	@ echo 163 making ${OUT}/nag-d01.$(OBJEXT) from ${MID}/nag-d01.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-d01.clisp" :output-file "${OUT}/nag-d01.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-d01.clisp" :output-file "${OUT}/nag-d01.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-d01.clisp: $(srcdir)/nag-d01.boot.pamphlet
	@ echo 164 making ${MID}/nag-d01.clisp from $(srcdir)/nag-d01.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-d01.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d01.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d01.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-d01.boot )


${AUTO}/nag-d02.$(OBJEXT): ${OUT}/nag-d02.$(OBJEXT)
	@ echo 166 making${AUTO}/nag-d02.$(OBJEXT) from ${OUT}/nag-d02.$(OBJEXT)
	@ cp ${OUT}/nag-d02.$(OBJEXT) ${AUTO}

${OUT}/nag-d02.$(OBJEXT): ${MID}/nag-d02.clisp
	@ echo 167 making ${OUT}/nag-d02.$(OBJEXT) from ${MID}/nag-d02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-d02.clisp" :output-file "${OUT}/nag-d02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-d02.clisp" :output-file "${OUT}/nag-d02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-d02.clisp: $(srcdir)/nag-d02.boot.pamphlet
	@ echo 168 making ${MID}/nag-d02.clisp from $(srcdir)/nag-d02.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-d02.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-d02.boot )


${AUTO}/nag-d03.$(OBJEXT): ${OUT}/nag-d03.$(OBJEXT)
	@ echo 170 making${AUTO}/nag-d03.$(OBJEXT) from ${OUT}/nag-d03.$(OBJEXT)
	@ cp ${OUT}/nag-d03.$(OBJEXT) ${AUTO}

${OUT}/nag-d03.$(OBJEXT): ${MID}/nag-d03.clisp
	@ echo 171 making ${OUT}/nag-d03.$(OBJEXT) from ${MID}/nag-d03.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-d03.clisp" :output-file "${OUT}/nag-d03.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-d03.clisp" :output-file "${OUT}/nag-d03.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-d03.clisp: $(srcdir)/nag-d03.boot.pamphlet
	@ echo 172 making ${MID}/nag-d03.clisp from $(srcdir)/nag-d03.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-d03.boot $< ; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d03.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d03.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-d03.boot )


${AUTO}/nag-e01.$(OBJEXT): ${OUT}/nag-e01.$(OBJEXT)
	@ echo 174 making ${AUTO}/nag-e01.$(OBJEXT) from ${OUT}/nag-e01.$(OBJEXT)
	@ cp ${OUT}/nag-e01.$(OBJEXT) ${AUTO}

${OUT}/nag-e01.$(OBJEXT): ${MID}/nag-e01.clisp
	@ echo 175 making ${OUT}/nag-e01.$(OBJEXT) from ${MID}/nag-e01.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-e01.clisp" :output-file "${OUT}/nag-e01.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-e01.clisp" :output-file "${OUT}/nag-e01.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-e01.clisp: $(srcdir)/nag-e01.boot.pamphlet
	@ echo 176 making ${MID}/nag-e01.clisp from $(srcdir)/nag-e01.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-e01.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e01.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e01.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-e01.boot )


${AUTO}/nag-e02.$(OBJEXT): ${OUT}/nag-e02.$(OBJEXT)
	@ echo 182 making ${AUTO}/nag-e02.$(OBJEXT) from ${OUT}/nag-e02.$(OBJEXT)
	@ cp ${OUT}/nag-e02.$(OBJEXT) ${AUTO}

${OUT}/nag-e02.$(OBJEXT): ${MID}/nag-e02.clisp
	@ echo 183 making ${OUT}/nag-e02.$(OBJEXT) from ${MID}/nag-e02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-e02.clisp" :output-file "${OUT}/nag-e02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-e02.clisp" :output-file "${OUT}/nag-e02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-e02.clisp: $(srcdir)/nag-e02.boot.pamphlet
	@ echo 184 making ${MID}/nag-e02.clisp from $(srcdir)/nag-e02.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-e02.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-e02.boot )


${AUTO}/nag-e04.$(OBJEXT): ${OUT}/nag-e04.$(OBJEXT)
	@ echo 186 making ${AUTO}/nag-e04.$(OBJEXT) from ${OUT}/nag-e04.$(OBJEXT)
	@ cp ${OUT}/nag-e04.$(OBJEXT) ${AUTO}

${OUT}/nag-e04.$(OBJEXT): ${MID}/nag-e04.clisp
	@ echo 187 making ${OUT}/nag-e04.$(OBJEXT) from ${MID}/nag-e04.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-e04.clisp" :output-file "${OUT}/nag-e04.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-e04.clisp" :output-file "${OUT}/nag-e04.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-e04.clisp: $(srcdir)/nag-e04.boot.pamphlet
	@ echo 188 making ${MID}/nag-e04.clisp from $(srcdir)/nag-e04.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-e04.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e04.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e04.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-e04.boot )


${AUTO}/nag-f01.$(OBJEXT): ${OUT}/nag-f01.$(OBJEXT)
	@ echo 190 making ${AUTO}/nag-f01.$(OBJEXT) from ${OUT}/nag-f01.$(OBJEXT)
	@ cp ${OUT}/nag-f01.$(OBJEXT) ${AUTO}

${OUT}/nag-f01.$(OBJEXT): ${MID}/nag-f01.clisp
	@ echo 191 making ${OUT}/nag-f01.$(OBJEXT) from ${MID}/nag-f01.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-f01.clisp" :output-file "${OUT}/nag-f01.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-f01.clisp" :output-file "${OUT}/nag-f01.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f01.clisp: $(srcdir)/nag-f01.boot.pamphlet
	@ echo 192 making ${MID}/nag-f01.clisp from $(srcdir)/nag-f01.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-f01.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f01.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f01.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f01.boot )


${AUTO}/nag-f02.$(OBJEXT): ${OUT}/nag-f02.$(OBJEXT)
	@ echo 194 making ${AUTO}/nag-f02.$(OBJEXT) from ${OUT}/nag-f02.$(OBJEXT)
	@ cp ${OUT}/nag-f02.$(OBJEXT) ${AUTO}

${OUT}/nag-f02.$(OBJEXT): ${MID}/nag-f02.clisp
	@ echo 195 making ${OUT}/nag-f02.$(OBJEXT) from ${MID}/nag-f02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-f02.clisp" :output-file "${OUT}/nag-f02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-f02.clisp" :output-file "${OUT}/nag-f02.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f02.clisp: $(srcdir)/nag-f02.boot.pamphlet
	@ echo 196 making ${MID}/nag-f02.clisp from $(srcdir)/nag-f02.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-f02.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f02.boot )


${AUTO}/nag-f04.$(OBJEXT): ${OUT}/nag-f04.$(OBJEXT)
	@ echo 198 making ${AUTO}/nag-f04.$(OBJEXT) from ${OUT}/nag-f04.$(OBJEXT)
	@ cp ${OUT}/nag-f04.$(OBJEXT) ${AUTO}

${OUT}/nag-f04.$(OBJEXT): ${MID}/nag-f04.clisp
	@ echo 199 making ${OUT}/nag-f04.$(OBJEXT) from ${MID}/nag-f04.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-f04.clisp" :output-file "${OUT}/nag-f04.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-f04.clisp" :output-file "${OUT}/nag-f04.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f04.clisp: $(srcdir)/nag-f04.boot.pamphlet
	@ echo 200 making ${MID}/nag-f04.clisp from $(srcdir)/nag-f04.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-f04.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f04.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f04.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f04.boot )


${AUTO}/nag-f07.$(OBJEXT): ${OUT}/nag-f07.$(OBJEXT)
	@ echo 202 making ${AUTO}/nag-f07.$(OBJEXT) from ${OUT}/nag-f07.$(OBJEXT)
	@ cp ${OUT}/nag-f07.$(OBJEXT) ${AUTO}

${OUT}/nag-f07.$(OBJEXT): ${MID}/nag-f07.clisp
	@ echo 203 making ${OUT}/nag-f07.$(OBJEXT) from ${MID}/nag-f07.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-f07.clisp" :output-file "${OUT}/nag-f07.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-f07.clisp" :output-file "${OUT}/nag-f07.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f07.clisp: $(srcdir)/nag-f07.boot.pamphlet
	@ echo 204 making ${MID}/nag-f07.clisp from $(srcdir)/nag-f07.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-f07.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f07.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f07.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f07.boot )


${AUTO}/nag-s.$(OBJEXT): ${OUT}/nag-s.$(OBJEXT)
	@ echo 206 making ${AUTO}/nag-s.$(OBJEXT) from ${OUT}/nag-s.$(OBJEXT)
	@ cp ${OUT}/nag-s.$(OBJEXT) ${AUTO}

${OUT}/nag-s.$(OBJEXT): ${MID}/nag-s.clisp
	@ echo 207 making ${OUT}/nag-s.$(OBJEXT) from ${MID}/nag-s.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-s.clisp" :output-file "${OUT}/nag-s.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-s.clisp" :output-file "${OUT}/nag-s.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-s.clisp: $(srcdir)/nag-s.boot.pamphlet
	@ echo 208 making ${MID}/nag-s.clisp from $(srcdir)/nag-s.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nag-s.boot $< ; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-s.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-s.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-s.boot )


${OUT}/nci.$(OBJEXT): ${MID}/nci.lisp
	@ echo 558 making ${OUT}/nci.$(OBJEXT) from ${MID}/nci.lisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/nci.lisp" :output-file "${OUT}/nci.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/nci.lisp" :output-file "${OUT}/nci.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/nci.lisp: $(srcdir)/nci.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/newaux.$(OBJEXT): ${MID}/newaux.lisp
	@ echo 79 making ${OUT}/newaux.$(OBJEXT) from ${MID}/newaux.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/newaux.lisp" :output-file "${OUT}/newaux.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/newaux.lisp" :output-file "${OUT}/newaux.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/newaux.${LISP}: ${MID}/newaux.lisp
	@ echo 80 making ${OUT}/newaux.${LISP} from ${MID}/newaux.lisp
	@cp ${MID}/newaux.lisp ${OUT}/newaux.${LISP}

${MID}/newaux.lisp: $(srcdir)/newaux.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/newfort.$(OBJEXT): ${MID}/newfort.clisp 
	@ echo 348 making ${OUT}/newfort.$(OBJEXT) from ${MID}/newfort.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/newfort.clisp" :output-file "${OUT}/newfort.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/newfort.clisp" :output-file "${OUT}/newfort.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/newfort.clisp: $(srcdir)/newfort.boot.pamphlet
	@ echo 349 making ${MID}/newfort.clisp from $(srcdir)/newfort.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/newfort.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "newfort.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "newfort.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm newfort.boot )


${OUT}/nlib.$(OBJEXT): ${MID}/nlib.lisp
	@ echo 83 making ${OUT}/nlib.$(OBJEXT) from ${MID}/nlib.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nlib.lisp" :output-file "${OUT}/nlib.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nlib.lisp" :output-file "${OUT}/nlib.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nlib.lisp: $(srcdir)/nlib.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/nocompil.${LISP}: ${MID}/nocompil.lisp 
	@ echo 86 making ${OUT}/nocompil.${LISP} from ${MID}/nocompil.lisp
	@ cp ${MID}/nocompil.lisp ${OUT}/nocompil.${LISP}

${MID}/nocompil.lisp: $(srcdir)/nocompil.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/nruncomp.$(OBJEXT): ${OUT}/nruncomp.$(OBJEXT)
	@ echo 351 making ${AUTO}/nruncomp.$(OBJEXT) from ${OUT}/nruncomp.$(OBJEXT)
	@ cp ${OUT}/nruncomp.$(OBJEXT) ${AUTO}

${OUT}/nruncomp.$(OBJEXT): ${MID}/nruncomp.clisp 
	@ echo 352 making ${OUT}/nruncomp.$(OBJEXT) from ${MID}/nruncomp.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nruncomp.clisp" :output-file "${OUT}/nruncomp.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nruncomp.clisp" :output-file "${OUT}/nruncomp.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nruncomp.clisp: $(srcdir)/nruncomp.boot.pamphlet
	@ echo 353 making ${MID}/nruncomp.clisp from $(srcdir)/nruncomp.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nruncomp.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nruncomp.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nruncomp.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nruncomp.boot )


${OUT}/nrunfast.$(OBJEXT): ${MID}/nrunfast.clisp 
	@ echo 355 making ${OUT}/nrunfast.$(OBJEXT) from ${MID}/nrunfast.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nrunfast.clisp" :output-file "${OUT}/nrunfast.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nrunfast.clisp" :output-file "${OUT}/nrunfast.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nrunfast.clisp: $(srcdir)/nrunfast.boot.pamphlet
	@ echo 356 making ${MID}/nrunfast.clisp from $(srcdir)/nrunfast.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nrunfast.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrunfast.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrunfast.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nrunfast.boot )


${OUT}/nrungo.$(OBJEXT): ${MID}/nrungo.clisp 
	@ echo 358 making ${OUT}/nrungo.$(OBJEXT) from ${MID}/nrungo.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nrungo.clisp" :output-file "${OUT}/nrungo.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nrungo.clisp" :output-file "${OUT}/nrungo.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nrungo.clisp: $(srcdir)/nrungo.boot.pamphlet
	@ echo 359 making ${MID}/nrungo.clisp from $(srcdir)/nrungo.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nrungo.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrungo.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrungo.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nrungo.boot )


${OUT}/nruntime.$(OBJEXT): ${MID}/nruntime.clisp 
	@ echo 361 making ${OUT}/nruntime.$(OBJEXT) from ${MID}/nruntime.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nruntime.clisp" :output-file "${OUT}/nruntime.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nruntime.clisp" :output-file "${OUT}/nruntime.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nruntime.clisp: $(srcdir)/nruntime.boot.pamphlet
	@ echo 362 making ${MID}/nruntime.clisp from $(srcdir)/nruntime.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nruntime.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nruntime.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nruntime.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nruntime.boot )


${OUT}/nrunopt.$(OBJEXT): ${MID}/nrunopt.clisp 
	@ echo 364 making ${OUT}/nrunopt.$(OBJEXT) from ${MID}/nrunopt.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nrunopt.clisp" :output-file "${OUT}/nrunopt.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nrunopt.clisp" :output-file "${OUT}/nrunopt.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nrunopt.clisp: $(srcdir)/nrunopt.boot.pamphlet
	@ echo 365 making ${MID}/nrunopt.clisp from $(srcdir)/nrunopt.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/nrunopt.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrunopt.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrunopt.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nrunopt.boot )


${AUTO}/nspadaux.$(OBJEXT): ${OUT}/nspadaux.$(OBJEXT)
	@ echo 89 making ${AUTO}/nspadaux.$(OBJEXT) from ${OUT}/nspadaux.$(OBJEXT)
	@ cp ${OUT}/nspadaux.$(OBJEXT) ${AUTO}

${OUT}/nspadaux.$(OBJEXT): ${MID}/nspadaux.lisp 
	@ echo 90 making ${OUT}/nspadaux.$(OBJEXT) from ${MID}/nspadaux.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nspadaux.lisp" :output-file "${OUT}/nspadaux.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nspadaux.lisp" :output-file "${OUT}/nspadaux.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/nspadaux.${LISP}: ${MID}/nspadaux.lisp
	@ echo 91 making ${OUT}/nspadaux.${LISP} from ${MID}/nspadaux.lisp
	@cp ${MID}/nspadaux.lisp ${OUT}/nspadaux.${LISP}

${MID}/nspadaux.lisp: $(srcdir)/nspadaux.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/obey.$(OBJEXT): ${MID}/obey.${LISP}
	@ echo 367 making ${OUT}/obey.$(OBJEXT) from ${MID}/obey.${LISP}
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/obey.${LISP}" :output-file "${OUT}/obey.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/obey.${LISP}" :output-file "${OUT}/obey.$(OBJEXT)") (${BYE}))' | ${DEPSYS}  >> ${TMP}/trace ; \
	  fi )

${MID}/obey.${LISP}: $(srcdir)/obey.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/package.$(OBJEXT): ${OUT}/package.$(OBJEXT)
	@ echo 370 making ${AUTO}/package.$(OBJEXT) from ${OUT}/package.$(OBJEXT)
	@ cp ${OUT}/package.$(OBJEXT) ${AUTO}

${OUT}/package.$(OBJEXT): ${MID}/package.clisp 
	@ echo 371 making ${OUT}/package.$(OBJEXT) from ${MID}/package.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/package.clisp" :output-file "${OUT}/package.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/package.clisp" :output-file "${OUT}/package.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/package.clisp: $(srcdir)/package.boot.pamphlet
	@ echo 372 making ${MID}/package.clisp from $(srcdir)/package.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/package.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "package.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "package.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm package.boot )


${AUTO}/parse.$(OBJEXT): ${OUT}/parse.$(OBJEXT)
	@ echo 374 making ${AUTO}/parse.$(OBJEXT) from ${OUT}/parse.$(OBJEXT)
	@ cp ${OUT}/parse.$(OBJEXT) ${AUTO}

${OUT}/parse.$(OBJEXT): ${MID}/parse.clisp 
	@ echo 375 making ${OUT}/parse.$(OBJEXT) from ${MID}/parse.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/parse.clisp" :output-file "${OUT}/parse.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/parse.clisp" :output-file "${OUT}/parse.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/parse.${LISP}: $(srcdir)/parse.boot.pamphlet
	@ echo 376 making ${OUT}/parse.${LISP} from $(srcdir)/parse.boot.pamphlet
	@ rm -f ${OUT}/parse.$(OBJEXT)
	$(axiom_build_document) --tangle=parse.clisp --output=$@ $<
${MID}/parse.clisp: $(srcdir)/parse.boot.pamphlet
	@ echo 377 making ${MID}/parse.clisp from $(srcdir)/parse.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/parse.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "parse.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "parse.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm parse.boot )


${AUTO}/parsing.$(OBJEXT): ${OUT}/parsing.$(OBJEXT)
	@ echo 94 making ${AUTO}/parsing.$(OBJEXT) from ${OUT}/parsing.$(OBJEXT)
	@ cp ${OUT}/parsing.$(OBJEXT) ${AUTO}

${OUT}/parsing.$(OBJEXT): ${MID}/parsing.lisp 
	@ echo 95 making ${OUT}/parsing.$(OBJEXT) from ${MID}/parsing.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/parsing.lisp" :output-file "${OUT}/parsing.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/parsing.lisp" :output-file "${OUT}/parsing.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/parsing.${LISP}: ${MID}/parsing.lisp
	@ echo 96 making ${OUT}/parsing.${LISP} from ${MID}/parsing.lisp
	@cp ${MID}/parsing.lisp ${OUT}/parsing.${LISP}

${MID}/parsing.lisp: $(srcdir)/parsing.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/patches.$(OBJEXT): ${MID}/patches.lisp
	@ echo 99 making ${OUT}/patches.$(OBJEXT) from ${MID}/patches.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/patches.lisp" :output-file "${OUT}/patches.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/patches.lisp" :output-file "${OUT}/patches.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/patches.lisp: $(srcdir)/patches.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/pathname.$(OBJEXT): ${MID}/pathname.clisp 
	@ echo 379 making ${OUT}/pathname.$(OBJEXT) from ${MID}/pathname.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/pathname.clisp" :output-file "${OUT}/pathname.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/pathname.clisp" :output-file "${OUT}/pathname.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/pathname.clisp: $(srcdir)/pathname.boot.pamphlet
	@ echo 380 making ${MID}/pathname.clisp from $(srcdir)/pathname.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/pathname.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pathname.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pathname.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pathname.boot )


${AUTO}/postpar.$(OBJEXT): ${OUT}/postpar.$(OBJEXT)
	@ echo 382 making ${AUTO}/postpar.$(OBJEXT) from ${OUT}/postpar.$(OBJEXT)
	@ cp ${OUT}/postpar.$(OBJEXT) ${AUTO}

${OUT}/postpar.${LISP}: $(srcdir)/postpar.boot.pamphlet
	@ echo 383 making ${OUT}/postpar.${LISP} from $(srcdir)/postpar.boot.pamphlet
	@ rm -f ${OUT}/postpar.$(OBJEXT)
	$(axiom_build_document) --tangle=postpar.clisp --output=$@ $<
${OUT}/postpar.$(OBJEXT): ${MID}/postpar.clisp 
	@ echo 384 making ${OUT}/postpar.$(OBJEXT) from ${MID}/postpar.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/postpar.clisp" :output-file "${OUT}/postpar.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/postpar.clisp" :output-file "${OUT}/postpar.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/postpar.clisp: $(srcdir)/postpar.boot.pamphlet
	@ echo 385 making ${MID}/postpar.clisp from $(srcdir)/postpar.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/postpar.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "postpar.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "postpar.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm postpar.boot )


${AUTO}/postprop.${LISP}: ${OUT}/postprop.${LISP}
	@ echo 102 making ${AUTO}/postprop.${LISP} from ${OUT}/postprop.${LISP}
	@ cp ${OUT}/postprop.${LISP} ${AUTO}

${OUT}/postprop.${LISP}: ${MID}/postprop.lisp
	@ echo 103 making ${OUT}/postprop.${LISP} from ${MID}/postprop.lisp
	@ rm -f ${OUT}/postprop.$(OBJEXT)
	@ cp ${MID}/postprop.lisp ${OUT}/postprop.${LISP}

${MID}/postprop.lisp: $(srcdir)/postprop.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/preparse.$(OBJEXT): ${OUT}/preparse.$(OBJEXT)
	@ echo 106 making ${AUTO}/preparse.$(OBJEXT) from ${OUT}/preparse.$(OBJEXT)
	@ cp ${OUT}/preparse.$(OBJEXT) ${AUTO}

${OUT}/preparse.$(OBJEXT): ${MID}/preparse.lisp 
	@ echo 107 making ${OUT}/preparse.$(OBJEXT) from ${MID}/preparse.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/preparse.lisp" :output-file "${OUT}/preparse.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/preparse.lisp" :output-file "${OUT}/preparse.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/preparse.${LISP}: ${MID}/preparse.lisp
	@ echo 108 making ${OUT}/preparse.${LISP} from ${MID}/preparse.lisp
	@ rm -f ${OUT}/preparse.$(OBJEXT)
	@ cp ${MID}/preparse.lisp ${OUT}/preparse.${LISP}

${MID}/preparse.lisp: $(srcdir)/preparse.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/profile.$(OBJEXT): ${OUT}/profile.$(OBJEXT)
	@ echo 235 making ${AUTO}/profile.$(OBJEXT) from ${OUT}/profile.$(OBJEXT)
	@ cp ${OUT}/profile.$(OBJEXT) ${AUTO}

${OUT}/profile.$(OBJEXT): ${MID}/profile.clisp 
	@ echo 236 making ${OUT}/profile.$(OBJEXT) from ${MID}/profile.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/profile.clisp" :output-file "${OUT}/profile.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/profile.clisp" :output-file "${OUT}/profile.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/profile.clisp: $(srcdir)/profile.boot.pamphlet
	@ echo 237 making ${MID}/profile.clisp from $(srcdir)/profile.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/profile.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "profile.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "profile.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm profile.boot )


${OUT}/property.${LISP}: ${MID}/property.lisp 
	@ echo 111 making ${OUT}/property.${LISP} from ${MID}/property.lisp
	@ cp ${MID}/property.lisp ${OUT}/property.${LISP}

${MID}/property.lisp: $(srcdir)/property.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/pspad1.$(OBJEXT): ${MID}/pspad1.clisp 
	@ echo 598 making ${AUTO}/pspad1.$(OBJEXT) from ${MID}/pspad1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/pspad1.clisp" :output-file "${AUTO}/pspad1.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/pspad1.clisp" :output-file "${AUTO}/pspad1.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/pspad1.clisp: $(srcdir)/pspad1.boot.pamphlet
	@ echo 599 making ${MID}/pspad1.clisp from $(srcdir)/pspad1.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/pspad1.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pspad1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pspad1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pspad1.boot )


${AUTO}/pspad2.$(OBJEXT): ${MID}/pspad2.clisp 
	@ echo 601 making ${AUTO}/pspad2.$(OBJEXT) from ${MID}/pspad2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/pspad2.clisp" :output-file "${AUTO}/pspad2.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/pspad2.clisp" :output-file "${AUTO}/pspad2.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/pspad2.clisp: $(srcdir)/pspad2.boot.pamphlet
	@ echo 602 making ${MID}/pspad2.clisp from $(srcdir)/pspad2.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/pspad2.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pspad2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pspad2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pspad2.boot )


${OUT}/record.$(OBJEXT): ${MID}/record.clisp 
	@ echo 446 making ${OUT}/record.$(OBJEXT) from ${MID}/record.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/record.clisp" :output-file "${OUT}/record.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/record.clisp" :output-file "${OUT}/record.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/record.clisp: $(srcdir)/record.boot.pamphlet
	@ echo 447 making ${MID}/record.clisp from $(srcdir)/record.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/record.boot $< ; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "record.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "record.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm record.boot )


${OUT}/rulesets.$(OBJEXT): ${MID}/rulesets.clisp 
	@ echo 387 making ${OUT}/rulesets.$(OBJEXT) from ${MID}/rulesets.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/rulesets.clisp" :output-file "${OUT}/rulesets.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/rulesets.clisp" :output-file "${OUT}/rulesets.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/rulesets.clisp: $(srcdir)/rulesets.boot.pamphlet
	@ echo 388 making ${MID}/rulesets.clisp from $(srcdir)/rulesets.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/rulesets.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "rulesets.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "rulesets.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm rulesets.boot )


${OUT}/server.$(OBJEXT): ${MID}/server.clisp 
	@ echo 390 making ${OUT}/server.$(OBJEXT) from ${MID}/server.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/server.clisp" :output-file "${OUT}/server.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/server.clisp" :output-file "${OUT}/server.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/server.clisp: $(srcdir)/server.boot.pamphlet
	@ echo 391 making ${MID}/server.clisp from $(srcdir)/server.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/server.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "server.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "server.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm server.boot )


${OUT}/setq.${LISP}: ${MID}/setq.lisp 
	@ echo 114 making ${OUT}/setq.${LISP} from ${MID}/setq.lisp
	@ cp ${MID}/setq.lisp ${OUT}/setq.${LISP}

${MID}/setq.lisp: $(srcdir)/setq.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/setvars.$(OBJEXT): ${MID}/setvars.clisp 
	@ echo 394 making ${OUT}/setvars.$(OBJEXT) from ${MID}/setvars.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/setvars.clisp" :output-file "${OUT}/setvars.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/setvars.clisp" :output-file "${OUT}/setvars.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/setvars.${LISP}: $(srcdir)/setvars.boot.pamphlet
	@ echo 393 making ${OUT}/setvars.${LISP} from $(srcdir)/setvars.boot.pamphlet
	@ rm -f ${OUT}/setvars.$(OBJEXT)
	$(axiom_build_document) --tangle=setvars.clisp --output=$@ S<
${MID}/setvars.clisp: $(srcdir)/setvars.boot.pamphlet
	@ echo 395 making ${MID}/setvars.clisp from $(srcdir)/setvars.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/setvars.boot $<;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "setvars.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "setvars.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm setvars.boot )


${OUT}/setvart.$(OBJEXT): ${MID}/setvart.clisp 
	@ echo 397 making ${OUT}/setvart.$(OBJEXT) from ${MID}/setvart.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/setvart.clisp" :output-file "${OUT}/setvart.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/setvart.clisp" :output-file "${OUT}/setvart.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/setvart.clisp: $(srcdir)/setvart.boot.pamphlet
	@ echo 398 making ${MID}/setvart.clisp from $(srcdir)/setvart.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/setvart.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "setvart.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "setvart.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm setvart.boot )


${OUT}/sfsfun-l.$(OBJEXT): ${MID}/sfsfun-l.lisp
	@ echo 561 making ${OUT}/sfsfun-l.$(OBJEXT) from ${MID}/sfsfun-l.lisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/sfsfun-l.lisp" :output-file "${OUT}/sfsfun-l.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/sfsfun-l.lisp" :output-file "${OUT}/sfsfun-l.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/sfsfun-l.lisp: $(srcdir)/sfsfun-l.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/showimp.$(OBJEXT): ${OUT}/showimp.$(OBJEXT)
	@ echo 579 making ${AUTO}/showimp.$(OBJEXT) from ${OUT}/showimp.$(OBJEXT)
	@ cp ${OUT}/showimp.$(OBJEXT) ${AUTO}


${OUT}/simpbool.$(OBJEXT): ${MID}/simpbool.clisp 
	@ echo 400 making ${OUT}/simpbool.$(OBJEXT) from ${MID}/simpbool.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/simpbool.clisp" :output-file "${OUT}/simpbool.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/simpbool.clisp" :output-file "${OUT}/simpbool.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/simpbool.clisp: $(srcdir)/simpbool.boot.pamphlet
	@ echo 401 making ${MID}/simpbool.clisp from $(srcdir)/simpbool.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/simpbool.boot $<;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "simpbool.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "simpbool.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm simpbool.boot )


${OUT}/slam.$(OBJEXT): ${MID}/slam.clisp 
	@ echo 404 making ${OUT}/slam.$(OBJEXT) from ${MID}/slam.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/slam.clisp" :output-file "${OUT}/slam.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/slam.clisp" :output-file "${OUT}/slam.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/slam.clisp: $(srcdir)/slam.boot.pamphlet
	@ echo 405 making ${MID}/slam.clisp from $(srcdir)/slam.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/slam.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "slam.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "slam.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm slam.boot )

${OUT}/slam.${LISP}: $(srcdir)/slam.boot.pamphlet
	@ echo 403 making ${OUT}/slam.${LISP} from $(srcdir)/slam.boot.pamphlet
	@ rm -f ${OUT}/slam.$(OBJEXT)
	$(axiom_build_document) --tangle=slam.clisp --output=$@ $<

${OUT}/sockio.$(OBJEXT): ${MID}/sockio.lisp
	@ echo 117 making ${OUT}/sockio.$(OBJEXT) from ${MID}/sockio.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/sockio.lisp" :output-file "${OUT}/sockio.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/sockio.lisp" :output-file "${OUT}/sockio.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/sockio.lisp: $(srcdir)/sockio.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/spad.$(OBJEXT): ${MID}/spad.lisp
	@ echo 120 making ${OUT}/spad.$(OBJEXT) from ${MID}/spad.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/spad.lisp" :output-file "${OUT}/spad.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/spad.lisp" :output-file "${OUT}/spad.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/spad.lisp: $(srcdir)/spad.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/spaderror.$(OBJEXT): ${MID}/spaderror.lisp
	@ echo 123 making ${OUT}/spaderror.$(OBJEXT) from ${MID}/spaderror.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/spaderror.lisp" :output-file "${OUT}/spaderror.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/spaderror.lisp" :output-file "${OUT}/spaderror.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/spaderror.lisp: $(srcdir)/spaderror.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/sys-pkg.${LISP}: ${MID}/sys-pkg.lisp 
	@ echo 126 making ${OUT}/sys-pkg.${LISP} from ${MID}/sys-pkg.lisp
	@ cp ${MID}/sys-pkg.lisp ${OUT}/sys-pkg.${LISP}

${MID}/sys-pkg.lisp: $(srcdir)/sys-pkg.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/template.$(OBJEXT): ${MID}/template.clisp 
	@ echo 407 making ${OUT}/template.$(OBJEXT) from ${MID}/template.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/template.clisp" :output-file "${OUT}/template.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/template.clisp" :output-file "${OUT}/template.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/template.clisp: $(srcdir)/template.boot.pamphlet
	@ echo 408 making ${MID}/template.clisp from $(srcdir)/template.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/template.boot $< ;\
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "template.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "template.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm template.boot )


${OUT}/termrw.$(OBJEXT): ${MID}/termrw.clisp 
	@ echo 410 making ${OUT}/termrw.$(OBJEXT) from ${MID}/termrw.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/termrw.clisp" :output-file "${OUT}/termrw.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/termrw.clisp" :output-file "${OUT}/termrw.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/termrw.clisp: $(srcdir)/termrw.boot.pamphlet
	@ echo 411 making ${MID}/termrw.clisp from $(srcdir)/termrw.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/termrw.boot $< ; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "termrw.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "termrw.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm termrw.boot )


${AUTO}/topics.$(OBJEXT): ${OUT}/topics.$(OBJEXT)
	@ echo 493 making ${AUTO}/topics.$(OBJEXT) from ${OUT}/topics.$(OBJEXT)
	@ cp ${OUT}/topics.$(OBJEXT) ${AUTO}

${OUT}/topics.$(OBJEXT): ${MID}/topics.clisp 
	@ echo 494 making ${OUT}/topics.$(OBJEXT) from ${MID}/topics.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/topics.clisp" :output-file "${OUT}/topics.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/topics.clisp" :output-file "${OUT}/topics.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/topics.clisp: $(srcdir)/topics.boot.pamphlet
	@ echo 495 making ${MID}/topics.clisp from $(srcdir)/topics.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/topics.boot $<; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "topics.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "topics.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm topics.boot )


${OUT}/trace.$(OBJEXT): ${MID}/trace.clisp 
	@ echo 413 making ${OUT}/trace.$(OBJEXT) from ${MID}/trace.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/trace.clisp" :output-file "${OUT}/trace.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/trace.clisp" :output-file "${OUT}/trace.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/trace.clisp: $(srcdir)/trace.boot.pamphlet
	@ echo 414 making ${MID}/trace.clisp from $(srcdir)/trace.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/trace.boot $< ; \
	  cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "trace.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "trace.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm trace.boot )


${OUT}/union.$(OBJEXT): ${MID}/union.lisp
	@ echo 129 making ${OUT}/union.$(OBJEXT) from ${MID}/union.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/union.lisp" :output-file "${OUT}/union.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/union.lisp" :output-file "${OUT}/union.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/union.lisp: $(srcdir)/union.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/unlisp.$(OBJEXT): ${MID}/unlisp.lisp 
	@ echo 501 making ${OUT}/unlisp.$(OBJEXT) from ${MID}/unlisp.lisp
	@  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (compile-file "${MID}/unlisp.lisp" :output-file "${OUT}/unlisp.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	   else \
	    echo '(progn (compile-file "${MID}/unlisp.lisp" :output-file "${OUT}/unlisp.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	   fi 

${MID}/unlisp.lisp: $(srcdir)/unlisp.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/util.$(OBJEXT): ${MID}/util.lisp
	@ echo 132 making ${OUT}/util.$(OBJEXT) from ${MID}/util.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/util.lisp" :output-file "${OUT}/util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/util.lisp" :output-file "${OUT}/util.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/util.${LISP}: ${MID}/util.lisp
	@ echo 133 making ${OUT}/util.${LISP} from ${MID}/util.lisp
	@cp ${MID}/util.lisp ${OUT}/util.${LISP}

${MID}/util.lisp: $(srcdir)/util.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${OUT}/vmlisp.$(OBJEXT): $(MID)/vmlisp.lisp
	@ echo 136 making ${OUT}/vmlisp.$(OBJEXT) from $<
	@ (if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "$(MID)/vmlisp.lisp" :output-file "${OUT}/vmlisp.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "$(MID)/vmlisp.lisp" :output-file "${OUT}/vmlisp.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

$(MID)/vmlisp.lisp: $(srcdir)/vmlisp.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${INT}/algebra/warm.data: $(srcdir)/Makefile.pamphlet
	@ echo 2 building warm.data
	$(axiom_build_document) --tangle=warm.data --output=$@ $<


${AUTO}/wi1.$(OBJEXT): ${MID}/wi1.clisp 
	@ echo 592 making ${AUTO}/wi1.$(OBJEXT) from ${MID}/wi1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/wi1.clisp" :output-file "${AUTO}/wi1.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/wi1.clisp" :output-file "${AUTO}/wi1.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/wi1.clisp: $(srcdir)/wi1.boot.pamphlet
	@ echo 593 making ${MID}/wi1.clisp from $(srcdir)/wi1.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/wi1.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "wi1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "wi1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm wi1.boot )


${AUTO}/wi2.$(OBJEXT): ${MID}/wi2.clisp 
	@ echo 595 making ${AUTO}/wi2.$(OBJEXT) from ${MID}/wi2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/wi2.clisp" :output-file "${AUTO}/wi2.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/wi2.clisp" :output-file "${AUTO}/wi2.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/wi2.clisp: $(srcdir)/wi2.boot.pamphlet
	@ echo 596 making ${MID}/wi2.clisp from $(srcdir)/wi2.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/wi2.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "wi2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "wi2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm wi2.boot )


${OUT}/xrun.$(OBJEXT): ${MID}/xrun.clisp 
	@ echo 589 making ${OUT}/xrun.$(OBJEXT) from ${MID}/xrun.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/xrun.clisp" :output-file "${OUT}/xrun.$(OBJEXT)") (${BYE}))' | ${DEPSYS} ; \
	   else \
	   echo '(progn  (compile-file "${MID}/xrun.clisp" :output-file "${OUT}/xrun.$(OBJEXT)") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	   fi )

${MID}/xrun.clisp: $(srcdir)/xrun.boot.pamphlet
	@ echo 590 making ${MID}/xrun.clisp from $(srcdir)/xrun.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/xrun.boot $<; \
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "xrun.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "xrun.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm xrun.boot )


${AUTO}/xruncomp.$(OBJEXT): ${OUT}/xruncomp.$(OBJEXT)
	@ echo 457 making ${AUTO}/xruncomp.$(OBJEXT) from ${OUT}/xruncomp.$(OBJEXT)
	@ cp ${OUT}/xruncomp.$(OBJEXT) ${AUTO}

${OUT}/xruncomp.$(OBJEXT): ${MID}/xruncomp.clisp 
	@ echo 458 making ${OUT}/xruncomp.$(OBJEXT) from ${MID}/xruncomp.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/xruncomp.clisp" :output-file "${OUT}/xruncomp.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/xruncomp.clisp" :output-file "${OUT}/xruncomp.$(OBJEXT)") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/xruncomp.clisp: $(srcdir)/xruncomp.boot.pamphlet
	@ echo 459 making ${MID}/xruncomp.clisp from $(srcdir)/xruncomp.boot.pamphlet
	@ ($(axiom_build_document) --tangle --output=$(MID)/xruncomp.boot $< ;\
	   cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "xruncomp.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "xruncomp.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm xruncomp.boot )


.PRECIOUS: $(builddir)/%.tex
.PRECIOUS: $(builddir)/%.dvi

$(DOCFILES): $(DOC) $(axiom_build_texdir)/diagrams.tex

$(DOC):
	$(mkinstalldirs) $@

$(DOC)/%.dvi: $(builddir)/%.dvi
	$(INSTALL_DATA) $< $@

$(builddir)/%.dvi: $(axiom_build_texdir)/axiom.sty

$(builddir)/%.dvi: $(builddir)/%.tex
	$(axiom_build_document) --latex $< $(SINK_NOISE)

$(builddir)/%.tex: $(srcdir)/%.pamphlet
	$(axiom_build_document) --weave --output=$@ $<

$(axiom_build_texdir)/diagrams.tex: $(axiom_src_docdir)/diagrams.tex
	$(INSTALL_DATA) $< $@

