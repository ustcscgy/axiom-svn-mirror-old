
IN=${SRC}/interp
MID=${INT}/interp
OUT=${OBJ}/${SYS}/interp
DOC=${MNT}/${SYS}/doc/src/interp
BOOK=${MNT}/${SYS}/doc

AUTO=${MNT}/${SYS}/autoload

LISPSYS= ${OBJ}/${SYS}/bin/lisp

BOOTSYS= ${OBJ}/${SYS}/bin/bootsys    

DEPSYS=	${OBJ}/${SYS}/bin/depsys

DEP=	${MID}/vmlisp.lisp	${MID}/ggreater.lisp	\
	${MID}/hash.lisp	${MID}/bootfuns.lisp	\
	${MID}/union.lisp	${MID}/nlib.lisp	\
	${MID}/macros.lisp	${MID}/comp.lisp	\
	${MID}/spaderror.lisp	${MID}/debug.lisp	\
	${MID}/spad.lisp	${MID}/bits.lisp	\
	${MID}/setq.lisp	${MID}/property.lisp	\
	${MID}/unlisp.lisp      ${MID}/foam_l.lisp      \
	${MID}/axext_l.lisp

LOADSYS= ${OBJ}/${SYS}/bin/lisp
SAVESYS= ${OBJ}/${SYS}/bin/interpsys
AXIOMSYS= ${MNT}/${SYS}/bin/AXIOMsys

DEBUGSYS=${OBJ}/${SYS}/bin/debugsys

OBJS=	${OUT}/vmlisp.${O}	${OUT}/hash.${O}	\
	${OUT}/bootfuns.${LISP}	${OUT}/macros.${O}	\
	${OUT}/unlisp.${O}	${OUT}/setq.${LISP}	\
	${OUT}/astr.${O}	${OUT}/bits.${O}	\
	${OUT}/alql.${O}	${OUT}/buildom.${O}	\
	${OUT}/cattable.${O}				\
	${OUT}/cformat.${O}	${OUT}/cfuns.${O}	\
	${OUT}/clam.${O}	${OUT}/clammed.${O}	\
	${OUT}/comp.${O}	\
	${OUT}/compat.${O}	${OUT}/compress.${O}	\
	${OUT}/cparse.${O}	${OUT}/cstream.${O}	\
	${OUT}/database.${O}	\
	${OUT}/debug.${O}	${OUT}/dq.${O}		\
	${OUT}/fname.${O}	${OUT}/format.${O}	\
	${OUT}/g-boot.${O}	${OUT}/g-cndata.${O}	\
	${OUT}/g-error.${O}	${OUT}/g-opt.${O}	\
	${OUT}/g-timer.${O}	${OUT}/g-util.${O}	\
	${OUT}/ggreater.${O}				\
	${OUT}/hypertex.${O}	${OUT}/i-analy.${O}	\
	${OUT}/i-code.${O}	${OUT}/i-coerce.${O}	\
	${OUT}/i-coerfn.${O}	${OUT}/i-eval.${O}	\
	${OUT}/i-funsel.${O}	${OUT}/bookvol5.${O}	\
	${OUT}/i-intern.${O}	${OUT}/i-map.${O}	\
	${OUT}/i-output.${O}	${OUT}/i-resolv.${O}	\
	${OUT}/i-spec1.${O}				\
	${OUT}/i-spec2.${O}	${OUT}/i-syscmd.${O}	\
	${OUT}/i-toplev.${O}	${OUT}/i-util.${O}	\
	${OUT}/incl.${O}	${OUT}/int-top.${O}	\
	${OUT}/intfile.${O}				\
	${OUT}/lisplib.${O}	${OUT}/macex.${O}	\
	${OUT}/match.${O}				\
	${OUT}/monitor.${O}	${OUT}/msg.${O}		\
	${OUT}/msgdb.${O}	${OUT}/nci.${O}		\
	${OUT}/newaux.${O}	${OUT}/newfort.${O}	\
	${OUT}/nlib.${O}	${OUT}/nrunfast.${O}	\
	${OUT}/nrungo.${O}	${OUT}/nrunopt.${O}	\
	${OUT}/nruntime.${O}	${OUT}/osyscmd.${O}	\
	${OUT}/packtran.${O}	${OUT}/pathname.${O}	\
	${OUT}/pf2sex.${O}	${OUT}/pile.${O}	\
	${OUT}/posit.${O}	${OUT}/property.${LISP}	\
	${OUT}/ptrees.${O}	${OUT}/ptrop.${O}	\
	${OUT}/record.${O}				\
	${OUT}/rulesets.${O}	\
	${OUT}/scan.${O}	${OUT}/serror.${O}	\
	${OUT}/server.${O}				\
	${OUT}/setvars.${O}	\
	${OUT}/sfsfun-l.${O}	${OUT}/sfsfun.${O}	\
	${OUT}/simpbool.${O}	${OUT}/slam.${O}	\
	${OUT}/sockio.${O}	${OUT}/spad.${O}	\
	${OUT}/spaderror.${O}				\
	${OUT}/template.${O}	${OUT}/termrw.${O}	\
	${OUT}/trace.${O}	\
	${OUT}/union.${O}       ${OUT}/daase.${O}  	\
	${OUT}/fortcall.${O}

INOBJS=	${OUT}/varini.${O}	${OUT}/parini.${O}	\
	${OUT}/setvart.${O}	${OUT}/intint.${O}	\
        ${OUT}/xrun.${O}        ${OUT}/interop.${O}     \
        ${OUT}/patches.${O}

# These are autloaded old parser files
OPOBJS=	${AUTO}/parsing.${O}	${AUTO}/bootlex.${O}	\
        ${AUTO}/def.${O}	\
	${AUTO}/fnewmeta.${O}	${AUTO}/metalex.${O}	\
	${AUTO}/metameta.${O}	\
	${AUTO}/parse.${O}	${AUTO}/postpar.${O}	\
	${AUTO}/postprop.${LISP}	${AUTO}/preparse.${O}

OCOBJS=	${AUTO}/apply.${O}	${AUTO}/c-doc.${O}	\
	${AUTO}/c-util.${O}	${AUTO}/profile.${O}	\
	${AUTO}/category.${O}	${AUTO}/compiler.${O}	\
	${AUTO}/define.${O}	${AUTO}/functor.${O}	\
	${AUTO}/info.${O}	${AUTO}/iterator.${O}	\
	${AUTO}/modemap.${O}	${AUTO}/nruncomp.${O}	\
	${AUTO}/package.${O}	${AUTO}/htcheck.${O}	\
        ${AUTO}/xruncomp.${O}   

BROBJS=	${AUTO}/bc-matrix.${O}				\
	${AUTO}/bc-misc.${O}	${AUTO}/bc-solve.${O}	\
	${AUTO}/bc-util.${O}				\
	${AUTO}/ht-util.${O}	${AUTO}/htsetvar.${O}	\
	${AUTO}/ht-root.${O}	\
	${AUTO}/br-con.${O}	\
	${AUTO}/br-data.${O}	${AUTO}/showimp.${O}    \
	${AUTO}/br-op1.${O}	${AUTO}/br-op2.${O}	\
	${AUTO}/br-search.${O}	${AUTO}/br-util.${O}	\
	${AUTO}/topics.${O}     ${AUTO}/br-prof.${O}    \
	${AUTO}/br-saturn.${O}

TRANOBJS= ${AUTO}/wi1.${O} ${AUTO}/wi2.${O} ${AUTO}/pspad1.${O} \
	  ${AUTO}/pspad2.${O} ${AUTO}/mark.${O} ${AUTO}/nspadaux.${O} \
	  ${AUTO}/def.${O}

NAGBROBJS= ${AUTO}/nag-c02.${O}   ${AUTO}/nag-c05.${O} \
           ${AUTO}/nag-c06.${O}   ${AUTO}/nag-d01.${O} \
           ${AUTO}/nag-d02.${O}   ${AUTO}/nag-d03.${O} \
           ${AUTO}/nag-e01.${O}   ${AUTO}/nag-e02.${O} \
           ${AUTO}/nag-e04.${O}   ${AUTO}/nag-f01.${O} \
           ${AUTO}/nag-f02.${O}   ${AUTO}/nag-f04.${O} \
           ${AUTO}/nag-f07.${O}   ${AUTO}/nag-s.${O} 

ASCOMP= ${OUT}/hashcode.${O} ${OUT}/as.${O} \
	${OUT}/foam_l.${O} ${OUT}/axext_l.${O}

ASAUTO= ${AUTO}/ax.${O}

TIMESTAMP=${MNT}/${SYS}/timestamp
YEARWEEK=(progn (setq timestamp "${TIMESTAMP}") (setq boot::*build-version* "${VERSION}") (yearweek))


.PRECIOUS:	${BOOTSYS}
.PRECIOUS:	${DEPSYS}
.PRECIOUS:	${SAVESYS}
.PRECIOUS:	${AXIOMSYS}

PROCLAIMS=(progn (load "${OUT}/sys-pkg.lsp") (load "${IN}/interp-proclaims.lisp"))

DOCFILES=${DOC}/alql.boot.dvi \
	 ${DOC}/apply.boot.dvi ${DOC}/as.boot.dvi \
	 ${DOC}/astr.boot.dvi ${DOC}/ax.boot.dvi \
	 ${DOC}/axext_l.lisp.dvi \
	 ${DOC}/bc-matrix.boot.dvi ${DOC}/bc-misc.boot.dvi \
	 ${DOC}/bc-solve.boot.dvi ${DOC}/bc-util.boot.dvi \
	 ${DOC}/bits.lisp.dvi ${DOC}/bootfuns.lisp.dvi \
	 ${DOC}/bootlex.lisp.dvi ${DOC}/br-con.boot.dvi \
	 ${DOC}/br-data.boot.dvi ${DOC}/br-op1.boot.dvi \
	 ${DOC}/br-op2.boot.dvi ${DOC}/br-prof.boot.dvi \
	 ${DOC}/br-saturn.boot.dvi ${DOC}/br-search.boot.dvi \
	 ${DOC}/br-util.boot.dvi ${DOC}/buildom.boot.dvi \
	 ${DOC}/category.boot.dvi ${DOC}/cattable.boot.dvi \
	 ${DOC}/c-doc.boot.dvi ${DOC}/cformat.boot.dvi \
	 ${DOC}/cfuns.lisp.dvi ${DOC}/clam.boot.dvi \
	 ${DOC}/clammed.boot.dvi ${DOC}/compat.boot.dvi \
	 ${DOC}/compiler.boot.dvi ${DOC}/comp.lisp.dvi \
	 ${DOC}/compress.boot.dvi \
	 ${DOC}/cparse.boot.dvi ${DOC}/cstream.boot.dvi \
	 ${DOC}/c-util.boot.dvi ${DOC}/daase.lisp.dvi \
	 ${DOC}/database.boot.dvi ${DOC}/debug.lisp.dvi \
	 ${DOC}/define.boot.dvi \
	 ${DOC}/dq.boot.dvi \
	 ${DOC}/fname.lisp.dvi ${DOC}/fnewmeta.lisp.dvi \
	 ${DOC}/foam_l.lisp.dvi \
	 ${DOC}/format.boot.dvi ${DOC}/fortcall.boot.dvi \
	 ${DOC}/functor.boot.dvi ${DOC}/g-boot.boot.dvi \
	 ${DOC}/g-cndata.boot.dvi ${DOC}/g-error.boot.dvi \
	 ${DOC}/ggreater.lisp.dvi ${DOC}/g-opt.boot.dvi \
	 ${DOC}/g-timer.boot.dvi \
	 ${DOC}/g-util.boot.dvi ${DOC}/hashcode.boot.dvi \
	 ${DOC}/hash.lisp.dvi ${DOC}/htcheck.boot.dvi \
	 ${DOC}/ht-root.boot.dvi ${DOC}/htsetvar.boot.dvi \
	 ${DOC}/ht-util.boot.dvi ${DOC}/hypertex.boot.dvi \
	 ${DOC}/i-analy.boot.dvi ${DOC}/i-code.boot.dvi \
	 ${DOC}/i-coerce.boot.dvi ${DOC}/i-coerfn.boot.dvi \
	 ${DOC}/i-eval.boot.dvi ${DOC}/i-funsel.boot.dvi \
	 ${BOOK}/bookvol5.dvi ${DOC}/i-intern.boot.dvi \
	 ${DOC}/i-map.boot.dvi ${DOC}/incl.boot.dvi \
	 ${DOC}/info.boot.dvi ${DOC}/interop.boot.dvi \
	 ${DOC}/intfile.boot.dvi \
	 ${DOC}/intint.lisp.dvi ${DOC}/int-top.boot.dvi \
	 ${DOC}/i-output.boot.dvi ${DOC}/i-resolv.boot.dvi \
	 ${DOC}/i-spec1.boot.dvi ${DOC}/i-spec2.boot.dvi \
	 ${DOC}/i-syscmd.boot.dvi ${DOC}/iterator.boot.dvi \
	 ${DOC}/i-toplev.boot.dvi ${DOC}/i-util.boot.dvi \
	 ${DOC}/lisplib.boot.dvi ${DOC}/macex.boot.dvi \
	 ${DOC}/macros.lisp.dvi ${DOC}/Makefile.dvi \
	 ${DOC}/mark.boot.dvi ${DOC}/match.boot.dvi \
	 ${DOC}/metalex.lisp.dvi ${DOC}/metameta.lisp.dvi \
	 ${DOC}/modemap.boot.dvi ${DOC}/monitor.lisp.dvi \
	 ${DOC}/msg.boot.dvi ${DOC}/msgdb.boot.dvi \
	 ${DOC}/nag-c02.boot.dvi ${DOC}/nag-c05.boot.dvi \
	 ${DOC}/nag-c06.boot.dvi ${DOC}/nag-d01.boot.dvi \
	 ${DOC}/nag-d02.boot.dvi ${DOC}/nag-d03.boot.dvi \
	 ${DOC}/nag-e01.boot.dvi \
	 ${DOC}/nag-e02.boot.dvi \
	 ${DOC}/nag-e04.boot.dvi ${DOC}/nag-f01.boot.dvi \
	 ${DOC}/nag-f02.boot.dvi ${DOC}/nag-f04.boot.dvi \
	 ${DOC}/nag-f07.boot.dvi ${DOC}/nag-s.boot.dvi \
	 ${DOC}/nci.lisp.dvi ${DOC}/newaux.lisp.dvi \
	 ${DOC}/newfort.boot.dvi \
	 ${DOC}/nlib.lisp.dvi ${DOC}/nocompil.lisp.dvi \
	 ${DOC}/nruncomp.boot.dvi ${DOC}/nrunfast.boot.dvi \
	 ${DOC}/nrungo.boot.dvi ${DOC}/nrunopt.boot.dvi \
	 ${DOC}/nruntime.boot.dvi ${DOC}/nspadaux.lisp.dvi \
	 ${DOC}/obey.lisp.dvi ${DOC}/osyscmd.boot.dvi \
	 ${DOC}/package.boot.dvi ${DOC}/packtran.boot.dvi \
	 ${DOC}/parini.boot.dvi ${DOC}/parse.boot.dvi \
	 ${DOC}/parsing.lisp.dvi ${DOC}/patches.lisp.dvi \
	 ${DOC}/pathname.boot.dvi \
	 ${DOC}/pf2sex.boot.dvi ${DOC}/pile.boot.dvi \
	 ${DOC}/posit.boot.dvi ${DOC}/postpar.boot.dvi \
	 ${DOC}/postprop.lisp.dvi ${DOC}/preparse.lisp.dvi \
	 ${DOC}/profile.boot.dvi ${DOC}/property.lisp.dvi \
	 ${DOC}/pspad1.boot.dvi ${DOC}/pspad2.boot.dvi \
	 ${DOC}/ptrees.boot.dvi ${DOC}/ptrop.boot.dvi \
	 ${DOC}/record.boot.dvi \
	 ${DOC}/rulesets.boot.dvi ${DOC}/scan.boot.dvi \
	 ${DOC}/serror.boot.dvi ${DOC}/server.boot.dvi \
	 ${DOC}/setq.lisp.dvi ${DOC}/setvars.boot.dvi \
	 ${DOC}/setvart.boot.dvi ${DOC}/sfsfun.boot.dvi \
	 ${DOC}/sfsfun-l.lisp.dvi \
	 ${DOC}/showimp.boot.dvi ${DOC}/simpbool.boot.dvi \
	 ${DOC}/slam.boot.dvi ${DOC}/sockio.lisp.dvi \
	 ${DOC}/spaderror.lisp.dvi ${DOC}/spad.lisp.dvi \
	 ${DOC}/sys-pkg.lisp.dvi ${DOC}/template.boot.dvi \
	 ${DOC}/termrw.boot.dvi ${DOC}/topics.boot.dvi \
	 ${DOC}/trace.boot.dvi \
	 ${DOC}/union.lisp.dvi ${DOC}/unlisp.lisp.dvi \
	 ${DOC}/util.lisp.dvi ${DOC}/varini.boot.dvi \
	 ${DOC}/vmlisp.lisp.dvi ${DOC}/wi1.boot.dvi \
	 ${DOC}/wi2.boot.dvi \
	 ${DOC}/xrun.boot.dvi ${DOC}/xruncomp.boot.dvi 

UNUSED= ${DOC}/anna.boot.dvi ${DOC}/construc.lisp.dvi \
	${DOC}/domain.lisp.dvi 	${DOC}/guess.boot.dvi \
	${DOC}/interp-fix.boot.dvi \
	${DOC}/nhyper.boot.dvi ${DOC}/pf2atree.boot.dvi \
	${DOC}/redefs.boot.dvi 	${DOC}/word.boot.dvi 


all: ${SAVESYS} ${DOCFILES} ${DEBUGSYS} 
	@echo 618 finished ${IN}

clean:
	@echo 619 cleaning ${SRC}/interp

${SAVESYS}:	${DEPSYS} ${OBJS} ${OUT}/bookvol5.${O} ${OUT}/util.${O} \
                ${OUT}/nocompil.${LISP} ${OUT}/sys-pkg.${LISP} \
	        ${OUTINTERP} ${OCOBJS} ${OPOBJS} ${BROBJS} ${OUT}/obey.${O} \
		${OUT}/database.date ${INOBJS} ${ASCOMP} ${ASAUTO} \
		${NAGBROBJS} ${TRANOBJS} \
	        ${LOADSYS} \
		${MNT}/${SYS}/algebra/exposed.${O} \
		${SRC}/doc/msgs/s2-us.msgs \
	        ${INT}/algebra/warm.data
	@ echo 5 invoking make in `pwd` with parms:
	@ echo SYS= ${SYS} 
	@ echo LSP= ${LSP} 
	@ echo PART= ${PART} 
	@ echo SPAD= ${SPAD} 
	@ echo SRC= ${SRC} 
	@ echo INT= ${INT}
	@ echo MID= ${MID} 
	@ echo OUT= ${OUT}
	@ echo OBJ= ${OBJ} 
	@ echo MNT= ${MNT} 
	@ echo O=${O} LISP=${LISP} BYE=${BYE}
	@ cp -p ${OUT}/*.fn ${MID}
	@ cp -p ${SRC}/doc/msgs/s2-us.msgs ${SPAD}/doc/msgs
#	@ cp -p ${SRC}/doc/msgs/co-eng.msgs ${SPAD}/doc/msgs
	@ echo '${PROCLAIMS}' > ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/nocompil")' >> ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/bookvol5")' >> ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/util")' >> ${OUT}/makeint.lisp
	@ echo '(in-package "BOOT")' >> ${OUT}/makeint.lisp
	@ touch ${TIMESTAMP}
	@ echo '${YEARWEEK}' >> ${OUT}/makeint.lisp
	@ echo '(build-interpsys (append (quote ($(patsubst %, "%", ${OBJS}))) (quote ($(patsubst %, "%", ${ASCOMP}))) (quote ($(patsubst %, "%", ${INOBJS})))) (quote ($(patsubst %, "%", ${OPOBJS}))) (quote ($(patsubst %, "%", ${OCOBJS}))) (quote ($(patsubst %, "%", ${BROBJS}))) (quote ($(patsubst %, "%", ${TRANOBJS}))) (quote ($(patsubst %, "%", ${NAGBROBJS}))) (quote ($(patsubst %, "%", ${ASAUTO})))  "${SPAD}"  "${LSP}" "${SRC}" "${INT}" "${OBJ}" "${MNT}" "${SYS}")' >> ${OUT}/makeint.lisp
	@ echo '(in-package "SCRATCHPAD-COMPILER")' >> ${OUT}/makeint.lisp
#	@ echo '(|shoeInternFile| "${MNT}/${SYS}/doc/msgs/co-eng.msgs")' >> ${OUT}/makeint.lisp
	@ echo '(boot::set-restart-hook)' >> ${OUT}/makeint.lisp
	@ echo '(in-package "BOOT")' >> ${OUT}/makeint.lisp
	@ echo '(load "${INT}/algebra/warm.data")' >> ${OUT}/makeint.lisp
	@ echo '(|clearClams|)' >> ${OUT}/makeint.lisp
	@ echo '(load "${OUT}/obey")' >> ${OUT}/makeint.lisp
#	@ echo '#+:akcl (si::multiply-bignum-stack 10)' >> ${OUT}/makeint.lisp
	@ echo '#+:akcl (setq compiler::*suppress-compiler-notes* t)' >> ${OUT}/makeint.lisp
	@ echo '#+:akcl (si::gbc-time 0)' >> ${OUT}/makeint.lisp
	@ echo '#+:akcl (setq si::*system-directory* "${SPAD}/bin/")' >> ${OUT}/makeint.lisp
	@ (cd ${OBJ}/${SYS}/bin ; \
	  echo '(progn (gbc t) (load "${OUT}/makeint.lisp") (gbc t) (user::spad-save "${SAVESYS}"))' | ${LISPSYS} )
	@ echo 6 ${SAVESYS} created
	@ cp ${SAVESYS} ${AXIOMSYS}
	@ echo 6a ${AXIOMSYS} created

${DEPSYS}:	${DEP} ${OUT}/sys-pkg.${LISP} ${OUT}/nocompil.${LISP} \
	        ${OUT}/bookvol5.${LISP} ${OUT}/util.${LISP} \
	        ${OUT}/postpar.${LISP} ${OUT}/parse.${LISP} \
	        ${OUT}/parsing.${LISP} ${OUT}/metalex.${LISP} \
	        ${OUT}/bootlex.${LISP} ${OUT}/newaux.${LISP} \
	        ${OUT}/preparse.${LISP} \
	        ${OUT}/postprop.${LISP} ${OUT}/def.${LISP} \
	        ${OUT}/metameta.${LISP} ${OUT}/fnewmeta.${LISP} \
	        ${OUT}/g-boot.${LISP} ${OUT}/c-util.${LISP} \
	        ${OUT}/g-util.${LISP} \
	        ${OUT}/clam.${LISP} \
	        ${OUT}/slam.${LISP} ${LOADSYS}
	@ echo 3 making ${DEPSYS} 
	@ echo '${PROCLAIMS}' > ${OUT}/makedep.lisp
	@ echo '(push :oldboot *features*)' >>${OUT}/makedep.lisp
	@ echo '(load "${OUT}/nocompil")' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/bookvol5")' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/util")' >> ${OUT}/makedep.lisp
	@ echo '(in-package "BOOT")' >> ${OUT}/makedep.lisp
	@ echo '(build-depsys (quote ($(patsubst %, "%", ${DEP}))) "${SPAD}" "${GCLDIR}" "${SRC}" "${INT}" "${OBJ}" "${MNT}" "${SYS}")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/postpar.${O}") (compile-file "${OUT}/postpar.${LISP}" :output-file "${OUT}/postpar.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/postpar")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/parse.${O}") (compile-file "${OUT}/parse.${LISP}" :output-file "${OUT}/parse.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/parse")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/parsing.${O}") (compile-file "${OUT}/parsing.${LISP}" :output-file "${OUT}/parsing.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/parsing")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/metalex.${O}") (compile-file "${OUT}/metalex.${LISP}" :output-file "${OUT}/metalex.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/metalex")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/bootlex.${O}") (compile-file "${OUT}/bootlex.${LISP}" :output-file "${OUT}/bootlex.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/bootlex")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/newaux.${O}") (compile-file "${OUT}/newaux.${LISP}" :output-file "${OUT}/newaux.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/newaux")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/preparse.${O}") (compile-file "${OUT}/preparse.${LISP}" :output-file "${OUT}/preparse.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/preparse")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/postprop.${O}") (compile-file "${OUT}/postprop.${LISP}" :output-file "${OUT}/postprop.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/postprop")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/def.${O}") (compile-file "${OUT}/def.${LISP}" :output-file "${OUT}/def.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/def")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/metameta.${O}") (compile-file "${OUT}/metameta.${LISP}" :output-file "${OUT}/metameta.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/metameta")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/fnewmeta.${O}") (compile-file "${OUT}/fnewmeta.${LISP}" :output-file "${OUT}/fnewmeta.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/fnewmeta")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/clam.${O}") (compile-file "${OUT}/clam.${LISP}" :output-file "${OUT}/clam.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/clam")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/slam.${O}") (compile-file "${OUT}/slam.${LISP}" :output-file "${OUT}/slam.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/slam")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/g-boot.${O}") (compile-file "${OUT}/g-boot.${LISP}" :output-file "${OUT}/g-boot.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/g-boot")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/c-util.${O}") (compile-file "${OUT}/c-util.${LISP}" :output-file "${OUT}/c-util.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/c-util")' >> ${OUT}/makedep.lisp
	@ echo '(unless (probe-file "${OUT}/g-util.${O}") (compile-file "${OUT}/g-util.${LISP}" :output-file "${OUT}/g-util.${O}"))' >> ${OUT}/makedep.lisp
	@ echo '(load "${OUT}/g-util")' >> ${OUT}/makedep.lisp
	@ (cd ${MNT}/${SYS}/bin ; \
	   echo '(progn (load "${OUT}/makedep.lisp") (spad-save "${DEPSYS}"))' | ${LISPSYS})
	@ echo 4 ${DEPSYS} created

${DEBUGSYS}: ${MID}/debugsys.lisp
	@ echo 7 building debugsys
	@ (cd ${OBJ}/${SYS}/bin ; \
	  echo '(progn (gbc t) (load "${MID}/debugsys.lisp") (user::spad-save "${DEBUGSYS}"))' | ${LISPSYS} )
	@ echo 8 ${DEBUGSYS} created

${MID}/exposed.lsp: ${SRC}/algebra/exposed.lsp.pamphlet
	@ echo 615 making ${MID}/exposed.lsp from ${SRC}/algebra/exposed.lsp.pamphlet
	@(cd ${MID} ; \
	${TANGLE} ${SRC}/algebra/exposed.lsp.pamphlet >exposed.lsp )

${MNT}/${SYS}/algebra/exposed.${O} : ${MID}/exposed.lsp ${LISPSYS}
	@ echo 616 making ${MNT}/${SYS}/algebra/exposed.${O} from ${MID}/exposed.lsp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/exposed.lsp" :output-file "${MNT}/${SYS}/algebra/exposed.${O}") (${BYE}))' | ${LISPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/exposed.lsp" :output-file "${MNT}/${SYS}/algebra/exposed.${O}") (${BYE}))' | ${LISPSYS} >> ${TMP}/trace ; \
	  fi

${OUT}/database.date:
	@ echo 617 the database was updated...remaking interpsys
	@ touch ${OUT}/database.date


${OUT}/alql.${O}: ${MID}/alql.clisp 
	@ echo 139 making ${OUT}/alql.${O} from ${MID}/alql.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/alql.clisp" :output-file "${OUT}/alql.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/alql.clisp" :output-file "${OUT}/alql.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/alql.clisp: ${IN}/alql.boot.pamphlet
	@ echo 140 making ${MID}/alql.clisp from ${IN}/alql.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/alql.boot.pamphlet >alql.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "alql.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "alql.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	   rm alql.boot )


${AUTO}/apply.${O}: ${OUT}/apply.${O}
	@ echo 9 making ${AUTO}/apply.${O} from ${OUT}/apply.${O}
	@ cp ${OUT}/apply.${O} ${AUTO}

${OUT}/apply.${O}: ${MID}/apply.clisp 
	@ echo 10 making ${OUT}/apply.${O} from ${MID}/apply.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/apply.clisp" :output-file "${OUT}/apply.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/apply.clisp" :output-file "${OUT}/apply.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/apply.clisp: ${IN}/apply.boot.pamphlet
	@ echo 11 making ${MID}/apply.clisp from ${IN}/apply.boot.pamphlet
	@( cd ${MID} ; \
	   ${TANGLE} ${IN}/apply.boot.pamphlet >apply.boot ; \
	   if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "apply.boot") (${BYE}))' | ${DEPSYS} ; \
	   else \
	   echo '(progn (boottran::boottocl "apply.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
           fi ; \
	   rm apply.boot )


${OUT}/as.${O}: ${MID}/as.clisp 
	@ echo 416 making ${OUT}/as.${O} from ${MID}/as.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/as.clisp" :output-file "${OUT}/as.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/as.clisp" :output-file "${OUT}/as.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/as.clisp: ${IN}/as.boot.pamphlet
	@ echo 417 making ${MID}/as.clisp from ${IN}/as.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/as.boot.pamphlet >as.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "as.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "as.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm as.boot )


${OUT}/astr.${O}: ${MID}/astr.clisp 
	@ echo 531 making ${OUT}/astr.${O} from ${MID}/astr.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/astr.clisp" :output-file "${OUT}/astr.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/astr.clisp" :output-file "${OUT}/astr.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/astr.clisp: ${IN}/astr.boot.pamphlet
	@ echo 532 making ${MID}/astr.clisp from ${IN}/astr.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/astr.boot.pamphlet >astr.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/astr.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/astr.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm astr.boot )


${AUTO}/ax.${O}: ${OUT}/ax.${O}
	@ echo 461 making ${AUTO}/ax.${O} from ${OUT}/ax.${O}
	@ cp ${OUT}/ax.${O} ${AUTO}

${OUT}/ax.${O}: ${MID}/ax.clisp 
	@ echo 462 making ${OUT}/ax.${O} from ${MID}/ax.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ax.clisp" :output-file "${OUT}/ax.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ax.clisp" :output-file "${OUT}/ax.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ax.clisp: ${IN}/ax.boot.pamphlet
	@ echo 463 making ${MID}/ax.clisp from ${IN}/ax.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/ax.boot.pamphlet >ax.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ax.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ax.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ax.boot )


# .lisp files for AXIOM-XL support

${OUT}/axext_l.${O}: ${MID}/axext_l.lisp
	@ echo 607 making ${OUT}/axext_l.${O} from ${MID}/axext_l.lisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/axext_l.lisp" :output-file "${OUT}/axext_l.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/axext_l.lisp" :output-file "${OUT}/axext_l.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/axext_l.lisp: ${IN}/axext_l.lisp.pamphlet
	@ echo 608 making ${MID}/axext_l.lisp from ${IN}/axext_l.lisp.pamphlet
	@(cd ${MID} ; \
	${TANGLE} ${IN}/axext_l.lisp.pamphlet >axext_l.lisp )


${AUTO}/bc-matrix.${O}: ${OUT}/bc-matrix.${O}
	@ echo 422 making ${AUTO}/bc-matrix.${O} from ${OUT}/bc-matrix.${O}
	@ cp ${OUT}/bc-matrix.${O} ${AUTO}

${OUT}/bc-matrix.${O}: ${MID}/bc-matrix.clisp 
	@ echo 423 making ${OUT}/bc-matrix.${O} from ${MID}/bc-matrix.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-matrix.clisp" :output-file "${OUT}/bc-matrix.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-matrix.clisp" :output-file "${OUT}/bc-matrix.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-matrix.clisp: ${IN}/bc-matrix.boot.pamphlet
	@ echo 424 making ${MID}/bc-matrix.clisp from ${IN}/bc-matrix.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/bc-matrix.boot.pamphlet >bc-matrix.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-matrix.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-matrix.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-matrix.boot )


${AUTO}/bc-misc.${O}: ${OUT}/bc-misc.${O}
	@ echo 426 making ${AUTO}/bc-misc.${O} from ${OUT}/bc-misc.${O}
	@ cp ${OUT}/bc-misc.${O} ${AUTO}

${OUT}/bc-misc.${O}: ${MID}/bc-misc.clisp 
	@ echo 427 making ${OUT}/bc-misc.${O} from ${MID}/bc-misc.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-misc.clisp" :output-file "${OUT}/bc-misc.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-misc.clisp" :output-file "${OUT}/bc-misc.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-misc.clisp: ${IN}/bc-misc.boot.pamphlet
	@ echo 428 making ${MID}/bc-misc.clisp from ${IN}/bc-misc.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/bc-misc.boot.pamphlet >bc-misc.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-misc.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-misc.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-misc.boot )


${AUTO}/bc-solve.${O}: ${OUT}/bc-solve.${O}
	@ echo 430 making ${AUTO}/bc-solve.${O} from ${OUT}/bc-solve.${O}
	@ cp ${OUT}/bc-solve.${O} ${AUTO}

${OUT}/bc-solve.${O}: ${MID}/bc-solve.clisp 
	@ echo 431 making ${OUT}/bc-solve.${O} from ${MID}/bc-solve.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-solve.clisp" :output-file "${OUT}/bc-solve.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-solve.clisp" :output-file "${OUT}/bc-solve.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-solve.clisp: ${IN}/bc-solve.boot.pamphlet
	@ echo 432 making ${MID}/bc-solve.clisp from ${IN}/bc-solve.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/bc-solve.boot.pamphlet >bc-solve.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-solve.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-solve.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-solve.boot )


${AUTO}/bc-util.${O}: ${OUT}/bc-util.${O}
	@ echo 434 making ${AUTO}/bc-util.${O} from ${OUT}/bc-util.${O}
	@ cp ${OUT}/bc-util.${O} ${AUTO}

${OUT}/bc-util.${O}: ${MID}/bc-util.clisp 
	@ echo 435 making ${OUT}/bc-util.${O} from ${MID}/bc-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bc-util.clisp" :output-file "${OUT}/bc-util.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bc-util.clisp" :output-file "${OUT}/bc-util.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/bc-util.clisp: ${IN}/bc-util.boot.pamphlet
	@ echo 436 making ${MID}/bc-util.clisp from ${IN}/bc-util.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/bc-util.boot.pamphlet >bc-util.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm bc-util.boot )


${OUT}/bits.${O}: ${MID}/bits.lisp
	@ echo 13 making ${OUT}/bits.${O} from ${MID}/bits.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bits.lisp" :output-file "${OUT}/bits.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bits.lisp" :output-file "${OUT}/bits.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
${MID}/bits.lisp: ${IN}/bits.lisp.pamphlet
	@ echo 14 making ${MID}/bits.lisp from ${IN}/bits.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/bits.lisp.pamphlet >bits.lisp )


${OUT}/bootfuns.${LISP}: ${MID}/bootfuns.lisp
	@ echo 16 making ${OUT}/bootfuns.${LISP} from ${MID}/bootfuns.lisp
	@ cp ${MID}/bootfuns.lisp ${OUT}/bootfuns.${LISP}

${MID}/bootfuns.lisp: ${IN}/bootfuns.lisp.pamphlet
	@ echo 17 making ${MID}/bootfuns.lisp from ${IN}/bootfuns.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/bootfuns.lisp.pamphlet >bootfuns.lisp )


${AUTO}/bootlex.${O}: ${OUT}/bootlex.${O}
	@ echo 19 making ${AUTO}/bootlex.${O} from ${OUT}/bootlex.${O}
	@ cp ${OUT}/bootlex.${O} ${AUTO}

${OUT}/bootlex.${O}: ${MID}/bootlex.lisp 
	@ echo 20 making ${OUT}/bootlex.${O} from ${MID}/bootlex.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bootlex.lisp" :output-file "${OUT}/bootlex.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bootlex.lisp" :output-file "${OUT}/bootlex.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/bootlex.${LISP}: ${MID}/bootlex.lisp
	@ echo 21 making ${OUT}/bootlex.${LISP} from ${MID}/bootlex.lisp
	@cp ${MID}/bootlex.lisp ${OUT}/bootlex.${LISP}

${MID}/bootlex.lisp: ${IN}/bootlex.lisp.pamphlet
	@ echo 22 making ${MID}/bootlex.lisp from ${IN}/bootlex.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/bootlex.lisp.pamphlet >bootlex.lisp )
	  

${AUTO}/br-con.${O}: ${OUT}/br-con.${O}
	@ echo 465 making ${AUTO}/br-con.${O} from ${OUT}/br-con.${O}
	@ cp ${OUT}/br-con.${O} ${AUTO}

${OUT}/br-con.${O}: ${MID}/br-con.clisp 
	@ echo 466 making ${OUT}/br-con.${O} from ${MID}/br-con.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-con.clisp" :output-file "${OUT}/br-con.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-con.clisp" :output-file "${OUT}/br-con.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-con.clisp: ${IN}/br-con.boot.pamphlet
	@ echo 467 making ${MID}/br-con.clisp from ${IN}/br-con.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-con.boot.pamphlet >br-con.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-con.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-con.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-con.boot )


${AUTO}/br-data.${O}: ${OUT}/br-data.${O}
	@ echo 481 making ${AUTO}/br-data.${O} from ${OUT}/br-data.${O}
	@ cp ${OUT}/br-data.${O} ${AUTO}

${OUT}/br-data.${O}: ${MID}/br-data.clisp 
	@ echo 482 making ${OUT}/br-data.${O} from ${MID}/br-data.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-data.clisp" :output-file "${OUT}/br-data.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-data.clisp" :output-file "${OUT}/br-data.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-data.clisp: ${IN}/br-data.boot.pamphlet
	@ echo 483 making ${MID}/br-data.clisp from ${IN}/br-data.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-data.boot.pamphlet >br-data.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-data.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-data.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-data.boot )


${AUTO}/br-op1.${O}: ${OUT}/br-op1.${O}
	@ echo 473 making ${AUTO}/br-op1.${O} from ${OUT}/br-op1.${O}
	@ cp ${OUT}/br-op1.${O} ${AUTO}

${OUT}/br-op1.${O}: ${MID}/br-op1.clisp 
	@ echo 474 making ${OUT}/br-op1.${O} from ${MID}/br-op1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-op1.clisp" :output-file "${OUT}/br-op1.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-op1.clisp" :output-file "${OUT}/br-op1.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-op1.clisp: ${IN}/br-op1.boot.pamphlet
	@ echo 475 making ${MID}/br-op1.clisp from ${IN}/br-op1.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-op1.boot.pamphlet >br-op1.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-op1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-op1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-op1.boot )


${AUTO}/br-op2.${O}: ${OUT}/br-op2.${O}
	@ echo 477 making ${AUTO}/br-op2.${O} from ${OUT}/br-op2.${O}
	@ cp ${OUT}/br-op2.${O} ${AUTO}

${OUT}/br-op2.${O}: ${MID}/br-op2.clisp 
	@ echo 478 making ${OUT}/br-op2.${O} from ${MID}/br-op2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-op2.clisp" :output-file "${OUT}/br-op2.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-op2.clisp" :output-file "${OUT}/br-op2.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-op2.clisp: ${IN}/br-op2.boot.pamphlet
	@ echo 479 making ${MID}/br-op2.clisp from ${IN}/br-op2.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-op2.boot.pamphlet >br-op2.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-op2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-op2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-op2.boot )


${AUTO}/br-prof.${O}: ${OUT}/br-prof.${O}
	@ echo 497 making ${AUTO}/br-prof.${O} from ${OUT}/br-prof.${O}
	@ cp ${OUT}/br-prof.${O} ${AUTO}

${OUT}/br-prof.${O}: ${MID}/br-prof.clisp 
	@ echo 498 making ${OUT}/br-prof.${O} from ${MID}/br-prof.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-prof.clisp" :output-file "${OUT}/br-prof.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-prof.clisp" :output-file "${OUT}/br-prof.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-prof.clisp: ${IN}/br-prof.boot.pamphlet
	@ echo 499 making ${MID}/br-prof.clisp from ${IN}/br-prof.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-prof.boot.pamphlet >br-prof.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-prof.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-prof.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-prof.boot )


${AUTO}/br-saturn.${O}: ${OUT}/br-saturn.${O}
	@ echo 489 making ${AUTO}/br-saturn.${O} from ${OUT}/br-saturn.${O}
	@ cp ${OUT}/br-saturn.${O} ${AUTO}

${OUT}/br-saturn.${O}: ${MID}/br-saturn.clisp 
	@ echo 490 making ${OUT}/br-saturn.${O} from ${MID}/br-saturn.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-saturn.clisp" :output-file "${OUT}/br-saturn.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-saturn.clisp" :output-file "${OUT}/br-saturn.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-saturn.clisp: ${IN}/br-saturn.boot.pamphlet
	@ echo 491 making ${MID}/br-saturn.clisp from ${IN}/br-saturn.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-saturn.boot.pamphlet >br-saturn.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-saturn.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-saturn.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-saturn.boot )


${AUTO}/br-search.${O}: ${OUT}/br-search.${O}
	@ echo 469 making ${AUTO}/br-search.${O} from ${OUT}/br-search.${O}
	@ cp ${OUT}/br-search.${O} ${AUTO}

${OUT}/br-search.${O}: ${MID}/br-search.clisp 
	@ echo 470 making ${OUT}/br-search.${O} from ${MID}/br-search.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-search.clisp" :output-file "${OUT}/br-search.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-search.clisp" :output-file "${OUT}/br-search.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-search.clisp: ${IN}/br-search.boot.pamphlet
	@ echo 471 making ${MID}/br-search.clisp from ${IN}/br-search.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-search.boot.pamphlet >br-search.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-search.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-search.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-search.boot )


${AUTO}/br-util.${O}: ${OUT}/br-util.${O}
	@ echo 485 making ${AUTO}/br-util.${O} from ${OUT}/br-util.${O}
	@ cp ${OUT}/br-util.${O} ${AUTO}

${OUT}/br-util.${O}: ${MID}/br-util.clisp 
	@ echo 486 making ${OUT}/br-util.${O} from ${MID}/br-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/br-util.clisp" :output-file "${OUT}/br-util.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/br-util.clisp" :output-file "${OUT}/br-util.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/br-util.clisp: ${IN}/br-util.boot.pamphlet
	@ echo 487 making ${MID}/br-util.clisp from ${IN}/br-util.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/br-util.boot.pamphlet >br-util.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-util.boot )


${OUT}/buildom.${O}: ${MID}/buildom.clisp 
	@ echo 142 making ${OUT}/buildom.${O} from ${MID}/buildom.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/buildom.clisp" :output-file "${OUT}/buildom.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/buildom.clisp" :output-file "${OUT}/buildom.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/buildom.clisp: ${IN}/buildom.boot.pamphlet
	@ echo 143 making ${MID}/buildom.clisp from ${IN}/buildom.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/buildom.boot.pamphlet >buildom.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "buildom.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "buildom.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm buildom.boot )


${AUTO}/category.${O}: ${OUT}/category.${O}
	@ echo 210 making ${AUTO}/ category.${O} from ${OUT}/category.${O}
	@ cp ${OUT}/category.${O} ${AUTO}

${OUT}/category.${O}: ${MID}/category.clisp 
	@ echo 211 making ${OUT}/category.${O} from ${MID}/category.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/category.clisp" :output-file "${OUT}/category.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/category.clisp" :output-file "${OUT}/category.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/category.clisp: ${IN}/category.boot.pamphlet
	@ echo 212 making ${MID}/category.clisp from ${IN}/category.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/category.boot.pamphlet >category.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "category.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "category.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm category.boot )


${OUT}/cattable.${O}: ${MID}/cattable.clisp 
	@ echo 214 making ${OUT}/cattable.${O} from ${MID}/cattable.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/cattable.clisp" :output-file "${OUT}/cattable.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/cattable.clisp" :output-file "${OUT}/cattable.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/cattable.clisp: ${IN}/cattable.boot.pamphlet
	@ echo 215 making ${MID}/cattable.clisp from ${IN}/cattable.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/cattable.boot.pamphlet >cattable.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "cattable.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "cattable.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm cattable.boot )


${AUTO}/c-doc.${O}: ${OUT}/c-doc.${O}
	@ echo 217 making ${AUTO}/c-doc.${O} from ${OUT}/c-doc.${O}
	@ cp ${OUT}/c-doc.${O} ${AUTO}

${OUT}/c-doc.${O}: ${MID}/c-doc.clisp 
	@ echo 218 making ${OUT}/c-doc.${O} from ${MID}/c-doc.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/c-doc.clisp" :output-file "${OUT}/c-doc.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/c-doc.clisp" :output-file "${OUT}/c-doc.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/c-doc.clisp: ${IN}/c-doc.boot.pamphlet
	@ echo 219 making ${MID}/c-doc.clisp from ${IN}/c-doc.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/c-doc.boot.pamphlet >c-doc.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "c-doc.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "c-doc.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm c-doc.boot )


${OUT}/cformat.${O}: ${MID}/cformat.clisp 
	@ echo 543 making ${OUT}/cformat.${O} from ${MID}/cformat.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/cformat.clisp" :output-file "${OUT}/cformat.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/cformat.clisp" :output-file "${OUT}/cformat.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/cformat.clisp: ${IN}/cformat.boot.pamphlet
	@ echo 544 making ${MID}/cformat.clisp from ${IN}/cformat.boot.pamphlet
	@ (cd ${MID} ; \
	 ${TANGLE} ${IN}/cformat.boot.pamphlet >cformat.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/cformat.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/cformat.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm cformat.boot )


${OUT}/cfuns.${O}: ${MID}/cfuns.lisp
	@ echo 24 making ${OUT}/cfuns.${O} from ${MID}/cfuns.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/cfuns.lisp" :output-file "${OUT}/cfuns.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/cfuns.lisp" :output-file "${OUT}/cfuns.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/cfuns.lisp: ${IN}/cfuns.lisp.pamphlet
	@ echo 25 making ${MID}/cfuns.lisp from ${IN}/cfuns.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/cfuns.lisp.pamphlet >cfuns.lisp )


${OUT}/clam.${LISP}: ${IN}/clam.boot.pamphlet
	@ echo 221 making ${OUT}/clam.${LISP} from ${IN}/clam.boot.pamphlet
	@ rm -f ${OUT}/clam.${O}
	@( cd ${OUT} ; \
	${TANGLE} -Rclam.clisp ${IN}/clam.boot.pamphlet >clam.${LISP} )

${OUT}/clam.${O}: ${MID}/clam.clisp 
	@ echo 222 making ${OUT}/clam.${O} from ${MID}/clam.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/clam.clisp" :output-file "${OUT}/clam.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/clam.clisp" :output-file "${OUT}/clam.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/clam.clisp: ${IN}/clam.boot.pamphlet
	@ echo 223 making ${MID}/clam.clisp from ${IN}/clam.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/clam.boot.pamphlet >clam.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "clam.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "clam.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm clam.boot )


${OUT}/clammed.${O}: ${MID}/clammed.clisp 
	@ echo 225 making ${OUT}/clammed.${O} from ${MID}/clammed.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/clammed.clisp" :output-file "${OUT}/clammed.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/clammed.clisp" :output-file "${OUT}/clammed.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/clammed.clisp: ${IN}/clammed.boot.pamphlet
	@ echo 226 making ${MID}/clammed.clisp from ${IN}/clammed.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/clammed.boot.pamphlet >clammed.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "clammed.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "clammed.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm clammed.boot)


${OUT}/comp.${O}: ${MID}/comp.lisp
	@ echo 27 making ${OUT}/comp.${O} from ${MID}/comp.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/comp.lisp" :output-file "${OUT}/comp.${O}") (${BYE}))' | ${DEPSYS}  ; \
	  else \
	   echo '(progn  (compile-file "${MID}/comp.lisp" :output-file "${OUT}/comp.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/comp.lisp: ${IN}/comp.lisp.pamphlet
	@ echo 28 making ${MID}/comp.lisp from ${IN}/comp.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/comp.lisp.pamphlet >comp.lisp )


${OUT}/compat.${O}: ${MID}/compat.clisp 
	@ echo 228 making ${OUT}/compat.${O} from ${MID}/compat.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/compat.clisp" :output-file "${OUT}/compat.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/compat.clisp" :output-file "${OUT}/compat.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/compat.clisp: ${IN}/compat.boot.pamphlet
	@ echo 229 making ${MID}/compat.clisp from ${IN}/compat.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/compat.boot.pamphlet >compat.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compat.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compat.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm compat.boot )


${AUTO}/compiler.${O}: ${OUT}/compiler.${O}
	@ echo 231 making ${AUTO}/compiler.${O} from ${OUT}/compiler.${O}
	@ cp ${OUT}/compiler.${O} ${AUTO}

${OUT}/compiler.${O}: ${MID}/compiler.clisp 
	@ echo 232 making ${OUT}/compiler.${O} from ${MID}/compiler.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/compiler.clisp" :output-file "${OUT}/compiler.${O}") (${BYE}))' | ${DEPSYS} ; \
          else \
	   echo '(progn  (compile-file "${MID}/compiler.clisp" :output-file "${OUT}/compiler.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/compiler.clisp: ${IN}/compiler.boot.pamphlet
	@ echo 233 making ${MID}/compiler.clisp from ${IN}/compiler.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/compiler.boot.pamphlet >compiler.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compiler.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compiler.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm compiler.boot )


${OUT}/compress.${O}: ${MID}/compress.clisp 
	@ echo 239 making ${OUT}/compress.${O} from ${MID}/compress.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/compress.clisp" :output-file "${OUT}/compress.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/compress.clisp" :output-file "${OUT}/compress.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/compress.clisp: ${IN}/compress.boot.pamphlet
	@ echo 240 making ${MID}/compress.clisp from ${IN}/compress.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/compress.boot.pamphlet >compress.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compress.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compress.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm compress.boot )


${OUT}/construc.${O}: ${MID}/construc.lisp
	@ echo 30 making ${OUT}/construc.${O} from ${MID}/construc.lisp
	@ ( cd ${MID} ; \
	   echo '(progn  (compile-file "${MID}/construc.lisp" :output-file "${OUT}/construc.${O}") (${BYE}))' | ${DEPSYS}  )

${MID}/construc.lisp: ${IN}/construc.lisp.pamphlet
	@ echo 31 making ${MID}/construc.lisp from ${IN}/construc.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/construc.lisp.pamphlet >construc.lisp )


${OUT}/cparse.${O}: ${MID}/cparse.clisp
	@ echo 513 making ${OUT}/cparse.${O} from ${MID}/cparse.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/cparse.clisp" :output-file "${OUT}/cparse.${O}") (${BYE}))' | ${DEPSYS}  ; \
	  else \
	   echo '(progn (compile-file "${MID}/cparse.clisp" :output-file "${OUT}/cparse.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/cparse.clisp: ${IN}/cparse.boot.pamphlet
	@ echo 514 making ${MID}/cparse.clisp from ${IN}/cparse.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/cparse.boot.pamphlet >cparse.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/cparse.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/cparse.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm cparse.boot )


${OUT}/cstream.${O}: ${MID}/cstream.clisp 
	@ echo 528 making ${OUT}/cstream.${O} from ${MID}/cstream.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/cstream.clisp" :output-file "${OUT}/cstream.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/cstream.clisp" :output-file "${OUT}/cstream.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/cstream.clisp: ${IN}/cstream.boot.pamphlet
	@ echo 529 making ${MID}/cstream.clisp from ${IN}/cstream.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/cstream.boot.pamphlet >cstream.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/cstream.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/cstream.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm cstream.boot )


${AUTO}/c-util.${O}: ${OUT}/c-util.${O}
	@ echo 145 making ${AUTO}/c-util.${O} from ${OUT}/c-util.${O}
	@ cp ${OUT}/c-util.${O} ${AUTO}

${OUT}/c-util.${LISP}: ${IN}/c-util.boot.pamphlet
	@ echo 146 making ${OUT}/c-util.${LISP} from ${IN}/c-util.boot.pamphlet
	@ rm -f ${OUT}/c-util.${O}
	@( cd ${OUT} ; \
	  ${TANGLE} -Rc-util.clisp ${IN}/c-util.boot.pamphlet >c-util.${LISP} )

${OUT}/c-util.${O}: ${MID}/c-util.clisp 
	@ echo 147 making ${OUT}/c-util.${O} from ${MID}/c-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/c-util.clisp" :output-file "${OUT}/c-util.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/c-util.clisp" :output-file "${OUT}/c-util.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/c-util.clisp: ${IN}/c-util.boot.pamphlet
	@ echo 148 making ${MID}/c-util.clisp from ${IN}/c-util.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/c-util.boot.pamphlet >c-util.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "c-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "c-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm c-util.boot )


${OUT}/daase.${O}: ${MID}/daase.lisp
	@ echo 33 making ${OUT}/daase.${O} from ${MID}/daase.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/daase.lisp" :output-file "${OUT}/daase.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/daase.lisp" :output-file "${OUT}/daase.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/daase.lisp: ${IN}/daase.lisp.pamphlet
	@ echo 34 making ${MID}/daase.lisp from ${IN}/daase.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/daase.lisp.pamphlet >daase.lisp )


${OUT}/database.${O}: ${MID}/database.clisp 
	@ echo 242 making ${OUT}/database.${O} from ${MID}/database.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/database.clisp" :output-file "${OUT}/database.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/database.clisp" :output-file "${OUT}/database.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/database.clisp: ${IN}/database.boot.pamphlet
	@ echo 243 making ${MID}/database.clisp from ${IN}/database.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/database.boot.pamphlet >database.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "database.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "database.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm database.boot )


${OUT}/debug.${O}: ${MID}/debug.lisp
	@ echo 36 making ${OUT}/debug.${O} from ${MID}/debug.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/debug.lisp" :output-file "${OUT}/debug.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/debug.lisp" :output-file "${OUT}/debug.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/debug.lisp: ${IN}/debug.lisp.pamphlet
	@ echo 37 making ${MID}/debug.lisp from ${IN}/debug.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/debug.lisp.pamphlet >debug.lisp )


${MID}/debugsys.lisp: ${IN}/debugsys.lisp.pamphlet
	@ echo 39 making ${MID}/debugsys.lisp from ${IN}/debugsys.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/debugsys.lisp.pamphlet >debugsys.lisp )


${AUTO}/def.${O}: ${OUT}/def.${O}
	@ echo 41 making ${AUTO}/def.${O} from ${OUT}/def.${O}
	@ cp ${OUT}/def.${O} ${AUTO}

${OUT}/def.${O}: ${MID}/def.lisp 
	@ echo 42 making ${OUT}/def.${O} from ${MID}/def.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/def.lisp" :output-file "${OUT}/def.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/def.lisp" :output-file "${OUT}/def.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/def.${LISP}: ${MID}/def.lisp
	@ echo 43 making ${OUT}/def.${LISP} from ${MID}/def.lisp
	@ rm -f ${OUT}/def.${O}
	@ cp ${MID}/def.lisp ${OUT}/def.${LISP}

${MID}/def.lisp: ${IN}/def.lisp.pamphlet
	@ echo 44 making ${MID}/def.lisp from ${IN}/def.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/def.lisp.pamphlet >def.lisp )
	  

${AUTO}/define.${O}: ${OUT}/define.${O}
	@ echo 245 making ${AUTO}/define.${O} from ${OUT}/define.${O}
	@ cp ${OUT}/define.${O} ${AUTO}

${OUT}/define.${O}: ${MID}/define.clisp 
	@ echo 246 making ${OUT}/define.${O} from ${MID}/define.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/define.clisp" :output-file "${OUT}/define.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/define.clisp" :output-file "${OUT}/define.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/define.clisp: ${IN}/define.boot.pamphlet
	@ echo 247 making ${MID}/define.clisp from ${IN}/define.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/define.boot.pamphlet >define.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "define.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "define.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm define.boot )


${OUT}/dq.${O}: ${MID}/dq.clisp 
	@ echo 525 making ${OUT}/dq.${O} from ${MID}/dq.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/dq.clisp" :output-file "${OUT}/dq.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/dq.clisp" :output-file "${OUT}/dq.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/dq.clisp: ${IN}/dq.boot.pamphlet
	@ echo 526 making ${MID}/dq.clisp from ${IN}/dq.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/dq.boot.pamphlet >dq.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/dq.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/dq.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm dq.boot )


${OUT}/fname.${O}: ${MID}/fname.lisp
	@ echo 46 making ${OUT}/fname.${O} from ${MID}/fname.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/fname.lisp" :output-file "${OUT}/fname.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/fname.lisp" :output-file "${OUT}/fname.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/fname.lisp: ${IN}/fname.lisp.pamphlet
	@ echo 47 making ${MID}/fname.lisp from ${IN}/fname.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/fname.lisp.pamphlet >fname.lisp )


${AUTO}/fnewmeta.${O}: ${OUT}/fnewmeta.${O}
	@ echo 49 making ${AUTO}/fnewmeta.${O} from ${OUT}/fnewmeta.${O}
	@ cp ${OUT}/fnewmeta.${O} ${AUTO}

${OUT}/fnewmeta.${O}: ${MID}/fnewmeta.lisp 
	@ echo 50 making ${OUT}/fnewmeta.${O} from ${MID}/fnewmeta.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/fnewmeta.lisp" :output-file "${OUT}/fnewmeta.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/fnewmeta.lisp" :output-file "${OUT}/fnewmeta.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/fnewmeta.${LISP}: ${IN}/fnewmeta.lisp.pamphlet
	@ echo 51 making ${OUT}/fnewmeta.${LISP} from ${MID}/fnewmeta.lisp.pamphlet
	@ rm -f ${OUT}/fnewmeta.${O}
	@ ( cd ${OUT} ; \
	  ${TANGLE} ${IN}/fnewmeta.lisp.pamphlet >fnewmeta.${LISP} )

${MID}/fnewmeta.lisp: ${IN}/fnewmeta.lisp.pamphlet
	@ echo 52 making ${MID}/fnewmeta.lisp from ${IN}/fnewmeta.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/fnewmeta.lisp.pamphlet >fnewmeta.lisp )
	  

${OUT}/format.${O}: ${MID}/format.clisp 
	@ echo 249 making ${OUT}/format.${O} from ${MID}/format.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/format.clisp" :output-file "${OUT}/format.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/format.clisp" :output-file "${OUT}/format.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/format.clisp: ${IN}/format.boot.pamphlet
	@ echo 250 making ${MID}/format.clisp from ${IN}/format.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/format.boot.pamphlet >format.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "format.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "format.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm format.boot )


${OUT}/fortcall.${O}: ${MID}/fortcall.clisp 
	@ echo 54 making ${OUT}/fortcall.${O} from ${MID}/fortcall.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/fortcall.clisp" :output-file "${OUT}/fortcall.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/fortcall.clisp" :output-file "${OUT}/fortcall.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/fortcall.clisp: ${IN}/fortcall.boot.pamphlet
	@ echo 55 making ${MID}/fortcall.lisp from ${IN}/fortcall.boot.pamphlet
	@( cd ${MID} ; \
	   ${TANGLE} ${IN}/fortcall.boot.pamphlet >fortcall.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "fortcall.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "fortcall.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm fortcall.boot )


${OUT}/foam_l.${O}: ${MID}/foam_l.lisp
	@ echo 610 making ${OUT}/foam_l.${O} from ${MID}/foam_l.lisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "foam_l.lisp" :output-file "${OUT}/foam_l.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "foam_l.lisp" :output-file "${OUT}/foam_l.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/foam_l.lisp: ${IN}/foam_l.lisp.pamphlet
	@ echo 611 making ${MID}/foam_l.lisp from ${IN}/foam_l.lisp.pamphlet
	@(cd ${MID} ; \
	${TANGLE} ${IN}/foam_l.lisp.pamphlet >foam_l.lisp )


${AUTO}/functor.${O}: ${OUT}/functor.${O}
	@ echo 252 making ${AUTO}/functor.${O} from ${OUT}/functor.${O}
	@ cp ${OUT}/functor.${O} ${AUTO}

${OUT}/functor.${O}: ${MID}/functor.clisp 
	@ echo 253 making ${OUT}/functor.${O} from ${MID}/functor.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/functor.clisp" :output-file "${OUT}/functor.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/functor.clisp" :output-file "${OUT}/functor.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/functor.clisp: ${IN}/functor.boot.pamphlet
	@ echo 254 making ${MID}/functor.clisp from ${IN}/functor.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/functor.boot.pamphlet >functor.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "functor.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "functor.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm functor.boot )


${OUT}/g-boot.${LISP}: ${IN}/g-boot.boot.pamphlet
	@ echo 256 making ${OUT}/g-boot.${LISP} from ${IN}/g-boot.boot.pamphlet
	@ rm -f ${OUT}/g-boot.${O}
	@( cd ${OUT} ; \
	${TANGLE} -Rg-boot.clisp ${IN}/g-boot.boot.pamphlet >g-boot.${LISP} )

${OUT}/g-boot.${O}: ${MID}/g-boot.clisp 
	@ echo 257 making ${OUT}/g-boot.${O} from ${MID}/g-boot.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-boot.clisp" :output-file "${OUT}/g-boot.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-boot.clisp" :output-file "${OUT}/g-boot.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-boot.clisp: ${IN}/g-boot.boot.pamphlet
	@ echo 258 making ${MID}/g-boot.clisp from ${IN}/g-boot.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/g-boot.boot.pamphlet >g-boot.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-boot.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-boot.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-boot.boot )


${OUT}/g-cndata.${O}: ${MID}/g-cndata.clisp 
	@ echo 260 making ${OUT}/g-cndata.${O} from ${MID}/g-cndata.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-cndata.clisp" :output-file "${OUT}/g-cndata.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-cndata.clisp" :output-file "${OUT}/g-cndata.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-cndata.clisp: ${IN}/g-cndata.boot.pamphlet
	@ echo 261 making ${MID}/g-cndata.clisp from ${IN}/g-cndata.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/g-cndata.boot.pamphlet >g-cndata.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-cndata.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-cndata.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-cndata.boot )


${OUT}/g-error.${O}: ${MID}/g-error.clisp 
	@ echo 263 making ${OUT}/g-error.${O} from ${MID}/g-error.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-error.clisp" :output-file "${OUT}/g-error.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-error.clisp" :output-file "${OUT}/g-error.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-error.clisp: ${IN}/g-error.boot.pamphlet
	@ echo 264 making ${MID}/g-error.clisp from ${IN}/g-error.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/g-error.boot.pamphlet >g-error.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-error.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-error.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-error.boot )


${OUT}/ggreater.${O}: ${MID}/ggreater.lisp
	@ echo 57 making ${OUT}/ggreater.${O} from ${MID}/ggreater.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ggreater.lisp" :output-file "${OUT}/ggreater.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ggreater.lisp" :output-file "${OUT}/ggreater.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ggreater.lisp: ${IN}/ggreater.lisp.pamphlet
	@ echo 58 making ${MID}/ggreater.lisp from ${IN}/ggreater.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/ggreater.lisp.pamphlet >ggreater.lisp )


${OUT}/g-opt.${O}: ${MID}/g-opt.clisp 
	@ echo 266 making ${OUT}/g-opt.${O} from ${MID}/g-opt.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-opt.clisp" :output-file "${OUT}/g-opt.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-opt.clisp" :output-file "${OUT}/g-opt.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-opt.clisp: ${IN}/g-opt.boot.pamphlet
	@ echo 267 making ${MID}/g-opt.clisp from ${IN}/g-opt.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/g-opt.boot.pamphlet >g-opt.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-opt.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-opt.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-opt.boot )


${OUT}/g-timer.${O}: ${MID}/g-timer.clisp 
	@ echo 269 making ${OUT}/g-timer.${O} from ${MID}/g-timer.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-timer.clisp" :output-file "${OUT}/g-timer.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-timer.clisp" :output-file "${OUT}/g-timer.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-timer.clisp: ${IN}/g-timer.boot.pamphlet
	@ echo 270 making ${MID}/g-timer.clisp from ${IN}/g-timer.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/g-timer.boot.pamphlet >g-timer.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-timer.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-timer.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-timer.boot )


${OUT}/g-util.${LISP}: ${IN}/g-util.boot.pamphlet
	@ echo 272 making ${OUT}/g-util.${LISP} from ${IN}/g-util.boot.pamphlet
	@ rm -f ${OUT}/g-util.${O}
	@( cd ${OUT} ; \
	${TANGLE} -Rg-util.clisp ${IN}/g-util.boot.pamphlet >g-util.${LISP} )

${OUT}/g-util.${O}: ${MID}/g-util.clisp 
	@ echo 273 making ${OUT}/g-util.${O} from ${MID}/g-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/g-util.clisp" :output-file "${OUT}/g-util.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/g-util.clisp" :output-file "${OUT}/g-util.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/g-util.clisp: ${IN}/g-util.boot.pamphlet
	@ echo 274 making ${MID}/g-util.clisp from ${IN}/g-util.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/g-util.boot.pamphlet >g-util.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm g-util.boot )


${OUT}/hash.${O}: ${MID}/hash.lisp
	@ echo 60 making ${OUT}/hash.${O} from ${MID}/hash.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/hash.lisp" :output-file "${OUT}/hash.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/hash.lisp" :output-file "${OUT}/hash.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/hash.lisp: ${IN}/hash.lisp.pamphlet
	@ echo 61 making ${MID}/hash.lisp from ${IN}/hash.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/hash.lisp.pamphlet >hash.lisp )



${OUT}/hashcode.${O}: ${MID}/hashcode.clisp 
	@ echo 583 making ${OUT}/hashcode.${O} from ${MID}/hashcode.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/hashcode.clisp" :output-file "${OUT}/hashcode.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/hashcode.clisp" :output-file "${OUT}/hashcode.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/hashcode.clisp: ${IN}/hashcode.boot.pamphlet
	@ echo 584 making ${MID}/hashcode.clisp from ${IN}/hashcode.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/hashcode.boot.pamphlet >hashcode.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "hashcode.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "hashcode.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm hashcode.boot )


${AUTO}/htcheck.${O}: ${OUT}/htcheck.${O}
	@ echo 453 making ${AUTO}/htcheck.${O} from ${OUT}/htcheck.${O}
	@ cp ${OUT}/htcheck.${O} ${AUTO}

${OUT}/htcheck.${O}: ${MID}/htcheck.clisp 
	@ echo 454 making ${OUT}/htcheck.${O} from ${MID}/htcheck.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/htcheck.clisp" :output-file "${OUT}/htcheck.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/htcheck.clisp" :output-file "${OUT}/htcheck.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/htcheck.clisp: ${IN}/htcheck.boot.pamphlet
	@ echo 455 making ${MID}/htcheck.clisp from ${IN}/htcheck.boot.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/htcheck.boot.pamphlet >htcheck.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "htcheck.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "htcheck.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm htcheck.boot )


${AUTO}/ht-root.${O}: ${OUT}/ht-root.${O}
	@ echo 449 making ${AUTO}/ht-root.${O} from ${OUT}/ht-root.${O}
	@ cp ${OUT}/ht-root.${O} ${AUTO}

${OUT}/ht-root.${O}: ${MID}/ht-root.clisp 
	@ echo 450 making ${OUT}/ht-root.${O} from ${MID}/ht-root.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ht-root.clisp" :output-file "${OUT}/ht-root.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ht-root.clisp" :output-file "${OUT}/ht-root.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ht-root.clisp: ${IN}/ht-root.boot.pamphlet
	@ echo 451 making ${MID}/ht-root.clisp from ${IN}/ht-root.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/ht-root.boot.pamphlet >ht-root.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ht-root.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ht-root.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ht-root.boot )


${AUTO}/htsetvar.${O}: ${OUT}/htsetvar.${O}
	@ echo 442 making ${AUTO}/htsetvar.${O} from ${OUT}/htsetvar.${O}
	@ cp ${OUT}/htsetvar.${O} ${AUTO}

${OUT}/htsetvar.${O}: ${MID}/htsetvar.clisp 
	@ echo 443 making ${OUT}/htsetvar.${O} from ${MID}/htsetvar.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/htsetvar.clisp" :output-file "${OUT}/htsetvar.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/htsetvar.clisp" :output-file "${OUT}/htsetvar.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/htsetvar.clisp: ${IN}/htsetvar.boot.pamphlet
	@ echo 444 making ${MID}/htsetvar.clisp from ${IN}/htsetvar.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/htsetvar.boot.pamphlet >htsetvar.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "htsetvar.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "htsetvar.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm htsetvar.boot )


${AUTO}/ht-util.${O}: ${OUT}/ht-util.${O}
	@ echo 438 making ${AUTO}/ht-util.${O} from ${OUT}/ht-util.${O}
	@ cp ${OUT}/ht-util.${O} ${AUTO}

${OUT}/ht-util.${O}: ${MID}/ht-util.clisp 
	@ echo 439 making ${OUT}/ht-util.${O} from ${MID}/ht-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/ht-util.clisp" :output-file "${OUT}/ht-util.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/ht-util.clisp" :output-file "${OUT}/ht-util.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/ht-util.clisp: ${IN}/ht-util.boot.pamphlet
	@ echo 440 making ${MID}/ht-util.clisp from ${IN}/ht-util.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/ht-util.boot.pamphlet >ht-util.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ht-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ht-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ht-util.boot )


${OUT}/hypertex.${O}: ${MID}/hypertex.clisp 
	@ echo 276 making ${OUT}/hypertex.${O} from ${MID}/hypertex.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/hypertex.clisp" :output-file "${OUT}/hypertex.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/hypertex.clisp" :output-file "${OUT}/hypertex.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/hypertex.clisp: ${IN}/hypertex.boot.pamphlet
	@ echo 277 making ${MID}/hypertex.clisp from ${IN}/hypertex.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/hypertex.boot.pamphlet >hypertex.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "hypertex.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "hypertex.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm hypertex.boot )


${OUT}/i-analy.${O}: ${MID}/i-analy.clisp 
	@ echo 279 making ${OUT}/i-analy.${O} from ${MID}/i-analy.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-analy.clisp" :output-file "${OUT}/i-analy.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-analy.clisp" :output-file "${OUT}/i-analy.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-analy.clisp: ${IN}/i-analy.boot.pamphlet
	@ echo 280 making ${MID}/i-analy.clisp from ${IN}/i-analy.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-analy.boot.pamphlet >i-analy.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-analy.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-analy.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-analy.boot )


${OUT}/i-code.${O}: ${MID}/i-code.clisp 
	@ echo 282 making ${OUT}/i-code.${O} from ${MID}/i-code.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-code.clisp" :output-file "${OUT}/i-code.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-code.clisp" :output-file "${OUT}/i-code.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-code.clisp: ${IN}/i-code.boot.pamphlet
	@ echo 283 making ${MID}/i-code.clisp from ${IN}/i-code.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-code.boot.pamphlet >i-code.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-code.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-code.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-code.boot )


${OUT}/i-coerce.${O}: ${MID}/i-coerce.clisp 
	@ echo 285 making ${OUT}/i-coerce.${O} from ${MID}/i-coerce.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-coerce.clisp" :output-file "${OUT}/i-coerce.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-coerce.clisp" :output-file "${OUT}/i-coerce.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-coerce.clisp: ${IN}/i-coerce.boot.pamphlet
	@ echo 286 making ${MID}/i-coerce.clisp from ${IN}/i-coerce.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-coerce.boot.pamphlet >i-coerce.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-coerce.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-coerce.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-coerce.boot )


${OUT}/i-coerfn.${O}: ${MID}/i-coerfn.clisp 
	@ echo 288 making ${OUT}/i-coerfn.${O} from ${MID}/i-coerfn.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-coerfn.clisp" :output-file "${OUT}/i-coerfn.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-coerfn.clisp" :output-file "${OUT}/i-coerfn.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-coerfn.clisp: ${IN}/i-coerfn.boot.pamphlet
	@ echo 289 making ${MID}/i-coerfn.clisp from ${IN}/i-coerfn.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-coerfn.boot.pamphlet >i-coerfn.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-coerfn.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-coerfn.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-coerfn.boot )


${OUT}/i-eval.${O}: ${MID}/i-eval.clisp 
	@ echo 291 making ${OUT}/i-eval.${O} from ${MID}/i-eval.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-eval.clisp" :output-file "${OUT}/i-eval.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-eval.clisp" :output-file "${OUT}/i-eval.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-eval.clisp: ${IN}/i-eval.boot.pamphlet
	@ echo 292 making ${MID}/i-eval.clisp from ${IN}/i-eval.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-eval.boot.pamphlet >i-eval.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-eval.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-eval.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-eval.boot )


${OUT}/i-funsel.${O}: ${MID}/i-funsel.clisp 
	@ echo 294 making ${OUT}/i-funsel.${O} from ${MID}/i-funsel.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-funsel.clisp" :output-file "${OUT}/i-funsel.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-funsel.clisp" :output-file "${OUT}/i-funsel.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-funsel.clisp: ${IN}/i-funsel.boot.pamphlet
	@ echo 295 making ${MID}/i-funsel.clisp from ${IN}/i-funsel.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-funsel.boot.pamphlet >i-funsel.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-funsel.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-funsel.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-funsel.boot )


${OUT}/bookvol5.${O}: ${MID}/bookvol5.${LISP}
	@ echo 297 making ${OUT}/bookvol5.${O} from ${MID}/bookvol5.${LISP}
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/bookvol5.${LISP}" :output-file "${OUT}/bookvol5.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/bookvol5.${LISP}" :output-file "${OUT}/bookvol5.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/bookvol5.${LISP}: ${MID}/bookvol5.${LISP}
	@ echo 133 making ${OUT}/bookvol5.${LISP} from ${MID}/bookvol5.${LISP}
	@cp ${MID}/bookvol5.${LISP} ${OUT}/bookvol5.${LISP}

${MID}/bookvol5.${LISP}: ${IN}/bookvol5.pamphlet
	@ echo 298 making ${MID}/bookvol5.${LISP} from ${IN}/bookvol5.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} -RInterpreter ${IN}/bookvol5.pamphlet >bookvol5.${LISP} )


${OUT}/i-intern.${O}: ${MID}/i-intern.clisp 
	@ echo 300 making ${OUT}/i-intern.${O} from ${MID}/i-intern.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-intern.clisp" :output-file "${OUT}/i-intern.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-intern.clisp" :output-file "${OUT}/i-intern.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	 fi )

${MID}/i-intern.clisp: ${IN}/i-intern.boot.pamphlet
	@ echo 301 making ${MID}/i-intern.clisp from ${IN}/i-intern.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-intern.boot.pamphlet >i-intern.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-intern.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-intern.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-intern.boot )


${OUT}/interop.${O}: ${MID}/interop.clisp
	@ echo 586 making ${OUT}/interop.${O} from ${MID}/interop.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/interop.clisp" :output-file "${OUT}/interop.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/interop.clisp" :output-file "${OUT}/interop.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/interop.clisp: ${IN}/interop.boot.pamphlet
	@ echo 587 making ${MID}/interop.clisp from ${IN}/interop.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/interop.boot.pamphlet >interop.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "interop.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "interop.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm interop.boot )


${OUT}/i-map.${O}: ${MID}/i-map.clisp 
	@ echo 303 making ${OUT}/i-map.${O} from ${MID}/i-map.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-map.clisp" :output-file "${OUT}/i-map.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-map.clisp" :output-file "${OUT}/i-map.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-map.clisp: ${IN}/i-map.boot.pamphlet
	@ echo 304 making ${MID}/i-map.clisp from ${IN}/i-map.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-map.boot.pamphlet >i-map.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-map.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-map.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-map.boot )


${OUT}/incl.${O}: ${MID}/incl.clisp 
	@ echo 504 making ${OUT}/incl.${O} from ${MID}/incl.clisp
	@  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (compile-file "${MID}/incl.clisp" :output-file "${OUT}/incl.${O}") (${BYE}))' | ${DEPSYS} ; \
	   else \
	    echo '(progn (compile-file "${MID}/incl.clisp" :output-file "${OUT}/incl.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	   fi

${MID}/incl.clisp: ${IN}/incl.boot.pamphlet
	@ echo 505 making ${MID}/incl.clisp from ${IN}/incl.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/incl.boot.pamphlet >incl.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/incl.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/incl.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm incl.boot )


${AUTO}/info.${O}: ${OUT}/info.${O}
	@ echo 327 making ${AUTO}/info.${O} from ${OUT}/info.${O}
	@ cp ${OUT}/info.${O} ${AUTO}

${OUT}/info.${O}: ${MID}/info.clisp 
	@ echo 328 making ${OUT}/info.${O} from ${MID}/info.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/info.clisp" :output-file "${OUT}/info.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/info.clisp" :output-file "${OUT}/info.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/info.clisp: ${IN}/info.boot.pamphlet
	@ echo 329 making ${MID}/info.clisp from ${IN}/info.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/info.boot.pamphlet >info.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "info.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "info.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm info.boot )


${OUT}/intfile.${O}: ${MID}/intfile.clisp 
	@ echo 552 making ${OUT}/intfile.${O} from ${MID}/intfile.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/intfile.clisp" :output-file "${OUT}/intfile.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/intfile.clisp" :output-file "${OUT}/intfile.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/intfile.clisp: ${IN}/intfile.boot.pamphlet
	@ echo 553 making ${MID}/intfile.clisp from ${IN}/intfile.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/intfile.boot.pamphlet >intfile.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/intfile.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/intfile.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm intfile.boot )


${OUT}/intint.${O}: ${MID}/intint.lisp
	@ echo 555 making ${OUT}/intint.${O} from ${MID}/intint.lisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/intint.lisp" :output-file "${OUT}/intint.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/intint.lisp" :output-file "${OUT}/intint.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/intint.lisp: ${IN}/intint.lisp.pamphlet
	@ echo 556 making ${MID}/intint.lisp from ${IN}/intint.lisp.pamphlet
	@(cd ${MID} ; \
	${TANGLE} ${IN}/intint.lisp.pamphlet >intint.lisp )


${OUT}/int-top.${O}: ${MID}/int-top.clisp 
	@ echo 564 making ${OUT}/int-top.${O} from ${MID}/int-top.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/int-top.clisp" :output-file "${OUT}/int-top.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/int-top.clisp" :output-file "${OUT}/int-top.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/int-top.clisp: ${IN}/int-top.boot.pamphlet
	@ echo 565 making ${MID}/int-top.clisp from ${IN}/int-top.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/int-top.boot.pamphlet >int-top.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/int-top.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/int-top.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm int-top.boot )


${OUT}/i-output.${O}: ${MID}/i-output.clisp 
	@ echo 306 making ${OUT}/i-output.${O} from ${MID}/i-output.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-output.clisp" :output-file "${OUT}/i-output.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-output.clisp" :output-file "${OUT}/i-output.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-output.clisp: ${IN}/i-output.boot.pamphlet
	@ echo 307 making ${MID}/i-output.clisp from ${IN}/i-output.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-output.boot.pamphlet >i-output.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-output.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-output.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-output.boot )


${OUT}/i-resolv.${O}: ${MID}/i-resolv.clisp 
	@ echo 309 making ${OUT}/i-resolv.${O} from ${MID}/i-resolv.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-resolv.clisp" :output-file "${OUT}/i-resolv.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-resolv.clisp" :output-file "${OUT}/i-resolv.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-resolv.clisp: ${IN}/i-resolv.boot.pamphlet
	@ echo 310 making ${MID}/i-resolv.clisp from ${IN}/i-resolv.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-resolv.boot.pamphlet >i-resolv.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-resolv.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-resolv.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-resolv.boot )


${OUT}/i-spec1.${O}: ${MID}/i-spec1.clisp 
	@ echo 312 making ${OUT}/i-spec1.${O} from ${MID}/i-spec1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-spec1.clisp" :output-file "${OUT}/i-spec1.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-spec1.clisp" :output-file "${OUT}/i-spec1.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-spec1.clisp: ${IN}/i-spec1.boot.pamphlet
	@ echo 313 making ${MID}/i-spec1.clisp from ${IN}/i-spec1.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-spec1.boot.pamphlet >i-spec1.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-spec1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-spec1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-spec1.boot )


${OUT}/i-spec2.${O}: ${MID}/i-spec2.clisp 
	@ echo 315 making ${OUT}/i-spec2.${O} from ${MID}/i-spec2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-spec2.clisp" :output-file "${OUT}/i-spec2.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-spec2.clisp" :output-file "${OUT}/i-spec2.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-spec2.clisp: ${IN}/i-spec2.boot.pamphlet
	@ echo 316 making ${MID}/i-spec2.clisp from ${IN}/i-spec2.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-spec2.boot.pamphlet >i-spec2.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-spec2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-spec2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-spec2.boot )


${OUT}/i-syscmd.${O}: ${MID}/i-syscmd.clisp 
	@ echo 318 making ${OUT}/i-syscmd.${O} from ${MID}/i-syscmd.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-syscmd.clisp" :output-file "${OUT}/i-syscmd.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-syscmd.clisp" :output-file "${OUT}/i-syscmd.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/i-syscmd.clisp: ${IN}/i-syscmd.boot.pamphlet
	@ echo 319 making ${MID}/i-syscmd.clisp from ${IN}/i-syscmd.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-syscmd.boot.pamphlet >i-syscmd.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-syscmd.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-syscmd.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-syscmd.boot )


${AUTO}/iterator.${O}: ${OUT}/iterator.${O}
	@ echo 331 making ${AUTO}/iterator.${O} from ${OUT}/iterator.${O}
	@ cp ${OUT}/iterator.${O} ${AUTO}

${OUT}/iterator.${O}: ${MID}/iterator.clisp 
	@ echo 332 making ${OUT}/iterator.${O} from ${MID}/iterator.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/iterator.clisp" :output-file "${OUT}/iterator.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/iterator.clisp" :output-file "${OUT}/iterator.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/iterator.clisp: ${IN}/iterator.boot.pamphlet
	@ echo 333 making ${MID}/iterator.clisp from ${IN}/iterator.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/iterator.boot.pamphlet >iterator.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "iterator.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "iterator.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm iterator.boot )


${OUT}/i-toplev.${O}: ${MID}/i-toplev.clisp 
	@ echo 321 making ${OUT}/i-toplev.${O} from ${MID}/i-toplev.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-toplev.clisp" :output-file "${OUT}/i-toplev.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-toplev.clisp" :output-file "${OUT}/i-toplev.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
          fi )

${MID}/i-toplev.clisp: ${IN}/i-toplev.boot.pamphlet
	@ echo 322 making ${MID}/i-toplev.clisp from ${IN}/i-toplev.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-toplev.boot.pamphlet >i-toplev.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-toplev.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-toplev.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-toplev.boot )


${OUT}/i-util.${O}: ${MID}/i-util.clisp 
	@ echo 324 making ${OUT}/i-util.${O} from ${MID}/i-util.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/i-util.clisp" :output-file "${OUT}/i-util.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/i-util.clisp" :output-file "${OUT}/i-util.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
          fi )

${MID}/i-util.clisp: ${IN}/i-util.boot.pamphlet
	@ echo 325 making ${MID}/i-util.clisp from ${IN}/i-util.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/i-util.boot.pamphlet >i-util.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-util.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-util.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm i-util.boot )


${OUT}/lisplib.${O}: ${MID}/lisplib.clisp 
	@ echo 335 making ${OUT}/lisplib.${O} from ${MID}/lisplib.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/lisplib.clisp" :output-file "${OUT}/lisplib.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/lisplib.clisp" :output-file "${OUT}/lisplib.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/lisplib.clisp: ${IN}/lisplib.boot.pamphlet
	@ echo 336 making ${MID}/lisplib.clisp from ${IN}/lisplib.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/lisplib.boot.pamphlet >lisplib.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "lisplib.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "lisplib.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm lisplib.boot )


${OUT}/macex.${O}: ${MID}/macex.clisp
	@ echo 516 making ${OUT}/macex.${O} from ${MID}/macex.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/macex.clisp" :output-file "${OUT}/macex.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/macex.clisp" :output-file "${OUT}/macex.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/macex.clisp: ${IN}/macex.boot.pamphlet
	@ echo 517 making ${MID}/macex.clisp from ${IN}/macex.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/macex.boot.pamphlet >macex.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/macex.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/macex.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm macex.boot )


${OUT}/macros.${O}: ${MID}/macros.lisp
	@ echo 63 making ${OUT}/macros.${O} from ${MID}/macros.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/macros.lisp" :output-file "${OUT}/macros.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/macros.lisp" :output-file "${OUT}/macros.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/macros.lisp: ${IN}/macros.lisp.pamphlet
	@ echo 64 making ${MID}/macros.lisp from ${IN}/macros.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/macros.lisp.pamphlet >macros.lisp )


${AUTO}/mark.${O}: ${MID}/mark.clisp 
	@ echo 604 making ${AUTO}/mark.${O} from ${MID}/mark.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/mark.clisp" :output-file "${AUTO}/mark.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/mark.clisp" :output-file "${AUTO}/mark.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/mark.clisp: ${IN}/mark.boot.pamphlet
	@ echo 605 making ${MID}/mark.clisp from ${IN}/mark.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/mark.boot.pamphlet >mark.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "mark.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "mark.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm mark.boot )


${OUT}/match.${O}: ${MID}/match.clisp 
	@ echo 338 making ${OUT}/match.${O} from ${MID}/match.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/match.clisp" :output-file "${OUT}/match.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/match.clisp" :output-file "${OUT}/match.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/match.clisp: ${IN}/match.boot.pamphlet
	@ echo 339 making ${MID}/match.clisp from ${IN}/match.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/match.boot.pamphlet >match.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "match.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "match.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm match.boot )


${AUTO}/metalex.${O}: ${OUT}/metalex.${O}
	@ echo 66 making ${AUTO}/metalex.${O} from ${OUT}/metalex.${O}
	@ cp ${OUT}/metalex.${O} ${AUTO}

${OUT}/metalex.${O}: ${MID}/metalex.lisp 
	@ echo 67 making ${OUT}/metalex.${O} from ${MID}/metalex.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/metalex.lisp" :output-file "${OUT}/metalex.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/metalex.lisp" :output-file "${OUT}/metalex.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/metalex.${LISP}: ${MID}/metalex.lisp
	@ echo 68 making ${OUT}/metalex.${LISP} from ${MID}/metalex.lisp
	@cp ${MID}/metalex.lisp ${OUT}/metalex.${LISP}

${MID}/metalex.lisp: ${IN}/metalex.lisp.pamphlet
	@ echo 69 making ${MID}/metalex.lisp from ${IN}/metalex.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/metalex.lisp.pamphlet >metalex.lisp )
	  

${AUTO}/metameta.${O}: ${OUT}/metameta.${O}
	@ echo 71 making ${AUTO}/metameta.${O} from ${OUT}/metameta.${O}
	@ cp ${OUT}/metameta.${O} ${AUTO}

${OUT}/metameta.${O}: ${MID}/metameta.lisp 
	@ echo 72 making ${OUT}/metameta.${O} from ${MID}/metameta.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/metameta.lisp" :output-file "${OUT}/metameta.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/metameta.lisp" :output-file "${OUT}/metameta.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/metameta.${LISP}: ${MID}/metameta.lisp
	@ echo 73 making ${OUT}/metameta.${LISP} from ${MID}/metameta.lisp
	@ rm -f ${OUT}/metameta.${O}
	@ cp ${MID}/metameta.lisp ${OUT}/metameta.${LISP}

${MID}/metameta.lisp: ${IN}/metameta.lisp.pamphlet
	@ echo 74 making ${MID}/metameta.lisp from ${IN}/metameta.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/metameta.lisp.pamphlet >metameta.lisp )
	  

${AUTO}/modemap.${O}: ${OUT}/modemap.${O}
	@ echo 341 making ${AUTO}/modemap.${O} from ${OUT}/modemap.${O}
	@ cp ${OUT}/modemap.${O} ${AUTO}

${OUT}/modemap.${O}: ${MID}/modemap.clisp 
	@ echo 342 making ${OUT}/modemap.${O} from ${MID}/modemap.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/modemap.clisp" :output-file "${OUT}/modemap.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/modemap.clisp" :output-file "${OUT}/modemap.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/modemap.clisp: ${IN}/modemap.boot.pamphlet
	@ echo 343 making ${MID}/modemap.clisp from ${IN}/modemap.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/modemap.boot.pamphlet >modemap.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "modemap.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "modemap.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm modemap.boot )


${OUT}/monitor.${O}: ${MID}/monitor.lisp
	@ echo 76 making ${OUT}/monitor.${O} from ${MID}/monitor.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/monitor.lisp" :output-file "${OUT}/monitor.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/monitor.lisp" :output-file "${OUT}/monitor.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/monitor.lisp: ${IN}/monitor.lisp.pamphlet
	@ echo 77 making ${MID}/monitor.lisp from ${IN}/monitor.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/monitor.lisp.pamphlet >monitor.lisp )


${OUT}/msg.${O}: ${MID}/msg.clisp 
	@ echo 534 making ${OUT}/msg.${O} from ${MID}/msg.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/msg.clisp" :output-file "${OUT}/msg.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/msg.clisp" :output-file "${OUT}/msg.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/msg.clisp: ${IN}/msg.boot.pamphlet
	@ echo 535 making ${MID}/msg.clisp from ${IN}/msg.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/msg.boot.pamphlet >msg.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/msg.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/msg.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm msg.boot )


${OUT}/msgdb.${O}: ${MID}/msgdb.clisp 
	@ echo 345 making ${OUT}/msgdb.${O} from ${MID}/msgdb.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/msgdb.clisp" :output-file "${OUT}/msgdb.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/msgdb.clisp" :output-file "${OUT}/msgdb.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/msgdb.clisp: ${IN}/msgdb.boot.pamphlet
	@ echo 346 making ${MID}/msgdb.clisp from ${IN}/msgdb.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/msgdb.boot.pamphlet >msgdb.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "msgdb.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "msgdb.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm msgdb.boot )


${AUTO}/nag-c02.${O}: ${OUT}/nag-c02.${O}
	@ echo 150 making${AUTO}/nag-c02.${O} from ${OUT}/nag-c02.${O}
	@ cp ${OUT}/nag-c02.${O} ${AUTO}

${OUT}/nag-c02.${O}: ${MID}/nag-c02.clisp
	@ echo 151 making ${OUT}/nag-c02.${O} from ${MID}/nag-c02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-c02.clisp" :output-file "${OUT}/nag-c02.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-c02.clisp" :output-file "${OUT}/nag-c02.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-c02.clisp: ${IN}/nag-c02.boot.pamphlet
	@ echo 152 making ${MID}/nag-c02.clisp from ${IN}/nag-c02.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-c02.boot.pamphlet >nag-c02.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-c02.boot )


${AUTO}/nag-c05.${O}: ${OUT}/nag-c05.${O}
	@ echo 154 making ${AUTO}/nag-c05.${O} from ${OUT}/nag-c05.${O}
	@ cp ${OUT}/nag-c05.${O} ${AUTO}

${OUT}/nag-c05.${O}: ${MID}/nag-c05.clisp
	@ echo 155 making ${OUT}/nag-c05.${O} from ${MID}/nag-c05.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-c05.clisp" :output-file "${OUT}/nag-c05.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-c05.clisp" :output-file "${OUT}/nag-c05.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-c05.clisp: ${IN}/nag-c05.boot.pamphlet
	@ echo 156 making ${MID}/nag-c05.clisp from ${IN}/nag-c05.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-c05.boot.pamphlet >nag-c05.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c05.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c05.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-c05.boot )


${AUTO}/nag-c06.${O}: ${OUT}/nag-c06.${O}
	@ echo 158 making${AUTO}/nag-c06.${O} from ${OUT}/nag-c06.${O}
	@ cp ${OUT}/nag-c06.${O} ${AUTO}

${OUT}/nag-c06.${O}: ${MID}/nag-c06.clisp
	@ echo 159 making ${OUT}/nag-c06.${O} from ${MID}/nag-c06.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-c06.clisp" :output-file "${OUT}/nag-c06.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-c06.clisp" :output-file "${OUT}/nag-c06.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-c06.clisp: ${IN}/nag-c06.boot.pamphlet
	@ echo 160 making ${MID}/nag-c06.clisp from ${IN}/nag-c06.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-c06.boot.pamphlet >nag-c06.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c06.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-c06.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-c06.boot )


${AUTO}/nag-d01.${O}: ${OUT}/nag-d01.${O}
	@ echo 162 making${AUTO}/nag-d01.${O} from ${OUT}/nag-d01.${O}
	@ cp ${OUT}/nag-d01.${O} ${AUTO}

${OUT}/nag-d01.${O}: ${MID}/nag-d01.clisp
	@ echo 163 making ${OUT}/nag-d01.${O} from ${MID}/nag-d01.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-d01.clisp" :output-file "${OUT}/nag-d01.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-d01.clisp" :output-file "${OUT}/nag-d01.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-d01.clisp: ${IN}/nag-d01.boot.pamphlet
	@ echo 164 making ${MID}/nag-d01.clisp from ${IN}/nag-d01.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-d01.boot.pamphlet >nag-d01.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d01.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d01.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-d01.boot )


${AUTO}/nag-d02.${O}: ${OUT}/nag-d02.${O}
	@ echo 166 making${AUTO}/nag-d02.${O} from ${OUT}/nag-d02.${O}
	@ cp ${OUT}/nag-d02.${O} ${AUTO}

${OUT}/nag-d02.${O}: ${MID}/nag-d02.clisp
	@ echo 167 making ${OUT}/nag-d02.${O} from ${MID}/nag-d02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-d02.clisp" :output-file "${OUT}/nag-d02.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-d02.clisp" :output-file "${OUT}/nag-d02.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-d02.clisp: ${IN}/nag-d02.boot.pamphlet
	@ echo 168 making ${MID}/nag-d02.clisp from ${IN}/nag-d02.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-d02.boot.pamphlet >nag-d02.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-d02.boot )


${AUTO}/nag-d03.${O}: ${OUT}/nag-d03.${O}
	@ echo 170 making${AUTO}/nag-d03.${O} from ${OUT}/nag-d03.${O}
	@ cp ${OUT}/nag-d03.${O} ${AUTO}

${OUT}/nag-d03.${O}: ${MID}/nag-d03.clisp
	@ echo 171 making ${OUT}/nag-d03.${O} from ${MID}/nag-d03.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-d03.clisp" :output-file "${OUT}/nag-d03.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-d03.clisp" :output-file "${OUT}/nag-d03.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-d03.clisp: ${IN}/nag-d03.boot.pamphlet
	@ echo 172 making ${MID}/nag-d03.clisp from ${IN}/nag-d03.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-d03.boot.pamphlet >nag-d03.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d03.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-d03.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-d03.boot )


${AUTO}/nag-e01.${O}: ${OUT}/nag-e01.${O}
	@ echo 174 making ${AUTO}/nag-e01.${O} from ${OUT}/nag-e01.${O}
	@ cp ${OUT}/nag-e01.${O} ${AUTO}

${OUT}/nag-e01.${O}: ${MID}/nag-e01.clisp
	@ echo 175 making ${OUT}/nag-e01.${O} from ${MID}/nag-e01.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-e01.clisp" :output-file "${OUT}/nag-e01.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-e01.clisp" :output-file "${OUT}/nag-e01.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-e01.clisp: ${IN}/nag-e01.boot.pamphlet
	@ echo 176 making ${MID}/nag-e01.clisp from ${IN}/nag-e01.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-e01.boot.pamphlet >nag-e01.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e01.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e01.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-e01.boot )


${AUTO}/nag-e02.${O}: ${OUT}/nag-e02.${O}
	@ echo 182 making ${AUTO}/nag-e02.${O} from ${OUT}/nag-e02.${O}
	@ cp ${OUT}/nag-e02.${O} ${AUTO}

${OUT}/nag-e02.${O}: ${MID}/nag-e02.clisp
	@ echo 183 making ${OUT}/nag-e02.${O} from ${MID}/nag-e02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-e02.clisp" :output-file "${OUT}/nag-e02.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-e02.clisp" :output-file "${OUT}/nag-e02.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-e02.clisp: ${IN}/nag-e02.boot.pamphlet
	@ echo 184 making ${MID}/nag-e02.clisp from ${IN}/nag-e02.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-e02.boot.pamphlet >nag-e02.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-e02.boot )


${AUTO}/nag-e04.${O}: ${OUT}/nag-e04.${O}
	@ echo 186 making ${AUTO}/nag-e04.${O} from ${OUT}/nag-e04.${O}
	@ cp ${OUT}/nag-e04.${O} ${AUTO}

${OUT}/nag-e04.${O}: ${MID}/nag-e04.clisp
	@ echo 187 making ${OUT}/nag-e04.${O} from ${MID}/nag-e04.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-e04.clisp" :output-file "${OUT}/nag-e04.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-e04.clisp" :output-file "${OUT}/nag-e04.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-e04.clisp: ${IN}/nag-e04.boot.pamphlet
	@ echo 188 making ${MID}/nag-e04.clisp from ${IN}/nag-e04.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-e04.boot.pamphlet >nag-e04.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e04.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-e04.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-e04.boot )


${AUTO}/nag-f01.${O}: ${OUT}/nag-f01.${O}
	@ echo 190 making ${AUTO}/nag-f01.${O} from ${OUT}/nag-f01.${O}
	@ cp ${OUT}/nag-f01.${O} ${AUTO}

${OUT}/nag-f01.${O}: ${MID}/nag-f01.clisp
	@ echo 191 making ${OUT}/nag-f01.${O} from ${MID}/nag-f01.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-f01.clisp" :output-file "${OUT}/nag-f01.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-f01.clisp" :output-file "${OUT}/nag-f01.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f01.clisp: ${IN}/nag-f01.boot.pamphlet
	@ echo 192 making ${MID}/nag-f01.clisp from ${IN}/nag-f01.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-f01.boot.pamphlet >nag-f01.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f01.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f01.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f01.boot )


${AUTO}/nag-f02.${O}: ${OUT}/nag-f02.${O}
	@ echo 194 making ${AUTO}/nag-f02.${O} from ${OUT}/nag-f02.${O}
	@ cp ${OUT}/nag-f02.${O} ${AUTO}

${OUT}/nag-f02.${O}: ${MID}/nag-f02.clisp
	@ echo 195 making ${OUT}/nag-f02.${O} from ${MID}/nag-f02.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-f02.clisp" :output-file "${OUT}/nag-f02.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-f02.clisp" :output-file "${OUT}/nag-f02.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f02.clisp: ${IN}/nag-f02.boot.pamphlet
	@ echo 196 making ${MID}/nag-f02.clisp from ${IN}/nag-f02.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-f02.boot.pamphlet >nag-f02.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f02.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f02.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f02.boot )


${AUTO}/nag-f04.${O}: ${OUT}/nag-f04.${O}
	@ echo 198 making ${AUTO}/nag-f04.${O} from ${OUT}/nag-f04.${O}
	@ cp ${OUT}/nag-f04.${O} ${AUTO}

${OUT}/nag-f04.${O}: ${MID}/nag-f04.clisp
	@ echo 199 making ${OUT}/nag-f04.${O} from ${MID}/nag-f04.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-f04.clisp" :output-file "${OUT}/nag-f04.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-f04.clisp" :output-file "${OUT}/nag-f04.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f04.clisp: ${IN}/nag-f04.boot.pamphlet
	@ echo 200 making ${MID}/nag-f04.clisp from ${IN}/nag-f04.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-f04.boot.pamphlet >nag-f04.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f04.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f04.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f04.boot )


${AUTO}/nag-f07.${O}: ${OUT}/nag-f07.${O}
	@ echo 202 making ${AUTO}/nag-f07.${O} from ${OUT}/nag-f07.${O}
	@ cp ${OUT}/nag-f07.${O} ${AUTO}

${OUT}/nag-f07.${O}: ${MID}/nag-f07.clisp
	@ echo 203 making ${OUT}/nag-f07.${O} from ${MID}/nag-f07.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
           echo '(progn  (compile-file "${MID}/nag-f07.clisp" :output-file "${OUT}/nag-f07.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
           echo '(progn  (compile-file "${MID}/nag-f07.clisp" :output-file "${OUT}/nag-f07.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-f07.clisp: ${IN}/nag-f07.boot.pamphlet
	@ echo 204 making ${MID}/nag-f07.clisp from ${IN}/nag-f07.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-f07.boot.pamphlet >nag-f07.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f07.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-f07.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-f07.boot )


${AUTO}/nag-s.${O}: ${OUT}/nag-s.${O}
	@ echo 206 making ${AUTO}/nag-s.${O} from ${OUT}/nag-s.${O}
	@ cp ${OUT}/nag-s.${O} ${AUTO}

${OUT}/nag-s.${O}: ${MID}/nag-s.clisp
	@ echo 207 making ${OUT}/nag-s.${O} from ${MID}/nag-s.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nag-s.clisp" :output-file "${OUT}/nag-s.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nag-s.clisp" :output-file "${OUT}/nag-s.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nag-s.clisp: ${IN}/nag-s.boot.pamphlet
	@ echo 208 making ${MID}/nag-s.clisp from ${IN}/nag-s.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nag-s.boot.pamphlet >nag-s.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-s.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${SPAD}") (boottran::boottocl "nag-s.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nag-s.boot )


${OUT}/nci.${O}: ${MID}/nci.lisp
	@ echo 558 making ${OUT}/nci.${O} from ${MID}/nci.lisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/nci.lisp" :output-file "${OUT}/nci.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/nci.lisp" :output-file "${OUT}/nci.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/nci.lisp: ${IN}/nci.lisp.pamphlet
	@ echo 559 making ${MID}/nci.lisp from ${IN}/nci.lisp.pamphlet
	@(cd ${MID} ; \
	${TANGLE} ${IN}/nci.lisp.pamphlet >nci.lisp )


${OUT}/newaux.${O}: ${MID}/newaux.lisp
	@ echo 79 making ${OUT}/newaux.${O} from ${MID}/newaux.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/newaux.lisp" :output-file "${OUT}/newaux.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/newaux.lisp" :output-file "${OUT}/newaux.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/newaux.${LISP}: ${MID}/newaux.lisp
	@ echo 80 making ${OUT}/newaux.${LISP} from ${MID}/newaux.lisp
	@cp ${MID}/newaux.lisp ${OUT}/newaux.${LISP}

${MID}/newaux.lisp: ${IN}/newaux.lisp.pamphlet
	@ echo 81 making ${MID}/newaux.lisp from ${IN}/newaux.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/newaux.lisp.pamphlet >newaux.lisp )


${OUT}/newfort.${O}: ${MID}/newfort.clisp 
	@ echo 348 making ${OUT}/newfort.${O} from ${MID}/newfort.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/newfort.clisp" :output-file "${OUT}/newfort.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/newfort.clisp" :output-file "${OUT}/newfort.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/newfort.clisp: ${IN}/newfort.boot.pamphlet
	@ echo 349 making ${MID}/newfort.clisp from ${IN}/newfort.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/newfort.boot.pamphlet >newfort.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "newfort.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "newfort.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm newfort.boot )


${OUT}/nlib.${O}: ${MID}/nlib.lisp
	@ echo 83 making ${OUT}/nlib.${O} from ${MID}/nlib.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nlib.lisp" :output-file "${OUT}/nlib.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nlib.lisp" :output-file "${OUT}/nlib.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nlib.lisp: ${IN}/nlib.lisp.pamphlet
	@ echo 84 making ${MID}/nlib.lisp from ${IN}/nlib.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/nlib.lisp.pamphlet >nlib.lisp )


${OUT}/nocompil.${LISP}: ${MID}/nocompil.lisp 
	@ echo 86 making ${OUT}/nocompil.${LISP} from ${MID}/nocompil.lisp
	@ cp ${MID}/nocompil.lisp ${OUT}/nocompil.${LISP}

${MID}/nocompil.lisp: ${IN}/nocompil.lisp.pamphlet
	@ echo 87 making ${MID}/nocompil.lisp from ${IN}/nocompil.lisp.pamphlet
	@ ( cd ${MID} ; \
	${TANGLE} ${IN}/nocompil.lisp.pamphlet >nocompil.lisp )


${AUTO}/nruncomp.${O}: ${OUT}/nruncomp.${O}
	@ echo 351 making ${AUTO}/nruncomp.${O} from ${OUT}/nruncomp.${O}
	@ cp ${OUT}/nruncomp.${O} ${AUTO}

${OUT}/nruncomp.${O}: ${MID}/nruncomp.clisp 
	@ echo 352 making ${OUT}/nruncomp.${O} from ${MID}/nruncomp.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nruncomp.clisp" :output-file "${OUT}/nruncomp.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nruncomp.clisp" :output-file "${OUT}/nruncomp.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nruncomp.clisp: ${IN}/nruncomp.boot.pamphlet
	@ echo 353 making ${MID}/nruncomp.clisp from ${IN}/nruncomp.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nruncomp.boot.pamphlet >nruncomp.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nruncomp.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nruncomp.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nruncomp.boot )


${OUT}/nrunfast.${O}: ${MID}/nrunfast.clisp 
	@ echo 355 making ${OUT}/nrunfast.${O} from ${MID}/nrunfast.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nrunfast.clisp" :output-file "${OUT}/nrunfast.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nrunfast.clisp" :output-file "${OUT}/nrunfast.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nrunfast.clisp: ${IN}/nrunfast.boot.pamphlet
	@ echo 356 making ${MID}/nrunfast.clisp from ${IN}/nrunfast.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nrunfast.boot.pamphlet >nrunfast.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrunfast.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrunfast.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nrunfast.boot )


${OUT}/nrungo.${O}: ${MID}/nrungo.clisp 
	@ echo 358 making ${OUT}/nrungo.${O} from ${MID}/nrungo.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nrungo.clisp" :output-file "${OUT}/nrungo.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nrungo.clisp" :output-file "${OUT}/nrungo.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nrungo.clisp: ${IN}/nrungo.boot.pamphlet
	@ echo 359 making ${MID}/nrungo.clisp from ${IN}/nrungo.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nrungo.boot.pamphlet >nrungo.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrungo.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrungo.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nrungo.boot )


${OUT}/nruntime.${O}: ${MID}/nruntime.clisp 
	@ echo 361 making ${OUT}/nruntime.${O} from ${MID}/nruntime.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nruntime.clisp" :output-file "${OUT}/nruntime.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nruntime.clisp" :output-file "${OUT}/nruntime.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nruntime.clisp: ${IN}/nruntime.boot.pamphlet
	@ echo 362 making ${MID}/nruntime.clisp from ${IN}/nruntime.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nruntime.boot.pamphlet >nruntime.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nruntime.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nruntime.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nruntime.boot )


${OUT}/nrunopt.${O}: ${MID}/nrunopt.clisp 
	@ echo 364 making ${OUT}/nrunopt.${O} from ${MID}/nrunopt.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nrunopt.clisp" :output-file "${OUT}/nrunopt.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nrunopt.clisp" :output-file "${OUT}/nrunopt.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/nrunopt.clisp: ${IN}/nrunopt.boot.pamphlet
	@ echo 365 making ${MID}/nrunopt.clisp from ${IN}/nrunopt.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/nrunopt.boot.pamphlet >nrunopt.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrunopt.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrunopt.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm nrunopt.boot )


${AUTO}/nspadaux.${O}: ${OUT}/nspadaux.${O}
	@ echo 89 making ${AUTO}/nspadaux.${O} from ${OUT}/nspadaux.${O}
	@ cp ${OUT}/nspadaux.${O} ${AUTO}

${OUT}/nspadaux.${O}: ${MID}/nspadaux.lisp 
	@ echo 90 making ${OUT}/nspadaux.${O} from ${MID}/nspadaux.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/nspadaux.lisp" :output-file "${OUT}/nspadaux.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/nspadaux.lisp" :output-file "${OUT}/nspadaux.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/nspadaux.${LISP}: ${MID}/nspadaux.lisp
	@ echo 91 making ${OUT}/nspadaux.${LISP} from ${MID}/nspadaux.lisp
	@cp ${MID}/nspadaux.lisp ${OUT}/nspadaux.${LISP}

${MID}/nspadaux.lisp: ${IN}/nspadaux.lisp.pamphlet
	@ echo 92 making ${MID}/nspadaux.lisp from ${IN}/nspadaux.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/nspadaux.lisp.pamphlet >nspadaux.lisp )
	  

${OUT}/obey.${O}: ${MID}/obey.${LISP}
	@ echo 367 making ${OUT}/obey.${O} from ${MID}/obey.${LISP}
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/obey.${LISP}" :output-file "${OUT}/obey.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/obey.${LISP}" :output-file "${OUT}/obey.${O}") (${BYE}))' | ${DEPSYS}  >> ${TMP}/trace ; \
	  fi )

${MID}/obey.${LISP}: ${IN}/obey.lisp.pamphlet
	@ echo 368 making ${MID}/obey.${LISP} from ${IN}/obey.lisp.pamphlet
	@(cd ${MID} ; \
	${TANGLE} ${IN}/obey.lisp.pamphlet >obey.${LISP} )


${OUT}/osyscmd.${O}: ${MID}/osyscmd.clisp  
	@ echo 567 making ${OUT}/osyscmd.${O} from ${MID}/osyscmd.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/osyscmd.clisp" :output-file "${OUT}/osyscmd.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/osyscmd.clisp" :output-file "${OUT}/osyscmd.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/osyscmd.clisp: ${IN}/osyscmd.boot.pamphlet
	@ echo 568 making ${MID}/osyscmd.clisp from ${IN}/osyscmd.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/osyscmd.boot.pamphlet >osyscmd.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/osyscmd.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/osyscmd.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm osyscmd.boot )


${AUTO}/package.${O}: ${OUT}/package.${O}
	@ echo 370 making ${AUTO}/package.${O} from ${OUT}/package.${O}
	@ cp ${OUT}/package.${O} ${AUTO}

${OUT}/package.${O}: ${MID}/package.clisp 
	@ echo 371 making ${OUT}/package.${O} from ${MID}/package.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/package.clisp" :output-file "${OUT}/package.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/package.clisp" :output-file "${OUT}/package.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/package.clisp: ${IN}/package.boot.pamphlet
	@ echo 372 making ${MID}/package.clisp from ${IN}/package.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/package.boot.pamphlet >package.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "package.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "package.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm package.boot )


${OUT}/packtran.${O}: ${MID}/packtran.clisp  
	@ echo 570 making ${OUT}/packtran.${O} from ${MID}/packtran.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/packtran.clisp" :output-file "${OUT}/packtran.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/packtran.clisp" :output-file "${OUT}/packtran.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/packtran.clisp: ${IN}/packtran.boot.pamphlet
	@ echo 571 making ${MID}/packtran.clisp from ${IN}/packtran.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/packtran.boot.pamphlet >packtran.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/packtran.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/packtran.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm packtran.boot )


${OUT}/parini.${O}: ${MID}/parini.clisp 
	@ echo 549 making ${OUT}/parini.${O} from ${MID}/parini.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/parini.clisp" :output-file "${OUT}/parini.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/parini.clisp" :output-file "${OUT}/parini.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/parini.clisp: ${IN}/parini.boot.pamphlet
	@ echo 550 making ${MID}/parini.clisp from ${IN}/parini.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/parini.boot.pamphlet >parini.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/parini.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/parini.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm parini.boot )


${AUTO}/parse.${O}: ${OUT}/parse.${O}
	@ echo 374 making ${AUTO}/parse.${O} from ${OUT}/parse.${O}
	@ cp ${OUT}/parse.${O} ${AUTO}

${OUT}/parse.${O}: ${MID}/parse.clisp 
	@ echo 375 making ${OUT}/parse.${O} from ${MID}/parse.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/parse.clisp" :output-file "${OUT}/parse.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/parse.clisp" :output-file "${OUT}/parse.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/parse.${LISP}: ${IN}/parse.boot.pamphlet
	@ echo 376 making ${OUT}/parse.${LISP} from ${IN}/parse.boot.pamphlet
	@ rm -f ${OUT}/parse.${O}
	@( cd ${OUT} ; \
	${TANGLE} -Rparse.clisp ${IN}/parse.boot.pamphlet >parse.${LISP} )

${MID}/parse.clisp: ${IN}/parse.boot.pamphlet
	@ echo 377 making ${MID}/parse.clisp from ${IN}/parse.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/parse.boot.pamphlet >parse.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "parse.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "parse.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm parse.boot )


${AUTO}/parsing.${O}: ${OUT}/parsing.${O}
	@ echo 94 making ${AUTO}/parsing.${O} from ${OUT}/parsing.${O}
	@ cp ${OUT}/parsing.${O} ${AUTO}

${OUT}/parsing.${O}: ${MID}/parsing.lisp 
	@ echo 95 making ${OUT}/parsing.${O} from ${MID}/parsing.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/parsing.lisp" :output-file "${OUT}/parsing.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/parsing.lisp" :output-file "${OUT}/parsing.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/parsing.${LISP}: ${MID}/parsing.lisp
	@ echo 96 making ${OUT}/parsing.${LISP} from ${MID}/parsing.lisp
	@cp ${MID}/parsing.lisp ${OUT}/parsing.${LISP}

${MID}/parsing.lisp: ${IN}/parsing.lisp.pamphlet
	@ echo 97 making ${MID}/parsing.lisp from ${IN}/parsing.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/parsing.lisp.pamphlet >parsing.lisp )
	  

${OUT}/patches.${O}: ${MID}/patches.lisp
	@ echo 99 making ${OUT}/patches.${O} from ${MID}/patches.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/patches.lisp" :output-file "${OUT}/patches.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/patches.lisp" :output-file "${OUT}/patches.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/patches.lisp: ${IN}/patches.lisp.pamphlet
	@ echo 100 making ${MID}/patches.lisp from ${IN}/patches.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/patches.lisp.pamphlet >patches.lisp )


${OUT}/pathname.${O}: ${MID}/pathname.clisp 
	@ echo 379 making ${OUT}/pathname.${O} from ${MID}/pathname.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/pathname.clisp" :output-file "${OUT}/pathname.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/pathname.clisp" :output-file "${OUT}/pathname.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/pathname.clisp: ${IN}/pathname.boot.pamphlet
	@ echo 380 making ${MID}/pathname.clisp from ${IN}/pathname.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/pathname.boot.pamphlet >pathname.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pathname.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pathname.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pathname.boot )


${OUT}/pf2sex.${O}: ${MID}/pf2sex.clisp 
	@ echo 573 making ${OUT}/pf2sex.${O} from ${MID}/pf2sex.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/pf2sex.clisp" :output-file "${OUT}/pf2sex.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/pf2sex.clisp" :output-file "${OUT}/pf2sex.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/pf2sex.clisp: ${IN}/pf2sex.boot.pamphlet
	@ echo 574 making ${MID}/pf2sex.clisp from ${IN}/pf2sex.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/pf2sex.boot.pamphlet >pf2sex.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/pf2sex.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/pf2sex.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pf2sex.boot )


${OUT}/pile.${O}: ${MID}/pile.clisp 
	@ echo 510 making ${OUT}/pile.${O} from ${MID}/pile.clisp
	@  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (compile-file "${MID}/pile.clisp" :output-file "${OUT}/pile.${O}") (${BYE}))' | ${DEPSYS} ; \
	   else \
	    echo '(progn (compile-file "${MID}/pile.clisp" :output-file "${OUT}/pile.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	   fi

${MID}/pile.clisp: ${IN}/pile.boot.pamphlet
	@ echo 511 making ${MID}/pile.clisp from ${IN}/pile.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/pile.boot.pamphlet >pile.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/pile.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/pile.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pile.boot )


${OUT}/posit.${O}: ${MID}/posit.clisp 
	@ echo 540 making ${OUT}/posit.${O} from ${MID}/posit.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/posit.clisp" :output-file "${OUT}/posit.${O}") (${BYE}))' | ${DEPSYS}  ; \
	  else \
	   echo '(progn (compile-file "${MID}/posit.clisp" :output-file "${OUT}/posit.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/posit.clisp: ${IN}/posit.boot.pamphlet
	@ echo 541 making ${MID}/posit.clisp from ${IN}/posit.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/posit.boot.pamphlet >posit.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/posit.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/posit.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm posit.boot )


${AUTO}/postpar.${O}: ${OUT}/postpar.${O}
	@ echo 382 making ${AUTO}/postpar.${O} from ${OUT}/postpar.${O}
	@ cp ${OUT}/postpar.${O} ${AUTO}

${OUT}/postpar.${LISP}: ${IN}/postpar.boot.pamphlet
	@ echo 383 making ${OUT}/postpar.${LISP} from ${IN}/postpar.boot.pamphlet
	@ rm -f ${OUT}/postpar.${O}
	@( cd ${OUT} ; \
	${TANGLE} -Rpostpar.clisp ${IN}/postpar.boot.pamphlet >postpar.${LISP} )

${OUT}/postpar.${O}: ${MID}/postpar.clisp 
	@ echo 384 making ${OUT}/postpar.${O} from ${MID}/postpar.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/postpar.clisp" :output-file "${OUT}/postpar.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/postpar.clisp" :output-file "${OUT}/postpar.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/postpar.clisp: ${IN}/postpar.boot.pamphlet
	@ echo 385 making ${MID}/postpar.clisp from ${IN}/postpar.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/postpar.boot.pamphlet >postpar.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "postpar.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "postpar.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm postpar.boot )


${AUTO}/postprop.${LISP}: ${OUT}/postprop.${LISP}
	@ echo 102 making ${AUTO}/postprop.${LISP} from ${OUT}/postprop.${LISP}
	@ cp ${OUT}/postprop.${LISP} ${AUTO}

${OUT}/postprop.${LISP}: ${MID}/postprop.lisp
	@ echo 103 making ${OUT}/postprop.${LISP} from ${MID}/postprop.lisp
	@ rm -f ${OUT}/postprop.${O}
	@ cp ${MID}/postprop.lisp ${OUT}/postprop.${LISP}

${MID}/postprop.lisp: ${IN}/postprop.lisp.pamphlet
	@ echo 104 making ${MID}/postprop.lisp from ${IN}/postprop.lisp.pamphlet
	@ (cd ${MID} ; \
	${TANGLE} ${IN}/postprop.lisp.pamphlet >postprop.lisp )


${AUTO}/preparse.${O}: ${OUT}/preparse.${O}
	@ echo 106 making ${AUTO}/preparse.${O} from ${OUT}/preparse.${O}
	@ cp ${OUT}/preparse.${O} ${AUTO}

${OUT}/preparse.${O}: ${MID}/preparse.lisp 
	@ echo 107 making ${OUT}/preparse.${O} from ${MID}/preparse.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/preparse.lisp" :output-file "${OUT}/preparse.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/preparse.lisp" :output-file "${OUT}/preparse.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )
	  
${OUT}/preparse.${LISP}: ${MID}/preparse.lisp
	@ echo 108 making ${OUT}/preparse.${LISP} from ${MID}/preparse.lisp
	@ rm -f ${OUT}/preparse.${O}
	@ cp ${MID}/preparse.lisp ${OUT}/preparse.${LISP}

${MID}/preparse.lisp: ${IN}/preparse.lisp.pamphlet
	@ echo 109 making ${MID}/preparse.lisp from ${IN}/preparse.lisp.pamphlet
	@ ( cd ${MID} ; \
	  ${TANGLE} ${IN}/preparse.lisp.pamphlet >preparse.lisp )
	  

${AUTO}/profile.${O}: ${OUT}/profile.${O}
	@ echo 235 making ${AUTO}/profile.${O} from ${OUT}/profile.${O}
	@ cp ${OUT}/profile.${O} ${AUTO}

${OUT}/profile.${O}: ${MID}/profile.clisp 
	@ echo 236 making ${OUT}/profile.${O} from ${MID}/profile.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/profile.clisp" :output-file "${OUT}/profile.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/profile.clisp" :output-file "${OUT}/profile.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/profile.clisp: ${IN}/profile.boot.pamphlet
	@ echo 237 making ${MID}/profile.clisp from ${IN}/profile.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/profile.boot.pamphlet >profile.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "profile.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "profile.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm profile.boot )


${OUT}/property.${LISP}: ${MID}/property.lisp 
	@ echo 111 making ${OUT}/property.${LISP} from ${MID}/property.lisp
	@ cp ${MID}/property.lisp ${OUT}/property.${LISP}

${MID}/property.lisp: ${IN}/property.lisp.pamphlet
	@ echo 112 making ${MID}/property.lisp from ${IN}/property.lisp.pamphlet
	@ ( cd ${MID} ; \
	${TANGLE} ${IN}/property.lisp.pamphlet >property.lisp )


${AUTO}/pspad1.${O}: ${MID}/pspad1.clisp 
	@ echo 598 making ${AUTO}/pspad1.${O} from ${MID}/pspad1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/pspad1.clisp" :output-file "${AUTO}/pspad1.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/pspad1.clisp" :output-file "${AUTO}/pspad1.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/pspad1.clisp: ${IN}/pspad1.boot.pamphlet
	@ echo 599 making ${MID}/pspad1.clisp from ${IN}/pspad1.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/pspad1.boot.pamphlet >pspad1.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pspad1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pspad1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pspad1.boot )


${AUTO}/pspad2.${O}: ${MID}/pspad2.clisp 
	@ echo 601 making ${AUTO}/pspad2.${O} from ${MID}/pspad2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/pspad2.clisp" :output-file "${AUTO}/pspad2.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/pspad2.clisp" :output-file "${AUTO}/pspad2.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/pspad2.clisp: ${IN}/pspad2.boot.pamphlet
	@ echo 602 making ${MID}/pspad2.clisp from ${IN}/pspad2.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/pspad2.boot.pamphlet >pspad2.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pspad2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pspad2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm pspad2.boot )


${OUT}/ptrees.${O}: ${MID}/ptrees.clisp 
	@ echo 519 making ${OUT}/ptrees.${O} from ${MID}/ptrees.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/ptrees.clisp" :output-file "${OUT}/ptrees.${O}") (${BYE}))' | ${DEPSYS}  ; \
	  else \
	   echo '(progn (compile-file "${MID}/ptrees.clisp" :output-file "${OUT}/ptrees.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/ptrees.clisp: ${IN}/ptrees.boot.pamphlet
	@ echo 520 making ${MID}/ptrees.clisp from ${IN}/ptrees.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/ptrees.boot.pamphlet >ptrees.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/ptrees.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/ptrees.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ptrees.boot )


${OUT}/ptrop.${O}: ${MID}/ptrop.clisp 
	@ echo 522 making ${OUT}/ptrop.${O} from ${MID}/ptrop.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/ptrop.clisp" :output-file "${OUT}/ptrop.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/ptrop.clisp" :output-file "${OUT}/ptrop.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/ptrop.clisp: ${IN}/ptrop.boot.pamphlet
	@ echo 523 making ${MID}/ptrop.clisp from ${IN}/ptrop.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/ptrop.boot.pamphlet >ptrop.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/ptrop.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/ptrop.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm ptrop.boot )


${OUT}/record.${O}: ${MID}/record.clisp 
	@ echo 446 making ${OUT}/record.${O} from ${MID}/record.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/record.clisp" :output-file "${OUT}/record.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/record.clisp" :output-file "${OUT}/record.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/record.clisp: ${IN}/record.boot.pamphlet
	@ echo 447 making ${MID}/record.clisp from ${IN}/record.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/record.boot.pamphlet >record.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "record.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "record.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm record.boot )


${OUT}/rulesets.${O}: ${MID}/rulesets.clisp 
	@ echo 387 making ${OUT}/rulesets.${O} from ${MID}/rulesets.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/rulesets.clisp" :output-file "${OUT}/rulesets.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/rulesets.clisp" :output-file "${OUT}/rulesets.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/rulesets.clisp: ${IN}/rulesets.boot.pamphlet
	@ echo 388 making ${MID}/rulesets.clisp from ${IN}/rulesets.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/rulesets.boot.pamphlet >rulesets.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "rulesets.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "rulesets.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm rulesets.boot )


${OUT}/scan.${O}: ${MID}/scan.clisp
	@ echo 507 making ${OUT}/scan.${O} from ${MID}/scan.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/scan.clisp" :output-file "${OUT}/scan.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/scan.clisp" :output-file "${OUT}/scan.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/scan.clisp: ${IN}/scan.boot.pamphlet
	@ echo 508 making ${MID}/scan.clisp from ${IN}/scan.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/scan.boot.pamphlet >scan.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/scan.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/scan.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm scan.boot )


${OUT}/serror.${O}: ${MID}/serror.clisp 
	@ echo 537 making ${OUT}/serror.${O} from ${MID}/serror.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/serror.clisp" :output-file "${OUT}/serror.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/serror.clisp" :output-file "${OUT}/serror.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/serror.clisp: ${IN}/serror.boot.pamphlet
	@ echo 538 making ${MID}/serror.clisp from ${IN}/serror.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/serror.boot.pamphlet >serror.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/serror.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/serror.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm serror.boot )


${OUT}/server.${O}: ${MID}/server.clisp 
	@ echo 390 making ${OUT}/server.${O} from ${MID}/server.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/server.clisp" :output-file "${OUT}/server.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/server.clisp" :output-file "${OUT}/server.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/server.clisp: ${IN}/server.boot.pamphlet
	@ echo 391 making ${MID}/server.clisp from ${IN}/server.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/server.boot.pamphlet >server.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "server.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "server.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm server.boot )


${OUT}/setq.${LISP}: ${MID}/setq.lisp 
	@ echo 114 making ${OUT}/setq.${LISP} from ${MID}/setq.lisp
	@ cp ${MID}/setq.lisp ${OUT}/setq.${LISP}

${MID}/setq.lisp: ${IN}/setq.lisp.pamphlet
	@ echo 115 making ${MID}/setq.lisp from ${IN}/setq.lisp.pamphlet
	@ ( cd ${MID} ; \
	${TANGLE} ${IN}/setq.lisp.pamphlet >setq.lisp )


${OUT}/setvars.${O}: ${MID}/setvars.clisp 
	@ echo 394 making ${OUT}/setvars.${O} from ${MID}/setvars.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/setvars.clisp" :output-file "${OUT}/setvars.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/setvars.clisp" :output-file "${OUT}/setvars.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/setvars.${LISP}: ${IN}/setvars.boot.pamphlet
	@ echo 393 making ${OUT}/setvars.${LISP} from ${IN}/setvars.boot.pamphlet
	@ rm -f ${OUT}/setvars.${O}
	@( cd ${OUT} ; \
	  ${TANGLE} -Rsetvars.clisp ${IN}/setvars.boot.pamphlet >setvars.${LISP} )

${MID}/setvars.clisp: ${IN}/setvars.boot.pamphlet
	@ echo 395 making ${MID}/setvars.clisp from ${IN}/setvars.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/setvars.boot.pamphlet >setvars.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "setvars.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "setvars.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm setvars.boot )


${OUT}/setvart.${O}: ${MID}/setvart.clisp 
	@ echo 397 making ${OUT}/setvart.${O} from ${MID}/setvart.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/setvart.clisp" :output-file "${OUT}/setvart.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/setvart.clisp" :output-file "${OUT}/setvart.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/setvart.clisp: ${IN}/setvart.boot.pamphlet
	@ echo 398 making ${MID}/setvart.clisp from ${IN}/setvart.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/setvart.boot.pamphlet >setvart.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "setvart.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "setvart.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm setvart.boot )


${OUT}/sfsfun.${O}: ${MID}/sfsfun.clisp 
	@ echo 576 making ${OUT}/sfsfun.${O} from ${MID}/sfsfun.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/sfsfun.clisp" :output-file "${OUT}/sfsfun.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/sfsfun.clisp" :output-file "${OUT}/sfsfun.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/sfsfun.clisp: ${IN}/sfsfun.boot.pamphlet
	@ echo 577 making ${MID}/sfsfun.clisp from ${IN}/sfsfun.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/sfsfun.boot.pamphlet >sfsfun.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/sfsfun.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/sfsfun.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm sfsfun.boot )


${OUT}/sfsfun-l.${O}: ${MID}/sfsfun-l.lisp
	@ echo 561 making ${OUT}/sfsfun-l.${O} from ${MID}/sfsfun-l.lisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/sfsfun-l.lisp" :output-file "${OUT}/sfsfun-l.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/sfsfun-l.lisp" :output-file "${OUT}/sfsfun-l.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/sfsfun-l.lisp: ${IN}/sfsfun-l.lisp.pamphlet
	@ echo 562 making ${MID}/sfsfun-l.lisp from ${IN}/sfsfun-l.lisp.pamphlet
	@(cd ${MID} ; \
	${TANGLE} ${IN}/sfsfun-l.lisp.pamphlet >sfsfun-l.lisp )


${AUTO}/showimp.${O}: ${OUT}/showimp.${O}
	@ echo 579 making ${AUTO}/showimp.${O} from ${OUT}/showimp.${O}
	@ cp ${OUT}/showimp.${O} ${AUTO}

${OUT}/showimp.${O}: ${MID}/showimp.clisp 
	@ echo 580 making ${OUT}/showimp.${O} from ${MID}/showimp.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/showimp.clisp" :output-file "${OUT}/showimp.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/showimp.clisp" :output-file "${OUT}/showimp.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/showimp.clisp: ${IN}/showimp.boot.pamphlet
	@ echo 581 making ${MID}/showimp.lisp from ${IN}/showimp.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/showimp.boot.pamphlet >showimp.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "showimp.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "showimp.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm showimp.boot )


${OUT}/simpbool.${O}: ${MID}/simpbool.clisp 
	@ echo 400 making ${OUT}/simpbool.${O} from ${MID}/simpbool.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/simpbool.clisp" :output-file "${OUT}/simpbool.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/simpbool.clisp" :output-file "${OUT}/simpbool.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/simpbool.clisp: ${IN}/simpbool.boot.pamphlet
	@ echo 401 making ${MID}/simpbool.clisp from ${IN}/simpbool.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/simpbool.boot.pamphlet >simpbool.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "simpbool.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "simpbool.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm simpbool.boot )


${OUT}/slam.${O}: ${MID}/slam.clisp 
	@ echo 404 making ${OUT}/slam.${O} from ${MID}/slam.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/slam.clisp" :output-file "${OUT}/slam.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/slam.clisp" :output-file "${OUT}/slam.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/slam.clisp: ${IN}/slam.boot.pamphlet
	@ echo 405 making ${MID}/slam.clisp from ${IN}/slam.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/slam.boot.pamphlet >slam.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "slam.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "slam.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm slam.boot )

${OUT}/slam.${LISP}: ${IN}/slam.boot.pamphlet
	@ echo 403 making ${OUT}/slam.${LISP} from ${IN}/slam.boot.pamphlet
	@ rm -f ${OUT}/slam.${O}
	@( cd ${OUT} ; \
	${TANGLE} -Rslam.clisp ${IN}/slam.boot.pamphlet >slam.${LISP} )


${OUT}/sockio.${O}: ${MID}/sockio.lisp
	@ echo 117 making ${OUT}/sockio.${O} from ${MID}/sockio.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/sockio.lisp" :output-file "${OUT}/sockio.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/sockio.lisp" :output-file "${OUT}/sockio.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/sockio.lisp: ${IN}/sockio.lisp.pamphlet
	@ echo 118 making ${MID}/sockio.lisp from ${IN}/sockio.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/sockio.lisp.pamphlet >sockio.lisp )


${OUT}/spad.${O}: ${MID}/spad.lisp
	@ echo 120 making ${OUT}/spad.${O} from ${MID}/spad.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/spad.lisp" :output-file "${OUT}/spad.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/spad.lisp" :output-file "${OUT}/spad.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/spad.lisp: ${IN}/spad.lisp.pamphlet
	@ echo 121 making ${MID}/spad.lisp from ${IN}/spad.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/spad.lisp.pamphlet >spad.lisp )


${OUT}/spaderror.${O}: ${MID}/spaderror.lisp
	@ echo 123 making ${OUT}/spaderror.${O} from ${MID}/spaderror.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/spaderror.lisp" :output-file "${OUT}/spaderror.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/spaderror.lisp" :output-file "${OUT}/spaderror.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/spaderror.lisp: ${IN}/spaderror.lisp.pamphlet
	@ echo 124 making ${MID}/spaderror.lisp from ${IN}/spaderror.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/spaderror.lisp.pamphlet >spaderror.lisp )


${OUT}/sys-pkg.${LISP}: ${MID}/sys-pkg.lisp 
	@ echo 126 making ${OUT}/sys-pkg.${LISP} from ${MID}/sys-pkg.lisp
	@ cp ${MID}/sys-pkg.lisp ${OUT}/sys-pkg.${LISP}

${MID}/sys-pkg.lisp: ${IN}/sys-pkg.lisp.pamphlet
	@ echo 127 making ${MID}/sys-pkg.lisp from ${IN}/sys-pkg.lisp.pamphlet
	@ ( cd ${MID} ; \
	${TANGLE} ${IN}/sys-pkg.lisp.pamphlet >sys-pkg.lisp )


${OUT}/template.${O}: ${MID}/template.clisp 
	@ echo 407 making ${OUT}/template.${O} from ${MID}/template.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/template.clisp" :output-file "${OUT}/template.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/template.clisp" :output-file "${OUT}/template.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/template.clisp: ${IN}/template.boot.pamphlet
	@ echo 408 making ${MID}/template.clisp from ${IN}/template.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/template.boot.pamphlet >template.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "template.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "template.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm template.boot )


${OUT}/termrw.${O}: ${MID}/termrw.clisp 
	@ echo 410 making ${OUT}/termrw.${O} from ${MID}/termrw.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/termrw.clisp" :output-file "${OUT}/termrw.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/termrw.clisp" :output-file "${OUT}/termrw.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/termrw.clisp: ${IN}/termrw.boot.pamphlet
	@ echo 411 making ${MID}/termrw.clisp from ${IN}/termrw.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/termrw.boot.pamphlet >termrw.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "termrw.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "termrw.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm termrw.boot )


${AUTO}/topics.${O}: ${OUT}/topics.${O}
	@ echo 493 making ${AUTO}/topics.${O} from ${OUT}/topics.${O}
	@ cp ${OUT}/topics.${O} ${AUTO}

${OUT}/topics.${O}: ${MID}/topics.clisp 
	@ echo 494 making ${OUT}/topics.${O} from ${MID}/topics.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/topics.clisp" :output-file "${OUT}/topics.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/topics.clisp" :output-file "${OUT}/topics.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/topics.clisp: ${IN}/topics.boot.pamphlet
	@ echo 495 making ${MID}/topics.clisp from ${IN}/topics.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/topics.boot.pamphlet >topics.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "topics.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "topics.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm topics.boot )


${OUT}/trace.${O}: ${MID}/trace.clisp 
	@ echo 413 making ${OUT}/trace.${O} from ${MID}/trace.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/trace.clisp" :output-file "${OUT}/trace.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/trace.clisp" :output-file "${OUT}/trace.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/trace.clisp: ${IN}/trace.boot.pamphlet
	@ echo 414 making ${MID}/trace.clisp from ${IN}/trace.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/trace.boot.pamphlet >trace.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "trace.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "trace.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm trace.boot )


${OUT}/union.${O}: ${MID}/union.lisp
	@ echo 129 making ${OUT}/union.${O} from ${MID}/union.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/union.lisp" :output-file "${OUT}/union.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/union.lisp" :output-file "${OUT}/union.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/union.lisp: ${IN}/union.lisp.pamphlet
	@ echo 130 making ${MID}/union.lisp from ${IN}/union.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/union.lisp.pamphlet >union.lisp )


${OUT}/unlisp.${O}: ${MID}/unlisp.lisp 
	@ echo 501 making ${OUT}/unlisp.${O} from ${MID}/unlisp.lisp
	@  if [ -z "${NOISE}" ] ; then \
	    echo '(progn (compile-file "${MID}/unlisp.lisp" :output-file "${OUT}/unlisp.${O}") (${BYE}))' | ${DEPSYS} ; \
	   else \
	    echo '(progn (compile-file "${MID}/unlisp.lisp" :output-file "${OUT}/unlisp.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	   fi 

${MID}/unlisp.lisp: ${IN}/unlisp.lisp.pamphlet
	@ echo 502 making ${MID}/unlisp.lisp from ${IN}/unlisp.lisp.pamphlet
	@( cd ${MID} ; \
	${TANGLE} ${IN}/unlisp.lisp.pamphlet >unlisp.lisp )


${OUT}/util.${O}: ${MID}/util.lisp
	@ echo 132 making ${OUT}/util.${O} from ${MID}/util.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/util.lisp" :output-file "${OUT}/util.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/util.lisp" :output-file "${OUT}/util.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${OUT}/util.${LISP}: ${MID}/util.lisp
	@ echo 133 making ${OUT}/util.${LISP} from ${MID}/util.lisp
	@cp ${MID}/util.lisp ${OUT}/util.${LISP}

${MID}/util.lisp: ${IN}/util.lisp.pamphlet
	@ echo 134 making ${MID}/util.lisp from ${IN}/util.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/util.lisp.pamphlet >util.lisp )


${OUT}/varini.${O}: ${MID}/varini.clisp 
	@ echo 546 making ${OUT}/varini.${O} from ${MID}/varini.clisp
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (compile-file "${MID}/varini.clisp" :output-file "${OUT}/varini.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (compile-file "${MID}/varini.clisp" :output-file "${OUT}/varini.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi

${MID}/varini.clisp: ${IN}/varini.boot.pamphlet
	@ echo 547 making ${MID}/varini.clisp from ${IN}/varini.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/varini.boot.pamphlet >varini.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "${MID}/varini.boot") (${BYE}))' | ${BOOTSYS}  ; \
	  else \
	   echo '(progn (boottran::boottocl "${MID}/varini.boot") (${BYE}))' | ${BOOTSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm varini.boot )


${OUT}/vmlisp.${O}: ${MID}/vmlisp.lisp
	@ echo 136 making ${OUT}/vmlisp.${O} from ${MID}/vmlisp.lisp
	@ ( cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/vmlisp.lisp" :output-file "${OUT}/vmlisp.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/vmlisp.lisp" :output-file "${OUT}/vmlisp.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/vmlisp.lisp: ${IN}/vmlisp.lisp.pamphlet
	@ echo 137 making ${MID}/vmlisp.lisp from ${IN}/vmlisp.lisp.pamphlet
	@ (cd ${MID} ; \
	   ${TANGLE} ${IN}/vmlisp.lisp.pamphlet >vmlisp.lisp )


${INT}/algebra/warm.data: 
	@ echo 2 building warm.data
	@ ${TANGLE} -Rwarm.data ${IN}/Makefile.pamphlet >${INT}/algebra/warm.data


${AUTO}/wi1.${O}: ${MID}/wi1.clisp 
	@ echo 592 making ${AUTO}/wi1.${O} from ${MID}/wi1.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/wi1.clisp" :output-file "${AUTO}/wi1.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/wi1.clisp" :output-file "${AUTO}/wi1.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/wi1.clisp: ${IN}/wi1.boot.pamphlet
	@ echo 593 making ${MID}/wi1.clisp from ${IN}/wi1.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/wi1.boot.pamphlet >wi1.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "wi1.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "wi1.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm wi1.boot )


${AUTO}/wi2.${O}: ${MID}/wi2.clisp 
	@ echo 595 making ${AUTO}/wi2.${O} from ${MID}/wi2.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/wi2.clisp" :output-file "${AUTO}/wi2.${O}") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/wi2.clisp" :output-file "${AUTO}/wi2.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/wi2.clisp: ${IN}/wi2.boot.pamphlet
	@ echo 596 making ${MID}/wi2.clisp from ${IN}/wi2.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/wi2.boot.pamphlet >wi2.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "wi2.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "wi2.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm wi2.boot )


${OUT}/xrun.${O}: ${MID}/xrun.clisp 
	@ echo 589 making ${OUT}/xrun.${O} from ${MID}/xrun.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/xrun.clisp" :output-file "${OUT}/xrun.${O}") (${BYE}))' | ${DEPSYS} ; \
	   else \
	   echo '(progn  (compile-file "${MID}/xrun.clisp" :output-file "${OUT}/xrun.${O}") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	   fi )

${MID}/xrun.clisp: ${IN}/xrun.boot.pamphlet
	@ echo 590 making ${MID}/xrun.clisp from ${IN}/xrun.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/xrun.boot.pamphlet >xrun.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "xrun.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "xrun.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm xrun.boot )


${AUTO}/xruncomp.${O}: ${OUT}/xruncomp.${O}
	@ echo 457 making ${AUTO}/xruncomp.${O} from ${OUT}/xruncomp.${O}
	@ cp ${OUT}/xruncomp.${O} ${AUTO}

${OUT}/xruncomp.${O}: ${MID}/xruncomp.clisp 
	@ echo 458 making ${OUT}/xruncomp.${O} from ${MID}/xruncomp.clisp
	@ (cd ${MID} ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "${MID}/xruncomp.clisp" :output-file "${OUT}/xruncomp.${O}") (${BYE}))' |  ${DEPSYS} ; \
	  else \
	   echo '(progn  (compile-file "${MID}/xruncomp.clisp" :output-file "${OUT}/xruncomp.${O}") (${BYE}))' |  ${DEPSYS} >> ${TMP}/trace ; \
	  fi )

${MID}/xruncomp.clisp: ${IN}/xruncomp.boot.pamphlet
	@ echo 459 making ${MID}/xruncomp.clisp from ${IN}/xruncomp.boot.pamphlet
	@ (cd ${MID} ; \
	  ${TANGLE} ${IN}/xruncomp.boot.pamphlet >xruncomp.boot ; \
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "xruncomp.boot") (${BYE}))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "xruncomp.boot") (${BYE}))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm xruncomp.boot )


document: ${DOCFILES}
	@ echo 1 building the interpsys documentation in ${DOC}


$(builddir)/%.dvi: $(axiom_build_texdir)/axiom.sty


$(builddir)/%.dvi: $(srcdir)/%.pamphlet
	$(axiom_build_document) --weave --latex $<


$(DOCFILES): $(DOC)
$(DOC):
	$(mkinstalldirs) $@

$(DOC)/%.dvi: $(builddir)/%.dvi
	$(INSTALL) $< $@

