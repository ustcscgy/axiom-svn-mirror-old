
subdir = src/interp/

IN=$(srcdir)
DOC=$(axiom_target_docdir)/src/interp
BOOK=$(axiom_target_docdir)

# Command to translate Boot to Common Lisp
BOOT_TO_LISP = \
	$(axiom_build_document) --tag=boot --mode=translate \
		--use=$(BOOTSYS) $< 

# Command to translate Common Lisp to native object code
COMPILE_LISP = \
	$(axiom_build_document) --tag=lisp --mode=compile \
		--output=$@ --use=$(DEPSYS) $<
AUTO=$(axiom_targetdir)/autoload

autoload_objects =

# Build platform-dependent Lisp image, at the base of other
# derived Lisp images (depsys, interpsys, AXIOMsys)
LISPSYS= $(axiom_build_bindir)/lisp

BOOTSYS= $(axiom_build_bindir)/bootsys    

DEPSYS=	$(axiom_build_bindir)/depsys
depsys_lisp_noncompiled_sources += sys-pkg.lisp nocompil.lisp \
	bookvol5.lisp util.lisp

depsys_lisp_compiled_sources += parsing.lisp metalex.lisp bootlex.lisp \
	newaux.lisp preparse.lisp postprop.lisp def.lisp metameta.lisp \
	fnewmeta.lisp

depsys_lisp_sources = $(depsys_lisp_noncompiled_sources) \
			$(depsys_lisp_compiled_sources)

depsys_boot_sources = postpar.boot parse.boot clam.boot slam.boot \
	g-boot.boot c-util.boot g-util.boot
DEP=	vmlisp.lisp	ggreater.lisp	\
	hash.lisp	bootfuns.lisp	\
	union.lisp	nlib.lisp	\
	macros.lisp	comp.lisp	\
	spaderror.lisp	debug.lisp	\
	spad.lisp	bits.lisp	\
	setq.lisp	property.lisp	\
	unlisp.lisp      foam_l.lisp      \
	axext_l.lisp

depsys_lisp_macro_sources = vmlisp.lisp ggreater.lisp hash.lisp \
	bootfuns.lisp union.lisp nlib.lisp macros.lisp	\
	comp.lisp spaderror.lisp debug.lisp \
	spad.lisp bits.lisp setq.lisp property.lisp \
	unlisp.lisp foam_l.lisp axext_l.lisp

depsys_lisp_noncompiled_sources += $(depsys_lisp_macro_sources)
depsys_lisp_SOURCES = $(addsuffix .pamphlet, $(depsys_lisp_sources))
LOADSYS= $(axiom_build_bindir)/lisp$(EXEEXT)
SAVESYS= $(axiom_build_bindir)/interpsys$(EXEEXT)
AXIOMSYS= $(axiom_target_bindir)/AXIOMsys$(EXEEXT)

DEBUGSYS=$(axiom_build_bindir)/debugsys$(EXEEXT)

OBJS=	vmlisp.$(FASLEXT)	hash.$(FASLEXT)	\
	bootfuns.lisp	macros.$(FASLEXT)	\
	unlisp.$(FASLEXT)	setq.lisp	\
	astr.$(FASLEXT)	bits.$(FASLEXT)	\
	alql.$(FASLEXT)	buildom.$(FASLEXT)	\
	cattable.$(FASLEXT)				\
	cformat.$(FASLEXT)	cfuns.$(FASLEXT)	\
	clam.$(FASLEXT)	clammed.$(FASLEXT)	\
	comp.$(FASLEXT)	\
	compat.$(FASLEXT)	compress.$(FASLEXT)	\
	cparse.$(FASLEXT)	cstream.$(FASLEXT)	\
	database.$(FASLEXT)	\
	debug.$(FASLEXT)	dq.$(FASLEXT)		\
	fname.$(FASLEXT)	format.$(FASLEXT)	\
	g-boot.$(FASLEXT)	g-cndata.$(FASLEXT)	\
	g-error.$(FASLEXT)	g-opt.$(FASLEXT)	\
	g-timer.$(FASLEXT)	g-util.$(FASLEXT)	\
	ggreater.$(FASLEXT)				\
	hypertex.$(FASLEXT)	i-analy.$(FASLEXT)	\
	i-code.$(FASLEXT)	i-coerce.$(FASLEXT)	\
	i-coerfn.$(FASLEXT)	i-eval.$(FASLEXT)	\
	i-funsel.$(FASLEXT)	bookvol5.$(FASLEXT)	\
	i-intern.$(FASLEXT)	i-map.$(FASLEXT)	\
	i-output.$(FASLEXT)	i-resolv.$(FASLEXT)	\
	i-spec1.$(FASLEXT)				\
	i-spec2.$(FASLEXT)	i-syscmd.$(FASLEXT)	\
	i-toplev.$(FASLEXT)	i-util.$(FASLEXT)	\
	incl.$(FASLEXT)	int-top.$(FASLEXT)	\
	intfile.$(FASLEXT)				\
	lisplib.$(FASLEXT)	macex.$(FASLEXT)	\
	match.$(FASLEXT)				\
	monitor.$(FASLEXT)	msg.$(FASLEXT)		\
	msgdb.$(FASLEXT)	nci.$(FASLEXT)		\
	newaux.$(FASLEXT)	newfort.$(FASLEXT)	\
	nlib.$(FASLEXT)	nrunfast.$(FASLEXT)	\
	nrungo.$(FASLEXT)	nrunopt.$(FASLEXT)	\
	nruntime.$(FASLEXT)	osyscmd.$(FASLEXT)	\
	packtran.$(FASLEXT)	pathname.$(FASLEXT)	\
	pf2sex.$(FASLEXT)	pile.$(FASLEXT)	\
	posit.$(FASLEXT)	property.lisp	\
	ptrees.$(FASLEXT)	ptrop.$(FASLEXT)	\
	record.$(FASLEXT)				\
	rulesets.$(FASLEXT)	\
	scan.$(FASLEXT)	serror.$(FASLEXT)	\
	server.$(FASLEXT)				\
	setvars.$(FASLEXT)	\
	sfsfun-l.$(FASLEXT)	sfsfun.$(FASLEXT)	\
	simpbool.$(FASLEXT)	slam.$(FASLEXT)	\
	sockio.$(FASLEXT)	spad.$(FASLEXT)	\
	spaderror.$(FASLEXT)				\
	template.$(FASLEXT)	termrw.$(FASLEXT)	\
	trace.$(FASLEXT)	\
	union.$(FASLEXT)       daase.$(FASLEXT)  	\
	fortcall.$(FASLEXT)

AXIOMsys_noncompiled_lisp_sources = bootfuns.lisp nocompil.lisp \
	postprop.lisp property.lisp setq.lisp 

AXIOMsys_compiled_lisp_sources = bits.lisp \
	bootlex.lisp cfuns.lisp comp.lisp construc.lisp daase.lisp \
	debug.lisp def.lisp fname.lisp fnewmeta.lisp ggreater.lisp \
	hash.lisp macros.lisp metalex.lisp monitor.lisp newaux.lisp \
	nlib.lisp nspadaux.lisp parsing.lisp \
	patches.lisp preparse.lisp \
	sockio.lisp spad.lisp spaderror.lisp \
	union.lisp util.lisp vmlisp.lisp obey.lisp \
	unlisp.lisp intint.lisp nci.lisp sfsfun-l.lisp \
	axext_l.lisp foam_l.lisp

AXIOMsys_boot_sources = astr.boot alql.boot buildom.boot cattable.boot \
	cformat.boot clam.boot clammed.boot compat.boot compress.boot \
	cparse.boot cstream.boot database.boot dq.boot format.boot \
	g-boot.boot g-cndata.boot g-error.boot g-opt.boot g-timer.boot \
	g-util.boot hypertex.boot i-analy.boot i-code.boot i-coerce.boot \
	i-coerfn.boot i-eval.boot i-funsel.boot i-intern.boot i-map.boot \
	i-output.boot i-resolv.boot i-spec1.boot i-spec2.boot \
	i-syscmd.boot i-toplev.boot i-util.boot incl.boot int-top.boot \
	intfile.boot lisplib.boot macex.boot match.boot msg.boot \
	msgdb.boot newfort.boot nrunfast.boot nrungo.boot nrunopt.boot \
	nruntime.boot osyscmd.boot packtran.boot pathname.boot \
	pf2sex.boot pile.boot posit.boot ptrees.boot ptrop.boot \
	record.boot rulesets.boot scan.boot serror.boot server.boot \
	setvars.boot sfsfun.boot simpbool.boot slam.boot template.boot \
	termrw.boot trace.boot fortcall.boot
INOBJS=	varini.$(FASLEXT)	parini.$(FASLEXT)	\
	setvart.$(FASLEXT)	intint.$(FASLEXT)	\
        xrun.$(FASLEXT)        interop.$(FASLEXT)     \
        patches.$(FASLEXT)

# These are autloaded old parser files
OPOBJS=	${AUTO}/parsing.$(FASLEXT)	${AUTO}/bootlex.$(FASLEXT)	\
        ${AUTO}/def.$(FASLEXT)	\
	${AUTO}/fnewmeta.$(FASLEXT)	${AUTO}/metalex.$(FASLEXT)	\
	${AUTO}/metameta.$(FASLEXT)	\
	${AUTO}/parse.$(FASLEXT)	${AUTO}/postpar.$(FASLEXT)	\
	${AUTO}/postprop.$(FASLEXT)	${AUTO}/preparse.$(FASLEXT)

autoload_objects += $(OPBJS)
OCOBJS=	${AUTO}/apply.$(FASLEXT)	${AUTO}/c-doc.$(FASLEXT)	\
	${AUTO}/c-util.$(FASLEXT)	${AUTO}/profile.$(FASLEXT)	\
	${AUTO}/category.$(FASLEXT)	${AUTO}/compiler.$(FASLEXT)	\
	${AUTO}/define.$(FASLEXT)	${AUTO}/functor.$(FASLEXT)	\
	${AUTO}/info.$(FASLEXT)	${AUTO}/iterator.$(FASLEXT)	\
	${AUTO}/modemap.$(FASLEXT)	${AUTO}/nruncomp.$(FASLEXT)	\
	${AUTO}/package.$(FASLEXT)	${AUTO}/htcheck.$(FASLEXT)	\
        ${AUTO}/xruncomp.$(FASLEXT)   

autoload_objects += $(OCOBJS)

BROBJS=	${AUTO}/bc-matrix.$(FASLEXT)				\
	${AUTO}/bc-misc.$(FASLEXT)	${AUTO}/bc-solve.$(FASLEXT)	\
	${AUTO}/bc-util.$(FASLEXT)				\
	${AUTO}/ht-util.$(FASLEXT)	${AUTO}/htsetvar.$(FASLEXT)	\
	${AUTO}/ht-root.$(FASLEXT)	\
	${AUTO}/br-con.$(FASLEXT)	\
	${AUTO}/br-data.$(FASLEXT)	${AUTO}/showimp.$(FASLEXT)    \
	${AUTO}/br-op1.$(FASLEXT)	${AUTO}/br-op2.$(FASLEXT)	\
	${AUTO}/br-search.$(FASLEXT)	${AUTO}/br-util.$(FASLEXT)	\
	${AUTO}/topics.$(FASLEXT)     ${AUTO}/br-prof.$(FASLEXT)    \
	${AUTO}/br-saturn.$(FASLEXT)

autoload_objects += $(BFOBJS)

TRANOBJS= ${AUTO}/wi1.$(FASLEXT) ${AUTO}/wi2.$(FASLEXT) ${AUTO}/pspad1.$(FASLEXT) \
	  ${AUTO}/pspad2.$(FASLEXT) ${AUTO}/mark.$(FASLEXT) ${AUTO}/nspadaux.$(FASLEXT) \
	  ${AUTO}/def.$(FASLEXT)

autoload_objects += $(TRANOBJS)

NAGBROBJS= ${AUTO}/nag-c02.$(FASLEXT)   ${AUTO}/nag-c05.$(FASLEXT) \
           ${AUTO}/nag-c06.$(FASLEXT)   ${AUTO}/nag-d01.$(FASLEXT) \
           ${AUTO}/nag-d02.$(FASLEXT)   ${AUTO}/nag-d03.$(FASLEXT) \
           ${AUTO}/nag-e01.$(FASLEXT)   ${AUTO}/nag-e02.$(FASLEXT) \
           ${AUTO}/nag-e04.$(FASLEXT)   ${AUTO}/nag-f01.$(FASLEXT) \
           ${AUTO}/nag-f02.$(FASLEXT)   ${AUTO}/nag-f04.$(FASLEXT) \
           ${AUTO}/nag-f07.$(FASLEXT)   ${AUTO}/nag-s.$(FASLEXT) 

autoload_objects += $(NAGBROBJS)

ASCOMP= hashcode.$(FASLEXT) as.$(FASLEXT) \
	foam_l.$(FASLEXT) axext_l.$(FASLEXT)

ASAUTO= ${AUTO}/ax.$(FASLEXT)

autoload_objects += $(ASAUTO)
TIMESTAMP=$(axiom_targetdir)/timestamp
YEARWEEK=(progn (setq boot::timestamp "${TIMESTAMP}") \
                (setq boot::*build-version* "$(PACKAGE_STRING)") \
                (boot::yearweek))


.PRECIOUS:	${DEPSYS}
.PRECIOUS:	${SAVESYS}
.PRECIOUS:	${AXIOMSYS}

PROCLAIMS=(progn (load "sys-pkg.lisp") (load "$(srcdir)/interp-proclaims.lisp"))

UNUSED= ${DOC}/anna.boot.dvi ${DOC}/construc.lisp.dvi \
	${DOC}/domain.lisp.dvi 	${DOC}/guess.boot.dvi \
	${DOC}/interp-fix.boot.dvi \
	${DOC}/nhyper.boot.dvi ${DOC}/pf2atree.boot.dvi \
	${DOC}/redefs.boot.dvi 	${DOC}/word.boot.dvi 


.SUFFIXES:
.SUFFIXES: .boot .clisp .lisp .pamphlet

.PHONY: all all-ax all-depsys all-interpsys all-axiomsys all-debugsys

all: all-ax

all-ax: stamp
	@echo finished $(srcdir)

stamp: $(AUTO) remove-stamp build-images
	$(STAMP) stamp

.PHONY: remove-stamp
remove-stamp:
	-rm -f stamp

.PHONY: build-images
build-images: remove-stamp all-interpsys all-debugsys

all-interpsys: all-depsys 
	$(mkinstalldirs) $(AUTO)
	$(MAKE) $(AX_FLAGS) $(SAVESYS)

all-axiomsys: all-depsys 
	$(MAKE) $(AX_FLAGS) $(AXIOMSYS)

all-debugsys: all-interpsys
	$(MAKE) $(AX_FLAGS) $(DEBUGSYS)

all-depsys: $(DEPSYS)

.PRECIOUS: %.boot
%.boot: $(srcdir)/%.boot.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<
.PRECIOUS: %.clisp
%.clisp: %.boot
	$(BOOT_TO_LISP)
.PRECIOUS: %.$(FASLEXT)
%.$(FASLEXT): %.clisp
	$(COMPILE_LISP)
# Extract and compile the part of the interpreter written
# in Common Lisp
.PRECIOUS: %.lisp
%.$(FASLEXT): %.lisp
	$(COMPILE_LISP)

%.lisp: $(srcdir)/%.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

mostlyclean-local:
	@rm -f *.fn *.data *.$(FASLEXT) *.lib

clean-local: mostlyclean-local
	@rm -f *.clisp *.lsp

distclean-local: clean-local

makeint.lisp:	${DEPSYS} ${OBJS} bookvol5.$(FASLEXT) util.$(FASLEXT) \
                nocompil.lisp sys-pkg.lisp \
	        ${OUTINTERP} ${OCOBJS} ${OPOBJS} ${BROBJS} obey.$(FASLEXT) \
		database.date ${INOBJS} ${ASCOMP} ${ASAUTO} \
		${NAGBROBJS} ${TRANOBJS} \
	        ${LOADSYS} \
		$(axiom_targetdir)/algebra/exposed.$(FASLEXT) \
		$(axiom_src_docdir)/msgs/s2-us.msgs \
	        ../algebra/warm.data
	@ echo 5 invoking make in `pwd` with parms:
	@ echo SYS= ${SYS} 
	@ echo LISP=${LISP} BYE=${BYE}
	$(mkinstalldirs) $(axiom_target_datadir)/msgs
	$(INSTALL_DATA) $(axiom_src_docdir)/msgs/s2-us.msgs \
		 $(axiom_target_datadir)/msgs
	@ echo '${PROCLAIMS}' > makeint.lisp
	@ echo '(gbc t)' >> makeint.lisp
	@ echo '(load "nocompil.lisp")' >> makeint.lisp
	@ echo '(load "bookvol5")' >> makeint.lisp
	@ echo '(load "util")' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	@ touch ${TIMESTAMP}
	@ echo '${YEARWEEK}' >> makeint.lisp
	@ echo '(boot::build-interpsys (append (quote ($(patsubst %, "%", ${OBJS}))) (quote ($(patsubst %, "%", ${ASCOMP}))) (quote ($(patsubst %, "%", ${INOBJS})))) (quote ($(patsubst %, "%", ${OPOBJS}))) (quote ($(patsubst %, "%", ${OCOBJS}))) (quote ($(patsubst %, "%", ${BROBJS}))) (quote ($(patsubst %, "%", ${TRANOBJS}))) (quote ($(patsubst %, "%", ${NAGBROBJS}))) (quote ($(patsubst %, "%", ${ASAUTO})))  "${AXIOM}")' >> makeint.lisp
	@ echo '(boot::set-restart-hook)' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	@ echo '(load "../algebra/warm.data")' >> makeint.lisp
	@ echo '(boot::|clearClams|)' >> makeint.lisp
	@ echo '(load "obey")' >> makeint.lisp
	@ echo '#+:akcl (setq compiler::*suppress-compiler-notes* t)' >> makeint.lisp
	@ echo '#+:akcl (si::gbc-time 0)' >> makeint.lisp
	@ echo '(gbc t)' >> makeint.lisp

${SAVESYS}: makeint.lisp
	AXIOM="$(AXIOM)" DAASE="$(axiom_src_datadir)" \
		$(axiom_build_document) --tag=lisp --mode=save-image \
		--use=$(LOADSYS) --output=$@ makeint.lisp
	@ echo 6 ${SAVESYS} created
	$(mkinstalldirs) $(axiom_target_bindir)
depsys_lisp_sources += parsing.lisp metalex.lisp bootlex.lisp \
			newaux.lisp preparse.lisp postprop.lisp \
			metameta.lisp fnewmeta.lisp

depsys_boot_sources = postpar.boot parse.boot clam.boot slam.boot \
			g-boot.boot c-util.boot g-util.boot

depsys_SOURCES = $(depsys_lisp_SOURCES) $(depsys_boot_SOURCES)

depsys_objects = nocompil.$(FASLEXT) bookvol5.$(FASLEXT) \
		util.$(FASLEXT) postpar.$(FASLEXT) parse.$(FASLEXT) \
		parsing.$(FASLEXT) metalex.$(FASLEXT) bootlex.$(FASLEXT) \
		newaux.$(FASLEXT) preparse.$(FASLEXT) postprop.$(FASLEXT) \
		metameta.$(FASLEXT) fnewmeta.$(FASLEXT) clam.$(FASLEXT) \
		slam.$(FASLEXT) g-boot.$(FASLEXT) c-util.$(FASLEXT) \
		g-util.$(FASLEXT)

${DEPSYS}:	${DEP} sys-pkg.lisp nocompil.lisp \
	        bookvol5.lisp util.lisp \
	        postpar.clisp parse.clisp \
	        parsing.lisp metalex.lisp \
	        bootlex.lisp newaux.lisp \
	        preparse.lisp \
	        postprop.lisp def.lisp \
	        metameta.lisp fnewmeta.lisp \
	        g-boot.${LISP} c-util.${LISP} \
	        g-util.${LISP} \
	        clam.${LISP} \
	        slam.clisp
	@ echo 3 making ${DEPSYS} 
	@ $(mkinstalldirs) $(axiom_build_bindir)
	@ echo '(load "sys-pkg.lisp")' > makedep.lisp
	@ echo '(push :oldboot *features*)' >> makedep.lisp
	@ echo '(load "nocompil.lisp")' >> makedep.lisp
	@ echo '(load "bookvol5.lisp")' >> makedep.lisp
	@ echo '(load "util.lisp")' >> makedep.lisp
	@ echo '(in-package "BOOT")' >> makedep.lisp
	@ echo '(build-depsys (quote ($(patsubst %, "%", ${DEP}))) "${AXIOM}")' >> makedep.lisp
	@ echo '(unless (probe-file "postpar.$(FASLEXT)") (compile-file "postpar.clisp" :output-file "postpar.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "postpar")' >> makedep.lisp
	@ echo '(unless (probe-file "parse.$(FASLEXT)") (compile-file "parse.clisp" :output-file "parse.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "parse")' >> makedep.lisp
	@ echo '(unless (probe-file "parsing.$(FASLEXT)") (compile-file "parsing.lisp" :output-file "parsing.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "parsing")' >> makedep.lisp
	@ echo '(unless (probe-file "metalex.$(FASLEXT)") (compile-file "metalex.lisp" :output-file "metalex.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "metalex")' >> makedep.lisp
	@ echo '(unless (probe-file "bootlex.$(FASLEXT)") (compile-file "bootlex.lisp" :output-file "bootlex.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "bootlex")' >> makedep.lisp
	@ echo '(unless (probe-file "newaux.$(FASLEXT)") (compile-file "newaux.lisp" :output-file "newaux.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "newaux")' >> makedep.lisp
	@ echo '(unless (probe-file "preparse.$(FASLEXT)") (compile-file "preparse.lisp" :output-file "preparse.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "preparse")' >> makedep.lisp
	@ echo '(unless (probe-file "postprop.$(FASLEXT)") (compile-file "postprop.lisp" :output-file "postprop.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "postprop")' >> makedep.lisp
	@ echo '(unless (probe-file "def.$(FASLEXT)") (compile-file "def.lisp" :output-file "def.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "def")' >> makedep.lisp
	@ echo '(unless (probe-file "metameta.$(FASLEXT)") (compile-file "metameta.lisp" :output-file "metameta.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "metameta")' >> makedep.lisp
	@ echo '(unless (probe-file "fnewmeta.$(FASLEXT)") (compile-file "fnewmeta.lisp" :output-file "fnewmeta.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "fnewmeta")' >> makedep.lisp
	@ echo '(unless (probe-file "clam.$(FASLEXT)") (compile-file "clam.${LISP}" :output-file "clam.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "clam")' >> makedep.lisp
	@ echo '(unless (probe-file "slam.$(FASLEXT)") (compile-file "slam.clisp" :output-file "slam.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "slam")' >> makedep.lisp
	@ echo '(unless (probe-file "g-boot.$(FASLEXT)") (compile-file "g-boot.${LISP}" :output-file "g-boot.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "g-boot")' >> makedep.lisp
	@ echo '(unless (probe-file "c-util.$(FASLEXT)") (compile-file "c-util.${LISP}" :output-file "c-util.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "c-util")' >> makedep.lisp
	@ echo '(unless (probe-file "g-util.$(FASLEXT)") (compile-file "g-util.${LISP}" :output-file "g-util.$(FASLEXT)"))' >> makedep.lisp
	@ echo '(load "g-util")' >> makedep.lisp
	$(axiom_build_document) --tag=lisp --mode=save-image --output=$@ \
		--use=../boot/local-lisp makedep.lisp
	@ echo 4 ${DEPSYS} created
.PHONY: all-axiomsys

all-axiomsys: ${AXIOMSYS}

${AXIOMSYS}: makeint.lisp
	echo '(progn (load "makeint.lisp") (user::spad-save "$@"))' | \
		AXIOM="$(AXIOM)" DAASE="$(axiom_targetdir)" $(LOADSYS)
	@ echo 6a ${AXIOMSYS} created
${DEBUGSYS}: debugsys.lisp
	@ echo 7 building debugsys
	@ echo '(progn (gbc t) (load "debugsys.lisp") (user::spad-save "$@"))' | ${LISPSYS}
	@ echo 8 ${DEBUGSYS} created

exposed.lsp: $(axiom_src_algdir)/exposed.lsp.pamphlet
	@ echo 615 making exposed.lsp from $(axiom_src_algdir)/exposed.lsp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

$(axiom_targetdir)/algebra/exposed.$(FASLEXT) : exposed.lsp ${LISPSYS}
	@ echo 616 making $@ from exposed.lsp
	$(mkinstalldirs) $(axiom_targetdir)/algebra
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn  (compile-file "exposed.lsp" :output-file "$(axiom_targetdir)/algebra/exposed.$(FASLEXT)"))' | ${LISPSYS} ; \
	  else \
	   echo '(progn  (compile-file "exposed.lsp" :output-file "$(axiom_targetdir)/algebra/exposed.$(FASLEXT)"))' | ${LISPSYS} >> ${TMP}/trace ; \
	  fi

database.date:
	@ echo 617 the database was updated...remaking interpsys
	@ touch database.date


${AUTO}/apply.$(FASLEXT): apply.$(FASLEXT)
	@ echo 9 making ${AUTO}/apply.$(FASLEXT) from apply.$(FASLEXT)
	@ cp apply.$(FASLEXT) ${AUTO}

apply.clisp: apply.boot
	@ echo 11 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "apply.boot"))' | ${DEPSYS} ; \
	   else \
	   echo '(progn (boottran::boottocl "apply.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
           fi ;


as.clisp: as.boot
	@ echo 417 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "as.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "as.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/ax.$(FASLEXT): ax.$(FASLEXT)
	@ echo 461 making ${AUTO}/ax.$(FASLEXT) from ax.$(FASLEXT)
	@ cp ax.$(FASLEXT) ${AUTO}

ax.clisp: ax.boot
	@ echo 463 making $@ $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ax.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ax.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/bc-matrix.$(FASLEXT): bc-matrix.$(FASLEXT)
	@ echo 422 making ${AUTO}/bc-matrix.$(FASLEXT) from bc-matrix.$(FASLEXT)
	@ cp bc-matrix.$(FASLEXT) ${AUTO}

bc-matrix.clisp: bc-matrix.boot
	@ echo 424 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-matrix.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-matrix.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/bc-misc.$(FASLEXT): bc-misc.$(FASLEXT)
	@ echo 426 making ${AUTO}/bc-misc.$(FASLEXT) from bc-misc.$(FASLEXT)
	@ cp bc-misc.$(FASLEXT) ${AUTO}

bc-misc.clisp: bc-misc.boot
	@ echo 428 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-misc.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-misc.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/bc-solve.$(FASLEXT): bc-solve.$(FASLEXT)
	@ echo 430 making ${AUTO}/bc-solve.$(FASLEXT) from bc-solve.$(FASLEXT)
	@ cp bc-solve.$(FASLEXT) ${AUTO}

bc-solve.clisp: bc-solve.boot
	@ echo 432 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-solve.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-solve.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/bc-util.$(FASLEXT): bc-util.$(FASLEXT)
	@ echo 434 making ${AUTO}/bc-util.$(FASLEXT) from bc-util.$(FASLEXT)
	@ cp bc-util.$(FASLEXT) ${AUTO}

bc-util.clisp: bc-util.boot
	@ echo 436 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "bc-util.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "bc-util.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/bootlex.$(FASLEXT): bootlex.$(FASLEXT)
	@ echo 19 making ${AUTO}/bootlex.$(FASLEXT) from bootlex.$(FASLEXT)
	@ cp bootlex.$(FASLEXT) ${AUTO}


${AUTO}/br-con.$(FASLEXT): br-con.$(FASLEXT)
	@ echo 465 making ${AUTO}/br-con.$(FASLEXT) from br-con.$(FASLEXT)
	@ cp br-con.$(FASLEXT) ${AUTO}

br-con.clisp: br-con.boot
	@ echo 467 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-con.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-con.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/br-data.$(FASLEXT): br-data.$(FASLEXT)
	@ echo 481 making ${AUTO}/br-data.$(FASLEXT) from br-data.$(FASLEXT)
	@ cp br-data.$(FASLEXT) ${AUTO}

br-data.clisp: br-data.boot
	@ echo 483 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-data.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-data.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/br-op1.$(FASLEXT): br-op1.$(FASLEXT)
	@ echo 473 making ${AUTO}/br-op1.$(FASLEXT) from br-op1.$(FASLEXT)
	@ cp br-op1.$(FASLEXT) ${AUTO}

br-op1.clisp: br-op1.boot
	@ echo 475 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-op1.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-op1.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/br-op2.$(FASLEXT): br-op2.$(FASLEXT)
	@ echo 477 making ${AUTO}/br-op2.$(FASLEXT) from br-op2.$(FASLEXT)
	@ cp br-op2.$(FASLEXT) ${AUTO}

br-op2.clisp: br-op2.boot
	@ echo 479 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-op2.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-op2.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/br-prof.$(FASLEXT): br-prof.$(FASLEXT)
	@ echo 497 making ${AUTO}/br-prof.$(FASLEXT) from br-prof.$(FASLEXT)
	@ cp br-prof.$(FASLEXT) ${AUTO}

br-prof.clisp: br-prof.boot
	@ echo 499 making $@ from $<
	@ ($(axiom_build_document) --tangle --output=br-prof.boot $< ;\
	  if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-prof.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-prof.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi ; \
	  rm br-prof.boot )


${AUTO}/br-saturn.$(FASLEXT): br-saturn.$(FASLEXT)
	@ echo 489 making ${AUTO}/br-saturn.$(FASLEXT) from br-saturn.$(FASLEXT)
	@ cp br-saturn.$(FASLEXT) ${AUTO}

br-saturn.clisp: br-saturn.boot
	@ echo 491 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-saturn.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-saturn.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/br-search.$(FASLEXT): br-search.$(FASLEXT)
	@ echo 469 making ${AUTO}/br-search.$(FASLEXT) from br-search.$(FASLEXT)
	@ cp br-search.$(FASLEXT) ${AUTO}

br-search.clisp: br-search.boot
	@ echo 471 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-search.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-search.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/br-util.$(FASLEXT): br-util.$(FASLEXT)
	@ echo 485 making ${AUTO}/br-util.$(FASLEXT) from br-util.$(FASLEXT)
	@ cp br-util.$(FASLEXT) ${AUTO}

br-util.clisp: br-util.boot
	@ echo 487 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "br-util.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "br-util.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


buildom.clisp: buildom.boot
	@ echo 143 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "buildom.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "buildom.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/category.$(FASLEXT): category.$(FASLEXT)
	@ echo 210 making ${AUTO}/ category.$(FASLEXT) from category.$(FASLEXT)
	@ cp category.$(FASLEXT) ${AUTO}

category.clisp: category.boot
	@ echo 212 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "category.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "category.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


cattable.clisp: cattable.boot
	@ echo 215 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "cattable.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "cattable.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/c-doc.$(FASLEXT): c-doc.$(FASLEXT)
	@ echo 217 making ${AUTO}/c-doc.$(FASLEXT) from c-doc.$(FASLEXT)
	@ cp c-doc.$(FASLEXT) ${AUTO}

c-doc.clisp: c-doc.boot
	@ echo 219 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "c-doc.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "c-doc.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


clam.${LISP}: $(srcdir)/clam.boot.pamphlet
	@ echo 221 making clam.${LISP} from $(srcdir)/clam.boot.pamphlet
	@ rm -f clam.$(FASLEXT)
	$(axiom_build_document) --tangle=clam.clisp --output=$@ $<
clam.clisp: clam.boot
	@ echo 223 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "clam.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "clam.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


clammed.clisp: clammed.boot
	@ echo 226 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "clammed.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "clammed.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


compat.clisp: compat.boot
	@ echo 229 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compat.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compat.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/compiler.$(FASLEXT): compiler.$(FASLEXT)
	@ echo 231 making ${AUTO}/compiler.$(FASLEXT) from compiler.$(FASLEXT)
	@ cp compiler.$(FASLEXT) ${AUTO}

compiler.clisp: compiler.boot
	@ echo 233 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compiler.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compiler.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


compress.$(FASLEXT): compress.clisp 
	$(COMPILE_LISP)

compress.clisp: compress.boot
	@ echo 240 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "compress.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "compress.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/c-util.$(FASLEXT): c-util.$(FASLEXT)
	@ echo 145 making ${AUTO}/c-util.$(FASLEXT) from c-util.$(FASLEXT)
	@ cp c-util.$(FASLEXT) ${AUTO}

c-util.${LISP}: $(srcdir)/c-util.boot.pamphlet
	@ echo 146 making c-util.${LISP} from $(srcdir)/c-util.boot.pamphlet
	@ rm -f c-util.$(FASLEXT)
	$(axiom_build_document) --tangle=c-util.clisp --output=$@ $<

c-util.clisp: c-util.boot
	@ echo 148 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "c-util.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "c-util.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


database.clisp: database.boot
	@ echo 243 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "database.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "database.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


debugsys.lisp: $(srcdir)/debugsys.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

${AUTO}/def.$(FASLEXT): def.$(FASLEXT)
	@ echo 41 making ${AUTO}/def.$(FASLEXT) from def.$(FASLEXT)
	@ cp def.$(FASLEXT) ${AUTO}


${AUTO}/define.$(FASLEXT): define.$(FASLEXT)
	@ echo 245 making ${AUTO}/define.$(FASLEXT) from define.$(FASLEXT)
	@ cp define.$(FASLEXT) ${AUTO}

define.clisp: define.boot
	@ echo 247 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "define.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "define.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/fnewmeta.$(FASLEXT): fnewmeta.$(FASLEXT)
	@ echo 49 making ${AUTO}/fnewmeta.$(FASLEXT) from fnewmeta.$(FASLEXT)
	@ cp fnewmeta.$(FASLEXT) ${AUTO}


format.clisp: format.boot
	@ echo 250 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "format.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "format.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


fortcall.clisp: fortcall.boot
	@ echo 55 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "fortcall.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "fortcall.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/functor.$(FASLEXT): functor.$(FASLEXT)
	@ echo 252 making ${AUTO}/functor.$(FASLEXT) from functor.$(FASLEXT)
	@ cp functor.$(FASLEXT) ${AUTO}

functor.clisp: functor.boot
	@ echo 254 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "functor.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "functor.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


g-boot.${LISP}: $(srcdir)/g-boot.boot.pamphlet
	@ echo 256 making g-boot.${LISP} from $(srcdir)/g-boot.boot.pamphlet
	@ rm -f g-boot.$(FASLEXT)
	$(axiom_build_document) --tangle=g-boot.clisp --output=$@ $<
g-boot.clisp: g-boot.boot
	@ echo 258 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-boot.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-boot.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


g-cndata.clisp: g-cndata.boot
	@ echo 261 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-cndata.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-cndata.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


g-error.clisp: g-error.boot
	@ echo 264 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-error.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-error.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


g-opt.clisp: g-opt.boot
	@ echo 267 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-opt.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-opt.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


g-timer.clisp: g-timer.boot
	@ echo 270 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-timer.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-timer.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


g-util.${LISP}: $(srcdir)/g-util.boot.pamphlet
	@ echo 272 making g-util.${LISP} from $(srcdir)/g-util.boot.pamphlet
	@ rm -f g-util.$(FASLEXT)
	$(axiom_build_document) --tangle=g-util.clisp --output=$@ $<
g-util.clisp: g-util.boot
	@ echo 274 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "g-util.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "g-util.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


hashcode.clisp: hashcode.boot
	@ echo 584 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "hashcode.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "hashcode.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/htcheck.$(FASLEXT): htcheck.$(FASLEXT)
	@ echo 453 making ${AUTO}/htcheck.$(FASLEXT) from htcheck.$(FASLEXT)
	@ cp htcheck.$(FASLEXT) ${AUTO}

htcheck.clisp: htcheck.boot
	@ echo 455 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "htcheck.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "htcheck.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/ht-root.$(FASLEXT): ht-root.$(FASLEXT)
	@ echo 449 making ${AUTO}/ht-root.$(FASLEXT) from ht-root.$(FASLEXT)
	@ cp ht-root.$(FASLEXT) ${AUTO}

ht-root.clisp: ht-root.boot
	@ echo 451 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ht-root.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ht-root.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/htsetvar.$(FASLEXT): htsetvar.$(FASLEXT)
	@ echo 442 making ${AUTO}/htsetvar.$(FASLEXT) from htsetvar.$(FASLEXT)
	@ cp htsetvar.$(FASLEXT) ${AUTO}

htsetvar.clisp: htsetvar.boot
	@ echo 444 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "htsetvar.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "htsetvar.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/ht-util.$(FASLEXT): ht-util.$(FASLEXT)
	@ echo 438 making ${AUTO}/ht-util.$(FASLEXT) from ht-util.$(FASLEXT)
	@ cp ht-util.$(FASLEXT) ${AUTO}

ht-util.clisp: ht-util.boot
	@ echo 440 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "ht-util.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "ht-util.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


hypertex.clisp: hypertex.boot
	@ echo 277 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "hypertex.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "hypertex.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-analy.clisp: i-analy.boot
	@ echo 280 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-analy.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-analy.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-code.clisp: i-code.boot
	@ echo 283 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-code.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-code.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-coerce.clisp: i-coerce.boot
	@ echo 286 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-coerce.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-coerce.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-coerfn.clisp: i-coerfn.boot
	@ echo 289 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-coerfn.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-coerfn.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-eval.clisp: i-eval.boot
	@ echo 292 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-eval.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-eval.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-funsel.clisp: i-funsel.boot
	@ echo 295 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-funsel.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-funsel.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


bookvol5.lisp: $(srcdir)/bookvol5.pamphlet
	@ echo 298 making $@ from $<
	$(axiom_build_document) --tangle=Interpreter --output=$@ $<

i-intern.clisp: i-intern.boot
	@ echo 301 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-intern.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-intern.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


interop.clisp: interop.boot
	@ echo 587 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "interop.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "interop.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-map.clisp: i-map.boot
	@ echo 304 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-map.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-map.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/info.$(FASLEXT): info.$(FASLEXT)
	@ echo 327 making ${AUTO}/info.$(FASLEXT) from info.$(FASLEXT)
	@ cp info.$(FASLEXT) ${AUTO}

info.clisp: info.boot
	@ echo 329 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "info.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "info.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-output.clisp: i-output.boot
	@ echo 307 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-output.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-output.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


i-resolv.clisp: i-resolv.boot
	@ echo 310 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-resolv.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-resolv.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-spec1.clisp: i-spec1.boot
	@ echo 313 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-spec1.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-spec1.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-spec2.clisp: i-spec2.boot
	@ echo 316 making $@ from i-spec2.boot
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-spec2.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-spec2.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-syscmd.clisp: i-syscmd.boot
	@ echo 319 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-syscmd.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-syscmd.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/iterator.$(FASLEXT): iterator.$(FASLEXT)
	@ echo 331 making ${AUTO}/iterator.$(FASLEXT) from iterator.$(FASLEXT)
	@ cp iterator.$(FASLEXT) ${AUTO}

iterator.clisp: iterator.boot
	@ echo 333 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "iterator.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "iterator.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-toplev.clisp: i-toplev.boot
	@ echo 322 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-toplev.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-toplev.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


i-util.clisp: i-util.boot
	@ echo 325 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "i-util.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "i-util.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


lisplib.clisp: lisplib.boot
	@ echo 336 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "lisplib.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "lisplib.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/mark.$(FASLEXT): mark.clisp 
	$(COMPILE_LISP)

mark.clisp: mark.boot
	@ echo 605 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "mark.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "mark.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


match.clisp: match.boot
	@ echo 339 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "match.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "match.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/metalex.$(FASLEXT): metalex.$(FASLEXT)
	@ echo 66 making ${AUTO}/metalex.$(FASLEXT) from metalex.$(FASLEXT)
	@ cp metalex.$(FASLEXT) ${AUTO}


${AUTO}/metameta.$(FASLEXT): metameta.$(FASLEXT)
	@ echo 71 making ${AUTO}/metameta.$(FASLEXT) from metameta.$(FASLEXT)
	@ cp metameta.$(FASLEXT) ${AUTO}


${AUTO}/modemap.$(FASLEXT): modemap.$(FASLEXT)
	@ echo 341 making ${AUTO}/modemap.$(FASLEXT) from modemap.$(FASLEXT)
	@ cp modemap.$(FASLEXT) ${AUTO}

modemap.clisp: modemap.boot
	@ echo 343 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "modemap.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "modemap.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


msgdb.clisp: msgdb.boot
	@ echo 346 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "msgdb.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "msgdb.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/nag-c02.$(FASLEXT): nag-c02.$(FASLEXT)
	@ echo 150 making${AUTO}/nag-c02.$(FASLEXT) from nag-c02.$(FASLEXT)
	@ cp nag-c02.$(FASLEXT) ${AUTO}

nag-c02.clisp: nag-c02.boot
	@ echo 152 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-c02.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-c02.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/nag-c05.$(FASLEXT): nag-c05.$(FASLEXT)
	@ echo 154 making ${AUTO}/nag-c05.$(FASLEXT) from nag-c05.$(FASLEXT)
	@ cp nag-c05.$(FASLEXT) ${AUTO}

nag-c05.clisp: nag-c05.boot
	@ echo 156 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-c05.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-c05.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/nag-c06.$(FASLEXT): nag-c06.$(FASLEXT)
	@ echo 158 making${AUTO}/nag-c06.$(FASLEXT) from nag-c06.$(FASLEXT)
	@ cp nag-c06.$(FASLEXT) ${AUTO}

nag-c06.clisp: nag-c06.boot
	@ echo 160 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-c06.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-c06.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-d01.$(FASLEXT): nag-d01.$(FASLEXT)
	@ echo 162 making${AUTO}/nag-d01.$(FASLEXT) from nag-d01.$(FASLEXT)
	@ cp nag-d01.$(FASLEXT) ${AUTO}

nag-d01.clisp: nag-d01.boot
	@ echo 164 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-d01.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-d01.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-d02.$(FASLEXT): nag-d02.$(FASLEXT)
	@ echo 166 making${AUTO}/nag-d02.$(FASLEXT) from nag-d02.$(FASLEXT)
	@ cp nag-d02.$(FASLEXT) ${AUTO}

nag-d02.clisp: nag-d02.boot
	@ echo 168 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-d02.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-d02.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-d03.$(FASLEXT): nag-d03.$(FASLEXT)
	@ echo 170 making${AUTO}/nag-d03.$(FASLEXT) from nag-d03.$(FASLEXT)
	@ cp nag-d03.$(FASLEXT) ${AUTO}

nag-d03.clisp: nag-d03.boot
	@ echo 172 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-d03.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-d03.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-e01.$(FASLEXT): nag-e01.$(FASLEXT)
	@ echo 174 making ${AUTO}/nag-e01.$(FASLEXT) from nag-e01.$(FASLEXT)
	@ cp nag-e01.$(FASLEXT) ${AUTO}

nag-e01.clisp: nag-e01.boot
	@ echo 176 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-e01.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-e01.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-e02.$(FASLEXT): nag-e02.$(FASLEXT)
	@ echo 182 making ${AUTO}/nag-e02.$(FASLEXT) from nag-e02.$(FASLEXT)
	@ cp nag-e02.$(FASLEXT) ${AUTO}

nag-e02.clisp: nag-e02.boot
	@ echo 184 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-e02.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-e02.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-e04.$(FASLEXT): nag-e04.$(FASLEXT)
	@ echo 186 making ${AUTO}/nag-e04.$(FASLEXT) from nag-e04.$(FASLEXT)
	@ cp nag-e04.$(FASLEXT) ${AUTO}

nag-e04.clisp: nag-e04.boot
	@ echo 188 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-e04.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-e04.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-f01.$(FASLEXT): nag-f01.$(FASLEXT)
	@ echo 190 making ${AUTO}/nag-f01.$(FASLEXT) from nag-f01.$(FASLEXT)
	@ cp nag-f01.$(FASLEXT) ${AUTO}

nag-f01.clisp: nag-f01.boot
	@ echo 192 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f01.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f01.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-f02.$(FASLEXT): nag-f02.$(FASLEXT)
	@ echo 194 making ${AUTO}/nag-f02.$(FASLEXT) from nag-f02.$(FASLEXT)
	@ cp nag-f02.$(FASLEXT) ${AUTO}

nag-f02.clisp: nag-f02.boot
	@ echo 196 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f02.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f02.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-f04.$(FASLEXT): nag-f04.$(FASLEXT)
	@ echo 198 making ${AUTO}/nag-f04.$(FASLEXT) from nag-f04.$(FASLEXT)
	@ cp nag-f04.$(FASLEXT) ${AUTO}

nag-f04.clisp: nag-f04.boot
	@ echo 200 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f04.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f04.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/nag-f07.$(FASLEXT): nag-f07.$(FASLEXT)
	@ echo 202 making ${AUTO}/nag-f07.$(FASLEXT) from nag-f07.$(FASLEXT)
	@ cp nag-f07.$(FASLEXT) ${AUTO}

nag-f07.clisp: nag-f07.boot
	@ echo 204 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f07.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-f07.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/nag-s.$(FASLEXT): nag-s.$(FASLEXT)
	@ echo 206 making ${AUTO}/nag-s.$(FASLEXT) from nag-s.$(FASLEXT)
	@ cp nag-s.$(FASLEXT) ${AUTO}

nag-s.clisp: nag-s.boot
	@ echo 208 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-s.boot"))' | ${DEPSYS} ; \
	  else \
	    echo '(progn (boot::reroot "${AXIOM}") (boottran::boottocl "nag-s.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


newaux.${LISP}: newaux.lisp
	@ echo 80 making newaux.${LISP} from newaux.lisp
	@cp newaux.lisp newaux.${LISP}

newaux.lisp: $(srcdir)/newaux.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

newfort.clisp: newfort.boot
	@ echo 349 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "newfort.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "newfort.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/nruncomp.$(FASLEXT): nruncomp.$(FASLEXT)
	@ echo 351 making ${AUTO}/nruncomp.$(FASLEXT) from nruncomp.$(FASLEXT)
	@ cp nruncomp.$(FASLEXT) ${AUTO}

nruncomp.clisp: nruncomp.boot
	@ echo 353 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nruncomp.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nruncomp.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


nrunfast.clisp: nrunfast.boot
	@ echo 356 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrunfast.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrunfast.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


nrungo.clisp: nrungo.boot
	@ echo 359 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrungo.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrungo.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


nruntime.clisp: nruntime.boot
	@ echo 362 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nruntime.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nruntime.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


nrunopt.clisp: nrunopt.boot
	@ echo 365 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "nrunopt.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "nrunopt.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/nspadaux.$(FASLEXT): nspadaux.$(FASLEXT)
	@ echo 89 making ${AUTO}/nspadaux.$(FASLEXT) from nspadaux.$(FASLEXT)
	@ cp nspadaux.$(FASLEXT) ${AUTO}


${AUTO}/package.$(FASLEXT): package.$(FASLEXT)
	@ echo 370 making ${AUTO}/package.$(FASLEXT) from package.$(FASLEXT)
	@ cp package.$(FASLEXT) ${AUTO}

package.clisp: package.boot
	@ echo 372 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "package.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "package.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/parse.$(FASLEXT): parse.$(FASLEXT)
	@ echo 374 making ${AUTO}/parse.$(FASLEXT) from parse.$(FASLEXT)
	@ cp parse.$(FASLEXT) ${AUTO}

parse.clisp: $(srcdir)/parse.boot.pamphlet
	@ echo 376 making $@ from $<
	@ rm -f parse.$(FASLEXT)
	$(axiom_build_document) --tangle=parse.clisp --output=$@ $<
## FIXME: Temporily disabled.
# parse.clisp: $(srcdir)/parse.boot.pamphlet
# 	@ echo 377 making parse.clisp from $(srcdir)/parse.boot.pamphlet
# 	@ ($(axiom_build_document) --tangle --output=parse.boot $<;\
# 	  if [ -z "${NOISE}" ] ; then \
# 	   echo '(progn (boottran::boottocl "parse.boot"))' | ${DEPSYS} ; \
# 	  else \
# 	   echo '(progn (boottran::boottocl "parse.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
# 	  fi ; \
# 	  rm parse.boot )


${AUTO}/parsing.$(FASLEXT): parsing.$(FASLEXT)
	@ echo 94 making ${AUTO}/parsing.$(FASLEXT) from parsing.$(FASLEXT)
	@ cp parsing.$(FASLEXT) ${AUTO}


pathname.clisp: pathname.boot
	@ echo 380 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pathname.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pathname.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/postpar.$(FASLEXT): postpar.$(FASLEXT)
	@ echo 382 making ${AUTO}/postpar.$(FASLEXT) from postpar.$(FASLEXT)
	@ cp postpar.$(FASLEXT) ${AUTO}

postpar.clisp: $(srcdir)/postpar.boot.pamphlet
	@ echo 383 making $@ from $<
	@ rm -f postpar.$(FASLEXT)
	$(axiom_build_document) --tangle=postpar.clisp --output=$@ $<
## FIXME: temporarily commented
# postpar.clisp: $(srcdir)/postpar.boot.pamphlet
# 	@ echo 385 making postpar.clisp from $(srcdir)/postpar.boot.pamphlet
# 	@ ($(axiom_build_document) --tangle --output=postpar.boot $<;\
# 	  if [ -z "${NOISE}" ] ; then \
# 	   echo '(progn (boottran::boottocl "postpar.boot"))' | ${DEPSYS} ; \
# 	  else \
# 	   echo '(progn (boottran::boottocl "postpar.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
# 	  fi ; \
# 	  rm postpar.boot )


${AUTO}/postprop.$(FASLEXT): postprop.$(FASLEXT)
	@ echo 102 making $@ from $<
	@ cp $< ${AUTO}


${AUTO}/preparse.$(FASLEXT): preparse.$(FASLEXT)
	@ echo 106 making ${AUTO}/preparse.$(FASLEXT) from preparse.$(FASLEXT)
	@ cp preparse.$(FASLEXT) ${AUTO}


${AUTO}/profile.$(FASLEXT): profile.$(FASLEXT)
	@ echo 235 making ${AUTO}/profile.$(FASLEXT) from profile.$(FASLEXT)
	@ cp profile.$(FASLEXT) ${AUTO}

profile.clisp: profile.boot
	@ echo 237 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "profile.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "profile.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


${AUTO}/pspad1.$(FASLEXT): pspad1.clisp 
	$(COMPILE_LISP)

pspad1.clisp: pspad1.boot
	@ echo 599 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pspad1.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pspad1.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/pspad2.$(FASLEXT): pspad2.clisp 
	$(COMPILE_LISP)

pspad2.clisp: pspad2.boot
	@ echo 602 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "pspad2.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "pspad2.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


record.clisp: record.boot
	@ echo 447 making $@ $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "record.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "record.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


rulesets.clisp: rulesets.boot
	@ echo 388 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "rulesets.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "rulesets.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


server.clisp: server.boot
	@ echo 391 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "server.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "server.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


setvars.${LISP}: $(srcdir)/setvars.boot.pamphlet
	@ echo 393 making setvars.${LISP} from $(srcdir)/setvars.boot.pamphlet
	@ rm -f setvars.$(FASLEXT)
	$(axiom_build_document) --tangle=setvars.clisp --output=$@ S<
setvars.clisp: setvars.boot
	@ echo 395 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "setvars.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "setvars.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


setvart.clisp: setvart.boot
	@ echo 398 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "setvart.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "setvart.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/showimp.$(FASLEXT): showimp.$(FASLEXT)
	@ echo 579 making ${AUTO}/showimp.$(FASLEXT) from showimp.$(FASLEXT)
	@ cp showimp.$(FASLEXT) ${AUTO}


simpbool.clisp: simpbool.boot
	@ echo 401 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "simpbool.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "simpbool.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


template.clisp: template.boot
	@ echo 408 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "template.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "template.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


termrw.clisp: termrw.boot
	@ echo 411 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "termrw.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "termrw.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/topics.$(FASLEXT): topics.$(FASLEXT)
	@ echo 493 making ${AUTO}/topics.$(FASLEXT) from topics.$(FASLEXT)
	@ cp topics.$(FASLEXT) ${AUTO}

topics.clisp: topics.boot
	@ echo 495 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "topics.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "topics.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi 


trace.clisp: trace.boot
	@ echo 414 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "trace.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "trace.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


../algebra/warm.data: $(srcdir)/Makefile.pamphlet
	@ echo 2 building warm.data
	$(axiom_build_document) --tangle=warm.data --output=$@ $<


${AUTO}/wi1.$(FASLEXT): wi1.clisp 
	$(COMPILE_LISP)

wi1.clisp: wi1.boot
	@ echo 593 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "wi1.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "wi1.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/wi2.$(FASLEXT): wi2.clisp 
	$(COMPILE_LISP)

wi2.clisp: wi2.boot
	@ echo 596 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "wi2.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "wi2.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


xrun.clisp: xrun.boot
	@ echo 590 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "xrun.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "xrun.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


${AUTO}/xruncomp.$(FASLEXT): xruncomp.$(FASLEXT)
	@ echo 457 making ${AUTO}/xruncomp.$(FASLEXT) from xruncomp.$(FASLEXT)
	@ cp xruncomp.$(FASLEXT) ${AUTO}

xruncomp.clisp: xruncomp.boot
	@ echo 459 making $@ from $<
	@ if [ -z "${NOISE}" ] ; then \
	   echo '(progn (boottran::boottocl "xruncomp.boot"))' | ${DEPSYS} ; \
	  else \
	   echo '(progn (boottran::boottocl "xruncomp.boot"))' | ${DEPSYS} >> ${TMP}/trace ; \
	  fi


$(axiom_build_texdir)/diagrams.tex: $(axiom_src_docdir)/diagrams.tex
	$(INSTALL_DATA) $< $@

