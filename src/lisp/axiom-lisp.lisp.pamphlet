%% Oh Emacs, this is a -*- Lisp -*- file
\documentclass{article}
\usepackage{axiom}

\begin{document}
\title{axiom-lisp.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
This file contains portablity and support routines which abstract away
differences between Lisp dialects.
\end{abstract}
See LICENSE.AXIOM for Copyright
<<*>>=
(eval-when (:execute :compile-toplevel :load-toplevel)
(if (not (find-package "AXIOM-LISP"))
   (make-package "AXIOM-LISP" 
     :use (list (or (find-package "COMMON-LISP")
                    "LISP"))))) 

(in-package "AXIOM-LISP")
(do-symbols (x "AXIOM-LISP") (export (list x)))

(export '(quit chdir |getEnv| |load_quietly| get-current-directory
          axiom-probe-file trim-directory-name pad-directory-name))

#+:GCL
(progn
    (import '(LISP::LAMBDA-CLOSURE))
    (export '(LISP::LAMBDA-CLOSURE))
)

#+:sbcl
(progn
     (defvar *saved-terminal-io* *terminal-io*)
     (setf *terminal-io* (make-two-way-stream *standard-input*
                                             *standard-output*))
 )


;; Save current image on disk as executable and quit.
(defun save-core-restart (core-image restart)
#+:GCL
  (progn
     (if restart
          (setq system::*top-level-hook* restart))
     (system::save-system core-image))
#+:allegro
  (if restart
   (excl::dumplisp :name core-image :restart-function restart)
   (excl::dumplisp :name core-image))
#+Lucid
  (if restart
   (sys::disksave core-image :restart-function restart)
   (sys::disksave core-image))
#+:CCL
  (preserve)
#+:sbcl
  (if restart
      (sb-ext::save-lisp-and-die core-image :toplevel restart
         :executable t)
      (sb-ext::save-lisp-and-die core-image :executable t))
#+:clisp
  (if restart
     (ext::saveinitmem core-image :INIT-FUNCTION restart
         :executable t)
     (ext::saveinitmem core-image :executable t))
)

(defun save-core (core-image)
     (save-core-restart core-image nil))

;; Load Lisp files (any LOADable file), given as a list of file names.
;; The file names are strings, as approrpriate for LOAD.
(defun load-lisp-files (files)
  (mapcar #'(lambda (f) (load f)) files))

(defun make-program (core-image lisp-files)
  (load-lisp-files lisp-files)
  (save-core core-image))

;;; How to exit Lisp process
#+(and :gcl :common-lisp)
(defun quit() (lisp::quit))

#+:sbcl
(defun quit()
    (setf *terminal-io* *saved-terminal-io*)
    (sb-ext::quit))

#+:clisp
(defun quit() (ext::quit))

#+:poplog
(defun quit() (poplog::bye))

;;; Chdir function
#+:gcl
(defun chdir (dir)
 (system::chdir dir))

#+:sbcl
(require :sb-posix)
#+:sbcl
(defun chdir (dir)
 (let ((tdir (probe-file dir)))
  (cond
    (tdir
       #-:win32 (sb-posix::chdir tdir) 
       #+:win32 (setq *default-pathname-defaults* tdir))
     (t nil))))

#+(and :clisp (or :unix :win32))
(defun chdir (dir)
 (ext::cd dir))

;;; Environment access

(defun |getEnv| (var-name)
  #+:GCL (system::getenv var-name)
  #+:sbcl (sb-ext:posix-getenv var-name)
  #+:clisp (ext:getenv var-name)
  )

;;; Silent loading of files

(defun |load_quietly| (f)
    ;;; (format *error-output* "entred load_quietly ~&") 
    #-(or :GCL :CCL)
    (handler-bind ((warning #'muffle-warning))
                  (load f))
    #+(or :GCL :CCL)
    (load f)
    ;;; (format *error-output* "finished load_quietly ~&") 
)

;;; File and directory support
;;; First version contributed by Juergen Weiss.

(defun trim-directory-name (name)
    #+(or :unix :win32)
    (if (char= (char name (1- (length name))) #\/)
        (setf name (subseq name 0 (1- (length name)))))
    name)

(defun pad-directory-name (name)
   #+(or :unix :win32)
   (if (char= (char name (1- (length name))) #\/)
       name
       (concatenate 'string name "/")))
       
#+:cmu
(defun get-current-directory ()
  (namestring (extensions::default-directory)))

#+(or :akcl :gcl :sbcl :clisp)
(defun get-current-directory ()
    (trim-directory-name (namestring (truename ""))))

#+:poplog
(defun get-current-directory ()
   (let ((name (namestring (truename "."))))
        (trim-directory-name (subseq name 0 (1- (length name))))))



(defun axiom-probe-file (file)
#+:GCL (if (fboundp 'system::stat)
           ;;; gcl-2.6.8
           (and (system::stat file) (truename file))
           ;;; gcl-2.6.7
           (probe-file file))
#+:sbcl (if (sb-unix::unix-file-kind file) (truename file))
#+:clisp(let* ((fname (trim-directory-name (namestring file)))
               (dname (pad-directory-name fname)))
                 (or (ignore-errors (truename dname))
                     (ignore-errors (truename fname))))
         )



@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
