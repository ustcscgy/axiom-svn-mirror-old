%% Oh Emacs, this is a -*- Makefile -*-, so give me tabs.
\documentclass{article}
\usepackage{axiom}

\title{\File{src/lisp/Makefile}}
\author{The Axiom Team}

\begin{document}
\maketitle

\begin{abstract}
\end{abstract}
\eject

\tableofcontents
\eject

\section{The Makefile}

The purpose of this Makefile is to create a fresh Lisp image, [[$(OUT)/lisp]],
for use in make [[boot]].  To that end, it augments a existing Lisp
image, at the moment GCL, with some specific C-routines.

If GCL is not existing in the build environment, we build one and install
it a separate directory and carry on the build process has if it had 
existed.

\section{Configure and Make GCL}
We enable several features of GCL.
The [[--enable-readline]] uses GNU readline for the prompts. It has been
removed and replaced with clef which is Axiom's version of readline.
The [[--enable-maxpage]] is set to allow the image to grow 4 times
what it would by default.
The [[--enable-vssize]] allows virtual stack to grow by twice the normal size.
The [[--enable-statsysbfd]] uses a static system bfd library for loading and
relocating object files.

We would like to have the following done for all GCL (either built from Axiom 
sources or system-installed).
Finally we load some routines for performance reasons. [[lsp/sys-proclaim]]
contains common lisp proclaim statements for the various GCL lisp routines.
[[cmpnew/gcl_collectfn]] contains modifications to the common lisp compiler
to collect compile-time type information which will be written to [[.fn]]
files as common lisp structs. These [[.fn]] files can be loaded and turned
into common lisp proclaim statements which the compiler can use to generate
faster code, mostly fast-path function calls. The call to [[compiler::emit-fn]]
enables the [[.fn]] file generation whenever compile-file is called. We
default this code into the image so it is always avaiable.

\begin{verbatim}
	echo '(progn (load "cmpnew/gcl_collectfn.lsp")' \
		   ' (load "lsp/sys-proclaim.lisp")' \
		   ' (compiler::emit-fn t)' \
                   ' (system::save-system "${OUT}/lisp"))' \
             | $(GCL))
\end{verbatim}

\section{The Makefile}

\subsection{GCL already installed or built}

<<build augmented lisp>>=

lisp_flavor=@axiom_lisp_flavor@

## Create a fresh image for building interpsys and AXIOMsys
## These objects files are the C runtime support
## and must be compiled into the Lisp image,
## as they must be present in the final interpreter
## and image.
## Use $(BASE) because Lisp (gcl) is native on Windows
lisp_c_objects = \
		$(BASE)$(build_libdir)/bsdsignal.o \
		$(BASE)$(build_libdir)/cfuns-c.o \
		$(BASE)$(build_libdir)/sockio-c.o

$(OUT)/lisp$(EXEEXT): do_it.$(lisp_flavor)

do_it.gcl: axiom-lisp.lisp axiom-package.lisp
	@axiom_gcl_rsym_hack@
	echo '(load "axiom-package.lisp")' \
	     '(setq compiler::*default-system-p* t)' \
	     '(compile-file "axiom-lisp.lisp")' | $(AXIOM_LISP)
	echo '(compiler::link nil "prelisp" ' \
              ' (format nil "(progn (let ((*load-path* (cons ~S *load-path*))'\
                                        ' (si::*load-types* ~S))' \
                                       ' (compiler::emit-fn t))' \
                                  ' (when (fboundp (quote si::sgc-on))' \
                                        ' (si::sgc-on t))' \
                                  ' (setq compiler::*default-system-p* t))"' \
                      ' si::*system-directory* (quote (list ".lsp")))' \
               '  "$(lisp_c_objects) @axiom_c_runtime_extra@")' \
            | $(AXIOM_LISP)
	echo '(load "axiom-package.lisp") (load "axiom-lisp.$(OBJEXT)")' \
	     '(in-package "AXIOM-LISP") (save-core "lisp$(EXEEXT)")' \
	    | ./prelisp$(EXEEXT)
	$(INSTALL_PROGRAM) lisp$(EXEEXT) $(OUT)
	$(STAMP) $@

axiom-lisp.lisp: $(srcdir)/axiom-lisp.lisp.pamphlet
	$(axiom_build_document) --tangle $< --output=$@

axiom-package.lisp: $(srcdir)/axiom-lisp.lisp.pamphlet
	$(axiom_build_document) --tangle=axiom-package.lisp --output=$@ $<

do_it.sbcl do_it.clisp do_it.openmcl: axiom-lisp.lisp axiom-package.lisp
	echo '(load "axiom-package.lisp")' \
	    '(load (compile-file "axiom-lisp.lisp"))' \
            '(in-package "AXIOM-LISP") (save-core "${OUT}/lisp")' \
         | $(AXIOM_LISP)
	 $(STAMP) $@

@

<<*>>=
OUT = $(axiom_build_bindir)

subdir = src/lisp/

pamphlets = Makefile.pamphlet

build_libdir = $(abs_top_builddir)/src/lib

lisp_DEPENDENCIES = $(build_libdir)/cfuns-c.o \
		    $(build_libdir)/sockio-c.o \
		    $(build_libdir)/libspad.a

.PHONY: all all-lisp
all: all-ax all-lisp

all-ax all-lisp: $(OUT)/lisp$(EXEEXT)

<<build augmented lisp>>

# Build GCL takes quite a while, so we don't remove the
# diretcory in mostlyclean.  Rather, we do that in clean.
mostlyclean-local:

clean-local: mostlyclean
	-rm -f $(OUT)/lisp$(EXEEXT)

distclean-local: clean-local
	-rm -f Makefile
@

\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
