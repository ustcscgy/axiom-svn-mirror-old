\documentclass{article}
\usepackage{../../../../src/scripts/tex/axiom}
\begin{document}
\title{\$SPAD/lsp/ccl/src/util/ Makefile}
\author{Arthur Norman}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{How compiling works}
\subsection{The general flow of files}

Every Makefile in the source tree defines (at least) 3 virtual
directory names. These are {\bf IN}, {\bf MID}, and {\bf OUT}.

<<virtual directories>>=
IN=${LSP}/ccl/src/util
MID=${INT}/ccl/util
OUT=${OBJ}/${SYS}/ccl/util
DOC=${INT}/doc/lsp/ccl/src/util

@

The {\bf IN} directory will tell us where the human generated
source files live. Everything derives from them so any changes
in the {\bf IN} directory will cascade to changes in the other
directories. 

The {\bf MID} directory is used for caching work and as
temporary work space for programs. 

The {\bf OUT} directory is used for the final location of the
work done by this Makefile. 

The basic method of working is to modify the pamphlet file,
change to the top level directory \$SPAD and type:

{\bf make}

Stanzas within the Makefile are arranged in groups. Each group
usually consists of four stanzas, the first will generate the
final output if the cached version of the file has changed. The
second will regenerate the cached version if the original source
file has changed. Thus we "pull" changes thru the tree and any
change to the source will cause that change to be pulled into
the final output. We will go over the two stanzas in a group
in detail to show how to read the Makefile. The third stanza
generates the tex and dvi files from the pamphlet files. The
fourth stanza cleans up the generated files.

\subsection{car.c \cite{1}}
\subsubsection{Deriving a source file from a pamphlet}

The goal is to generate the C file from the pamphlet file.

As mentioned, the {\bf MID} directory is used for caching work and as
temporary work space for programs. In this case we are generating
the C files from the pamphlet files by machine and these C files
are machine-independent. Thus the result of this work will be
cached in the {\bf \$SPAD/int} subtree. In particular, because
they are in the ccl/util subdirectory they will end up in the
\$SPAD/int/ccl/util subdirectory.

The following stanza can be read in English as:
\begin{verbatim}

 If the car.c file in the MID subdirectory: 
             is OLDER than the car.c.pamphlet in the IN subdirectory
    then run untangle on the pamphlet file to recreate the car.c file

\end{verbatim}

<<car.c (MID from IN)>>=
${MID}/car.c: ${IN}/car.c.pamphlet
	@echo 1 making ${MID}/car.c from ${IN}/car.c.pamphlet
	@${TANGLE} car.c.pamphlet >${MID}/car.c

@

\subsubsection{Compiling a source file to a command}

The goal is to generate the final executable from the C file.

As mentioned, the {\bf OUT} directory is used for the final location of the
work done by this Makefile. In this case we are generating the final
commands from the C files by machine and these commands are 
machine-dependent. Thus the result of this work will be in the 
{\bf \$SPAD/obj} subtree. In particular, because they are machine-dependent
and specific to Linux they will be in the \$SPAD/obj/linux/ccl/util
subdirectory.

The following stanza can be read in English as:
\begin{verbatim}

 If the car file in the OUT subdirectory: 
             is OLDER than the car.c in the MID subdirectory
    then cd to the OUT subdirectory (gcc will write tmp files here)
     and run gcc on the car.c file to generate the car file.
     and run strip to remove the symbol table.

\end{verbatim}

<<car (OUT from MID)>>=
${OUT}/car: ${MID}/patmatch.h ${MID}/sys.h ${MID}/car.c
	@echo 2 making ${OUT}/car from ${MID}/car.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/car.c -o car ; \
	strip car )

@

\subsubsection{Generating a dvi document}

The goal is to generate a tex and dvi file from the pamphlet file.

<<car.c.dvi (DOC from IN)>>=
${DOC}/car.c.dvi: ${IN}/car.c.pamphlet
	@echo 3 making ${DOC}/car.c.dvi from ${IN}/car.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/car.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} car.c ; \
	rm -f ${DOC}/car.c.pamphlet ; \
	rm -f ${DOC}/car.c.tex ; \
	rm -f ${DOC}/car.c )

@

\subsubsection{Cleaning up}
We clean up the noise but leave the executable. We also leave the
files built in {\bf \${MID}} as these are cached work. Until there
is a change in the {\bf \${IN}} files there is no reason to rebuild
them. This is a significant time saving.

Note that if we want to 
really clean up the system the top level make can destroy the
whole {\bf int}, {\bf obj}, and {\bf mnt} subdirectories.

\section{Environment Variables}
We don't need any additional environment variables
<<Environment Variables>>=
@

\section{Makefile comments}

Comments in Makefiles are of the form:

\# YYYYMMDDxxx III where the YYYY is the year, MM is the month, 
DD is the day and xxx is a unique number within the day. III are
your initials.

<<comments>>=
# 20021027000 tpd finished conversion to pamphlet form
# 20021027000 tpd make the sources in ${MID}
# 20021024000 tpd make out depend on ${SYS}
# 20021010000 tpd created

@
\section{Commands generated}

This Makefile is responsible for generating the following set of commands:

<<targets>>=
UTILS=	${OUT}/car \
	${OUT}/checksum \
	${OUT}/diff \
	${OUT}/du \
	${OUT}/excar \
	${OUT}/export \
	${OUT}/filesign \
	${OUT}/makemake \
	${OUT}/shar \
	${OUT}/unshar \
	${OUT}/uudecode \
	${OUT}/uuencode 

@

Each command is briefly explained here but the focus is on understanding
any special handling that this Makefile must undertake. If you want to
understand what a particular command actually does see the pamphlet
file for the source code.

\subsection{checksum.c \cite{2}}

<<checksum.c (MID from IN)>>=
${MID}/checksum.c: ${IN}/checksum.c.pamphlet
	@echo 4 making ${MID}/checksum.c from ${IN}/checksum.c.pamphlet
	@${TANGLE} checksum.c.pamphlet >${MID}/checksum.c

@

<<checksum (OUT from MID)>>=
${OUT}/checksum: ${MID}/checksum.c
	@echo 5 making ${OUT}/checksum from ${MID}/checksum.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/checksum.c ; \
	gcc  -o checksum checksum.o -lm ; \
	strip checksum )

@

<<checksum.c.dvi (DOC from IN)>>=
${DOC}/checksum.c.dvi: ${IN}/checksum.c.pamphlet
	@echo 6 making ${DOC}/checksum.c.dvi from ${IN}/checksum.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/checksum.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} checksum.c ; \
	rm -f ${DOC}/checksum.c.pamphlet ; \
	rm -f ${DOC}/checksum.c.tex ; \
	rm -f ${DOC}/checksum.c )

@

\subsection{diff.c \cite{3}}
<<diff.c (MID from IN)>>=
${MID}/diff.c: ${IN}/diff.c.pamphlet
	@echo 7 making ${MID}/diff.c from ${IN}/diff.c.pamphlet
	@${TANGLE} diff.c.pamphlet >${MID}/diff.c

@

<<diff (OUT from MID)>>=
${OUT}/diff: ${MID}/diff.c
	@echo 8 making ${OUT}/diff from ${MID}/diff.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/diff.c ; \
	gcc -o diff diff.o -lm ; \
	strip diff )

@

<<diff.c.dvi (DOC from IN)>>=
${DOC}/diff.c.dvi: ${IN}/diff.c.pamphlet
	@echo 9 making ${DOC}/diff.c.dvi from ${IN}/diff.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/diff.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} diff.c ; \
	rm -f ${DOC}/diff.c.pamphlet ; \
	rm -f ${DOC}/diff.c.tex ; \
	rm -f ${DOC}/diff.c )

@

\subsection{du.c \cite{4}}
<<du.c (MID from IN)>>=
${MID}/du.c: ${IN}/du.c.pamphlet
	@echo 10 making ${MID}/du.c from ${IN}/du.c.pamphlet
	@${TANGLE} du.c.pamphlet >${MID}/du.c

@

Note that du depends on scandir.

<<du (OUT from MID)>>=
${OUT}/du: ${MID}/scandir.h ${MID}/sysopt.h ${OUT}/scandir.o ${MID}/du.c 
	@echo 11 making ${OUT}/du from ${MID}/du.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/du.c ; \
	gcc -o du du.o scandir.o ; \
	strip du )

@

<<du.c.dvi (DOC from IN)>>=
${DOC}/du.c.dvi: ${IN}/du.c.pamphlet
	@echo 12 making ${DOC}/du.c.dvi from ${IN}/du.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/du.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} du.c ; \
	rm -f ${DOC}/du.c.pamphlet ; \
	rm -f ${DOC}/du.c.tex ; \
	rm -f ${DOC}/du.c )

@

\subsection{dups.c \cite{5}}

Note that dups is not currently used but the documentation can
be created.

<<dups.c.dvi (DOC from IN)>>=
${DOC}/dups.c.dvi: ${IN}/dups.c.pamphlet
	@echo 13 making ${DOC}/dups.c.dvi from ${IN}/dups.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/dups.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} dups.c ; \
	rm -f ${DOC}/dups.c.pamphlet ; \
	rm -f ${DOC}/dups.c.tex ; \
	rm -f ${DOC}/dups.c )

@

\subsection{excar.c \cite{6}}
Note that we added the extra flag -DEXTRACT=1
Setting this flag causes the car.c input source to execute
code for excar.c. As a consequence there is no excar.c.pamphlet
file. We use the car.c.pamphlet file instead.

Note that excar depends on fileops.

<<excar (OUT from MID)>>=
${OUT}/excar: ${OUT}/fileops.o ${MID}/car.c 
	@echo 14 making ${OUT}/excar from ${MID}/excar.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi  -o excar.o -DEXTRACT=1 -I${MID} ${MID}/car.c ; \
	gcc -o excar excar.o fileops.o -lm ; \
	strip excar )

@

\subsection{export.c \cite{7}}
<<export.c (MID from IN)>>=
${MID}/export.c: ${IN}/export.c.pamphlet
	@echo 19 making ${MID}/export.c from ${IN}/export.c.pamphlet
	@${TANGLE} export.c.pamphlet >${MID}/export.c

@

Note that export depends on fileops, patmatch, and scandir.

<<export (OUT from MID)>>=
${OUT}/export: ${MID}/patmatch.h ${MID}/sys.h ${OUT}/scandir.o \
	${OUT}/patmatch.o ${OUT}/fileops.o ${MID}/export.c
	@echo 16 making ${OUT}/export from ${MID}/export.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/export.c ; \
	gcc -o export export.o scandir.o fileops.o patmatch.o ; \
	strip export )

@

<<export.c.dvi (DOC from IN)>>=
${DOC}/export.c.dvi: ${IN}/export.c.pamphlet
	@echo 17 making ${DOC}/export.c.dvi from ${IN}/export.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/export.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} export.c ; \
	rm -f ${DOC}/export.c.pamphlet ; \
	rm -f ${DOC}/export.c.tex ; \
	rm -f ${DOC}/export.c )

@

\subsection{fileops.c \cite{8}}
Fileops is not one of the target commands. It contains support code
for excar, export, and shar.
<<fileops.c (MID from IN)>>=
${MID}/fileops.c: ${IN}/fileops.c.pamphlet
	@echo 19 making ${MID}/fileops.c from ${IN}/fileops.c.pamphlet
	@${TANGLE} fileops.c.pamphlet >${MID}/fileops.c

@

<<fileops (OUT from MID)>>=
${OUT}/fileops.o: ${MID}/sys.h ${MID}/fileops.c
	@echo 18 making ${OUT}/fileops.o from ${MID}/fileops.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/fileops.c ; )

@

<<fileops.c.dvi (DOC from IN)>>=
${DOC}/fileops.c.dvi: ${IN}/fileops.c.pamphlet
	@echo 20 making ${DOC}/fileops.c.dvi from ${IN}/fileops.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/fileops.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fileops.c ; \
	rm -f ${DOC}/fileops.c.pamphlet ; \
	rm -f ${DOC}/fileops.c.tex ; \
	rm -f ${DOC}/fileops.c )

@

\subsection{filesign.c \cite{9}}
<<filesign.c (MID from IN)>>=
${MID}/filesign.c: ${IN}/filesign.c.pamphlet
	@echo 21 making ${MID}/filesign.c from ${IN}/filesign.c.pamphlet
	@${TANGLE} filesign.c.pamphlet >${MID}/filesign.c

@

Note that filesign depends on scandir.

<<filesign (OUT from MID)>>=
${OUT}/filesign: ${MID}/sys.h ${OUT}/scandir.o ${MID}/filesign.c 
	@echo 22 making ${OUT}/filesign from ${MID}/filesign.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/filesign.c ; \
	gcc -o filesign filesign.o scandir.o ; \
	strip filesign )

@

<<filesign.c.dvi (DOC from IN)>>=
${DOC}/filesign.c.dvi: ${IN}/filesign.c.pamphlet
	@echo 23 making ${DOC}/filesign.c.dvi from ${IN}/filesign.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/filesign.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} filesign.c ; \
	rm -f ${DOC}/filesign.c.pamphlet ; \
	rm -f ${DOC}/filesign.c.tex ; \
	rm -f ${DOC}/filesign.c )

@

\subsection{fwdslash.c \cite{10}}
Note that fwdslash is not currently used but the documentation can
be created.

<<fwdslash.c.dvi (DOC from IN)>>=
${DOC}/fwdslash.c.dvi: ${IN}/fwdslash.c.pamphlet
	@echo 24 making ${DOC}/fwdslash.c.dvi from ${IN}/fwdslash.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/fwdslash.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fwdslash.c ; \
	rm -f ${DOC}/fwdslash.c.pamphlet ; \
	rm -f ${DOC}/fwdslash.c.tex ; \
	rm -f ${DOC}/fwdslash.c )

@

\subsection{getopt.c \cite{11}}
Getopt is not one of the target commands. It contains support code
for du, export, filesign, and shar.

Note that unshar.c includes the {\bf source} version of getopt.c
rather than linking with the object file. Thus we do not need to
compile getopt.c.
<<getopt.c (MID from IN)>>=
${MID}/getopt.c: ${IN}/getopt.c.pamphlet
	@echo 25 making ${MID}/getopt.c from ${IN}/getopt.c.pamphlet
	@${TANGLE} getopt.c.pamphlet >${MID}/getopt.c

@

<<getopt.c.dvi (DOC from IN)>>=
${DOC}/getopt.c.dvi: ${IN}/getopt.c.pamphlet
	@echo 26 making ${DOC}/getopt.c.dvi from ${IN}/getopt.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/getopt.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} getopt.c ; \
	rm -f ${DOC}/getopt.c.pamphlet ; \
	rm -f ${DOC}/getopt.c.tex ; \
	rm -f ${DOC}/getopt.c )

@

\subsection{longline.c \cite{12}}
Note that longline.c is not currently used but the documentation can
be created.

<<longline.c.dvi (DOC from IN)>>=
${DOC}/longline.c.dvi: ${IN}/longline.c.pamphlet
	@echo 27 making ${DOC}/longline.c.dvi from ${IN}/longline.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/longline.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} longline.c ; \
	rm -f ${DOC}/longline.c.pamphlet ; \
	rm -f ${DOC}/longline.c.tex ; \
	rm -f ${DOC}/longline.c )

@

\subsection{lpr.c \cite{13}}
Note that lpr.c is not currently used but the documentation can
be created.

<<lpr.c.dvi (DOC from IN)>>=
${DOC}/lpr.c.dvi: ${IN}/lpr.c.pamphlet
	@echo 28 making ${DOC}/lpr.c.dvi from ${IN}/lpr.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/lpr.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lpr.c ; \
	rm -f ${DOC}/lpr.c.pamphlet ; \
	rm -f ${DOC}/lpr.c.tex ; \
	rm -f ${DOC}/lpr.c )

@

\subsection{ls.c \cite{14}}
Note that ls.c is not currently used but the documentation can
be created.

<<ls.c.dvi (DOC from IN)>>=
${DOC}/ls.c.dvi: ${IN}/ls.c.pamphlet
	@echo 29 making ${DOC}/ls.c.dvi from ${IN}/ls.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/ls.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ls.c ; \
	rm -f ${DOC}/ls.c.pamphlet ; \
	rm -f ${DOC}/ls.c.tex ; \
	rm -f ${DOC}/ls.c )

@

\subsection{makemake.c \cite{15}}
<<makemake.c (MID from IN)>>=
${MID}/makemake.c: ${IN}/makemake.c.pamphlet
	@echo 30 making ${MID}/makemake.c from ${IN}/makemake.c.pamphlet
	@${TANGLE} makemake.c.pamphlet >${MID}/makemake.c

@

<<makemake (OUT from MID)>>=
${OUT}/makemake: ${MID}/makemake.c
	@echo 31 making ${OUT}/makemake from ${MID}/makemake.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/makemake.c ; \
	gcc -o makemake makemake.o -lm ; \
	cp ${MID}/makebase ${OUT} ; \
	strip makemake )

@

<<makemake.c.dvi (DOC from IN)>>=
${DOC}/makemake.c.dvi: ${IN}/makemake.c.pamphlet
	@echo 32 making ${DOC}/makemake.c.dvi from ${IN}/makemake.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/makemake.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} makemake.c ; \
	rm -f ${DOC}/makemake.c.pamphlet ; \
	rm -f ${DOC}/makemake.c.tex ; \
	rm -f ${DOC}/makemake.c )

@

\subsection{names.sh \cite{16}}
Note that names.sh is not currently used but the documentation can
be created.

<<names.sh.dvi (DOC from IN)>>=
${DOC}/names.sh.dvi: ${IN}/names.sh.pamphlet
	@echo 33 making ${DOC}/names.sh.dvi from ${IN}/names.sh.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/names.sh.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} names.sh ; \
	rm -f ${DOC}/names.sh.pamphlet ; \
	rm -f ${DOC}/names.sh.tex ; \
	rm -f ${DOC}/names.sh )

@

\subsection{nsort.c \cite{17}}
Note that nsort.c is not currently used but the documentation can
be created.

<<nsort.c.dvi (DOC from IN)>>=
${DOC}/nsort.c.dvi: ${IN}/nsort.c.pamphlet
	@echo 34 making ${DOC}/nsort.c.dvi from ${IN}/nsort.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/nsort.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nsort.c ; \
	rm -f ${DOC}/nsort.c.pamphlet ; \
	rm -f ${DOC}/nsort.c.tex ; \
	rm -f ${DOC}/nsort.c )

@

\subsection{patmatch.c \cite{18}}
Patmatch is not one of the target commands. It contains support code
for export.
<<patmatch.c (MID from IN)>>=
${MID}/patmatch.c: ${MID}/patmatch.h ${IN}/patmatch.c.pamphlet
	@echo 35 making ${MID}/patmatch.c from ${IN}/patmatch.c.pamphlet
	@${TANGLE} patmatch.c.pamphlet >${MID}/patmatch.c

@

<<patmatch (OUT from MID)>>=
${OUT}/patmatch.o: ${MID}/sys.h ${MID}/patmatch.c
	@echo 36 making ${OUT}/patmatch.o from ${MID}/patmatch.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/patmatch.c ; )

@

<<patmatch.c.dvi (DOC from IN)>>=
${DOC}/patmatch.c.dvi: ${IN}/patmatch.c.pamphlet
	@echo 37 making ${DOC}/patmatch.c.dvi from ${IN}/patmatch.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/patmatch.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} patmatch.c ; \
	rm -f ${DOC}/patmatch.c.pamphlet ; \
	rm -f ${DOC}/patmatch.c.tex ; \
	rm -f ${DOC}/patmatch.c )

@

\subsection{patmatch.h \cite{19}}
<<patmatch.h (MID from IN)>>=
${MID}/patmatch.h: ${IN}/patmatch.h.pamphlet
	@echo 38 making ${MID}/patmatch.h from ${IN}/patmatch.h.pamphlet
	@${TANGLE} patmatch.h.pamphlet >${MID}/patmatch.h

@

<<patmatch.h.dvi (DOC from IN)>>=
${DOC}/patmatch.h.dvi: ${IN}/patmatch.h.pamphlet
	@echo 39 making ${DOC}/patmatch.h.dvi from ${IN}/patmatch.h.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/patmatch.h.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} patmatch.h ; \
	rm -f ${DOC}/patmatch.h.pamphlet ; \
	rm -f ${DOC}/patmatch.h.tex ; \
	rm -f ${DOC}/patmatch.h )

@

\subsection{scandir.c \cite{20}}
Scandir is not one of the target commands. It contains support code
for du, export, filesign, and shar.

<<scandir.c (MID from IN)>>=
${MID}/scandir.c: ${IN}/scandir.c.pamphlet
	@echo 40 making ${MID}/scandir.c from ${IN}/scandir.c.pamphlet
	@${TANGLE} scandir.c.pamphlet >${MID}/scandir.c

@

Note that the -DTPD flag has been added to this compile.
There was a flag in linux/stat.h called S\_IFMT which we needed.
This could have been caused by a change in RedHat 8 Linux.

<<scandir (OUT from MID)>>=
${OUT}/scandir.o: ${MID}/sys.h ${MID}/scandir.c
	@echo 41 making ${OUT}/scandir.o from ${MID}/scandir.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -DTPD -I${MID} ${MID}/scandir.c ; )

@

<<scandir.c.dvi (DOC from IN)>>=
${DOC}/scandir.c.dvi: ${IN}/scandir.c.pamphlet
	@echo 42 making ${DOC}/scandir.c.dvi from ${IN}/scandir.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/scandir.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} scandir.c ; \
	rm -f ${DOC}/scandir.c.pamphlet ; \
	rm -f ${DOC}/scandir.c.tex ; \
	rm -f ${DOC}/scandir.c )

@

\subsection{scandir.h \cite{21}}
<<scandir.h (MID from IN)>>=
${MID}/scandir.h: ${IN}/scandir.h.pamphlet
	@echo 43 making ${MID}/scandir.h from ${IN}/scandir.h.pamphlet
	@${TANGLE} scandir.h.pamphlet >${MID}/scandir.h

@

<<scandir.h.dvi (DOC from IN)>>=
${DOC}/scandir.h.dvi: ${IN}/scandir.h.pamphlet
	@echo 44 making ${DOC}/scandir.h.dvi from ${IN}/scandir.h.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/scandir.h.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} scandir.h ; \
	rm -f ${DOC}/scandir.h.pamphlet ; \
	rm -f ${DOC}/scandir.h.tex ; \
	rm -f ${DOC}/scandir.h )

@

\subsection{sevenbit.c \cite{22}}

The sevenbit.c code is not used by the documentation can  be generated.

<<sevenbit.c.dvi (DOC from IN)>>=
${DOC}/sevenbit.c.dvi: ${IN}/sevenbit.c.pamphlet
	@echo 45 making ${DOC}/sevenbit.c.dvi from ${IN}/sevenbit.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/sevenbit.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sevenbit.c ; \
	rm -f ${DOC}/sevenbit.c.pamphlet ; \
	rm -f ${DOC}/sevenbit.c.tex ; \
	rm -f ${DOC}/sevenbit.c )

@

\subsection{shar.c \cite{23}}
<<shar.c (MID from IN)>>=
${MID}/shar.c: ${IN}/shar.c.pamphlet
	@echo 46 making ${MID}/shar.c from ${IN}/shar.c.pamphlet
	@${TANGLE} shar.c.pamphlet >${MID}/shar.c

@
<<shar (OUT from MID)>>=
${OUT}/shar: ${MID}/scandir.h ${MID}/sysopt.h ${OUT}/scandir.o \
	     ${OUT}/fileops.o ${MID}/shar.c 
	@echo 47 making ${OUT}/shar from ${MID}/shar.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/shar.c ; \
	gcc -o shar shar.o scandir.o fileops.o ; \
	strip shar )

@

<<shar.c.dvi (DOC from IN)>>=
${DOC}/shar.c.dvi: ${IN}/shar.c.pamphlet
	@echo 48 making ${DOC}/shar.c.dvi from ${IN}/shar.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/shar.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} shar.c ; \
	rm -f ${DOC}/shar.c.pamphlet ; \
	rm -f ${DOC}/shar.c.tex ; \
	rm -f ${DOC}/shar.c )

@

\subsection{sys.h \cite{24}}
<<sys.h (MID from IN)>>=
${MID}/sys.h: ${MID}/unix.h ${IN}/sys.h.pamphlet
	@echo 49 making ${MID}/sys.h from ${IN}/sys.h.pamphlet
	@${TANGLE} sys.h.pamphlet >${MID}/sys.h

@

<<sys.h.dvi (DOC from IN)>>=
${DOC}/sys.h.dvi: ${IN}/sys.h.pamphlet
	@echo 50 making ${DOC}/sys.h.dvi from ${IN}/sys.h.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/sys.h.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sys.h ; \
	rm -f ${DOC}/sys.h.pamphlet ; \
	rm -f ${DOC}/sys.h.tex ; \
	rm -f ${DOC}/sys.h )

@

\subsection{sysopt.h \cite{25}}
<<sysopt.h (MID from IN)>>=
${MID}/sysopt.h: ${MID}/unix.h ${IN}/sysopt.h.pamphlet
	@echo 51 making ${MID}/sysopt.h from ${IN}/sysopt.h.pamphlet
	@${TANGLE} sysopt.h.pamphlet >${MID}/sysopt.h

@
    
<<sysopt.h.dvi (DOC from IN)>>=
${DOC}/sysopt.h.dvi: ${IN}/sysopt.h.pamphlet
	@echo 52 making ${DOC}/sysopt.h.dvi from ${IN}/sysopt.h.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/sysopt.h.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sysopt.h ; \
	rm -f ${DOC}/sysopt.h.pamphlet ; \
	rm -f ${DOC}/sysopt.h.tex ; \
	rm -f ${DOC}/sysopt.h )

@

\subsection{tolower.c \cite{26}}

<<tolower.c.dvi (DOC from IN)>>=
${DOC}/tolower.c.dvi: ${IN}/tolower.c.pamphlet
	@echo 53 making ${DOC}/tolower.c.dvi from ${IN}/tolower.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/tolower.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} tolower.c ; \
	rm -f ${DOC}/tolower.c.pamphlet ; \
	rm -f ${DOC}/tolower.c.tex ; \
	rm -f ${DOC}/tolower.c )

@

\subsection{unix.h \cite{27}}
<<unix.h (MID from IN)>>=
${MID}/unix.h: ${IN}/unix.h.pamphlet
	@echo 54 making ${MID}/unix.h from ${IN}/unix.h.pamphlet
	@${TANGLE} unix.h.pamphlet >${MID}/unix.h

@

<<unix.h.dvi (DOC from IN)>>=
${DOC}/unix.h.dvi: ${IN}/unix.h.pamphlet
	@echo 55 making ${DOC}/unix.h.dvi from ${IN}/unix.h.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/unix.h.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} unix.h ; \
	rm -f ${DOC}/unix.h.pamphlet ; \
	rm -f ${DOC}/unix.h.tex ; \
	rm -f ${DOC}/unix.h )

@

\subsection{unshar \cite{28}}
Note that unshar.c includes the {\bf source} version of getopt.c
rather than linking with the object file. 
<<unshar.c (MID from IN)>>=
${MID}/unshar.c: ${MID}/getopt.c ${IN}/unshar.c.pamphlet
	@echo 56 making ${MID}/unshar.c from ${IN}/unshar.c.pamphlet
	@${TANGLE} unshar.c.pamphlet >${MID}/unshar.c

@

<<unshar (OUT from MID)>>=
${OUT}/unshar: ${MID}/unshar.c
	@echo 57 making ${OUT}/unshar from ${MID}/unshar.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/unshar.c ; \
	gcc -o unshar unshar.o -lm ; \
	strip unshar )

@

<<unshar.c.dvi (DOC from IN)>>=
${DOC}/unshar.c.dvi: ${IN}/unshar.c.pamphlet
	@echo 58 making ${DOC}/unshar.c.dvi from ${IN}/unshar.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/unshar.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} unshar.c ; \
	rm -f ${DOC}/unshar.c.pamphlet ; \
	rm -f ${DOC}/unshar.c.tex ; \
	rm -f ${DOC}/unshar.c )

@

\subsection{uudecode \cite{29}}
<<uudecode.c (MID from IN)>>=
${MID}/uudecode.c: ${IN}/uudecode.c.pamphlet
	@echo 59 making ${MID}/uudecode.c from ${IN}/uudecode.c.pamphlet
	@${TANGLE} uudecode.c.pamphlet >${MID}/uudecode.c

@

<<uudecode (OUT from MID)>>=
${OUT}/uudecode: ${MID}/uudecode.c
	@echo 60 making ${OUT}/uudecode from ${MID}/uudecode.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/uudecode.c ; \
	gcc -o uudecode uudecode.o -lm ; \
	strip uudecode )

@

<<uudecode.c.dvi (DOC from IN)>>=
${DOC}/uudecode.c.dvi: ${IN}/uudecode.c.pamphlet
	@echo 61 making ${DOC}/uudecode.c.dvi from ${IN}/uudecode.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/uudecode.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} uudecode.c ; \
	rm -f ${DOC}/uudecode.c.pamphlet ; \
	rm -f ${DOC}/uudecode.c.tex ; \
	rm -f ${DOC}/uudecode.c )

@

\subsection{uuencode \cite{30}}
<<uuencode.c (MID from IN)>>=
${MID}/uuencode.c: ${IN}/uuencode.c.pamphlet
	@echo 62 making ${MID}/uuencode.c from ${IN}/uuencode.c.pamphlet
	@${TANGLE} uuencode.c.pamphlet >${MID}/uuencode.c

@

<<uuencode (OUT from MID)>>=
${OUT}/uuencode: ${MID}/uuencode.c
	@echo 63 making ${OUT}/uuencode from ${MID}/uuencode.c
	@( cd ${OUT} ; \
	gcc -c -O2 -ansi -I${MID} ${MID}/uuencode.c ; \
	gcc -o uuencode uuencode.o -lm ; \
	strip uuencode )

@

<<uuencode.c.dvi (DOC from IN)>>=
${DOC}/uuencode.c.dvi: ${IN}/uuencode.c.pamphlet
	@echo 64 making ${DOC}/uuencode.c.dvi from ${IN}/uuencode.c.pamphlet
	@(cd ${DOC} ; \
	cp ${IN}/uuencode.c.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} uuencode.c ; \
	rm -f ${DOC}/uuencode.c.pamphlet ; \
	rm -f ${DOC}/uuencode.c.tex ; \
	rm -f ${DOC}/uuencode.c )

@

\section{Cleanup}
We have a general cleanup stanza so each individual stanza gets called.
Note that we do not clean up the {\bf \${MID}} directory because it
caches work that is system independent and rarely needs to be redone.
We also do not clean up the executables generated in the {\bf \${OUT}},
just the .o files and other random junk.
<<clean>>=
clean: 
	@echo 65 cleaning ${OUT}
	@rm -f ${OUT}/*.o ${OUT}/*~

@
\section{Making the documentation}
<<document>>=
document: ${MID}/car.c.dvi ${MID}/checksum.c.dvi ${MID}/diff.c.dvi \
	  ${MID}/du.c.dvi ${MID}/dups.c.dvi ${MID}/export.c.dvi \
	  ${MID}/fileops.c.dvi ${MID}/filesign.c.dvi ${MID}/fwdslash.dvi \
	  ${MID}/getopt.c.dvi ${MID}/longline.c.dvi ${MID}/lpr.c.dvi \
	  ${MID}/ls.c.dvi ${MID}/makemake.c.dvi ${MID}/names.sh.dvi \
	  ${MID}/nsort.c.dvi ${MID}/patmatch.c.dvi ${MID}/patmatch.h.dvi \
	  ${MID}/scandir.c.dvi ${MID}/scandir.h.dvi ${MID}/sevenbit.c.dvi \
	  ${MID}/shar.c.dvi ${MID}/sys.h.dvi ${MID}/sysopt.h.dvi \
	  ${MID}/tolower.c.dvi ${MID}/unix.h.dvi ${MID}/unshar.c.dvi \
	  ${MID}/uudecode.c.dvi ${MID}/uuencode.c.dvi
	@echo 66 making tex and dvi files in ${MID}

@
\section{Makefile}
<<*>>=
<<comments>>
<<virtual directories>>
<<Environment Variables>>
<<targets>>

all: ${UTILS}
	@echo 67 finished making ${OUT} from ${IN}

<<car (OUT from MID)>>
<<car.c (MID from IN)>>
<<car.c.dvi (DOC from IN)>>

<<checksum (OUT from MID)>>
<<checksum.c (MID from IN)>>
<<checksum.c.dvi (DOC from IN)>>

<<diff (OUT from MID)>>
<<diff.c (MID from IN)>>
<<diff.c.dvi (DOC from IN)>>

<<du (OUT from MID)>>
<<du.c (MID from IN)>>
<<du.c.dvi (DOC from IN)>>

<<dups.c.dvi (DOC from IN)>>

<<excar (OUT from MID)>>

<<export (OUT from MID)>>
<<export.c (MID from IN)>>
<<export.c.dvi (DOC from IN)>>

<<fileops (OUT from MID)>>
<<fileops.c (MID from IN)>>
<<fileops.c.dvi (DOC from IN)>>

<<filesign (OUT from MID)>>
<<filesign.c (MID from IN)>>
<<filesign.c.dvi (DOC from IN)>>

<<fwdslash.c.dvi (DOC from IN)>>

<<getopt.c (MID from IN)>>
<<getopt.c.dvi (DOC from IN)>>

<<longline.c.dvi (DOC from IN)>>

<<lpr.c.dvi (DOC from IN)>>

<<ls.c.dvi (DOC from IN)>>

<<makemake (OUT from MID)>>
<<makemake.c (MID from IN)>>
<<makemake.c.dvi (DOC from IN)>>

<<names.sh.dvi (DOC from IN)>>

<<nsort.c.dvi (DOC from IN)>>

<<patmatch (OUT from MID)>>
<<patmatch.c (MID from IN)>>
<<patmatch.c.dvi (DOC from IN)>>

<<patmatch.h (MID from IN)>>
<<patmatch.h.dvi (DOC from IN)>>

<<scandir (OUT from MID)>>
<<scandir.c (MID from IN)>>
<<scandir.c.dvi (DOC from IN)>>

<<scandir.h (MID from IN)>>
<<scandir.h.dvi (DOC from IN)>>

<<sevenbit.c.dvi (DOC from IN)>>

<<shar (OUT from MID)>>
<<shar.c (MID from IN)>>
<<shar.c.dvi (DOC from IN)>>

<<sys.h (MID from IN)>>
<<sys.h.dvi (DOC from IN)>>

<<sysopt.h (MID from IN)>>
<<sysopt.h.dvi (DOC from IN)>>

<<tolower.c.dvi (DOC from IN)>>

<<unix.h (MID from IN)>>
<<unix.h.dvi (DOC from IN)>>

<<unshar (OUT from MID)>>
<<unshar.c (MID from IN)>>
<<unshar.c.dvi (DOC from IN)>>

<<uudecode (OUT from MID)>>
<<uudecode.c (MID from IN)>>
<<uudecode.c.dvi (DOC from IN)>>

<<uuencode (OUT from MID)>>
<<uuencode.c (MID from IN)>>
<<uuencode.c.dvi (DOC from IN)>>

<<document>>
<<clean>>

@
\eject
\begin{thebibliography}{99}
\bibitem{1} {\bf \$SPAD/lsp/ccl/src/util/car.c.pamphlet}
\bibitem{2} {\bf \$SPAD/lsp/ccl/src/util/checksum.c.pamphlet}
\bibitem{3} {\bf \$SPAD/lsp/ccl/src/util/diff.c.pamphlet}
\bibitem{4} {\bf \$SPAD/lsp/ccl/src/util/du.c.pamphlet}
\bibitem{5} {\bf \$SPAD/lsp/ccl/src/util/dups.c.pamphlet}
\bibitem{6} {\bf \$SPAD/lsp/ccl/src/util/excar.c.pamphlet}
\bibitem{7} {\bf \$SPAD/lsp/ccl/src/util/export.c.pamphlet}
\bibitem{8} {\bf \$SPAD/lsp/ccl/src/util/fileops.c.pamphlet}
\bibitem{9} {\bf \$SPAD/lsp/ccl/src/util/filesign.c.pamphlet}
\bibitem{10} {\bf \$SPAD/lsp/ccl/src/util/fwdslash.c.pamphlet}
\bibitem{11} {\bf \$SPAD/lsp/ccl/src/util/getopt.c.pamphlet}
\bibitem{12} {\bf \$SPAD/lsp/ccl/src/util/longline.c.pamphlet}
\bibitem{13} {\bf \$SPAD/lsp/ccl/src/util/lpr.c.pamphlet}
\bibitem{14} {\bf \$SPAD/lsp/ccl/src/util/ls.c.pamphlet}
\bibitem{15} {\bf \$SPAD/lsp/ccl/src/util/makemake.c.pamphlet}
\bibitem{16} {\bf \$SPAD/lsp/ccl/src/util/names.sh.pamphlet}
\bibitem{17} {\bf \$SPAD/lsp/ccl/src/util/nsort.c.pamphlet}
\bibitem{18} {\bf \$SPAD/lsp/ccl/src/util/patmatch.c.pamphlet}
\bibitem{19} {\bf \$SPAD/lsp/ccl/src/util/patmatch.h.pamphlet}
\bibitem{20} {\bf \$SPAD/lsp/ccl/src/util/scandir.c.pamphlet}
\bibitem{21} {\bf \$SPAD/lsp/ccl/src/util/scandir.h.pamphlet}
\bibitem{22} {\bf \$SPAD/lsp/ccl/src/util/sevenbit.c.pamphlet}
\bibitem{23} {\bf \$SPAD/lsp/ccl/src/util/shar.c.pamphlet}
\bibitem{24} {\bf \$SPAD/lsp/ccl/src/util/sys.h.pamphlet}
\bibitem{25} {\bf \$SPAD/lsp/ccl/src/util/sysopt.h.pamphlet}
\bibitem{26} {\bf \$SPAD/lsp/ccl/src/util/tolower.c.pamphlet}
\bibitem{27} {\bf \$SPAD/lsp/ccl/src/util/unix.h.pamphlet}
\bibitem{28} {\bf \$SPAD/lsp/ccl/src/util/unshar.c.pamphlet}
\bibitem{29} {\bf \$SPAD/lsp/ccl/src/util/uudecode.c.pamphlet}
\bibitem{30} {\bf \$SPAD/lsp/ccl/src/util/uuencode.c.pamphlet}
\end{thebibliography}
\end{document}
