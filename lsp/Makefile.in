GCLVERSION = gcl-2.6.8pre
OUT = $(axiom_build_bindir)

lisp_DEPENDENCIES = ${OBJ}/${SYS}/lib/cfuns-c.o \
		    ${OBJ}/${SYS}/lib/sockio-c.o \
		    ${OBJ}/${SYS}/lib/libspad.a

all: $(OUT)/lisp

# Rules for building GCL from Axiom distribution.
$(axiom_build_bindir)/gcl: 
	$(TAR) -zxf $(axiom_optional_srcdir)/${GCLVERSION}.tgz
	@(cd ${GCLVERSION}/unixport ; \
	  echo 7 applying toploop patch to unixport/init_gcl.lsp ; \
	  $(PATCH) < $(axiom_optional_srcdir)/${GCLVERSION}.unixport.init_gcl.lsp.in.patch )
	(cd ${GCLVERSION} && \
	./configure --prefix=$(axiom_builddir) --disable-xgcl ${GCLOPTS} && \
	${ENV} $(MAKE) && $(ENV) $(MAKE) install)

# Create a fresh image for building Boot
$(OUT)/lisp: $(GCL) $(lisp_DEPENDENCIES)
	echo '(compiler::link nil "${OUT}/lisp" \
                (format nil "(progn (let ((*load-path* (cons ~S *load-path*))\
                                          (si::*load-types* ~S)) \
                                         (compiler::emit-fn t)) \
                                    (when (fboundp (quote si::sgc-on)) \
                                          (si::sgc-on t)) \
                                    (setq compiler::*default-system-p* t))" \
                        si::*system-directory* (quote (list ".lsp"))) \
                "${OBJ}/${SYS}/lib/cfuns-c.o \
                  ${OBJ}/${SYS}/lib/sockio-c.o \
                  ${OBJ}/${SYS}/lib/libspad.a")' \
            | $(GCL)

ccldir: $(builddir)/ccl/Makefile
	@echo 14 building CCL
	@mkdir -p ${INT}/ccl
	@mkdir -p ${OBJ}/${SYS}/ccl
	@( cd ccl ; ${ENV} ${MAKE} )

document:
	@echo 16 making docs in ${LSP}
	@mkdir -p ${INT}/doc/lsp/ccl
	@( cd ccl ; ${ENV} ${MAKE} document )

clean:
	@echo 17 cleaning ${LSP}/ccl
	@( cd ccl ; ${ENV} ${MAKE} clean )
	rm -f stamp-gcldir

distclean: clean
