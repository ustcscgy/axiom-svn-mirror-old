\documentclass{article}
\usepackage{../src/scripts/tex/axiom}
\begin{document}
\title{\$SPAD/lsp Makefile}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{The Makefile}
We create a dummy file {\bf gcldir} after gcl has been built so
it is not rebuilt. We need to do this because we have no control
over the gcl Makefiles.

\section{Configure and Make GCL}
We enable several features of GCL.
The [[--enable-readline]] uses GNU readline for the prompts. It has been
removed and replaced with clef which is Axiom's version of readline.
The [[--enable-maxpage]] is set to allow the image to grow 4 times
what it would by default.
The [[--enable-vssize]] allows virtual stack to grow by twice the normal size.
The [[--enable-statsysbfd]] uses a static system bfd library for loading and
relocating object files.

Finally we load some routines for performance reasons. [[lsp/sys-proclaim]]
contains common lisp proclaim statements for the various GCL lisp routines.
[[cmpnew/gcl_collectfn]] contains modifications to the common lisp compiler
to collect compile-time type information which will be written to [[.fn]]
files as common lisp structs. These [[.fn]] files can be loaded and turned
into common lisp proclaim statements which the compiler can use to generate
faster code, mostly fast-path function calls. The call to [[compiler::emit-fn]]
enables the [[.fn]] file generation whenever compile-file is called. We
default this code into the image so it is always avaiable.

The [[./configure]] command takes a few options for building GCL.
These need to be changed for various systems so we make these into a
variable and move them up to the top level Makefile.
<<gclConfigureMake>>=
	@(cd ${GCLVERSION} ; \
	./configure ${GCLOPTS} ; \
	${ENV} ${MAKE} ; \
	echo '(progn (load "cmpnew/gcl_collectfn.lsp") (load "lsp/sys-proclaim.lisp") (compiler::emit-fn t) (system::save-system "${OUT}/lisp"))' | unixport/saved_gcl )
@

\section{Gnu Common Lisp 2.6.8pre}
<<gcl-2.6.8pre.socket.patch>>=
	@(cd ${GCLVERSION}/h ; \
	  echo 3 applying EXTRAS patch to h/linux.defs ; \
	  ${PATCH} <${SPD}/zips/${GCLVERSION}.h.linux.defs.patch )
	@(echo 4 setup ini files for EXTRAS patch ; \
	  touch ${OBJ}/${SYS}/lib/cfuns-c.ini ; \
	  touch ${OBJ}/${SYS}/lib/sockio-c.ini )
@
\subsubsection{fortran patch}
Communication over sockets (basically to the NAG fortran library)
requires us to have XDR enabled.
<<gcl-2.6.8pre.libspad.patch>>=
	@(cd ${GCLVERSION}/unixport ; \
	  echo 6 applying libspad.a patch to unixport/makefile ; \
	  ${PATCH} <${SPD}/zips/${GCLVERSION}.unixport.makefile.patch )
@
\subsubsection{toploop patch}
This patch turns off the banner display every time GCL starts.
We could use the -batch flag but that would be a pervasive change.
It isn't critical to the system builds but we will later be 
capturing stdin and stdout and we do not want extra information
printed.

Now, for some reason, lisp needs to tell you what the temporary directory
for the compiler will be. We eliminate this noise as well as the banner.
<<gcl-2.6.8pre.toploop.patch>>=
	@(cd ${GCLVERSION}/unixport ; \
	  echo 7 applying toploop patch to unixport/init_gcl.lsp ; \
	  ${PATCH} <${SPD}/zips/${GCLVERSION}.unixport.init_gcl.lsp.in.patch )
@

\subsubsection{collectfn fix}
In this version we have created a new subdirectory for use by GCL
during compile time at [[obj/sys/lsp]]. We copy two files from 
GCL, the [[collectfn.lsp]] file and the [[sys-proclaim.lisp]] file. 
The collectfn.lsp contains code which extends the GCL compiler and
collects type information. The compile-file function writes this
type information to a [[.fn]] file as structs. These structs can
be loaded and written out as a file of lisp proclaims. The sys-proclaim.lisp
file contains the proclaims for GCL's function definitions.
<<gcl-2.6.8pre.collectfn.fix>>=
	@(cd ${GCLVERSION}/cmpnew ; \
	  echo 26 copy gcl_collectfn.lsp to ${OBJ}/${SYS}/lsp/collectfn.lsp ; \
	  cp gcl_collectfn.lsp ${OBJ}/${SYS}/lsp/collectfn.lsp )
	@(cd ${GCLVERSION}/lsp ; \
	  echo 27 copy sys-proclaim.lisp to ${OBJ}/${SYS}/lsp/sys-proclaim.lisp ; \
	  cp sys-proclaim.lisp ${OBJ}/${SYS}/lsp/sys-proclaim.lisp )
@

\subsection{The GCL-2.6.8pre stanza}
<<gcl-2.6.8pre>>=
# gcl version 2.6.8pre
OUT=${OBJ}/${SYS}/bin

all:
	@echo 1 building ${LSP} ${GCLVERSION}

gcldir: 
	@echo 2 building ${GCLVERSION}
	@tar -zxf ${ZIPS}/${GCLVERSION}.tgz
<<gcl-2.6.8pre.socket.patch>>
<<gcl-2.6.8pre.libspad.patch>>
<<gcl-2.6.8pre.toploop.patch>>
<<gcl-2.6.8pre.collectfn.fix>>
<<gclConfigureMake>>
	@echo 13 finished system build on `date` | tee >gcldir

ccldir: ${LSP}/ccl/Makefile
	@echo 14 building CCL
	@mkdir -p ${INT}/ccl
	@mkdir -p ${OBJ}/${SYS}/ccl
	@( cd ccl ; ${ENV} ${MAKE} )

${LSP}/ccl/Makefile: ${LSP}/ccl/Makefile.pamphlet
	@echo 15 making ${LSP}/ccl/Makefile from ${LSP}/ccl/Makefile.pamphlet
	@( cd ccl ; ${DOCUMENT} ${NOISE} Makefile )

document:
	@echo 16 making docs in ${LSP}
	@mkdir -p ${INT}/doc/lsp/ccl
	@( cd ccl ; ${ENV} ${MAKE} document )

clean:
	@echo 17 cleaning ${LSP}/ccl
	@( cd ccl ; ${ENV} ${MAKE} clean )

@

\section{The Makefile}

\subsection{GCL already installed}
On some systems, notably freebsd, we assume that GCL is already 
installed and available using the command [[gcl]]. In that case
we need to extract this Makefile instead of the standard one.
<<gcl-system>>=
# locally installed GCL
OUT=${OBJ}/${SYS}/bin

all:
	@echo 21 building ${LSP} ${GCLVERSION}

gcldir: 
	@echo 22 building for ${GCLVERSION}
	echo '(compiler::link nil "${OUT}/lisp" (format nil "(progn (let ((*load-path* (cons ~S *load-path*))(si::*load-types* ~S)) (compiler::emit-fn t))(when (fboundp (quote si::sgc-on)) (si::sgc-on t))(setq compiler::*default-system-p* t))" si::*system-directory* (quote (list ".lsp"))) "${OBJ}/${SYS}/lib/cfuns-c.o ${OBJ}/${SYS}/lib/sockio-c.o ${OBJ}/${SYS}/lib/libspad.a")' | gcl
	@echo 23 finished gcl build on `date` | tee >gcldir

ccldir: ${LSP}/ccl/Makefile
	@echo 21 building CCL
	@mkdir -p ${INT}/ccl
	@mkdir -p ${OBJ}/${SYS}/ccl
	@( cd ccl ; ${ENV} ${MAKE} )

${LSP}/ccl/Makefile: ${LSP}/ccl/Makefile.pamphlet
	@echo 22 making ${LSP}/ccl/Makefile from ${LSP}/ccl/Makefile.pamphlet
	@( cd ccl ; ${DOCUMENT} ${NOISE} Makefile )

document:
	@echo 23 making docs in ${LSP}
	@mkdir -p ${INT}/doc/lsp/ccl
	@( cd ccl ; ${ENV} ${MAKE} document )

clean:
	@echo 24 cleaning ${LSP}/ccl
	@( cd ccl ; ${ENV} ${MAKE} clean )
@

This stanza will be written out when the GCLVERSION variable is
``gcl-2.6.8pre''. It will overwrite the default version. See the 
top level Makefile.pamphlet.

<<*>>=
<<gcl-2.6.8pre>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
