%% Oh Emacs, this is a -*- Makefile -*-, so give me tabs.
\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/lsp Makefile}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject

\section{The Makefile}

The purpose of this Makefile is to create a fresh Lisp image, [[$(OUT)/lisp]],
for use in make [[boot]].  To that end, it augments a existing Lisp
image, at the moment GCL, with some specific C-routines.

If GCL is not existing in the build environment, we build one and install
it a separate directory and carry on the build process has if it had 
existed.

\section{Configure and Make GCL}
We enable several features of GCL.
The [[--enable-readline]] uses GNU readline for the prompts. It has been
removed and replaced with clef which is Axiom's version of readline.
The [[--enable-maxpage]] is set to allow the image to grow 4 times
what it would by default.
The [[--enable-vssize]] allows virtual stack to grow by twice the normal size.
The [[--enable-statsysbfd]] uses a static system bfd library for loading and
relocating object files.

The [[./configure]] command takes a few options for building GCL.
These need to be changed for various systems so we make these into a
variable and move them up to the top level Makefile.
<<gclConfigureMake>>=
	(cd ${GCLVERSION} && \
	./configure --prefix=$(axiom_builddir) --disable-xgcl ${GCLOPTS} && \
	${ENV} $(MAKE) && $(ENV) $(MAKE) install)
@


We would like to have the following done for all GCL (either built from Axiom 
sources or system-installed).
Finally we load some routines for performance reasons. [[lsp/sys-proclaim]]
contains common lisp proclaim statements for the various GCL lisp routines.
[[cmpnew/gcl_collectfn]] contains modifications to the common lisp compiler
to collect compile-time type information which will be written to [[.fn]]
files as common lisp structs. These [[.fn]] files can be loaded and turned
into common lisp proclaim statements which the compiler can use to generate
faster code, mostly fast-path function calls. The call to [[compiler::emit-fn]]
enables the [[.fn]] file generation whenever compile-file is called. We
default this code into the image so it is always avaiable.

\begin{verbatim}
	echo '(progn (load "cmpnew/gcl_collectfn.lsp")' \
		   ' (load "lsp/sys-proclaim.lisp")' \
		   ' (compiler::emit-fn t)' \
                   ' (system::save-system "${OUT}/lisp"))' \
             | $(GCL))
\end{verbatim}


\section{Gnu Common Lisp 2.6.8pre}
<<gcl-2.6.8pre.socket.patch>>=
	@(cd ${GCLVERSION}/h ; \
	  echo 3 applying EXTRAS patch to h/linux.defs ; \
	  $(PATCH) < $(axiom_optional_srcdir)/${GCLVERSION}.h.linux.defs.patch)
	@(echo 4 setup ini files for EXTRAS patch ; \
	  touch $(abs_top_builddir)/src/lib/cfuns-c.ini ; \
	  touch $(abs_top_builddir)/src/lib/sockio-c.ini )
@

\subsubsection{fortran patch}
Communication over sockets (basically to the NAG fortran library)
requires us to have XDR enabled.
<<gcl-2.6.8pre.libspad.patch>>=
	@(cd ${GCLVERSION}/unixport ; \
	  echo 6 applying libspad.a patch to unixport/makefile ; \
	  $(PATCH) < $(axiom_optional_srcdir)/${GCLVERSION}.unixport.makefile.patch )
@

\subsubsection{collectfn fix}
In this version we have created a new subdirectory for use by GCL
during compile time at [[obj/sys/lsp]]. We copy two files from 
GCL, the [[collectfn.lsp]] file and the [[sys-proclaim.lisp]] file. 
The collectfn.lsp contains code which extends the GCL compiler and
collects type information. The compile-file function writes this
type information to a [[.fn]] file as structs. These structs can
be loaded and written out as a file of lisp proclaims. The sys-proclaim.lisp
file contains the proclaims for GCL's function definitions.
<<gcl-2.6.8pre.collectfn.fix>>=
	@(cd ${GCLVERSION}/cmpnew ; \
	  echo 26 copy gcl_collectfn.lsp to $(axiom_builddir)/lsp/collectfn.lsp ; \
	  $(INSTALL) gcl_collectfn.lsp $(axiom_builddir)/lsp/collectfn.lsp )
	@(cd ${GCLVERSION}/lsp ; \
	  echo 27 copy sys-proclaim.lisp to $(axiom_builddir)/lsp/sys-proclaim.lisp ; \
	  $(INSTALL) sys-proclaim.lisp $(axiom_builddir)/lsp/sys-proclaim.lisp )
@

\subsection{The GCL-2.6.8pre stanza}
<<gcl-2.6.8pre>>=
# Rules for building GCL from Axiom distribution.

$(GCLVERSION):
	$(TAR) -zxf $(axiom_optional_srcdir)/${GCLVERSION}.tgz

$(axiom_build_bindir)/gcl: $(GCLVERSION)
<<gclConfigureMake>>
@

\section{The Makefile}

\subsection{GCL already installed or built}

<<build lisp for boot>>=
# Create a fresh image for building Boot
$(OUT)/lisp: $(GCL) $(lisp_DEPENDENCIES) $(OUT)
	echo '(compiler::link nil "${OUT}/lisp" ' \
              ' (format nil "(progn (let ((*load-path* (cons ~S *load-path*))'\
                                        ' (si::*load-types* ~S))' \
                                       ' (compiler::emit-fn t))' \
                                  ' (when (fboundp (quote si::sgc-on))' \
                                        ' (si::sgc-on t))' \
                                  ' (setq compiler::*default-system-p* t))"' \
                      ' si::*system-directory* (quote (list ".lsp")))' \
               ' "$(build_libdir)/cfuns-c.o' \
               '  $(build_libdir)/sockio-c.o' \
               '  $(build_libdir)/libspad.a")' \
            | $(GCL)

$(OUT):
	$(mkinstalldirs) $@

@

<<*>>=
GCLVERSION = gcl-2.6.8pre
OUT = $(axiom_build_bindir)

subdir = lsp/

pamphlets = Makefile.pamphlet

build_libdir = $(abs_top_builddir)/src/lib

lisp_DEPENDENCIES = $(build_libdir)/cfuns-c.o \
		    $(build_libdir)/sockio-c.o \
		    $(build_libdir)/libspad.a

all: all-ax

all-ax: $(OUT)/lisp

<<gcl-2.6.8pre>>

<<build lisp for boot>>

ccldir: $(builddir)/ccl/Makefile
	@echo 14 building CCL
	@mkdir -p ${INT}/ccl
	@mkdir -p ${OBJ}/${SYS}/ccl
	@( cd ccl ; ${ENV} ${MAKE} )

# Build GCL takes quite a while, so we don't remove the
# diretcory in mostlyclean.  Rather, we do that in clean.
mostlyclean-local:

clean-local: mostlyclean
	-rm -rf $(GCLVERSION)
	-rm -f $(OUT)/lisp
	-rm -f $(axiom_build_bindir)/gcl
	-rm -rf $(axiom_builddir)/lib/$(GCLVERSION)

distclean-local: clean-local
	-rm -f Makefile
@

\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
