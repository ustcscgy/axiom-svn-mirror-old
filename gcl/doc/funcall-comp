
In AKCL version 1.78 I observe the following times

(defun joe () nil)
(setq  cfun #'joe)
(setq symbol 'joe)
after compilation (on a sun3/280)
                        
Form                  	 AKCL 1.78   KCL    
(joe)            	 6.1       7.7    
(funcall cfun)   	 9.5      14.0    
(funcall symbol) 	13.7      17.8   
(joe1)                	 2.1       2.5    

times are in microseconds per call.
joe1 is the same as joe but with (proclaim '(function joe1 () t))
The functions were in the same file, although this would not make
a difference for AKCL.

A typical timing loop is
(defun foo1 (x n)  (sloop for i below n do (funcall x)))
(defun foo2 ( n) (sloop for i below n do (joe)))
(defun foo3 ( n) (sloop for i below n do (joe1)))

(time (foo1 #'joe 100000))
(time (foo1 'joe 100000))
(time (foo2 100000))

Note: An AKCL version >= 1.78  will be released in a few days
when I finish checking over the 8 and 16 bit arrays which have been
added.




