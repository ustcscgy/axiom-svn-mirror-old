(in-package "BCOMP")
;first load the proclaims then get them:
;(setq lis (sort (sloop for v in-package 'lisp when (get v 'PROCLAIMED-FUNCTION-DECLARATION) collect v) #'(lambda (x y) (string-lessp (symbol-name x) (symbol-name y)))))

;(sloop for v in lis when (setq tem (get v 'proclaimed-function-declaration)) do (format t "(~a ~a ~a " v (car tem)(second tem)) (print-flag (third tem))(princ ")") (unless (eq (second tem) '*) (princ "   ;Mv touched?"))  (terpri))
(defmacro proclaim2 (name args res flag)
  (progn (proclaim1 `(ftype (function ,args ,res) ,name))
         (setf (fdecl flag (get name 'proclaimed-function-declaration) )
	       flag)))
(proclaim2 * (*) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 + (*) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 - (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 / (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 /= (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 1+ (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 1- (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 < (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 <= (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 = (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 > (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 >= (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 ABS (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ACONS (T T T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ACOS (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ACOSH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ADJOIN (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ADJUST-ARRAY (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ADJUSTABLE-ARRAY-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 ALPHA-CHAR-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 ALPHANUMERICP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 APPEND (*) T #.(flags ans set ))   ;Mv touched?
(proclaim2 APPLY (T T *) * #.(flags ans set mv touch-mv))
(proclaim2 APROPOS (T *) * #.(flags ans set mv touch-mv))
(proclaim2 APROPOS-LIST (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 AREF (T &optional fixnum fixnum fixnum fixnum *) T
                               #.(flags ans constantp))
(proclaim2 si::aset1 (T  fixnum t) T #.(flags ans set constantp))

(proclaim2 ARRAY-DIMENSION (T FIXNUM) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 ARRAY-DIMENSIONS (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ARRAY-ELEMENT-TYPE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ARRAY-HAS-FILL-POINTER-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 ARRAY-IN-BOUNDS-P (T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ARRAY-RANK (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 ARRAY-ROW-MAJOR-INDEX (T *) FIXNUM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ARRAY-TOTAL-SIZE (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 ARRAYP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 ASH (INTEGER FIXNUM) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 ASIN (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ASINH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ASSOC (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ASSOC-IF (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ASSOC-IF-NOT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ATAN (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ATANH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ATOM (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 BIT (T *) BIT #.(flags ans constantp))   ;Mv touched?
(proclaim2 BIT-AND (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-ANDC1 (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-ANDC2 (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-EQV (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-IOR (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-NAND (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-NOR (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-NOT (T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-ORC1 (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-ORC2 (T T *) (ARRAY BIT) #.(flags ans set))   ;Mv touched?
(proclaim2 BIT-VECTOR-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 BIT-XOR (T T *) (ARRAY BIT) #.(flags ans set ))   ;Mv touched?
(proclaim2 BOOLE (FIXNUM INTEGER INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 BOTH-CASE-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 BOUNDP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 BREAK (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 BUTLAST (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 BYTE (FIXNUM FIXNUM) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 BYTE-POSITION (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 BYTE-SIZE (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAAAAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAAADR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAAAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAADAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAADDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAADR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CADAAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CADADR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CADAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CADDAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CADDDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CADDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CADR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDAAAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDAADR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDAAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDADAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDADDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDADR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDDAAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDDADR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDDAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDDDAR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDDDDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDDDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CDR (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CEILING (T *) * #.(flags ans set mv touch-mv))
(proclaim2 CERROR (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 CHAR (T FIXNUM) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-CODE (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-DOWNCASE (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-EQUAL (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-GREATERP (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-INT (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-LESSP (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-NAME (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-NOT-EQUAL (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-NOT-GREATERP (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-NOT-LESSP (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR-UPCASE (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR/= (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR< (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR<= (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR= (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR> (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHAR>= (T *) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHARACTER (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CHARACTERP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CIS (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CLEAR-INPUT (*) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CLEAR-OUTPUT (*) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CLOSE (T *) STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 CLRHASH (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 CODE-CHAR (FIXNUM) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COERCE (T T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COMPILE (T *) * #.(flags ans set mv touch-mv))
(proclaim2 COMPILE-FILE (T *) * #.(flags ans set mv touch-mv))
(proclaim2 COMPILED-FUNCTION-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 COMPLEX (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 COMPLEXP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CONCATENATE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 CONJUGATE (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CONS (T T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 CONSP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 CONSTANTP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 COPY-ALIST (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COPY-LIST (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COPY-READTABLE (*) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COPY-SEQ (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COPY-SYMBOL (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COPY-TREE (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COS (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COSH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 COUNT (T T *) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 COUNT-IF (T T *) FIXNUM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 COUNT-IF-NOT (T T *) FIXNUM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DECODE-UNIVERSAL-TIME (T *) * #.(flags ans set mv touch-mv))
(proclaim2 DELETE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DELETE-DUPLICATES (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DELETE-FILE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DELETE-IF (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DELETE-IF-NOT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DENOMINATOR (T) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 DEPOSIT-FIELD (INTEGER T INTEGER) INTEGER #.(flags ans set))   ;Mv touched?
(proclaim2 DESCRIBE (T *) * #.(flags ans set mv touch-mv))
(proclaim2 DIGIT-CHAR (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 DIGIT-CHAR-P (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 DIRECTORY (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DIRECTORY-NAMESTRING (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 DOCUMENTATION (T T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 DPB (INTEGER T INTEGER) INTEGER #.(flags ans set ))   ;Mv touched?
(proclaim2 DRIBBLE (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ED (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 EIGHTH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ELT (T FIXNUM) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 ENCODE-UNIVERSAL-TIME (T T T T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ENDP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 ENOUGH-NAMESTRING (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 EQ (T T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 EQL (T T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 EQUAL (T T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 EQUALP (T T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 ERROR (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 EVAL (T) * #.(flags ans set mv touch-mv))
(proclaim2 EVENP (INTEGER) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 EVERY (T T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 EXP (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 EXPORT (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 EXPT (T T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 FBOUNDP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 FCEILING (T *) * #.(flags ans set mv touch-mv))
(proclaim2 FFLOOR (T *) * #.(flags ans set mv touch-mv))
(proclaim2 FIFTH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 FILE-AUTHOR (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FILE-LENGTH (STREAM) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FILE-NAMESTRING (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FILE-POSITION (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FILE-WRITE-DATE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FILL (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FILL-POINTER (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 FIND (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FIND-ALL-SYMBOLS (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FIND-IF (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FIND-IF-NOT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FIND-PACKAGE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FIND-SYMBOL (T *) * #.(flags ans set mv touch-mv))
(proclaim2 FINISH-OUTPUT (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FIRST (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 FLOAT-DIGITS (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 FLOAT-PRECISION (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 FLOAT-RADIX (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 FLOAT-SIGN (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 FLOATP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 FLOOR (T *) * #.(flags ans set mv touch-mv))
(proclaim2 FMAKUNBOUND (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FORCE-OUTPUT (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FORMAT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FOURTH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 FRESH-LINE (*) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 FROUND (T *) * #.(flags ans set mv touch-mv))
(proclaim2 FTRUNCATE (T *) * #.(flags ans set mv touch-mv))
(proclaim2 FUNCALL (T *) * #.(flags ans set mv touch-mv))
(proclaim2 FUNCTIONP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 GCD (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GENSYM (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GENTEMP (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GET (T T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 GET-DECODED-TIME NIL * #.(flags ans set mv touch-mv))
(proclaim2 GET-DISPATCH-MACRO-CHARACTER (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GET-INTERNAL-REAL-TIME NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GET-INTERNAL-RUN-TIME NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GET-MACRO-CHARACTER (T *) * #.(flags ans set mv touch-mv))
(proclaim2 GET-OUTPUT-STREAM-STRING (STREAM) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GET-PROPERTIES (T T) * #.(flags ans set mv touch-mv))
(proclaim2 GET-SETF-METHOD (T *) * #.(flags ans set mv touch-mv))
(proclaim2 GET-SETF-METHOD-MULTIPLE-VALUE (T *) * #.(flags ans set mv touch-mv))
(proclaim2 GET-UNIVERSAL-TIME NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 GETF (T T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 GETHASH (T T *) * #.(flags ans set mv touch-mv))
(proclaim2 GRAPHIC-CHAR-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 HASH-TABLE-COUNT (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 HOST-NAMESTRING (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 IDENTITY (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 IMAGPART (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 IMPORT (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 IN-PACKAGE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 INPUT-STREAM-P (STREAM) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 INSPECT (T) * #.(flags ans set mv touch-mv))
(proclaim2 INTEGER-DECODE-FLOAT (T) * #.(flags ans set mv touch-mv))
(proclaim2 INTEGER-LENGTH (INTEGER) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 INTEGERP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 INTERN (T *) * #.(flags ans set mv touch-mv))
(proclaim2 INTERSECTION (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ISQRT (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 KEYWORDP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 LCM (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LDB (T INTEGER) INTEGER #.(flags ans set ))   ;Mv touched?
(proclaim2 LDB-TEST (T INTEGER) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 LDIFF (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LENGTH (T) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 LISP-IMPLEMENTATION-VERSION NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LIST (*) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 LIST* (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 LIST-ALL-PACKAGES NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LIST-LENGTH (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LISTEN (*) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LISTP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOAD (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LOG (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LOGAND (*) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGANDC1 (INTEGER INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGANDC2 (INTEGER INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGBITP (FIXNUM INTEGER) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGCOUNT (INTEGER) FIXNUM #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGEQV (*) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGIOR (*) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGNAND (INTEGER INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGNOR (INTEGER INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGNOT (INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGORC1 (INTEGER INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGORC2 (INTEGER INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGTEST (INTEGER INTEGER) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 LOGXOR (*) INTEGER #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LONG-SITE-NAME NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 LOWER-CASE-P (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 MACHINE-INSTANCE NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MACHINE-TYPE NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MACHINE-VERSION NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MACRO-FUNCTION (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 MACROEXPAND (T *) * #.(flags ans set mv touch-mv))
(proclaim2 MACROEXPAND-1 (T *) * #.(flags ans set mv touch-mv))
(proclaim2 MAKE-BROADCAST-STREAM (*) STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-CONCATENATED-STREAM (*) STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-DISPATCH-MACRO-CHARACTER (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-ECHO-STREAM (STREAM STREAM) STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-HASH-TABLE (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-LIST (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-PACKAGE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-PATHNAME (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-RANDOM-STATE (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-SEQUENCE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-STRING (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-STRING-INPUT-STREAM (T *) STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-STRING-OUTPUT-STREAM NIL STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-SYMBOL (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-SYNONYM-STREAM (T) STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKE-TWO-WAY-STREAM (STREAM STREAM) STREAM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAKUNBOUND (T) T #.(flags ans set ))   ;Mv touched?
(proclaim2 MAP (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAPC (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAPCAN (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAPCAR (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAPCON (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAPHASH (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAPL (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MAPLIST (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MASK-FIELD (T INTEGER) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 MAX (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 MEMBER (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MEMBER-IF (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MEMBER-IF-NOT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MERGE (T T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MERGE-PATHNAMES (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MIN (T *) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 MINUSP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 MISMATCH (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 MOD (T T) T #.(flags ans touch-mv))   ;Mv touched?
(proclaim2 NAME-CHAR (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NAMESTRING (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NBUTLAST (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NCONC (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NINTERSECTION (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NINTH (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 NOT (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 NOTANY (T T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NOTEVERY (T T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NRECONC (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NREVERSE (T) T #.(flags ans set ))   ;Mv touched?
(proclaim2 NSET-DIFFERENCE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSET-EXCLUSIVE-OR (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSTRING-CAPITALIZE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSTRING-DOWNCASE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSTRING-UPCASE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSUBLIS (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSUBST (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSUBST-IF (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSUBST-IF-NOT (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSUBSTITUTE (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSUBSTITUTE-IF (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NSUBSTITUTE-IF-NOT (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 NTH (FIXNUM T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 NTHCDR (FIXNUM T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 NULL (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 NUMBERP (T) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 NUMERATOR (T) INTEGER #.(flags ans constantp))   ;Mv touched?
(proclaim2 NUNION (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ODDP (INTEGER) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 OPEN (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 OUTPUT-STREAM-P (STREAM) BOOLEAN #.(flags ans constantp))   ;Mv touched?
(proclaim2 PACKAGE-NAME (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 PACKAGE-NICKNAMES (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 PACKAGE-SHADOWING-SYMBOLS (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 PACKAGE-USE-LIST (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 PACKAGE-USED-BY-LIST (T) T #.(flags ans constantp))   ;Mv touched?
(proclaim2 PAIRLIS (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PARSE-INTEGER (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PARSE-NAMESTRING (T *) * #.(flags ans set mv touch-mv))
(proclaim2 PATHNAME (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PATHNAME-DEVICE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PATHNAME-DIRECTORY (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PATHNAME-HOST (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PATHNAME-NAME (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PATHNAME-TYPE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PATHNAME-VERSION (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PEEK-CHAR (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PHASE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PLUSP (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 POSITION (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 POSITION-IF (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 POSITION-IF-NOT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PRIN1 (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PRIN1-TO-STRING (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PRINC (T *) T #.(flags ans set ))   ;Mv touched?
(proclaim2 PRINC-TO-STRING (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PRINT (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 PROBE-FILE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RANDOM (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RASSOC (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RASSOC-IF (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RASSOC-IF-NOT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RATIONAL (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RATIONALIZE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RATIONALP (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 READ (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 READ-BYTE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 READ-CHAR (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 READ-CHAR-NO-HANG (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 READ-DELIMITED-LIST (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 READ-FROM-STRING (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 READ-LINE (*) * #.(flags ans set mv touch-mv))
(proclaim2 READ-PRESERVING-WHITESPACE (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REALPART (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REDUCE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REM (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REMHASH (T T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REMOVE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REMOVE-DUPLICATES (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REMOVE-IF (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REMOVE-IF-NOT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REMPROP (T T) T #.(flags ans set ))   ;Mv touched?
(proclaim2 RENAME-FILE (T T) * #.(flags ans set mv touch-mv))
(proclaim2 RENAME-PACKAGE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REPLACE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REST (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REVAPPEND (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 REVERSE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ROOM (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ROUND (T *) * #.(flags ans set mv touch-mv))
(proclaim2 RPLACA (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 RPLACD (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SBIT (T *) BIT #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SCALE-FLOAT (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SCHAR (T FIXNUM) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SEARCH (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SECOND (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SET (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SET-DIFFERENCE (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SET-DISPATCH-MACRO-CHARACTER (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SET-EXCLUSIVE-OR (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SET-MACRO-CHARACTER (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SET-SYNTAX-FROM-CHAR (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SEVENTH (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SHADOW (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SHADOWING-IMPORT (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SHORT-SITE-NAME NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SIGNUM (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SIMPLE-BIT-VECTOR-P (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SIMPLE-STRING-P (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SIMPLE-VECTOR-P (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SIN (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SINH (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SIXTH (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SLEEP (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SOFTWARE-TYPE NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SOFTWARE-VERSION NIL T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SOME (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SORT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SPECIAL-FORM-P (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SQRT (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STABLE-SORT (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STANDARD-CHAR-P (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STREAM-ELEMENT-TYPE (STREAM) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-CAPITALIZE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-DOWNCASE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-EQUAL (T T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-GREATERP (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-LEFT-TRIM (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-LESSP (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-NOT-EQUAL (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-NOT-GREATERP (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-NOT-LESSP (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-RIGHT-TRIM (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-TRIM (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING-UPCASE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING/= (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING< (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING<= (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING= (T T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING> (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRING>= (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 STRINGP (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBLIS (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBSEQ (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBSETP (T T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBST (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBST-IF (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBST-IF-NOT (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBSTITUTE (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBSTITUTE-IF (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBSTITUTE-IF-NOT (T T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SUBTYPEP (T T) * #.(flags ans set mv touch-mv))
(proclaim2 SVREF ((VECTOR T) FIXNUM) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SXHASH (T) FIXNUM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SYMBOL-FUNCTION (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SYMBOL-NAME (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SYMBOL-PACKAGE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SYMBOL-PLIST (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SYMBOL-VALUE (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 SYMBOLP (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TAN (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TANH (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TENTH (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TERPRI (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 THIRD (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TREE-EQUAL (T T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TRUENAME (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TRUNCATE (T *) * #.(flags ans set mv touch-mv))
(proclaim2 TYPE-OF (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 TYPEP (T T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 UNEXPORT (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 UNINTERN (T *) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 UNION (T T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 UNREAD-CHAR (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 UNUSE-PACKAGE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 UPPER-CASE-P (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 USE-PACKAGE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 USER-HOMEDIR-PATHNAME (*) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 VALUES (*) * #.(flags ans set mv touch-mv))
(proclaim2 VALUES-LIST (T) * #.(flags ans set mv touch-mv))
(proclaim2 VECTOR (*) (VECTOR T) #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 VECTOR-POP (T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 VECTOR-PUSH (T T) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 VECTOR-PUSH-EXTEND (T T *) FIXNUM #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 VECTORP (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 WARN (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 WRITE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 WRITE-BYTE (INTEGER STREAM) INTEGER #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 WRITE-CHAR (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 WRITE-LINE (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 WRITE-STRING (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 WRITE-TO-STRING (T *) T #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 Y-OR-N-P (*) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 YES-OR-NO-P (*) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?
(proclaim2 ZEROP (T) BOOLEAN #.(flags ans set touch-mv))   ;Mv touched?


(proclaim2 si::structure-ref  (t t fixnum) t #.(flags ans))
(proclaim2 si::structure-set  (t t fixnum t)  t #.(flags ans set))

