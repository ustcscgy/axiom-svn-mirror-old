diff -uNr gcl-texi-orig/chap-10.texi gcl-texi/chap-10.texi
--- gcl-texi-orig/chap-10.texi	1994-07-16 18:03:13 +0400
+++ gcl-texi/chap-10.texi	2002-10-17 20:53:05 +0400
@@ -16,6 +16,7 @@
 Figure 10--1 lists some
 @i{defined names} that are applicable to the @i{property lists} of @i{symbols}.
 
+@format
 @group
 @noindent
 @w{  get  remprop  symbol-plist  }
@@ -24,10 +25,12 @@
 @w{  Figure 10--1: Property list defined names}
 
 @end group
+@end format
 
 Figure 10--2 lists some @i{defined names} that are applicable 
 to the creation of and inquiry about @i{symbols}.
 
+@format
 @group
 @noindent
 @w{  copy-symbol  keywordp     symbol-package  }
@@ -38,6 +41,7 @@
 @w{  Figure 10--2: Symbol creation and inquiry defined names}
 
 @end group
+@end format
 
 @c end of including concept-symbols
 
@@ -364,7 +368,7 @@
 @node copy-symbol, gensym, make-symbol, Symbols Dictionary
 @subsection copy-symbol                                                      [Function]
 
-@code{copy-symbol}  @i{symbol {&optional} copy-properties} @result{}  @i{new-symbol}
+@code{copy-symbol}  @i{symbol @r{&optional} copy-properties} @result{}  @i{new-symbol}
 
 @subsubheading  Arguments and Values::
 
@@ -440,7 +444,7 @@
 @node gensym, *gensym-counter*, copy-symbol, Symbols Dictionary
 @subsection gensym                                                           [Function]
 
-@code{gensym}  @i{{&optional} x} @result{}  @i{new-symbol}
+@code{gensym}  @i{@r{&optional} x} @result{}  @i{new-symbol}
 
 @subsubheading  Arguments and Values::
 
@@ -549,7 +553,7 @@
 @node gentemp, symbol-function, *gensym-counter*, Symbols Dictionary
 @subsection gentemp                                                          [Function]
 
-@code{gentemp}  @i{{&optional} prefix package} @result{}  @i{new-symbol}
+@code{gentemp}  @i{@r{&optional} prefix package} @result{}  @i{new-symbol}
 
 @subsubheading  Arguments and Values::
 
@@ -958,9 +962,9 @@
 @node get, remprop, symbol-value, Symbols Dictionary
 @subsection get                                                              [Accessor]
 
-@code{get}  @i{symbol indicator {&optional} default} @result{}  @i{value}
+@code{get}  @i{symbol indicator @r{&optional} default} @result{}  @i{value}
 
-(setf (@code{         get} @i{symbol indicator {&optional} default}) new-value)@*
+(setf (@code{         get} @i{symbol indicator @r{&optional} default}) new-value)@*
 
 @subsubheading  Arguments and Values:: 
 
diff -uNr gcl-texi-orig/chap-11.texi gcl-texi/chap-11.texi
--- gcl-texi-orig/chap-11.texi	1994-07-16 18:03:12 +0400
+++ gcl-texi/chap-11.texi	2002-10-17 20:53:05 +0400
@@ -43,6 +43,7 @@
 a @i{package}.  If a @i{symbol} is supplied, its name will be used
 as the @i{package} name.
 
+@format
 @group
 @noindent
 @w{  *modules*            import                     provide           }
@@ -60,6 +61,7 @@
 @w{         Figure 11--1: Some Defined Names related to Packages       }
 
 @end group
+@end format
 
 @menu
 * Package Names and Nicknames::	 
@@ -304,6 +306,7 @@
 @i{names} and @i{nicknames} of those @i{standardized} @i{packages} 
 is given in Figure 11--2.
 
+@format
 @group
 @noindent
 @w{  Name              Nicknames  }
@@ -315,6 +318,7 @@
 @w{  Figure 11--2: Standardized Package Names}
 
 @end group
+@end format
 
 @menu
 * The COMMON-LISP Package::	
@@ -665,7 +669,7 @@
 @node export, find-symbol, package, Packages Dictionary
 @subsection export                                                           [Function]
 
-@code{export}  @i{symbols {&optional} package} @result{}  @i{@b{t}}
+@code{export}  @i{symbols @r{&optional} package} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -770,7 +774,7 @@
 @node find-symbol, find-package, export, Packages Dictionary
 @subsection find-symbol                                                      [Function]
 
-@code{find-symbol}  @i{string {&optional} package} @result{}  @i{symbol, status}
+@code{find-symbol}  @i{string @r{&optional} package} @result{}  @i{symbol, status}
 
 @subsubheading  Arguments and Values:: 
 
@@ -947,7 +951,7 @@
 @node import, list-all-packages, find-all-symbols, Packages Dictionary
 @subsection import                                                           [Function]
 
-@code{import}  @i{symbols {&optional} package} @result{}  @i{@b{t}}
+@code{import}  @i{symbols @r{&optional} package} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -1064,7 +1068,7 @@
 @node rename-package, shadow, list-all-packages, Packages Dictionary
 @subsection rename-package                                                   [Function]
 
-@code{rename-package}  @i{package new-name {&optional} new-nicknames} @result{}  @i{package-object}
+@code{rename-package}  @i{package new-name @r{&optional} new-nicknames} @result{}  @i{package-object}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1105,7 +1109,7 @@
 @node shadow, shadowing-import, rename-package, Packages Dictionary
 @subsection shadow                                                           [Function]
 
-@code{shadow}  @i{symbol-names {&optional} package} @result{}  @i{@b{t}}
+@code{shadow}  @i{symbol-names @r{&optional} package} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1183,7 +1187,7 @@
 @node shadowing-import, delete-package, shadow, Packages Dictionary
 @subsection shadowing-import                                                 [Function]
 
-@code{shadowing-import}  @i{symbols {&optional} package} @result{}  @i{@b{t}}
+@code{shadowing-import}  @i{symbols @r{&optional} package} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -1391,7 +1395,7 @@
 @node make-package, with-package-iterator, delete-package, Packages Dictionary
 @subsection make-package                                                     [Function]
 
-@code{make-package}  @i{package-name {&key} nicknames use} @result{}  @i{package}
+@code{make-package}  @i{package-name @r{&key} nicknames use} @result{}  @i{package}
 
 @subsubheading  Arguments and Values::
 
@@ -1460,9 +1464,9 @@
 @node with-package-iterator, unexport, make-package, Packages Dictionary
 @subsection with-package-iterator                                               [Macro]
 
-@code{with-package-iterator}  @i{@r{(}name package-list-form {&rest} {symbol-types}@r{)}
- 		   @{@i{declaration}@}{*} @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{with-package-iterator}  @i{@r{(}name package-list-form @r{&rest} @r{symbol-types}@r{)}
+ 		   @{@i{declaration}@}* @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -1634,7 +1638,7 @@
 @node unexport, unintern, with-package-iterator, Packages Dictionary
 @subsection unexport                                                         [Function]
 
-@code{unexport}  @i{symbols {&optional} package} @result{}  @i{@b{t}}
+@code{unexport}  @i{symbols @r{&optional} package} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1693,7 +1697,7 @@
 @node unintern, in-package, unexport, Packages Dictionary
 @subsection unintern                                                         [Function]
 
-@code{unintern}  @i{symbol {&optional} package} @result{}  @i{generalized-boolean}
+@code{unintern}  @i{symbol @r{&optional} package} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -1795,7 +1799,7 @@
 @node unuse-package, use-package, in-package, Packages Dictionary
 @subsection unuse-package                                                    [Function]
 
-@code{unuse-package}  @i{packages-to-unuse {&optional} package} @result{}  @i{@b{t}}
+@code{unuse-package}  @i{packages-to-unuse @r{&optional} package} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -1846,7 +1850,7 @@
 @node use-package, defpackage, unuse-package, Packages Dictionary
 @subsection use-package                                                      [Function]
 
-@code{use-package}  @i{packages-to-use {&optional} package} @result{}  @i{@b{t}}
+@code{use-package}  @i{packages-to-use @r{&optional} package} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -1918,14 +1922,14 @@
 
 @code{defpackage}  @i{defined-package-name [[!@i{option}]]} @result{}  @i{package}
 
-@w{@i{option} ::=@{{(}@t{:nicknames} @{@i{nickname}@}{*}@r{)}@}{*} | }
+@w{@i{option} ::=@{@r{(}@t{:nicknames} @{@i{nickname}@}*@r{)}@}* | }
 @w{           @r{(}@t{:documentation} @i{string}@r{)} | }
-@w{           @{{(}@t{:use} @{@i{package-name}@}{*}@r{)}@}{*} | }
-@w{           @{{(}@t{:shadow} @{!@i{symbol-name}@}{*}@r{)}@}{*} | }
-@w{           @{{(}@t{:shadowing-import-from} @i{package-name} @{!@i{symbol-name}@}{*}@r{)}@}{*} | }
-@w{           @{{(}@t{:import-from} @i{package-name} @{!@i{symbol-name}@}{*}@r{)}@}{*} | }
-@w{           @{{(}@t{:export} @{!@i{symbol-name}@}{*}@r{)}@}{*} | }
-@w{           @{{(}@t{:intern} @{!@i{symbol-name}@}{*}@r{)}@}{*} | }
+@w{           @{@r{(}@t{:use} @{@i{package-name}@}*@r{)}@}* | }
+@w{           @{@r{(}@t{:shadow} @{!@i{symbol-name}@}*@r{)}@}* | }
+@w{           @{@r{(}@t{:shadowing-import-from} @i{package-name} @{!@i{symbol-name}@}*@r{)}@}* | }
+@w{           @{@r{(}@t{:import-from} @i{package-name} @{!@i{symbol-name}@}*@r{)}@}* | }
+@w{           @{@r{(}@t{:export} @{!@i{symbol-name}@}*@r{)}@}* | }
+@w{           @{@r{(}@t{:intern} @{!@i{symbol-name}@}*@r{)}@}* | }
 @w{           @r{(}@t{:size} @i{integer}@r{)}}
 
 @w{@i{symbol-name} ::=(@i{symbol} | @i{string})}
@@ -2058,7 +2062,7 @@
 particular, @i{shadowing symbols} and 
 @i{imported} @i{symbols} can be made external.  
 
-If a {defpackage} @i{form} appears as a @i{top level form},
+If a @i{defpackage} @i{form} appears as a @i{top level form},
 all of the actions normally performed by this @i{macro} 
 at load time must also be performed at compile time.
 
@@ -2122,7 +2126,7 @@
 
 @subsubheading  See Also::
 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Package Concepts},
 @ref{Compilation}
@@ -2176,19 +2180,19 @@
 @subsection do-symbols, do-external-symbols, do-all-symbols                     [Macro]
 
 @code{do-symbols}  @i{@r{(}var @r{[}package @r{[}result-form@r{]}@r{]}@r{)}
-			 @{@i{declaration}@}{*}
-			       @{tag | statement@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+			 @{@i{declaration}@}*
+			       @{tag | statement@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @code{do-external-symbols}  @i{@r{(}var @r{[}package @r{[}result-form@r{]}@r{]}@r{)}
-			 @{@i{declaration}@}{*}
-			       @{tag | statement@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+			 @{@i{declaration}@}*
+			       @{tag | statement@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @code{do-all-symbols}  @i{@r{(}var @r{[}result-form@r{]}@r{)}
-			 @{@i{declaration}@}{*}
-		    	       @{tag | statement@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+			 @{@i{declaration}@}*
+		    	       @{tag | statement@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2296,7 +2300,7 @@
 @node intern, package-name, do-symbols, Packages Dictionary
 @subsection intern                                                           [Function]
 
-@code{intern}  @i{string {&optional} package} @result{}  @i{symbol, status}
+@code{intern}  @i{string @r{&optional} package} @result{}  @i{symbol, status}
 
 @subsubheading  Arguments and Values::
 
@@ -2370,7 +2374,7 @@
 
 @ref{find-symbol}
 ,
-@ref{read; read-preserving-whitespace}
+@ref{read}
 ,
 @b{symbol},
 @ref{unintern}
diff -uNr gcl-texi-orig/chap-12.texi gcl-texi/chap-12.texi
--- gcl-texi-orig/chap-12.texi	1994-07-16 18:03:12 +0400
+++ gcl-texi/chap-12.texi	2002-10-17 20:53:05 +0400
@@ -33,6 +33,7 @@
 Figure 12--1 shows @i{operators} relating to
 arithmetic operations.
 
+@format
 @group
 @noindent
 @w{  *  1+         gcd   }
@@ -44,10 +45,12 @@
 @w{  Figure 12--1: Operators relating to Arithmetic.}
 
 @end group
+@end format
 
 Figure 12--2 shows @i{defined names} relating to
 exponential, logarithmic, and trigonometric operations.
 
+@format
 @group
 @noindent
 @w{  abs    cos    signum  }
@@ -63,10 +66,12 @@
 @w{  Figure 12--2: Defined names relating to Exponentials, Logarithms, and Trigonometry.}
 
 @end group
+@end format
 
 Figure 12--3 shows @i{operators} relating to
 numeric comparison and predication.
 
+@format
 @group
 @noindent
 @w{  /=  >=      oddp   }
@@ -79,10 +84,12 @@
 @w{  Figure 12--3: Operators for numeric comparison and predication.}
 
 @end group
+@end format
 
 Figure 12--4 shows @i{defined names} relating to
 numeric type manipulation and coercion.
 
+@format
 @group
 @noindent
 @w{  ceiling          float-radix           rational     }
@@ -99,6 +106,7 @@
 @w{  Figure 12--4: Defined names relating to numeric type manipulation and coercion.}
 
 @end group
+@end format
 
 @menu
 * Associativity and Commutativity in Numeric Operations::  
@@ -187,6 +195,7 @@
 Figure 12--5 shows @i{defined names} relating to
 logical operations on numbers.
 
+@format
 @group
 @noindent
 @w{  ash          boole-ior       logbitp   }
@@ -205,6 +214,7 @@
 @w{  Figure 12--5: Defined names relating to logical operations on numbers.}
 
 @end group
+@end format
 
 @node Byte Operations on Integers,  , Logical Operations on Integers, Numeric Operations
 @subsubsection Byte Operations on Integers
@@ -220,6 +230,7 @@
 Figure 12--6 shows @i{defined names} relating to
 manipulating @i{bytes} of @i{numbers}.
 
+@format
 @group
 @noindent
 @w{  byte           deposit-field  ldb-test    }
@@ -230,6 +241,7 @@
 @w{  Figure 12--6: Defined names relating to byte manipulation.}
 
 @end group
+@end format
 
 @node Implementation-Dependent Numeric Constants, Rational Computations, Numeric Operations, Number Concepts
 @subsection Implementation-Dependent Numeric Constants
@@ -237,6 +249,7 @@
 Figure 12--7 shows @i{defined names} relating to
 @i{implementation-dependent} details about @i{numbers}.
 
+@format
 @group
 @noindent
 @w{  double-float-epsilon           most-negative-fixnum           }
@@ -257,6 +270,7 @@
 @w{  Figure 12--7: Defined names relating to implementation-dependent details about numbers.}
 
 @end group
+@end format
 
 @node Rational Computations, Floating-point Computations, Implementation-Dependent Numeric Constants, Number Concepts
 @subsection Rational Computations
@@ -331,6 +345,7 @@
 (permissible only if the imaginary
   part of the true mathematical result is zero) or @t{(complex single-float)}.
 
+@format
 @group
 @noindent
 @w{  Function  Sample Results                                   }
@@ -361,6 +376,7 @@
 @w{  Figure 12--8: Functions Affected by Rule of Float Substitutability}
 
 @end group
+@end format
 
 @node Floating-point Computations, Complex Computations, Rational Computations, Number Concepts
 @subsection Floating-point Computations
@@ -525,7 +541,7 @@
 called branch cuts must be defined, which in turn
 define the discontinuities in the range.
 @r{Common Lisp} defines the branch cuts, @i{principal} @i{values}, and boundary
-conditions for the complex functions following ``{Principal Values and Branch Cuts in Complex APL}.'' The branch
+conditions for the complex functions following ``Principal Values and Branch Cuts in Complex APL.'' The branch
 cut rules that apply to each function are located with the description of
 that function.
 
@@ -534,6 +550,7 @@
 throughout the applicable portion of the complex domain, even on
 the branch cuts:
 
+@format
 @group
 @noindent
 @w{  sin i z = i sinh z  sinh i z = i sin z        arctan i z = i arctanh z  }
@@ -544,6 +561,7 @@
 @w{         Figure 12--9: Trigonometric Identities for Complex Domain        }
 
 @end group
+@end format
 
 The quadrant numbers referred to in the discussions of branch cuts are as illustrated
 in Figure 12--10.
@@ -623,6 +641,7 @@
 
 Figure 12--10 lists some @i{defined names} that are applicable to @i{random states}.
 
+@format
 @group
 @noindent
 @w{  *random-state*     random            }
@@ -632,6 +651,7 @@
 @w{  Figure 12--10: Random-state defined names}
 
 @end group
+@end format
 
 @c end of including concept-numbers
 
@@ -646,13 +666,13 @@
 * real::			
 * float (System Class)::	
 * short-float::			
-* rational::			
+* rational (System Class)::			
 * ratio::			
 * integer::			
 * signed-byte::			
 * unsigned-byte::		
-* mod::				
-* bit::				
+* mod (System Class)::				
+* bit (System Class)::				
 * fixnum::			
 * bignum::			
 * =::				
@@ -676,7 +696,7 @@
 * incf::			
 * lcm::				
 * log::				
-* mod::				
+* mod (Function)::				
 * signum::			
 * sqrt::			
 * random-state::		
@@ -694,7 +714,7 @@
 * upgraded-complex-part-type::	
 * realp::			
 * numerator::			
-* rational::			
+* rational (Function)::			
 * rationalp::			
 * ash::				
 * integer-length::		
@@ -882,14 +902,14 @@
 A @i{float}
 is a mathematical rational (but @i{not} a @r{Common Lisp} @i{rational})
 of the form
-s\cdot f\cdot b^{e-p},
+s\cdot f\cdot b^@r{e-p},
 where s is +1 or -1, the @i{sign};
 b is an @i{integer} 
 greater than~1, the @i{base} or @i{radix} of the representation;
 p is a positive @i{integer}, 
 the @i{precision} (in base-b digits) of the @i{float};
 f is a positive @i{integer} 
-between b^{p-1} and
+between b^@r{p-1} and
 b^p-1 (inclusive), the significand;
 and e is an @i{integer}, the exponent.
 The value of p and the range of~e
@@ -937,7 +957,7 @@
 
 @subsubheading  See Also::
 
-{@i{Figure~2--9}},
+@i{Figure~2--9},
 @ref{Constructing Numbers from Tokens},
 @ref{Printing Floats}
 
@@ -950,7 +970,7 @@
         the @i{float} @t{1.0},
      or the @i{complex} @t{#C(1.0 0.0)}.  
 
-@node short-float, rational, float (System Class), Numbers Dictionary
+@node short-float, rational (System Class), float (System Class), Numbers Dictionary
 @subsection short-float, single-float, double-float, long-float                  [Type]
 
 @subsubheading  Supertypes:: 
@@ -1005,6 +1025,7 @@
 as the values in Figure 12--11. 
 Each of the defined @i{subtypes} of @i{type} @b{float} might or might not have a minus zero.
 
+@format
 @group
 @noindent
 @w{  @b{Format}  @b{Minimum Precision}  @b{Minimum Exponent Size}  }
@@ -1018,6 +1039,7 @@
 @w{  Figure 12--11: Recommended Minimum Floating-Point Precision and Exponent Size}
 
 @end group
+@end format
 
 There can be fewer than four internal 
 representations for @i{floats}. 
@@ -1099,7 +1121,7 @@
 Each of these denotes the set of @i{floats} of the indicated @i{type} 
 that are on the interval specified by the @i{interval designators}.
 
-@node rational, ratio, short-float, Numbers Dictionary
+@node rational (System Class), ratio, short-float, Numbers Dictionary
 @subsection rational                                                     [System Class]
 
 @subsubheading  Class Precedence List::
@@ -1138,7 +1160,7 @@
 This denotes the @i{rationals} on the interval described by
 @i{lower-limit} and @i{upper-limit}.
 
-@node ratio, integer, rational, Numbers Dictionary
+@node ratio, integer, rational (System Class), Numbers Dictionary
 @subsection ratio                                                        [System Class]
 
 @subsubheading  Class Precedence List::
@@ -1160,7 +1182,7 @@
 
 @subsubheading  See Also::
 
-{@i{Figure~2--9}},
+@i{Figure~2--9},
 @ref{Constructing Numbers from Tokens},
 @ref{Printing Ratios}
 
@@ -1205,7 +1227,7 @@
 
 @subsubheading  See Also::
 
-{@i{Figure~2--9}},
+@i{Figure~2--9},
 @ref{Constructing Numbers from Tokens},
 @ref{Printing Integers}
 
@@ -1255,11 +1277,11 @@
 
 This denotes the set of @i{integers} that can be represented
 in two's-complement form in a @i{byte} of @i{s} bits.  This is
-equivalent to @t{(integer -2^{s-1} 2^{s-1}-1)}.  The type
+equivalent to @t{(integer -2^@r{s-1} 2^@r{s-1}-1)}.  The type
 @b{signed-byte} or the type @t{(signed-byte *)} is the same
 as the @i{type} @b{integer}.
 
-@node unsigned-byte, mod, signed-byte, Numbers Dictionary
+@node unsigned-byte, mod (System Class), signed-byte, Numbers Dictionary
 @subsection unsigned-byte                                                        [Type]
 
 @subsubheading  Supertypes:: 
@@ -1306,7 +1328,7 @@
 
 The @i{type} @t{(unsigned-byte 1)} is also called @b{bit}.
 
-@node mod, bit, unsigned-byte, Numbers Dictionary
+@node mod (System Class), bit (System Class), unsigned-byte, Numbers Dictionary
 @subsection mod                                                        [Type Specifier]
 
 @subsubheading  Compound Type Specifier Kind::
@@ -1334,7 +1356,7 @@
 
 The symbol @b{mod} is not valid as a @i{type specifier}.
 
-@node bit, fixnum, mod, Numbers Dictionary
+@node bit (System Class), fixnum, mod (System Class), Numbers Dictionary
 @subsection bit                                                                  [Type]
 
 @subsubheading  Supertypes:: 
@@ -1355,7 +1377,7 @@
 The @i{type} @b{bit} is equivalent to the @i{type} @t{(integer 0 1)}
 and @t{(unsigned-byte 1)}.
 
-@node fixnum, bignum, bit, Numbers Dictionary
+@node fixnum, bignum, bit (System Class), Numbers Dictionary
 @subsection fixnum                                                               [Type]
 
 @subsubheading  Supertypes:: 
@@ -1400,17 +1422,17 @@
 @node =, max, bignum, Numbers Dictionary
 @subsection =, /=, <, >, <=, >=                                              [Function]
 
-@code{=}  @i{{&rest} numbers^+} @result{}  @i{generalized-boolean}
+@code{=}  @i{@r{&rest} numbers^+} @result{}  @i{generalized-boolean}
 
-@code{/=}  @i{{&rest} numbers^+} @result{}  @i{generalized-boolean}
+@code{/=}  @i{@r{&rest} numbers^+} @result{}  @i{generalized-boolean}
 
-@code{<}  @i{{&rest} numbers^+} @result{}  @i{generalized-boolean}
+@code{<}  @i{@r{&rest} numbers^+} @result{}  @i{generalized-boolean}
 
-@code{>}  @i{{&rest} numbers^+} @result{}  @i{generalized-boolean}
+@code{>}  @i{@r{&rest} numbers^+} @result{}  @i{generalized-boolean}
 
-@code{<=}  @i{{&rest} numbers^+} @result{}  @i{generalized-boolean}
+@code{<=}  @i{@r{&rest} numbers^+} @result{}  @i{generalized-boolean}
 
-@code{>=}  @i{{&rest} numbers^+} @result{}  @i{generalized-boolean}
+@code{>=}  @i{@r{&rest} numbers^+} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -1462,6 +1484,7 @@
 
 The uses of these functions are illustrated in Figure 12--12.
 
+@format
 @group
 @noindent
 @w{  @t{(= 3 3)} is @i{true}.              @t{(/= 3 3)} is @i{false}.             }
@@ -1493,6 +1516,7 @@
 @w{         Figure 12--12: Uses of /=, =, <, >, <=, and >=        }
 
 @end group
+@end format
 
 @subsubheading  Exceptional Situations::
 
@@ -1509,9 +1533,9 @@
 @node max, minusp, =, Numbers Dictionary
 @subsection max, min                                                         [Function]
 
-@code{max}  @i{{&rest} reals^+} @result{}  @i{max-real}
+@code{max}  @i{@r{&rest} reals^+} @result{}  @i{max-real}
 
-@code{min}  @i{{&rest} reals^+} @result{}  @i{min-real}
+@code{min}  @i{@r{&rest} reals^+} @result{}  @i{min-real}
 
 @subsubheading  Arguments and Values::
 
@@ -1628,7 +1652,7 @@
 
 @subsubheading  Pronunciation::
 
-pronounced 'z\=e (, )r\=o{}(, )p\=e
+pronounced 'z\=e (, )r\=o@r{}(, )p\=e
 
 @subsubheading  Arguments and Values::
 
@@ -1673,21 +1697,21 @@
 @i{[Function]}
 @end flushright
 
-@code{floor}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{floor}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
-@code{ffloor}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{ffloor}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
-@code{ceiling}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{ceiling}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
-@code{fceiling}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{fceiling}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
-@code{truncate}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{truncate}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
-@code{ftruncate}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{ftruncate}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
-@code{round}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{round}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
-@code{fround}  @i{number {&optional} divisor} @result{}  @i{quotient, remainder}
+@code{fround}  @i{number @r{&optional} divisor} @result{}  @i{quotient, remainder}
 
 @subsubheading  Arguments and Values::
 
@@ -1708,7 +1732,7 @@
 These functions divide @i{number} by @i{divisor}, 
 returning a @i{quotient} and @i{remainder}, such that 
 
- @i{quotient}{\cdot} @i{divisor}+@i{remainder}=@i{number}
+ @i{quotient}@r{\cdot} @i{divisor}+@i{remainder}=@i{number}
 
 The @i{quotient} always represents a mathematical integer.
 When more than one mathematical integer might be possible
@@ -1853,7 +1877,7 @@
 
 @subsubheading  See Also::
 
-@ref{asin; acos; atan}
+@ref{asin}
 ,
 @b{acos},
 @b{atan},
@@ -1866,7 +1890,7 @@
 
 @code{acos}  @i{number} @result{}  @i{radians}
 
-@code{atan}  @i{number1 {&optional} number2} @result{}  @i{radians}
+@code{atan}  @i{number1 @r{&optional} number2} @result{}  @i{radians}
 
 @subsubheading  Arguments and Values::
 
@@ -1888,17 +1912,19 @@
 functions can be defined mathematically for
 @i{number} or @i{number1} specified as @i{x} as in Figure 12--13.
 
+@format
 @group
 @noindent
 @w{  Function     Definition                            }
-@w{  Arc sine      -i @t{log}  (ix+ \sqrt{1-x^2} )          }
+@w{  Arc sine      -i @t{log}  (ix+ \sqrt@r{1-x^2} )          }
 @w{  Arc cosine    (\pi/2) - @t{arcsin}  x                  }
-@w{  Arc tangent   -i @t{log}  ((1+ix) \sqrt{1/(1+x^2)} )   }
+@w{  Arc tangent   -i @t{log}  ((1+ix) \sqrt@r{1/(1+x^2)} )   }
 
 @noindent
 @w{  Figure 12--13: Mathematical definition of arc sine, arc cosine, and arc tangent}
 
 @end group
+@end format
 
 These formulae are mathematically correct, assuming
 completely accurate computation. They are not necessarily
@@ -1936,7 +1962,7 @@
 The following definition for arc sine determines the range and
 branch cuts:
 
-@center  @t{arcsin}  z = -i @t{log}  (iz+\sqrt{1-z^2}\Bigr) 
+@center  @t{arcsin}  z = -i @t{log}  (iz+\sqrt@r{1-z^2}\Bigr) 
 
 The branch cut for the arc sine function is in two pieces:
 one along the negative real axis to the left of~-1
@@ -1951,13 +1977,13 @@
 The following definition for arc cosine determines the range and
 branch cuts:
 
-@center  @t{arccos}  z = {\pi\over2}- @t{arcsin}  z
+@center  @t{arccos}  z = \pi\over2 - @t{arcsin}  z
 
 or, which are equivalent,
 
-@center  @t{arccos}  z = -i @t{log}  (z+i \sqrt{1-z^2}\Bigr) 
+@center  @t{arccos}  z = -i @t{log}  (z+i \sqrt@r{1-z^2}\Bigr) 
 
-@center  @t{arccos}  z = {{2 @t{log}  (\sqrt{(1+z)/2} + i \sqrt{(1-z)/2})}\over{i}}
+@center  @t{arccos}  z = @t{2 @t{log}  (\sqrt@r{(1+z)/2} + i \sqrt@r{(1-z)/2})}\over@r{i}
 
 The branch cut for the arc cosine function is in two pieces:
 one along the negative real axis to the left of~-1
@@ -1973,7 +1999,7 @@
 The following definition for (one-argument) arc tangent determines the
 range and branch cuts:
 
-@center  @t{arctan}  z = {{@t{log}  (1+iz) - @t{log}  (1-iz)}\over{2i}} 
+@center  @t{arctan}  z = @i{@i{@t{log}  (1+iz) - @t{log}  (1-iz)}\over@i{2i}} 
 
 Beware of simplifying this formula; ``obvious'' simplifications are likely
 to alter the branch cuts or the values on the branch cuts incorrectly.
@@ -1998,31 +2024,33 @@
 The asterisk (*) indicates that the entry in the figure applies to
 implementations that support minus zero.
 
+@format
 @group
 @noindent
-@w{   to 1pc{}@i{y} Condition  @i{x} Condition  Cartesian locus  Range of result          }
-@w{   to 1pc{} y = 0        x > 0       Positive x-axis   0                       }
-@w{   to 1pc{*} y = +0      x > 0       Positive x-axis  +0                       }
-@w{   to 1pc{*} y = -0      x > 0       Positive x-axis  -0                       }
-@w{   to 1pc{} y > 0        x > 0       Quadrant I       0 < result < \pi/2      }
-@w{   to 1pc{} y > 0        x = 0       Positive y-axis  \pi/2                    }
-@w{   to 1pc{} y > 0        x < 0       Quadrant II      \pi/2 < result < \pi    }
-@w{   to 1pc{} y = 0        x < 0       Negative x-axis   \pi                     }
-@w{   to 1pc{*} y = +0      x < 0       Negative x-axis  +\pi                     }
-@w{   to 1pc{*} y = -0      x < 0       Negative x-axis  -\pi                     }
-@w{   to 1pc{} y < 0        x < 0       Quadrant III     -\pi < result < -\pi/2  }
-@w{   to 1pc{} y < 0        x = 0       Negative y-axis  -\pi/2                   }
-@w{   to 1pc{} y < 0        x > 0       Quadrant IV      -\pi/2 < result < 0     }
-@w{   to 1pc{} y = 0        x = 0       Origin           undefined consequences   }
-@w{   to 1pc{*} y = +0      x = +0      Origin           +0                       }
-@w{   to 1pc{*} y = -0      x = +0      Origin           -0                       }
-@w{   to 1pc{*} y = +0      x = -0      Origin           +\pi                     }
-@w{   to 1pc{*} y = -0      x = -0      Origin           -\pi                     }
+@w{   to 1pc@r{}@i{y} Condition  @i{x} Condition  Cartesian locus  Range of result          }
+@w{   to 1pc@r{} y = 0        x > 0       Positive x-axis   0                       }
+@w{   to 1pc* y = +0      x > 0       Positive x-axis  +0                       }
+@w{   to 1pc* y = -0      x > 0       Positive x-axis  -0                       }
+@w{   to 1pc@r{} y > 0        x > 0       Quadrant I       0 < result < \pi/2      }
+@w{   to 1pc@r{} y > 0        x = 0       Positive y-axis  \pi/2                    }
+@w{   to 1pc@r{} y > 0        x < 0       Quadrant II      \pi/2 < result < \pi    }
+@w{   to 1pc@r{} y = 0        x < 0       Negative x-axis   \pi                     }
+@w{   to 1pc* y = +0      x < 0       Negative x-axis  +\pi                     }
+@w{   to 1pc* y = -0      x < 0       Negative x-axis  -\pi                     }
+@w{   to 1pc@r{} y < 0        x < 0       Quadrant III     -\pi < result < -\pi/2  }
+@w{   to 1pc@r{} y < 0        x = 0       Negative y-axis  -\pi/2                   }
+@w{   to 1pc@r{} y < 0        x > 0       Quadrant IV      -\pi/2 < result < 0     }
+@w{   to 1pc@r{} y = 0        x = 0       Origin           undefined consequences   }
+@w{   to 1pc* y = +0      x = +0      Origin           +0                       }
+@w{   to 1pc* y = -0      x = +0      Origin           -0                       }
+@w{   to 1pc* y = +0      x = -0      Origin           +\pi                     }
+@w{   to 1pc* y = -0      x = -0      Origin           -\pi                     }
 
 @noindent
 @w{               Figure 12--14: Quadrant information for arc tangent             }
 
 @end group
+@end format
 
 @subsubheading  Examples::
 
@@ -2047,7 +2075,7 @@
 
 @ref{log}
 ,
-@ref{sqrt; isqrt}
+@ref{sqrt}
 ,
 @ref{Rule of Float Substitutability}
 
@@ -2119,25 +2147,27 @@
 which are mathematically defined for an argument @i{x}
 as given in Figure 12--15.
 
+@format
 @group
 @noindent
 @w{  Function                Definition                                  }
-@w{  Hyperbolic sine          (e^x-e^{-x})/2                             }
-@w{  Hyperbolic cosine        (e^x+e^{-x})/2                             }
-@w{  Hyperbolic tangent       (e^x-e^{-x})/(e^x+e^{-x})                  }
-@w{  Hyperbolic arc sine      @t{log}  (x+\sqrt{1+x^2})                      }
-@w{  Hyperbolic arc cosine    2 @t{log}  (\sqrt{(x+1)/2} + \sqrt{(x-1)/2})   }
+@w{  Hyperbolic sine          (e^x-e^@i{-x})/2                             }
+@w{  Hyperbolic cosine        (e^x+e^@i{-x})/2                             }
+@w{  Hyperbolic tangent       (e^x-e^@i{-x})/(e^x+e^@i{-x})                  }
+@w{  Hyperbolic arc sine      @t{log}  (x+\sqrt@i{1+x^2})                      }
+@w{  Hyperbolic arc cosine    2 @t{log}  (\sqrt@i{(x+1)/2} + \sqrt@i{(x-1)/2})   }
 @w{  Hyperbolic arc tangent   (@t{log}  (1+x) - @t{log} (1-x))/2                 }
 
 @noindent
 @w{    Figure 12--15: Mathematical definitions for hyperbolic functions  }
 
 @end group
+@end format
 
 The following definition for the inverse hyperbolic cosine
 determines the range and branch cuts:
 
-@center  @t{arccosh}  z = 2 @t{log}  (\sqrt{(z+1)/2} + \sqrt{(z-1)/2}\Bigr). 
+@center  @t{arccosh}  z = 2 @t{log}  (\sqrt@i{(z+1)/2} + \sqrt@i{(z-1)/2}\Bigr). 
 
 The branch cut for the inverse hyperbolic cosine function
 lies along the real axis to the left of~1 (inclusive), extending
@@ -2152,7 +2182,7 @@
 The following definition for the inverse hyperbolic sine determines
 the range and branch cuts:
 
-@center  @t{arcsinh}  z = @t{log}  (z+\sqrt{1+z^2}\Bigr). 
+@center  @t{arcsinh}  z = @t{log}  (z+\sqrt@i{1+z^2}\Bigr). 
 
 The branch cut for the inverse hyperbolic sine function is in two pieces:
 one along the positive imaginary axis above i
@@ -2167,7 +2197,7 @@
 The following definition for the inverse hyperbolic tangent
 determines the range and branch cuts:
 
-@center  @t{arctanh}  z = {{@t{log}  (1+z) - @t{log}  (1-z)}\over{2}}. 
+@center  @t{arctanh}  z = @i{@i{@t{log}  (1+z) - @t{log}  (1-z)}\over@r{2}}. 
 
 Note that:
 
@@ -2206,7 +2236,7 @@
 
 @ref{log}
 ,
-@ref{sqrt; isqrt}
+@ref{sqrt}
 ,
 @ref{Rule of Float Substitutability}
 
@@ -2228,7 +2258,7 @@
 @node *, +, sinh, Numbers Dictionary
 @subsection *                                                                [Function]
 
-@code{*}  @i{{&rest} numbers} @result{}  @i{product}
+@code{*}  @i{@r{&rest} numbers} @result{}  @i{product}
 
 @subsubheading  Arguments and Values::
 
@@ -2265,7 +2295,7 @@
 @node +, -, *, Numbers Dictionary
 @subsection +                                                                [Function]
 
-@code{+}  @i{{&rest} numbers} @result{}  @i{sum}
+@code{+}  @i{@r{&rest} numbers} @result{}  @i{sum}
 
 @subsubheading  Arguments and Values::
 
@@ -2304,7 +2334,7 @@
 
 @code{-}  @i{number} @result{}  @i{negation}
 
-@code{-}  @i{minuend {&rest} subtrahends^+} @result{}  @i{difference}
+@code{-}  @i{minuend @r{&rest} subtrahends^+} @result{}  @i{difference}
 
 @subsubheading  Arguments and Values::
 
@@ -2353,7 +2383,7 @@
 
 @code{/}  @i{number} @result{}  @i{reciprocal}
 
-@code{/}  @i{numerator {&rest} denominators^+} @result{}  @i{quotient}
+@code{/}  @i{numerator @r{&rest} denominators^+} @result{}  @i{quotient}
 
 @subsubheading  Arguments and Values::
 
@@ -2406,16 +2436,16 @@
 
 @subsubheading  See Also::
 
-@ref{floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround}
+@ref{floor}
 , @b{ceiling}, @b{truncate}, @b{round}
 
 @node 1+, abs, /, Numbers Dictionary
 @subsection 1+, 1-                                                         [Function]
 
 @code{1}  @i{+} @result{}  @i{number}
- {successor}
+ @r{successor}
 @code{1}  @i{-} @result{}  @i{number}
- {predecessor}
+ @r{predecessor}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2444,7 +2474,7 @@
 
 @subsubheading  See Also::
 
-@ref{incf; decf}
+@ref{incf}
 , @b{decf}
 
 @subsubheading  Notes::
@@ -2611,7 +2641,7 @@
 approximately equal to @t{#C(1.0 1.73205)}, not @t{-2}.
 
 @b{expt} is defined
-as @i{b^x = e^{x log b\/}}.
+as @i{b^x = e^@i{x log b\/}}.
 This defines the @i{principal} @i{values} precisely.  The range of
 @b{expt} is the entire complex plane.  Regarded
 as a function of @i{x}, with @i{b} fixed, there is no branch cut.
@@ -2678,7 +2708,7 @@
 @node gcd, incf, exp, Numbers Dictionary
 @subsection gcd                                                              [Function]
 
-@code{gcd}  @i{{&rest} integers} @result{}  @i{greatest-common-denominator}
+@code{gcd}  @i{@r{&rest} integers} @result{}  @i{greatest-common-denominator}
 
 @subsubheading  Arguments and Values::
 
@@ -2778,12 +2808,12 @@
 @b{+}, 
 @ref{-}
 , @b{1+}, @b{1-}, 
-@ref{setf; psetf}
+@ref{setf}
 
 @node lcm, log, incf, Numbers Dictionary
 @subsection lcm                                                              [Function]
 
-@code{lcm}  @i{{&rest} integers} @result{}  @i{least-common-multiple}
+@code{lcm}  @i{@r{&rest} integers} @result{}  @i{least-common-multiple}
 
 @subsubheading  Arguments and Values::
 
@@ -2836,10 +2866,10 @@
 
 @ref{gcd}
 
-@node log, mod, lcm, Numbers Dictionary
+@node log, mod (Function), lcm, Numbers Dictionary
 @subsection log                                                              [Function]
 
-@code{log}  @i{number {&optional} base} @result{}  @i{logarithm}
+@code{log}  @i{number @r{&optional} base} @result{}  @i{logarithm}
 
 @subsubheading  Arguments and Values::
 
@@ -2924,12 +2954,12 @@
 
 @subsubheading  See Also::
 
-@ref{exp; expt}
+@ref{exp}
 ,
 @b{expt},
 @ref{Rule of Float Substitutability}
 
-@node mod, signum, log, Numbers Dictionary
+@node mod (Function), signum, log, Numbers Dictionary
 @subsection mod, rem                                                         [Function]
 
 @code{mod}  @i{number divisor} @result{}  @i{modulus}
@@ -2981,7 +3011,7 @@
 
 @subsubheading  See Also::
 
-@ref{floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround}
+@ref{floor}
 , @b{truncate}
 
 @subsubheading  Notes::
@@ -2992,7 +3022,7 @@
 
 with the same sign as @i{divisor}.
 
-@node signum, sqrt, mod, Numbers Dictionary
+@node signum, sqrt, mod (Function), Numbers Dictionary
 @subsection signum                                                           [Function]
 
 @code{signum}  @i{number} @result{}  @i{signed-prototype}
@@ -3122,7 +3152,7 @@
 
 @subsubheading  See Also::
 
-@ref{exp; expt}
+@ref{exp}
 ,
 @ref{log}
 ,
@@ -3166,7 +3196,7 @@
 @node make-random-state, random, random-state, Numbers Dictionary
 @subsection make-random-state                                                [Function]
 
-@code{make-random-state}  @i{{&optional} state} @result{}  @i{new-state}
+@code{make-random-state}  @i{@r{&optional} state} @result{}  @i{new-state}
 
 @subsubheading  Arguments and Values::
 
@@ -3230,7 +3260,7 @@
 @node random, random-state-p, make-random-state, Numbers Dictionary
 @subsection random                                                           [Function]
 
-@code{random}  @i{limit {&optional} random-state} @result{}  @i{random-number}
+@code{random}  @i{limit @r{&optional} random-state} @result{}  @i{random-number}
 
 @subsubheading  Arguments and Values::
 
@@ -3420,7 +3450,7 @@
 
 @subsubheading  Description::
 
-@b{cis} returns the value of~@i{e}^{i\cdot @i{radians}},
+@b{cis} returns the value of~@i{e}^@i{i\cdot @i{radians}},
 which is a @i{complex} in which the
 real part is equal to the cosine of @i{radians}, and the 
 imaginary part is equal to the sine of @i{radians}.
@@ -3437,7 +3467,7 @@
 @node complex, complexp, cis, Numbers Dictionary
 @subsection complex                                                          [Function]
 
-@code{complex}  @i{realpart {&optional} imagpart} @result{}  @i{complex}
+@code{complex}  @i{realpart @r{&optional} imagpart} @result{}  @i{complex}
 
 @subsubheading  Arguments and Values::
 
@@ -3490,7 +3520,7 @@
 
 @subsubheading  See Also::
 
-@ref{realpart; imagpart}
+@ref{realpart}
 , @b{imagpart}
 
 @subsubheading  Notes::
@@ -3687,7 +3717,7 @@
 @node upgraded-complex-part-type, realp, realpart, Numbers Dictionary
 @subsection upgraded-complex-part-type                                       [Function]
 
-@code{upgraded-complex-part-type}  @i{typespec {&optional} environment} @result{}  @i{upgraded-typespec}
+@code{upgraded-complex-part-type}  @i{typespec @r{&optional} environment} @result{}  @i{upgraded-typespec}
 
 @subsubheading  Arguments and Values:: 
 
@@ -3749,7 +3779,7 @@
  (realp @i{object}) @equiv{} (typep @i{object} 'real)
 @end example
 
-@node numerator, rational, realp, Numbers Dictionary
+@node numerator, rational (Function), realp, Numbers Dictionary
 @subsection numerator, denominator                                           [Function]
 
 @code{numerator}  @i{rational} @result{}  @i{numerator}
@@ -3795,7 +3825,7 @@
  (gcd (numerator x) (denominator x)) @result{}  1
 @end example
 
-@node rational, rationalp, numerator, Numbers Dictionary
+@node rational (Function), rationalp, numerator, Numbers Dictionary
 @subsection rational, rationalize                                            [Function]
 
 @code{rational}  @i{number} @result{}  @i{rational}
@@ -3868,7 +3898,7 @@
 to a @i{float} 
 of the same format produces the original @i{number}.
 
-@node rationalp, ash, rational, Numbers Dictionary
+@node rationalp, ash, rational (Function), Numbers Dictionary
 @subsection rationalp                                                        [Function]
 
 @code{rationalp}  @i{object} @result{}  @i{generalized-boolean}
@@ -3894,7 +3924,7 @@
 
 @subsubheading  See Also::
 
-@ref{rational}
+@ref{rational (Function)}
 
 @subsubheading  Notes::
 @example
@@ -3926,7 +3956,7 @@
 as @i{integer} is returned.
 
 Mathematically speaking, @b{ash} performs the computation
-@t{floor}(@i{integer}{\cdot} 2^@i{count}).
+@t{floor}(@i{integer}\cdot 2^@i{count}).
 Logically, @b{ash} 
 moves all of the bits in @i{integer} to the left,
 adding zero-bits at the right, or moves them to the right,
@@ -4050,7 +4080,7 @@
 @node parse-integer, boole, integerp, Numbers Dictionary
 @subsection parse-integer                                                    [Function]
 
-@code{parse-integer}  @i{string {&key} start end radix junk-allowed} @result{}  @i{integer, pos}
+@code{parse-integer}  @i{string @r{&key} start end radix junk-allowed} @result{}  @i{integer, pos}
 
 @subsubheading  Arguments and Values::
 
@@ -4140,8 +4170,9 @@
 @b{boole} returns the values 
 specified for any @i{op} in Figure 12--16.
 
-{
 
+
+@format
 @group
 @noindent
 @w{  Op           Result                                      }
@@ -4166,8 +4197,9 @@
 @w{         Figure 12--16: Bit-Wise Logical Operations        }
 
 @end group
+@end format
+
 
-}
 
 @subsubheading  Examples::
 
@@ -4217,7 +4249,7 @@
 
 @subsubheading  See Also::
 
-@ref{logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; logorc1; logorc2; logxor}
+@ref{logand}
 
 @subsubheading  Notes::  
 
@@ -4292,15 +4324,15 @@
 @i{[Function]}
 @end flushright
 
-@code{logand}  @i{{&rest} integers} @result{}  @i{result-integer}
+@code{logand}  @i{@r{&rest} integers} @result{}  @i{result-integer}
 
 @code{logandc}  @i{1} @result{}  @i{integer-1 integer-2}
- {result-integer}
+ @r{result-integer}
 @code{logandc}  @i{2} @result{}  @i{integer-1 integer-2}
- {result-integer}
-@code{logeqv}  @i{{&rest} integers} @result{}  @i{result-integer}
+ @r{result-integer}
+@code{logeqv}  @i{@r{&rest} integers} @result{}  @i{result-integer}
 
-@code{logior}  @i{{&rest} integers} @result{}  @i{result-integer}
+@code{logior}  @i{@r{&rest} integers} @result{}  @i{result-integer}
 
 @code{lognand}  @i{integer-1 integer-2} @result{}  @i{result-integer}
 
@@ -4309,10 +4341,10 @@
 @code{lognot}  @i{integer} @result{}  @i{result-integer}
 
 @code{logorc}  @i{1} @result{}  @i{integer-1 integer-2}
- {result-integer}
+ @r{result-integer}
 @code{logorc}  @i{2} @result{}  @i{integer-1 integer-2}
- {result-integer}
-@code{logxor}  @i{{&rest} integers} @result{}  @i{result-integer}
+ @r{result-integer}
+@code{logxor}  @i{@r{&rest} integers} @result{}  @i{result-integer}
 
 @subsubheading  Arguments and Values::
 
@@ -4347,6 +4379,7 @@
 Where an `identity' is shown, it indicates the @i{value} @i{yielded}
 by the @i{function} when no @i{arguments} are supplied.
 
+@format
 @group
 @noindent
 @w{  Function  Identity  Operation performed                         }
@@ -4366,6 +4399,7 @@
 @w{       Figure 12--17: Bit-wise Logical Operations on Integers     }
 
 @end group
+@end format
 
 Negative @i{integers} are treated as if they were in two's-complement notation.
 
@@ -4594,7 +4628,7 @@
 
 @b{byte} returns a @i{byte specifier} that indicates
 a @i{byte} of width @i{size} and whose bits have weights            
-2^{@i{position} + @i{size} - 1\/} through 2^@i{position},
+2^@i{@i{position} + @i{size} - 1\/} through 2^@i{position},
 and whose representation is
 @i{implementation-dependent}.                 
 
@@ -4663,7 +4697,7 @@
 
 @subsubheading  See Also::
 
-@ref{byte; byte-size; byte-position}
+@ref{byte}
 ,
 @ref{dpb}
 
@@ -4723,7 +4757,7 @@
 
 @subsubheading  See Also::
 
-@ref{byte; byte-size; byte-position}
+@ref{byte}
 , 
 @ref{deposit-field}
 , 
@@ -4776,8 +4810,8 @@
 specified by @i{bytespec}.
 
 @b{ldb} returns an @i{integer} in which the bits with weights 
-2^{(@i{s}-1)} through 2^{0} are the same as those in 
-@i{integer} with weights 2^{(@i{p}+@i{s}-1)} 
+2^@i{(@i{s}-1)} through 2^0 are the same as those in 
+@i{integer} with weights 2^@i{(@i{p}+@i{s}-1)} 
 through 2^@i{p}, and all other bits zero; @i{s} is
 @t{(byte-size @i{bytespec})} 
 and @i{p} is @t{(byte-position @i{bytespec})}.
@@ -4807,7 +4841,7 @@
 
 @subsubheading  See Also::
 
-@ref{byte; byte-size; byte-position}
+@ref{byte}
 ,
 @b{byte-position},
 @b{byte-size},
@@ -4859,7 +4893,7 @@
 
 @subsubheading  See Also::
 
-@ref{byte; byte-size; byte-position}
+@ref{byte}
 , 
 @ref{ldb}
 , 
@@ -4912,7 +4946,7 @@
 
 @subsubheading  See Also::
 
-@ref{byte; byte-size; byte-position}
+@ref{byte}
 ,
 @ref{ldb}
 
@@ -4937,13 +4971,13 @@
 @b{most-positive-fixnum} is that @i{fixnum} closest in value 
 to positive infinity provided by the implementation,
 
-and greater than or equal to both 2^{15} - 1 and 
+and greater than or equal to both 2^@r{15} - 1 and 
 @b{array-dimension-limit}.
 
 @b{most-negative-fixnum} is that @i{fixnum} closest in value
 to negative infinity provided by the implementation,
 
-and less than or equal to -2^{15}.
+and less than or equal to -2^@r{15}.
 
 @node decode-float, float, most-positive-fixnum, Numbers Dictionary
 @subsection decode-float, scale-float, float-radix, float-sign, 
@@ -4958,7 +4992,7 @@
 
 @code{float-radix}  @i{float} @result{}  @i{float-radix}
 
-@code{float-sign}  @i{float-1 {&optional} float-2} @result{}  @i{signed-float}
+@code{float-sign}  @i{float-1 @r{&optional} float-2} @result{}  @i{signed-float}
 
 @code{float-digits}  @i{float} @result{}  @i{digits1}
 
@@ -5137,7 +5171,7 @@
 @node float, floatp, decode-float, Numbers Dictionary
 @subsection float                                                            [Function]
 
-@code{float}  @i{number {&optional} prototype} @result{}  @i{float}
+@code{float}  @i{number @r{&optional} prototype} @result{}  @i{float}
 
 @subsubheading  Arguments and Values::
 
@@ -5184,7 +5218,7 @@
 @subsection floatp                                                           [Function]
 
 @code{floatp}  @i{object}
- {generalized-boolean}
+ @r{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -5372,7 +5406,7 @@
 @subsubheading  See Also::
 
 @b{arithmetic-error-operation}, 
-@ref{arithmetic-error-operands; arithmetic-error-operation}
+@ref{arithmetic-error-operands}
 
 @node arithmetic-error-operands, division-by-zero, arithmetic-error, Numbers Dictionary
 @subsection arithmetic-error-operands, arithmetic-error-operation            [Function]
@@ -5401,7 +5435,7 @@
 @subsubheading  See Also::
 
 @b{arithmetic-error},
-{@ref{Conditions}}
+@ref{Conditions}
 
 @subsubheading  Notes::
 
diff -uNr gcl-texi-orig/chap-13.texi gcl-texi/chap-13.texi
--- gcl-texi-orig/chap-13.texi	1994-07-16 18:03:11 +0400
+++ gcl-texi/chap-13.texi	2002-10-17 20:53:05 +0400
@@ -46,6 +46,7 @@
 Figure 13--1 lists some @i{defined names} relating to 
 @i{character} @i{attributes} and @i{character} @i{predicates}.
 
+@format
 @group
 @noindent
 @w{  alpha-char-p     char-not-equal     char>            }
@@ -60,9 +61,11 @@
 @w{       Figure 13--1: Character defined names -- 1      }
 
 @end group
+@end format
 
 Figure 13--2 lists some @i{character} construction and conversion @i{defined names}.
 
+@format
 @group
 @noindent
 @w{  char-code      char-name    code-char   }
@@ -73,6 +76,7 @@
 @w{  Figure 13--2: Character defined names -- 2}
 
 @end group
+@end format
 
 @node Introduction to Scripts and Repertoires, Character Attributes, Introduction to Characters, Character Concepts
 @subsection Introduction to Scripts and Repertoires
@@ -671,29 +675,29 @@
 @i{[Function]}
 @end flushright
 
-@code{{char=}}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{@r{char=}}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{{char/=}}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{@r{char/=}}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{{char<}}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{@r{char<}}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{{char>}}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{@r{char>}}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{{char<=}}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{@r{char<=}}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{{char>=}}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{@r{char>=}}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{char-equal}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{char-equal}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{char-not-equal}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{char-not-equal}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{char-lessp}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{char-lessp}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{char-greaterp}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{char-greaterp}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{char-not-greaterp}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{char-not-greaterp}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
-@code{char-not-lessp}  @i{{&rest} characters^+} @result{}  @i{generalized-boolean}
+@code{char-not-lessp}  @i{@r{&rest} characters^+} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -1048,7 +1052,7 @@
 @node digit-char, digit-char-p, alphanumericp, Characters Dictionary
 @subsection digit-char                                                       [Function]
 
-@code{digit-char}  @i{weight {&optional} radix} @result{}  @i{char}
+@code{digit-char}  @i{weight @r{&optional} radix} @result{}  @i{char}
 
 @subsubheading  Arguments and Values::
 
@@ -1096,7 +1100,7 @@
 @node digit-char-p, graphic-char-p, digit-char, Characters Dictionary
 @subsection digit-char-p                                                     [Function]
 
-@code{digit-char-p}  @i{char {&optional} radix} @result{}  @i{weight}
+@code{digit-char-p}  @i{char @r{&optional} radix} @result{}  @i{weight}
 
 @subsubheading  Arguments and Values::
 
@@ -1182,7 +1186,7 @@
 
 @subsubheading  See Also::
 
-@ref{read; read-preserving-whitespace}
+@ref{read}
 ,
 @ref{Character Syntax},
 @ref{Documentation of Implementation-Defined Scripts}
@@ -1275,7 +1279,7 @@
 
 @subsubheading  See Also::
 
-@ref{upper-case-p; lower-case-p; both-case-p}
+@ref{upper-case-p}
 ,
 @ref{alpha-char-p}
 ,
@@ -1340,7 +1344,7 @@
 
 @subsubheading  See Also::
 
-@ref{char-upcase; char-downcase}
+@ref{char-upcase}
 ,
 @b{char-downcase},
 @ref{Characters With Case},
diff -uNr gcl-texi-orig/chap-14.texi gcl-texi/chap-14.texi
--- gcl-texi-orig/chap-14.texi	1994-07-16 18:03:10 +0400
+++ gcl-texi/chap-14.texi	2002-10-17 20:53:05 +0400
@@ -18,6 +18,7 @@
  is a compound data @i{object} 
 having two components called the @i{car} and the @i{cdr}.
 
+@format
 @group
 @noindent
 @w{  car  cons    rplacd  }
@@ -27,6 +28,7 @@
 @w{  Figure 14--1: Some defined names relating to conses.}
 
 @end group
+@end format
 
 Depending on context, a group of connected @i{conses} can be viewed
 in a variety of different ways.  A variety of operations is provided to
@@ -52,6 +54,7 @@
 Typically, the @i{leaves} represent data while the branches 
 establish some relationship among that data.
 
+@format
 @group
 @noindent
 @w{  caaaar  caddar  cdar       nsubst         }
@@ -69,6 +72,7 @@
 @w{  Figure 14--2: Some defined names relating to trees.}
 
 @end group
+@end format
 
 @menu
 * General Restrictions on Parameters that must be Trees::  
@@ -114,6 +118,7 @@
  is a chain of @i{conses} that has no termination 
 because some @i{cons} in the chain is the @i{cdr} of a later @i{cons}.
 
+@format
 @group
 @noindent
 @w{  append      last           nbutlast  rest       }
@@ -130,6 +135,7 @@
 @w{  Figure 14--3: Some defined names relating to lists.}
 
 @end group
+@end format
 
 @menu
 * Lists as Association Lists::	
@@ -147,6 +153,7 @@
 where the @i{car} of each @i{cons} is the @i{key} 
 and the @i{cdr} is the @i{value} associated with that @i{key}.
 
+@format
 @group
 @noindent
 @w{  acons  assoc-if      pairlis  rassoc-if      }
@@ -156,6 +163,7 @@
 @w{  Figure 14--4: Some defined names related to assocation lists.}
 
 @end group
+@end format
 
 @node Lists as Sets, General Restrictions on Parameters that must be Lists, Lists as Association Lists, Conses as Lists
 @subsubsection Lists as Sets
@@ -163,6 +171,7 @@
 @i{Lists} are sometimes viewed as sets by considering their elements
 unordered and by assuming there is no duplication of elements.
 
+@format
 @group
 @noindent
 @w{  adjoin         nset-difference    set-difference    union  }
@@ -173,6 +182,7 @@
 @w{       Figure 14--5: Some defined names related to sets.     }
 
 @end group
+@end format
 
 @node General Restrictions on Parameters that must be Lists,  , Lists as Sets, Conses as Lists
 @subsubsection General Restrictions on Parameters that must be Lists
@@ -196,7 +206,7 @@
 @c including dict-conses
 
 @menu
-* list::			
+* list (System Class)::			
 * null (System Class)::		
 * cons (System Class)::		
 * atom (Type)::			
@@ -210,7 +220,7 @@
 * subst::			
 * tree-equal::			
 * copy-list::			
-* list::			
+* list (Function)::			
 * list-length::			
 * listp::			
 * make-list::			
@@ -228,7 +238,7 @@
 * ldiff::			
 * nthcdr::			
 * rest::			
-* member::			
+* member (Function)::			
 * mapc::			
 * acons::			
 * assoc::			
@@ -247,7 +257,7 @@
 * union::			
 @end menu
 
-@node list, null (System Class), Conses Dictionary, Conses Dictionary
+@node list (System Class), null (System Class), Conses Dictionary, Conses Dictionary
 @subsection list                                                         [System Class]
 
 @subsubheading  Class Precedence List::
@@ -296,7 +306,7 @@
 @ref{Left-Parenthesis},
 @ref{Printing Lists and Conses}
 
-@node null (System Class), cons (System Class), list, Conses Dictionary
+@node null (System Class), cons (System Class), list (System Class), Conses Dictionary
 @subsection null                                                         [System Class]
 
 @subsubheading  Class Precedence List::
@@ -408,7 +418,7 @@
 
 @subsubheading  See Also::
 
-@ref{list}
+@ref{list (Function)}
 
 @subsubheading  Notes::
 If @i{object-2} is a @i{list}, @b{cons} can be thought of as
@@ -677,6 +687,7 @@
 order in which the corresponding operations are performed.  Figure 14--6 
 defines the relationships precisely.
 
+@format
 @group
 @noindent
 @w{  This @i{place} ...  Is equivalent to this @i{place} ...  }
@@ -713,6 +724,7 @@
 @w{         Figure 14--6: CAR and CDR variants        }
 
 @end group
+@end format
 
 @b{setf} can also be used with any of these functions to change an
 existing component of @i{x}, but @b{setf} will not make new
@@ -749,9 +761,9 @@
 
 @subsubheading  See Also::
 
-@ref{rplaca; rplacd}
+@ref{rplaca}
 , 
-@ref{first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; tenth}
+@ref{first}
 , 
 @ref{rest}
 
@@ -821,9 +833,9 @@
 @node sublis, subst, copy-tree, Conses Dictionary
 @subsection sublis, nsublis                                                  [Function]
 
-@code{sublis}  @i{alist tree {&key} key test test-not} @result{}  @i{new-tree}
+@code{sublis}  @i{alist tree @r{&key} key test test-not} @result{}  @i{new-tree}
 
-@code{nsublis}  @i{alist tree {&key} key test test-not} @result{}  @i{new-tree}
+@code{nsublis}  @i{alist tree @r{&key} key test test-not} @result{}  @i{new-tree}
 
 @subsubheading  Arguments and Values::
 
@@ -906,7 +918,7 @@
 
 @subsubheading  See Also::
 
-@ref{subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not}
+@ref{subst}
 ,
 
 @ref{Compiler Terminology},
@@ -939,17 +951,17 @@
 @i{[Function]}
 @end flushright
 
-@code{subst}  @i{new old  tree {&key} key test test-not} @result{}  @i{new-tree}
+@code{subst}  @i{new old  tree @r{&key} key test test-not} @result{}  @i{new-tree}
 
-@code{subst-if}  @i{new predicate tree {&key} key} @result{}  @i{new-tree}
+@code{subst-if}  @i{new predicate tree @r{&key} key} @result{}  @i{new-tree}
 
-@code{subst-if-not}  @i{new predicate tree {&key} key} @result{}  @i{new-tree}
+@code{subst-if-not}  @i{new predicate tree @r{&key} key} @result{}  @i{new-tree}
 
-@code{nsubst}  @i{new old  tree {&key} key test test-not} @result{}  @i{new-tree}
+@code{nsubst}  @i{new old  tree @r{&key} key test test-not} @result{}  @i{new-tree}
 
-@code{nsubst-if}  @i{new predicate tree {&key} key} @result{}  @i{new-tree}
+@code{nsubst-if}  @i{new predicate tree @r{&key} key} @result{}  @i{new-tree}
 
-@code{nsubst-if-not}  @i{new predicate tree {&key} key} @result{}  @i{new-tree}
+@code{nsubst-if-not}  @i{new predicate tree @r{&key} key} @result{}  @i{new-tree}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1048,7 +1060,7 @@
 
 @subsubheading  See Also::
 
-@ref{substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-if; nsubstitute-if-not}
+@ref{substitute}
 ,
 @b{nsubstitute},
 
@@ -1081,7 +1093,7 @@
 @node tree-equal, copy-list, subst, Conses Dictionary
 @subsection tree-equal                                                       [Function]
 
-@code{tree-equal}  @i{tree-1 tree-2 {&key} test test-not} @result{}  @i{generalized-boolean}
+@code{tree-equal}  @i{tree-1 tree-2 @r{&key} test test-not} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1148,7 +1160,7 @@
 
 The @t{:test-not} parameter is deprecated.
 
-@node copy-list, list, tree-equal, Conses Dictionary
+@node copy-list, list (Function), tree-equal, Conses Dictionary
 @subsection copy-list                                                        [Function]
 
 @code{copy-list}  @i{list} @result{}  @i{copy}
@@ -1203,12 +1215,12 @@
 
 The copy created is @b{equal} to @i{list}, but not @b{eq}.
 
-@node list, list-length, copy-list, Conses Dictionary
+@node list (Function), list-length, copy-list, Conses Dictionary
 @subsection list, list*                                                      [Function]
 
-@code{list}  @i{{&rest} objects} @result{}  @i{list}
+@code{list}  @i{@r{&rest} objects} @result{}  @i{list}
 
-@code{list*}  @i{{&rest} objects^+} @result{}  @i{result}
+@code{list*}  @i{@r{&rest} objects^+} @result{}  @i{result}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1266,7 +1278,7 @@
  (list* @i{x}) @equiv{} @i{x}
 @end example
 
-@node list-length, listp, list, Conses Dictionary
+@node list-length, listp, list (Function), Conses Dictionary
 @subsection list-length                                                      [Function]
 
 @code{list-length}  @i{list} @result{}  @i{length}
@@ -1370,7 +1382,7 @@
 @node make-list, push, listp, Conses Dictionary
 @subsection make-list                                                        [Function]
 
-@code{make-list}  @i{size {&key} initial-element} @result{}  @i{list}
+@code{make-list}  @i{size @r{&key} initial-element} @result{}  @i{list}
 
 @subsubheading  Arguments and Values::
 
@@ -1404,7 +1416,7 @@
 
 @ref{cons}
 ,
-@ref{list}
+@ref{list (Function)}
 
 @node push, pop, make-list, Conses Dictionary
 @subsection push                                                                [Macro]
@@ -1619,7 +1631,7 @@
 
 @subsubheading  See Also::
 
-@ref{car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cdadr; cddar; cdddr; caaaar; caaadr; caadar; caaddr; cadaar; cadadr; caddar; cadddr; cdaaar; cdaadr; cdadar; cdaddr; cddaar; cddadr; cdddar; cddddr}
+@ref{car}
 , 
 @ref{nth}
 
@@ -1690,7 +1702,7 @@
 
 @ref{elt}
 ,
-@ref{first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; tenth}
+@ref{first}
 ,
 @ref{nthcdr}
 
@@ -1787,7 +1799,7 @@
 @node nconc, append, null, Conses Dictionary
 @subsection nconc                                                            [Function]
 
-@code{nconc}  @i{{&rest} lists} @result{}  @i{concatenated-list}
+@code{nconc}  @i{@r{&rest} lists} @result{}  @i{concatenated-list}
 
 @subsubheading  Arguments and Values::
 
@@ -1863,7 +1875,7 @@
 @node append, revappend, nconc, Conses Dictionary
 @subsection append                                                           [Function]
 
-@code{append}  @i{{&rest} lists} @result{}  @i{result}
+@code{append}  @i{@r{&rest} lists} @result{}  @i{result}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1975,7 +1987,7 @@
 
 @subsubheading  See Also::
 
-@ref{reverse; nreverse}
+@ref{reverse}
 ,
 @b{nreverse},
 @ref{nconc}
@@ -1994,9 +2006,9 @@
 @node butlast, last, revappend, Conses Dictionary
 @subsection butlast, nbutlast                                                [Function]
 
-@code{butlast}  @i{list {&optional} n} @result{}  @i{result-list}
+@code{butlast}  @i{list @r{&optional} n} @result{}  @i{result-list}
 
-@code{nbutlast}  @i{list {&optional} n} @result{}  @i{result-list}
+@code{nbutlast}  @i{list @r{&optional} n} @result{}  @i{result-list}
 
 @subsubheading  Arguments and Values::
 
@@ -2069,7 +2081,7 @@
 @node last, ldiff, butlast, Conses Dictionary
 @subsection last                                                             [Function]
 
-@code{last}  @i{list {&optional} n} @result{}  @i{tail}
+@code{last}  @i{list @r{&optional} n} @result{}  @i{tail}
 
 @subsubheading  Arguments and Values::
 
@@ -2126,7 +2138,7 @@
 
 @subsubheading  See Also::
 
-@ref{butlast; nbutlast}
+@ref{butlast}
 ,
 @ref{nth}
 
@@ -2221,7 +2233,7 @@
 
 @subsubheading  See Also::
 
-@ref{set-difference; nset-difference}
+@ref{set-difference}
 
 @subsubheading  Notes::
 
@@ -2307,7 +2319,7 @@
 ,
 @ref{rest}
 
-@node rest, member, nthcdr, Conses Dictionary
+@node rest, member (Function), nthcdr, Conses Dictionary
 @subsection rest                                                             [Accessor]
 
 @code{rest}  @i{list} @result{}  @i{tail}
@@ -2355,14 +2367,14 @@
 when the argument is to being subjectively viewed as a @i{list} 
 rather than as a @i{cons}.
 
-@node member, mapc, rest, Conses Dictionary
+@node member (Function), mapc, rest, Conses Dictionary
 @subsection member, member-if, member-if-not                                 [Function]
 
-@code{member}  @i{item      list {&key} key test test-not} @result{}  @i{tail}
+@code{member}  @i{item      list @r{&key} key test test-not} @result{}  @i{tail}
 
-@code{member-if}  @i{predicate list {&key} key} @result{}  @i{tail}
+@code{member-if}  @i{predicate list @r{&key} key} @result{}  @i{tail}
 
-@code{member-if-not}  @i{predicate list {&key} key} @result{}  @i{tail}
+@code{member-if-not}  @i{predicate list @r{&key} key} @result{}  @i{tail}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2422,9 +2434,9 @@
 
 @subsubheading  See Also::
 
-@ref{find; find-if; find-if-not}
+@ref{find}
 ,
-@ref{position; position-if; position-if-not}
+@ref{position}
 ,
 
 @ref{Traversal Rules and Side Effects}
@@ -2447,20 +2459,20 @@
 where @t{a} was found (assuming a check has been made that @b{member}
 did not return @b{nil}).
 
-@node mapc, acons, member, Conses Dictionary
+@node mapc, acons, member (Function), Conses Dictionary
 @subsection mapc, mapcar, mapcan, mapl, maplist, mapcon                      [Function]
 
-@code{mapc}  @i{function {&rest} lists^+} @result{}  @i{list-1}
+@code{mapc}  @i{function @r{&rest} lists^+} @result{}  @i{list-1}
 
-@code{mapcar}  @i{function {&rest} lists^+} @result{}  @i{result-list}
+@code{mapcar}  @i{function @r{&rest} lists^+} @result{}  @i{result-list}
 
-@code{mapcan}  @i{function {&rest} lists^+} @result{}  @i{concatenated-results}
+@code{mapcan}  @i{function @r{&rest} lists^+} @result{}  @i{concatenated-results}
 
-@code{mapl}  @i{function {&rest} lists^+} @result{}  @i{list-1}
+@code{mapl}  @i{function @r{&rest} lists^+} @result{}  @i{list-1}
 
-@code{maplist}  @i{function {&rest} lists^+} @result{}  @i{result-list}
+@code{maplist}  @i{function @r{&rest} lists^+} @result{}  @i{result-list}
 
-@code{mapcon}  @i{function {&rest} lists^+} @result{}  @i{concatenated-results}
+@code{mapcon}  @i{function @r{&rest} lists^+} @result{}  @i{concatenated-results}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2627,7 +2639,7 @@
 
 @subsubheading  See Also::
 
-@ref{assoc; assoc-if; assoc-if-not}
+@ref{assoc}
 , 
 @ref{pairlis}
 
@@ -2640,11 +2652,11 @@
 @node assoc, copy-alist, acons, Conses Dictionary
 @subsection assoc, assoc-if, assoc-if-not                                    [Function]
 
-@code{assoc}  @i{item      alist {&key} key test test-not} @result{}  @i{entry}
+@code{assoc}  @i{item      alist @r{&key} key test test-not} @result{}  @i{entry}
 
-@code{assoc-if}  @i{predicate alist {&key} key} @result{}  @i{entry}
+@code{assoc-if}  @i{predicate alist @r{&key} key} @result{}  @i{entry}
 
-@code{assoc-if-not}  @i{predicate alist {&key} key} @result{}  @i{entry}
+@code{assoc-if-not}  @i{predicate alist @r{&key} key} @result{}  @i{entry}
 
 @subsubheading  Arguments and Values::
 
@@ -2711,13 +2723,13 @@
 
 @subsubheading  See Also::
 
-@ref{rassoc; rassoc-if; rassoc-if-not}
+@ref{rassoc}
 ,
-@ref{find; find-if; find-if-not}
+@ref{find}
 ,
-@ref{member; member-if; member-if-not}
+@ref{member (Function)}
 ,
-@ref{position; position-if; position-if-not}
+@ref{position}
 ,
 
 @ref{Traversal Rules and Side Effects}
@@ -2798,7 +2810,7 @@
 @node pairlis, rassoc, copy-alist, Conses Dictionary
 @subsection pairlis                                                          [Function]
 
-@code{pairlis}  @i{keys data {&optional} alist} @result{}  @i{new-alist}
+@code{pairlis}  @i{keys data @r{&optional} alist} @result{}  @i{new-alist}
 
 @subsubheading  Arguments and Values::
 
@@ -2864,11 +2876,11 @@
 @node rassoc, get-properties, pairlis, Conses Dictionary
 @subsection rassoc, rassoc-if, rassoc-if-not                                 [Function]
 
-@code{rassoc}  @i{item      alist  {&key} key test test-not} @result{}  @i{entry}
+@code{rassoc}  @i{item      alist  @r{&key} key test test-not} @result{}  @i{entry}
 
-@code{rassoc-if}  @i{predicate alist {&key} key} @result{}  @i{entry}
+@code{rassoc-if}  @i{predicate alist @r{&key} key} @result{}  @i{entry}
 
-@code{rassoc-if-not}  @i{predicate alist {&key} key} @result{}  @i{entry}
+@code{rassoc-if-not}  @i{predicate alist @r{&key} key} @result{}  @i{entry}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2919,7 +2931,7 @@
 
 @subsubheading  See Also::
 
-@ref{assoc; assoc-if; assoc-if-not}
+@ref{assoc}
 ,
 
 @ref{Traversal Rules and Side Effects}
@@ -3001,9 +3013,9 @@
 @node getf, remf, get-properties, Conses Dictionary
 @subsection getf                                                             [Accessor]
 
-@code{getf}  @i{plist indicator {&optional} default} @result{}  @i{value}
+@code{getf}  @i{plist indicator @r{&optional} default} @result{}  @i{value}
 
-(setf (@code{         getf} @i{place indicator {&optional} default}) new-value)@*
+(setf (@code{         getf} @i{place indicator @r{&optional} default}) new-value)@*
 
 @subsubheading  Arguments and Values::
 
@@ -3081,7 +3093,7 @@
 ,
 @ref{get-properties}
 ,
-@ref{setf; psetf}
+@ref{setf}
 ,
 @ref{Function Call Forms as Places}
 
@@ -3163,9 +3175,9 @@
 @node intersection, adjoin, remf, Conses Dictionary
 @subsection intersection, nintersection                                      [Function]
 
-@code{intersection}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{intersection}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
-@code{nintersection}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{nintersection}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
 @subsubheading  Arguments and Values:: 
 
@@ -3266,7 +3278,7 @@
 
 @subsubheading  See Also::
 
-@ref{union; nunion}
+@ref{union}
 ,
 
 @ref{Compiler Terminology},
@@ -3284,7 +3296,7 @@
 @node adjoin, pushnew, intersection, Conses Dictionary
 @subsection adjoin                                                           [Function]
 
-@code{adjoin}  @i{item list {&key} key test test-not} @result{}  @i{new-list}
+@code{adjoin}  @i{item list @r{&key} key test test-not} @result{}  @i{new-list}
 
 @subsubheading  Arguments and Values:: 
 
@@ -3355,7 +3367,7 @@
 @node pushnew, set-difference, adjoin, Conses Dictionary
 @subsection pushnew                                                             [Macro]
 
-@code{pushnew}  @i{item place {&key} key test test-not}@*
+@code{pushnew}  @i{item place @r{&key} key test test-not}@*
    @result{}  @i{new-place-value}
 
 @subsubheading  Arguments and Values:: 
@@ -3455,9 +3467,9 @@
 @node set-difference, set-exclusive-or, pushnew, Conses Dictionary
 @subsection set-difference, nset-difference                                  [Function]
 
-@code{set-difference}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{set-difference}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
-@code{nset-difference}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{nset-difference}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
 @subsubheading  Arguments and Values:: 
 
@@ -3564,9 +3576,9 @@
 @node set-exclusive-or, subsetp, set-difference, Conses Dictionary
 @subsection set-exclusive-or, nset-exclusive-or                              [Function]
 
-@code{set-exclusive-or}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{set-exclusive-or}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
-@code{nset-exclusive-or}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{nset-exclusive-or}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
 @subsubheading  Arguments and Values:: 
 
@@ -3660,7 +3672,7 @@
 @node subsetp, union, set-exclusive-or, Conses Dictionary
 @subsection subsetp                                                          [Function]
 
-@code{subsetp}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{generalized-boolean}
+@code{subsetp}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -3732,9 +3744,9 @@
 @node union,  , subsetp, Conses Dictionary
 @subsection union, nunion                                                    [Function]
 
-@code{union}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{union}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
-@code{nunion}  @i{list-1 list-2 {&key} key test test-not} @result{}  @i{result-list}
+@code{nunion}  @i{list-1 list-2 @r{&key} key test test-not} @result{}  @i{result-list}
 
 @subsubheading  Arguments and Values:: 
 
@@ -3827,7 +3839,7 @@
 
 @subsubheading  See Also::
 
-@ref{intersection; nintersection}
+@ref{intersection}
 ,
 
 @ref{Compiler Terminology},
diff -uNr gcl-texi-orig/chap-15.texi gcl-texi/chap-15.texi
--- gcl-texi-orig/chap-15.texi	1994-07-16 18:03:09 +0400
+++ gcl-texi/chap-15.texi	2002-10-17 20:53:05 +0400
@@ -148,6 +148,7 @@
 Figure 15--1 lists some @i{defined names} that are applicable to @i{array} 
 creation, @i{access}, and information operations.
 
+@format
 @group
 @noindent
 @w{ adjust-array             array-in-bounds-p      svref                       }
@@ -163,6 +164,7 @@
 @w{           Figure 15--1: General Purpose Array-Related Defined Names          }
 
 @end group
+@end format
 
 @menu
 * Array Upgrading::		
@@ -227,6 +229,7 @@
 most information about @i{strings} does not appear in this chapter;
 see instead @ref{Strings}.
 
+@format
 @group
 @noindent
 @w{  char                string-equal         string-upcase  }
@@ -243,6 +246,7 @@
 @w{      Figure 15--2: Operators that Manipulate Strings     }
 
 @end group
+@end format
 
 @i{Vectors} whose @i{elements} are restricted to @i{type}
 @b{bit} are called @i{bit vectors}
@@ -251,6 +255,7 @@
 @i{Bit vectors} are of @i{type} @b{bit-vector}.
 Figure 15--3 lists some @i{defined names} for operations on @i{bit arrays}.
 
+@format
 @group
 @noindent
 @w{  bit        bit-ior   bit-orc2  }
@@ -263,6 +268,7 @@
 @w{  Figure 15--3: Operators that Manipulate Bit Arrays}
 
 @end group
+@end format
 
 @c end of including concept-arrays
 
@@ -304,7 +310,7 @@
 * vector-pop::			
 * vector-push::			
 * vectorp::			
-* bit::				
+* bit (Array)::				
 * bit-and::			
 * bit-vector-p::		
 * simple-bit-vector-p::		
@@ -347,7 +353,7 @@
 
 (@code{array}@{@i{@t{[}@{element-type | @b{*}@} @r{[}dimension-spec@r{]}@t{]}}@})
 
-@w{@i{dimension-spec} ::=rank | @b{*} | @r{(}@{dimension | @b{*}@}{*}@r{)}}
+@w{@i{dimension-spec} ::=rank | @b{*} | @r{(}@{dimension | @b{*}@}*@r{)}}
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -451,7 +457,7 @@
 
 (@code{simple-array}@{@i{@t{[}@{element-type | @b{*}@} @r{[}dimension-spec@r{]}@t{]}}@})
 
-@w{@i{dimension-spec} ::=rank | @b{*} | @r{(}@{dimension | @b{*}@}{*}@r{)}}
+@w{@i{dimension-spec} ::=rank | @b{*} | @r{(}@{dimension | @b{*}@}*@r{)}}
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -506,7 +512,7 @@
 
 @subsubheading  Compound Type Specifier Syntax::
 
-(@code{vector}@{@i{@t{[}@{element-type | @b{*}@} @r{[}@{size | @b{*}@}{]}@t{]}}@})
+(@code{vector}@{@i{@t{[}@{element-type | @b{*}@} @r{[}@{size | @b{*}@}@r{]}@t{]}}@})
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -684,7 +690,7 @@
 @node make-array, adjust-array, simple-bit-vector, Arrays Dictionary
 @subsection make-array                                                       [Function]
 
-@code{make-array}  @i{dimensions {&key} element-type
+@code{make-array}  @i{dimensions @r{&key} element-type
                                                  initial-element
                                                  initial-contents
                                                  adjustable
@@ -946,7 +952,7 @@
 @node adjust-array, adjustable-array-p, make-array, Arrays Dictionary
 @subsection adjust-array                                                     [Function]
 
-@code{adjust-array}  @i{array new-dimensions {&key} element-type
+@code{adjust-array}  @i{array new-dimensions @r{&key} element-type
                                                            initial-element
                                                            initial-contents
                                                            fill-pointer
@@ -1240,9 +1246,9 @@
 @node aref, array-dimension, adjustable-array-p, Arrays Dictionary
 @subsection aref                                                             [Accessor]
 
-@code{aref}  @i{array {&rest} subscripts} @result{}  @i{element}
+@code{aref}  @i{array @r{&rest} subscripts} @result{}  @i{element}
 
-(setf (@code{         aref} @i{array {&rest} subscripts}) new-element)@*
+(setf (@code{         aref} @i{array @r{&rest} subscripts}) new-element)@*
 
 @subsubheading  Arguments and Values::
 
@@ -1288,9 +1294,9 @@
 
 @subsubheading  See Also::
 
-@ref{bit}
+@ref{bit (Array)}
 ,
-@ref{char; schar}
+@ref{char}
 ,
 @ref{elt}
 ,
@@ -1529,7 +1535,7 @@
 @node array-in-bounds-p, array-rank, array-displacement, Arrays Dictionary
 @subsection array-in-bounds-p                                                [Function]
 
-@code{array-in-bounds-p}  @i{array {&rest} subscripts} @result{}  @i{generalized-boolean}
+@code{array-in-bounds-p}  @i{array @r{&rest} subscripts} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -1605,7 +1611,7 @@
 @node array-row-major-index, array-total-size, array-rank, Arrays Dictionary
 @subsection array-row-major-index                                            [Function]
 
-@code{array-row-major-index}  @i{array {&rest} subscripts} @result{}  @i{index}
+@code{array-row-major-index}  @i{array @r{&rest} subscripts} @result{}  @i{index}
 
 @subsubheading  Arguments and Values::
 
@@ -1832,7 +1838,7 @@
 @node upgraded-array-element-type, array-dimension-limit, row-major-aref, Arrays Dictionary
 @subsection upgraded-array-element-type                                      [Function]
 
-@code{upgraded-array-element-type}  @i{typespec {&optional} environment} @result{}  @i{upgraded-typespec}
+@code{upgraded-array-element-type}  @i{typespec @r{&optional} environment} @result{}  @i{upgraded-typespec}
 
 @subsubheading  Arguments and Values::
 
@@ -2042,7 +2048,7 @@
 @node vector, vector-pop, svref, Arrays Dictionary
 @subsection vector                                                           [Function]
 
-@code{vector}  @i{{&rest} objects} @result{}  @i{vector}
+@code{vector}  @i{@r{&rest} objects} @result{}  @i{vector}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2075,10 +2081,10 @@
 @b{vector} is analogous to @b{list}.
 
 @example
- (vector a{{}_1} a{{}_2} ... a{{}_n})
+ (vector a_1 a_2 ... a_n)
   @equiv{} (make-array (list @i{n}) :element-type t
                           :initial-contents 
-                            (list a{{}_1} a{{}_2} ... a{{}_n}))
+                            (list a_1 a_2 ... a_n))
 @end example
 
 @node vector-pop, vector-push, vector, Arrays Dictionary
@@ -2127,7 +2133,7 @@
 
 @subsubheading  See Also::
 
-@ref{vector-push; vector-push-extend}
+@ref{vector-push}
 , @b{vector-push-extend}, 
 @ref{fill-pointer}
 
@@ -2136,7 +2142,7 @@
 
 @code{vector-push}  @i{new-element vector} @result{}  @i{new-index-p}
 
-@code{vector-push-extend}  @i{new-element vector {&optional} extension} @result{}  @i{new-index}
+@code{vector-push-extend}  @i{new-element vector @r{&optional} extension} @result{}  @i{new-index}
 
 @subsubheading  Arguments and Values::
 
@@ -2221,7 +2227,7 @@
 , 
 @ref{vector-pop}
 
-@node vectorp, bit, vector-push, Arrays Dictionary
+@node vectorp, bit (Array), vector-push, Arrays Dictionary
 @subsection vectorp                                                          [Function]
 
 @code{vectorp}  @i{object} @result{}  @i{generalized-boolean}
@@ -2252,14 +2258,14 @@
  (vectorp @i{object}) @equiv{} (typep @i{object} 'vector)
 @end example
 
-@node bit, bit-and, vectorp, Arrays Dictionary
+@node bit (Array), bit-and, vectorp, Arrays Dictionary
 @subsection bit, sbit                                                        [Accessor]
 
-@code{bit}  @i{bit-array {&rest} subscripts} @result{}  @i{bit}
+@code{bit}  @i{bit-array @r{&rest} subscripts} @result{}  @i{bit}
 
-@code{sbit}  @i{bit-array {&rest} subscripts} @result{}  @i{bit}
+@code{sbit}  @i{bit-array @r{&rest} subscripts} @result{}  @i{bit}
 
-(setf (@code{bit} @i{bit-array {&rest} subscripts}) new-bit)@*(setf (@code{sbit} @i{bit-array {&rest} subscripts}) new-bit)@*
+(setf (@code{bit} @i{bit-array @r{&rest} subscripts}) new-bit)@*(setf (@code{sbit} @i{bit-array @r{&rest} subscripts}) new-bit)@*
 
 @subsubheading  Arguments and Values::
 
@@ -2308,34 +2314,34 @@
 @b{bit} and @b{sbit}, unlike @b{char} and @b{schar},
 allow the first argument to be an @i{array} of any @i{rank}.
 
-@node bit-and, bit-vector-p, bit, Arrays Dictionary
+@node bit-and, bit-vector-p, bit (Array), Arrays Dictionary
 @subsection bit-and, bit-andc1, bit-andc2, bit-eqv,
 @subheading bit-ior, bit-nand, bit-nor, bit-not, bit-orc1, bit-orc2, bit-xor
 @flushright
 @i{[Function]}
 @end flushright
 
-@code{bit-and}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-and}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-andc1}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-andc1}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-andc2}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-andc2}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-eqv}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-eqv}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-ior}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-ior}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-nand}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-nand}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-nor}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-nor}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-orc1}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-orc1}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-orc2}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-orc2}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-xor}  @i{bit-array1 bit-array2 {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-xor}  @i{bit-array1 bit-array2 @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
-@code{bit-not}  @i{bit-array {&optional} opt-arg} @result{}  @i{resulting-bit-array}
+@code{bit-not}  @i{bit-array @r{&optional} opt-arg} @result{}  @i{resulting-bit-array}
 
 @subsubheading  Arguments and Values::
 
@@ -2374,6 +2380,7 @@
 performed by each of the @i{functions}.
 
  2
+@format
 @group
 @noindent
 @w{@b{Function}                                                   @b{Operation}                                   }
@@ -2393,6 +2400,7 @@
 @w{@w{  Figure 15--3: Bit-wise Logical Operations on Bit Arrays}
 }
 @end group
+@end format
 
 @subsubheading  Examples::
 @example
@@ -2413,7 +2421,7 @@
 @subsubheading  See Also::
 
 @b{lognot}, 
-@ref{logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; logorc1; logorc2; logxor}
+@ref{logand}
 
 @node bit-vector-p, simple-bit-vector-p, bit-and, Arrays Dictionary
 @subsection bit-vector-p                                                     [Function]
diff -uNr gcl-texi-orig/chap-16.texi gcl-texi/chap-16.texi
--- gcl-texi-orig/chap-16.texi	1994-07-16 18:03:08 +0400
+++ gcl-texi/chap-16.texi	2002-10-17 20:53:05 +0400
@@ -378,17 +378,17 @@
 @i{[Function]}
 @end flushright
 
-@code{string-upcase}  @i{string {&key} start end} @result{}  @i{cased-string}
+@code{string-upcase}  @i{string @r{&key} start end} @result{}  @i{cased-string}
 
-@code{string-downcase}  @i{string {&key} start end} @result{}  @i{cased-string}
+@code{string-downcase}  @i{string @r{&key} start end} @result{}  @i{cased-string}
 
-@code{string-capitalize}  @i{string {&key} start end} @result{}  @i{cased-string}
+@code{string-capitalize}  @i{string @r{&key} start end} @result{}  @i{cased-string}
 
-@code{nstring-upcase}  @i{string {&key} start end} @result{}  @i{string}
+@code{nstring-upcase}  @i{string @r{&key} start end} @result{}  @i{string}
 
-@code{nstring-downcase}  @i{string {&key} start end} @result{}  @i{string}
+@code{nstring-downcase}  @i{string @r{&key} start end} @result{}  @i{string}
 
-@code{nstring-capitalize}  @i{string {&key} start end} @result{}  @i{string}
+@code{nstring-capitalize}  @i{string @r{&key} start end} @result{}  @i{string}
 
 @subsubheading  Arguments and Values:: 
 
@@ -480,7 +480,7 @@
 
 @subsubheading  See Also::
 
-@ref{char-upcase; char-downcase}
+@ref{char-upcase}
 , @b{char-downcase}
 
 @subsubheading  Notes::
@@ -545,29 +545,29 @@
 @i{[Function]}
 @end flushright
 
-@code{string=}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{generalized-boolean}
+@code{string=}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{generalized-boolean}
 
-@code{string/=}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string/=}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string<}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string<}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string>}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string>}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string<=}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string<=}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string>=}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string>=}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string-equal}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{generalized-boolean}
+@code{string-equal}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{generalized-boolean}
 
-@code{string-not-equal}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string-not-equal}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string-lessp}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string-lessp}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string-greaterp}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string-greaterp}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string-not-greaterp}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string-not-greaterp}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
-@code{string-not-lessp}  @i{string1 string2 {&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
+@code{string-not-lessp}  @i{string1 string2 @r{&key} start1 end1 start2 end2} @result{}  @i{mismatch-index}
 
 @subsubheading  Arguments and Values::
 
@@ -684,7 +684,7 @@
 
 @subsubheading  See Also::
 
-@ref{char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal; char-lessp; char-greaterp; char-not-greaterp; char-not-lessp}
+@ref{char=}
 
 @subsubheading  Notes::
 
@@ -728,7 +728,7 @@
 @node make-string,  , stringp, Strings Dictionary
 @subsection make-string                                                      [Function]
 
-@code{make-string}  @i{size {&key} initial-element element-type} @result{}  @i{string}
+@code{make-string}  @i{size @r{&key} initial-element element-type} @result{}  @i{string}
 
 @subsubheading  Arguments and Values::
 
diff -uNr gcl-texi-orig/chap-17.texi gcl-texi/chap-17.texi
--- gcl-texi-orig/chap-17.texi	1994-07-16 18:03:08 +0400
+++ gcl-texi/chap-17.texi	2002-10-17 20:53:05 +0400
@@ -34,6 +34,7 @@
 a new @i{vector}, it always returns a @i{simple vector}.
 Similarly, any @i{strings} constructed will be @i{simple strings}.
 
+@format
 @group
 @noindent
 @w{  concatenate        length              remove             }
@@ -56,6 +57,7 @@
 @w{        Figure 17--1: Standardized Sequence Functions       }
 
 @end group
+@end format
 
 @menu
 * General Restrictions on Parameters that must be Sequences::  
@@ -91,6 +93,7 @@
 This control is offered on the basis of a @i{function} designated with 
 either a @t{:test} or @t{:test-not} @i{argument}.
 
+@format
 @group
 @noindent
 @w{  adjoin           nset-exclusive-or  search            }
@@ -108,6 +111,7 @@
 @w{  Figure 17--2: Operators that have Two-Argument Tests to be Satisfied}
 
 @end group
+@end format
 
 The object O might not be compared directly to E_i.
 If a @t{:key} @i{argument} is provided,
@@ -193,6 +197,7 @@
 as with the @i{functions} described in @ref{Satisfying a Two-Argument Test},
 but rather on the basis of a one @i{argument} @i{predicate}.
 
+@format
 @group
 @noindent
 @w{  assoc-if       member-if           rassoc-if          }
@@ -208,6 +213,7 @@
 @w{  Figure 17--3: Operators that have One-Argument Tests to be Satisfied}
 
 @end group
+@end format
 
 The element E_i might not be considered directly.
 If a @t{:key} @i{argument} is provided,
@@ -409,7 +415,7 @@
 @node fill, make-sequence, elt, Sequences Dictionary
 @subsection fill                                                             [Function]
 
-@code{fill}  @i{sequence item {&key} start end} @result{}  @i{sequence}
+@code{fill}  @i{sequence item @r{&key} start end} @result{}  @i{sequence}
 
 @subsubheading  Arguments and Values::
 
@@ -464,7 +470,7 @@
 @node make-sequence, subseq, fill, Sequences Dictionary
 @subsection make-sequence                                                    [Function]
 
-@code{make-sequence}  @i{result-type size {&key} initial-element} @result{}  @i{sequence}
+@code{make-sequence}  @i{result-type size @r{&key} initial-element} @result{}  @i{sequence}
 
 @subsubheading  Arguments and Values::
 
@@ -540,9 +546,9 @@
 @node subseq, map, make-sequence, Sequences Dictionary
 @subsection subseq                                                           [Accessor]
 
-@code{subseq}  @i{sequence start {&optional} end} @result{}  @i{subsequence}
+@code{subseq}  @i{sequence start @r{&optional} end} @result{}  @i{subsequence}
 
-(setf (@code{         subseq} @i{sequence start {&optional} end}) new-subsequence)@*
+(setf (@code{         subseq} @i{sequence start @r{&optional} end}) new-subsequence)@*
 
 @subsubheading  Arguments and Values::
 
@@ -610,7 +616,7 @@
 @node map, map-into, subseq, Sequences Dictionary
 @subsection map                                                              [Function]
 
-@code{map}  @i{result-type function {&rest} sequences^+} @result{}  @i{result}
+@code{map}  @i{result-type function @r{&rest} sequences^+} @result{}  @i{result}
 
 @subsubheading  Arguments and Values:: 
 
@@ -698,7 +704,7 @@
 @node map-into, reduce, map, Sequences Dictionary
 @subsection map-into                                                         [Function]
 
-@code{map-into}  @i{result-sequence function {&rest} sequences} @result{}  @i{result-sequence}
+@code{map-into}  @i{result-sequence function @r{&rest} sequences} @result{}  @i{result-sequence}
 
 @subsubheading  Arguments and Values::
 
@@ -778,7 +784,7 @@
 @node reduce, count, map-into, Sequences Dictionary
 @subsection reduce                                                           [Function]
 
-@code{reduce}  @i{function sequence {&key} key from-end start end initial-value} @result{}  @i{result}
+@code{reduce}  @i{function sequence @r{&key} key from-end start end initial-value} @result{}  @i{result}
 
 @subsubheading  Arguments and Values::
 
@@ -871,11 +877,11 @@
 @node count, length, reduce, Sequences Dictionary
 @subsection count, count-if, count-if-not                                    [Function]
 
-@code{count}  @i{item sequence {&key} from-end start end key test test-not} @result{}  @i{n}
+@code{count}  @i{item sequence @r{&key} from-end start end key test test-not} @result{}  @i{n}
 
-@code{count-if}  @i{predicate sequence {&key} from-end start end key} @result{}  @i{n}
+@code{count-if}  @i{predicate sequence @r{&key} from-end start end key} @result{}  @i{n}
 
-@code{count-if-not}  @i{predicate sequence {&key} from-end start end key} @result{}  @i{n}
+@code{count-if-not}  @i{predicate sequence @r{&key} from-end start end key} @result{}  @i{n}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1058,9 +1064,9 @@
 @node sort, find, reverse, Sequences Dictionary
 @subsection sort, stable-sort                                                [Function]
 
-@code{sort}  @i{sequence predicate {&key} key} @result{}  @i{sorted-sequence}
+@code{sort}  @i{sequence predicate @r{&key} key} @result{}  @i{sorted-sequence}
 
-@code{stable-sort}  @i{sequence predicate {&key} key} @result{}  @i{sorted-sequence}
+@code{stable-sort}  @i{sequence predicate @r{&key} key} @result{}  @i{sorted-sequence}
 
 @subsubheading  Arguments and Values::
 
@@ -1198,11 +1204,11 @@
 @node find, position, sort, Sequences Dictionary
 @subsection find, find-if, find-if-not                                       [Function]
 
-@code{find}  @i{item sequence {&key} from-end test test-not start end key} @result{}  @i{element}
+@code{find}  @i{item sequence @r{&key} from-end test test-not start end key} @result{}  @i{element}
 
-@code{find-if}  @i{predicate sequence {&key} from-end start end key} @result{}  @i{element}
+@code{find-if}  @i{predicate sequence @r{&key} from-end start end key} @result{}  @i{element}
 
-@code{find-if-not}  @i{predicate sequence {&key} from-end start end key} @result{}  @i{element}
+@code{find-if-not}  @i{predicate sequence @r{&key} from-end start end key} @result{}  @i{element}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1267,7 +1273,7 @@
 
 @subsubheading  See Also::
 
-@ref{position; position-if; position-if-not}
+@ref{position}
 ,
 @ref{Rules about Test Functions},
 
@@ -1282,11 +1288,11 @@
 @node position, search, find, Sequences Dictionary
 @subsection position, position-if, position-if-not                           [Function]
 
-@code{position}  @i{item sequence {&key} from-end test test-not start end key} @result{}  @i{position}
+@code{position}  @i{item sequence @r{&key} from-end test test-not start end key} @result{}  @i{position}
 
-@code{position-if}  @i{predicate sequence {&key} from-end start end key} @result{}  @i{position}
+@code{position-if}  @i{predicate sequence @r{&key} from-end start end key} @result{}  @i{position}
 
-@code{position-if-not}  @i{predicate sequence {&key} from-end start end key} @result{}  @i{position}
+@code{position-if-not}  @i{predicate sequence @r{&key} from-end start end key} @result{}  @i{position}
 
 @subsubheading  Arguments and Values::
 
@@ -1344,7 +1350,7 @@
 
 @subsubheading  See Also::
 
-@ref{find; find-if; find-if-not}
+@ref{find}
 ,
 
 @ref{Traversal Rules and Side Effects}
@@ -1359,7 +1365,7 @@
 @subsection search                                                           [Function]
 
 @code{search}  @i{sequence-1 sequence-2 
-                         {&key} from-end test test-not
+                         @r{&key} from-end test test-not
                                       key start1 start2
                                       end1 end2}@*
    @result{}  @i{position}
@@ -1430,7 +1436,7 @@
 @subsection mismatch                                                         [Function]
 
 @code{mismatch}  @i{sequence-1 sequence-2 
-			 {&key} from-end test test-not key start1 start2 end1 end2}@*
+			 @r{&key} from-end test test-not key start1 start2 end1 end2}@*
    @result{}  @i{position}
 
 @subsubheading  Arguments and Values::
@@ -1506,7 +1512,7 @@
 @node replace, substitute, mismatch, Sequences Dictionary
 @subsection replace                                                          [Function]
 
-@code{replace}  @i{sequence-1 sequence-2 {&key} start1 end1 start2 end2} @result{}  @i{sequence-1}
+@code{replace}  @i{sequence-1 sequence-2 @r{&key} start1 end1 start2 end2} @result{}  @i{sequence-1}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1582,25 +1588,25 @@
 @end flushright
 
 @code{substitute}  @i{newitem  olditem  sequence 
-		   	  {&key} from-end test
+		   	  @r{&key} from-end test
 				       test-not start
                                        end count key}@*
    @result{}  @i{result-sequence}
 
-@code{substitute-if}  @i{newitem predicate sequence {&key} from-end start end count key}@*
+@code{substitute-if}  @i{newitem predicate sequence @r{&key} from-end start end count key}@*
    @result{}  @i{result-sequence}
 
-@code{substitute-if-not}  @i{newitem predicate sequence {&key} from-end start end count key}@*
+@code{substitute-if-not}  @i{newitem predicate sequence @r{&key} from-end start end count key}@*
    @result{}  @i{result-sequence}
 
 @code{nsubstitute}  @i{newitem  olditem  sequence
-                          {&key} from-end test test-not start end count key}@*
+                          @r{&key} from-end test test-not start end count key}@*
    @result{}  @i{sequence}
 
-@code{nsubstitute-if}  @i{newitem predicate sequence {&key} from-end start end count key}@*
+@code{nsubstitute-if}  @i{newitem predicate sequence @r{&key} from-end start end count key}@*
    @result{}  @i{sequence}
 
-@code{nsubstitute-if-not}  @i{newitem predicate sequence {&key} from-end start end count key}@*
+@code{nsubstitute-if-not}  @i{newitem predicate sequence @r{&key} from-end start end count key}@*
    @result{}  @i{sequence}
 
 @subsubheading  Arguments and Values::
@@ -1734,7 +1740,7 @@
 
 @subsubheading  See Also::
 
-@ref{subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not}
+@ref{subst}
 ,
 @b{nsubst},
 
@@ -1770,7 +1776,7 @@
 @node concatenate, merge, substitute, Sequences Dictionary
 @subsection concatenate                                                      [Function]
 
-@code{concatenate}  @i{result-type {&rest} sequences} @result{}  @i{result-sequence}
+@code{concatenate}  @i{result-type @r{&rest} sequences} @result{}  @i{result-sequence}
 
 @subsubheading  Arguments and Values::
 
@@ -1841,7 +1847,7 @@
 @node merge, remove, concatenate, Sequences Dictionary
 @subsection merge                                                            [Function]
 
-@code{merge}  @i{result-type sequence-1 sequence-2 predicate {&key} key} @result{}  @i{result-sequence}
+@code{merge}  @i{result-type sequence-1 sequence-2 predicate @r{&key} key} @result{}  @i{result-sequence}
 
 @subsubheading  Arguments and Values::
 
@@ -1949,7 +1955,7 @@
 
 @subsubheading  See Also::
 
-@ref{sort; stable-sort}
+@ref{sort}
 ,
 @b{stable-sort},
 
@@ -1964,17 +1970,17 @@
 @i{[Function]}
 @end flushright
 
-@code{remove}  @i{item sequence {&key} from-end test test-not start end count key} @result{}  @i{result-sequence}
+@code{remove}  @i{item sequence @r{&key} from-end test test-not start end count key} @result{}  @i{result-sequence}
 
-@code{remove-if}  @i{test sequence {&key} from-end start end count key} @result{}  @i{result-sequence}
+@code{remove-if}  @i{test sequence @r{&key} from-end start end count key} @result{}  @i{result-sequence}
 
-@code{remove-if-not}  @i{test sequence {&key} from-end start end count key} @result{}  @i{result-sequence}
+@code{remove-if-not}  @i{test sequence @r{&key} from-end start end count key} @result{}  @i{result-sequence}
 
-@code{delete}  @i{item sequence {&key} from-end test test-not start end count key} @result{}  @i{result-sequence}
+@code{delete}  @i{item sequence @r{&key} from-end test test-not start end count key} @result{}  @i{result-sequence}
 
-@code{delete-if}  @i{test sequence {&key} from-end start end count key} @result{}  @i{result-sequence}
+@code{delete-if}  @i{test sequence @r{&key} from-end start end count key} @result{}  @i{result-sequence}
 
-@code{delete-if-not}  @i{test sequence {&key} from-end start end count key} @result{}  @i{result-sequence}
+@code{delete-if-not}  @i{test sequence @r{&key} from-end start end count key} @result{}  @i{result-sequence}
 
 @subsubheading  Arguments and Values::
 
@@ -2153,12 +2159,12 @@
 @node remove-duplicates,  , remove, Sequences Dictionary
 @subsection remove-duplicates, delete-duplicates                             [Function]
 
-@code{remove-duplicates}  @i{sequence {&key}
+@code{remove-duplicates}  @i{sequence @r{&key}
  			  from-end test test-not
 				start end key}@*
    @result{}  @i{result-sequence}
 
-@code{delete-duplicates}  @i{sequence {&key} 
+@code{delete-duplicates}  @i{sequence @r{&key} 
 			   from-end test test-not
                                  start end key}@*
    @result{}  @i{result-sequence}
diff -uNr gcl-texi-orig/chap-18.texi gcl-texi/chap-18.texi
--- gcl-texi-orig/chap-18.texi	1994-07-16 18:03:08 +0400
+++ gcl-texi/chap-18.texi	2002-10-17 20:53:05 +0400
@@ -72,6 +72,7 @@
 from the @i{secondary value} returned by @b{gethash}.
 @end table
 
+@format
 @group
 @noindent
 @w{  clrhash           hash-table-p     remhash  }
@@ -82,6 +83,7 @@
 @w{     Figure 18--1: Hash-table defined names   }
 
 @end group
+@end format
 
 @node Modifying Hash Table Keys,  , Hash-Table Operations, Hash Table Concepts
 @subsection Modifying Hash Table Keys
@@ -241,14 +243,14 @@
 @subsubheading  Notes::
 
 The intent is that this mapping be implemented by a hashing mechanism,
-such as that described in Section 6.4 ``Hashing'' of {The Art of Computer Programming, Volume 3}
+such as that described in Section 6.4 ``Hashing'' of @b{The Art of Computer Programming, Volume 3}
 (pp506-549).  In spite of this intent, no @i{conforming implementation} 
 is required to use any particular technique to implement the mapping.
 
 @node make-hash-table, hash-table-p, hash-table, Hash Tables Dictionary
 @subsection make-hash-table                                                  [Function]
 
-@code{make-hash-table}  @i{{&key} test size rehash-size rehash-threshold} @result{}  @i{hash-table}
+@code{make-hash-table}  @i{@r{&key} test size rehash-size rehash-threshold} @result{}  @i{hash-table}
 
 @subsubheading  Arguments and Values::
 
@@ -571,9 +573,9 @@
 @node gethash, remhash, hash-table-test, Hash Tables Dictionary
 @subsection gethash                                                          [Accessor]
 
-@code{gethash}  @i{key hash-table {&optional} default} @result{}  @i{value, present-p}
+@code{gethash}  @i{key hash-table @r{&optional} default} @result{}  @i{value, present-p}
 
-(setf (@code{         gethash} @i{key hash-table {&optional} default}) new-value)@*
+(setf (@code{         gethash} @i{key hash-table @r{&optional} default}) new-value)@*
 
 @subsubheading  Arguments and Values::
 
@@ -737,7 +739,7 @@
 @subsection with-hash-table-iterator                                            [Macro]
 
 @code{with-hash-table-iterator}  @i{@r{(}name hash-table@r{)} 
-	           @{@i{declaration}@}{*} @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+	           @{@i{declaration}@}* @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
diff -uNr gcl-texi-orig/chap-19.texi gcl-texi/chap-19.texi
--- gcl-texi-orig/chap-19.texi	1994-07-16 18:06:18 +0400
+++ gcl-texi/chap-19.texi	2002-10-17 20:59:17 +0400
@@ -124,6 +124,7 @@
 
 Figure 19--1 lists some @i{defined names} that are applicable to @i{pathnames}.
 
+@format
 @group
 @noindent
 @w{  *default-pathname-defaults*  namestring          pathname-name          }
@@ -139,6 +140,7 @@
 @w{                     Figure 19--1: Pathname Operations                    }
 
 @end group
+@end format
 
 @node Parsing Namestrings Into Pathnames,  , Pathnames as Filenames, Overview of Filenames
 @subsection Parsing Namestrings Into Pathnames
@@ -281,9 +283,9 @@
 For example,
 
 @example
- ;; In a TOPS-20 implementation, which uses {@t{^}}V to quote 
+ ;; In a TOPS-20 implementation, which uses @t{^}V to quote 
  (NAMESTRING (MAKE-PATHNAME :HOST "OZ" :NAME "<TEST>"))
-@result{}  #P"OZ:PS:{@t{^}}V<TEST{@t{^}}V>"
+@result{}  #P"OZ:PS:@t{^}V<TEST@t{^}V>"
 @i{NOT}@result{} #P"OZ:PS:<TEST>"
 @end example
 
@@ -298,6 +300,7 @@
 Figure 19--2 lists the functions 
 relating to @i{pathnames} that permit a @t{:case} argument:
 
+@format
 @group
 @noindent
 @w{  make-pathname    pathname-directory  pathname-name  }
@@ -307,13 +310,14 @@
 @w{  Figure 19--2: Pathname functions using a :CASE argument}
 
 @end group
+@end format
 
 @node Local Case in Pathname Components, Common Case in Pathname Components, Case in Pathname Components, Interpreting Pathname Component Values
 @subsubsection Local Case in Pathname Components
 
 For the functions in @i{Figure~19--2},
 a value of @t{:local}
-@IKindex{local}
+@c @IKindex{local}
  for the @t{:case} argument 
 (the default for these functions)
 indicates that the functions should receive and yield @i{strings} in component values
@@ -330,7 +334,7 @@
 
 For the functions in @i{Figure~19--2},
 a value of @t{:common}
-@IKindex{common}
+@c @IKindex{common}
  for the @t{:case} argument 
 that these @i{functions} should receive 
 and yield @i{strings} in component values according to the following conventions:
@@ -368,7 +372,7 @@
 @subsubsection :WILD as a Component Value
 
 If @t{:wild}
-@IKindex{wild}
+@c @IKindex{wild}
  is the value of a @i{pathname} component,
 that component is considered to be a wildcard, which matches anything.
 
@@ -387,13 +391,13 @@
 @t{(:absolute :wild-inferiors)},
 or the same as @t{(:absolute :wild)} in a @i{file system} that does not support
 @t{:wild-inferiors}.
-@IKindex{wild-inferiors}
+@c @IKindex{wild-inferiors}
 
 @node ->UNSPECIFIC as a Component Value, Relation between component values NIL and ->UNSPECIFIC, ->WILD as a Component Value, Interpreting Pathname Component Values
 @subsubsection :UNSPECIFIC as a Component Value
 
 If @t{:unspecific}
-@IKindex{unspecific}
+@c @IKindex{unspecific}
  is the value of a @i{pathname} component,
 the component is considered to be ``absent'' 
 or to ``have no meaning''
@@ -507,10 +511,10 @@
 The directory can be a @i{list} of @i{strings} and @i{symbols}. 
 
 The @i{car} of the @i{list} is one of the symbols @t{:absolute}
-@IKindex{absolute}
+@c @IKindex{absolute}
  or 
 @t{:relative}
-@IKindex{relative}
+@c @IKindex{relative}
 , meaning:
 
 @table @asis
@@ -550,14 +554,15 @@
 signals an error of @i{type} @b{file-error}.
 For example, Unix does not support @t{:wild-inferiors} in most implementations.
 
-@IKindex{wild}
+@c @IKindex{wild}
 
-@IKindex{wild-inferiors}
+@c @IKindex{wild-inferiors}
 
-@IKindex{up}
+@c @IKindex{up}
 
-@IKindex{back}
+@c @IKindex{back}
 
+@format
 @group
 @noindent
 @w{  Symbol           Meaning                                             }
@@ -570,6 +575,7 @@
 @w{          Figure 19--3: Special Markers In Directory Component         }
 
 @end group
+@end format
 
 The following notes apply to the previous figure:
 
@@ -782,7 +788,7 @@
  not a structural description of @i{objects}.)
 
 @w{@i{logical-pathname} ::=@r{[}!@i{host} @i{host-marker}@r{]} }
-@w{                     @r{[}!@i{@i{relative-directory-marker}}@r{]} @{!@i{directory} @i{directory-marker}@}{*} }
+@w{                     @r{[}!@i{@i{relative-directory-marker}}@r{]} @{!@i{directory} @i{directory-marker}@}* }
 @w{                     @r{[}!@i{name}@r{]} @r{[}@i{type-marker} !@i{type} @r{[}@i{version-marker} !@i{version}@r{]}@r{]}}
 
 @w{@i{host} ::=!@i{word}}
@@ -1061,7 +1067,7 @@
 @node make-pathname, pathnamep, pathname, Filenames Dictionary
 @subsection make-pathname                                                    [Function]
 
-@code{make-pathname}  @i{{&key} host device directory name type version defaults case}@*
+@code{make-pathname}  @i{@r{&key} host device directory name type version defaults case}@*
    @result{}  @i{pathname}
 
 @subsubheading  Arguments and Values::
@@ -1238,15 +1244,15 @@
 @i{[Function]}
 @end flushright
 
-@code{pathname-host}  @i{pathname {&key} case} @result{}  @i{host}
+@code{pathname-host}  @i{pathname @r{&key} case} @result{}  @i{host}
 
-@code{pathname-device}  @i{pathname {&key} case} @result{}  @i{device}
+@code{pathname-device}  @i{pathname @r{&key} case} @result{}  @i{device}
 
-@code{pathname-directory}  @i{pathname {&key} case} @result{}  @i{directory}
+@code{pathname-directory}  @i{pathname @r{&key} case} @result{}  @i{directory}
 
-@code{pathname-name}  @i{pathname {&key} case} @result{}  @i{name}
+@code{pathname-name}  @i{pathname @r{&key} case} @result{}  @i{name}
 
-@code{pathname-type}  @i{pathname {&key} case} @result{}  @i{type}
+@code{pathname-type}  @i{pathname @r{&key} case} @result{}  @i{type}
 
 @code{pathname-version}  @i{pathname} @result{}  @i{version}
 
@@ -1704,7 +1710,7 @@
 
 @code{host-namestring}  @i{pathname} @result{}  @i{namestring}
 
-@code{enough-namestring}  @i{pathname {&optional} defaults} @result{}  @i{namestring}
+@code{enough-namestring}  @i{pathname @r{&optional} defaults} @result{}  @i{namestring}
 
 @subsubheading  Arguments and Values::
 
@@ -1809,7 +1815,7 @@
 @node parse-namestring, wild-pathname-p, namestring, Filenames Dictionary
 @subsection parse-namestring                                                 [Function]
 
-@code{parse-namestring}  @i{thing {&optional} host default-pathname {&key} start end junk-allowed}@*
+@code{parse-namestring}  @i{thing @r{&optional} host default-pathname @r{&key} start end junk-allowed}@*
    @result{}  @i{pathname, position}
 
 @subsubheading  Arguments and Values::
@@ -1963,7 +1969,7 @@
 @node wild-pathname-p, pathname-match-p, parse-namestring, Filenames Dictionary
 @subsection wild-pathname-p                                                  [Function]
 
-@code{wild-pathname-p}  @i{pathname {&optional} field-key} @result{}  @i{generalized-boolean}
+@code{wild-pathname-p}  @i{pathname @r{&optional} field-key} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -2069,7 +2075,7 @@
 @node translate-logical-pathname, translate-pathname, pathname-match-p, Filenames Dictionary
 @subsection translate-logical-pathname                                       [Function]
 
-@code{translate-logical-pathname}  @i{pathname {&key}} @result{}  @i{physical-pathname}
+@code{translate-logical-pathname}  @i{pathname @r{&key}} @result{}  @i{physical-pathname}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2150,7 +2156,7 @@
 @node translate-pathname, merge-pathnames, translate-logical-pathname, Filenames Dictionary
 @subsection translate-pathname                                               [Function]
 
-@code{translate-pathname}  @i{source from-wildcard to-wildcard {&key}}@*
+@code{translate-pathname}  @i{source from-wildcard to-wildcard @r{&key}}@*
    @result{}  @i{translated-pathname}
 
 @subsubheading  Arguments and Values:: 
@@ -2273,9 +2279,9 @@
 
 @subsubheading  See Also::
 
-@ref{namestring; file-namestring; directory-namestring; host-namestring; enough-namestring}
+@ref{namestring}
 ,
-@ref{pathname-host; pathname-device; pathname-directory; pathname-name; pathname-type; pathname-version}
+@ref{pathname-host}
 ,
 
 @b{pathname},
@@ -2318,7 +2324,7 @@
 @node merge-pathnames,  , translate-pathname, Filenames Dictionary
 @subsection merge-pathnames                                                  [Function]
 
-@code{merge-pathnames}  @i{pathname {&optional} default-pathname default-version}@*
+@code{merge-pathnames}  @i{pathname @r{&optional} default-pathname default-version}@*
    @result{}  @i{merged-pathname}
 
 @subsubheading  Arguments and Values::
diff -uNr gcl-texi-orig/chap-1.texi gcl-texi/chap-1.texi
--- gcl-texi-orig/chap-1.texi	1994-07-16 18:02:58 +0400
+++ gcl-texi/chap-1.texi	2002-10-17 21:52:14 +0400
@@ -49,7 +49,7 @@
 predominant dialects of Lisp, both arising from these early efforts:
 MacLisp and Interlisp.
 For further information about very early Lisp dialects, 
-see {The Anatomy of Lisp} or {Lisp 1.5 Programmer's Manual}.
+see @b{The Anatomy of Lisp} or @b{Lisp 1.5 Programmer's Manual}.
 
 MacLisp improved on the Lisp~1.5 notion of special variables and error
 handling. MacLisp also introduced the concept of functions that could take
@@ -58,14 +58,14 @@
 on execution speed. 
 By the end of the 1970's, MacLisp was in use at over 50 sites.
 For further information about Maclisp, 
-see {Maclisp Reference Manual, Revision~0} or {The Revised Maclisp Manual}.
+see @b{Maclisp Reference Manual, Revision~0} or @b{The Revised Maclisp Manual}.
 
 Interlisp introduced many ideas into Lisp programming environments and
 methodology. One of the Interlisp ideas that influenced @r{Common Lisp} was an iteration
 construct implemented by Warren Teitelman that inspired the @b{loop}
 macro used both on the Lisp Machines and in MacLisp, and now in @r{Common Lisp}.
 For further information about Interlisp,
-see {Interlisp Reference Manual}.
+see @b{Interlisp Reference Manual}.
 
 Although the first implementations of Lisp were on the IBM~704 and the
 IBM~7090, later work focussed on the DEC
@@ -83,14 +83,14 @@
 that enabled fast function calling.
 But the limitations of the PDP-10 were evident by 1973: it supported a
 small number of researchers using Lisp, and the small, 18-bit address
-space (2^{18} = 262,144 words) limited the size of a single
+space (2^18 = 262,144 words) limited the size of a single
 program.
 One response to the address space problem was the Lisp Machine, a
 special-purpose computer designed to run Lisp programs.  The other
 response was to use general-purpose computers with address spaces
 larger than 18~bits, such as the DEC VAX and
 the S-1~Mark~IIA.
-For further information about S-1 Common Lisp, see ``{S-1 Common Lisp Implementation}.''
+For further information about S-1 Common Lisp, see @b{S-1 Common Lisp Implementation}.
 
 The Lisp machine concept was developed in the late 1960's.  In the
 early 1970's, Peter Deutsch, working with 
@@ -107,7 +107,7 @@
 Machine Lisp became available on the early MIT Lisp Machines.
 Commercial Lisp machines from Xerox, Lisp Machines (LMI), and
 Symbolics were on the market by 1981.
-For further information about Lisp Machine Lisp, see {Lisp Machine Manual}.
+For further information about Lisp Machine Lisp, see @b{Lisp Machine Manual}.
 
 During the late 1970's, Lisp Machine Lisp began to expand towards a
 much fuller language.  Sophisticated lambda lists, 
@@ -132,7 +132,7 @@
 to Lisp implementation.  Eventually the S-1 and NIL groups
 collaborated.
 For further information about the NIL project,
-see ``{NIL---A Perspective}.''
+see @b{NIL---A Perspective}.
 
 The first effort towards Lisp standardization was made in 1969, 
 when Anthony Hearn and Martin Griss at the University of Utah 
@@ -142,7 +142,7 @@
 optimizing compiler for Standard Lisp,
 and then an extended implementation known as Portable Standard Lisp (PSL).
 By the mid 1980's, PSL ran on about a dozen kinds of computers.
-For further information about Standard Lisp, see ``{Standard LISP Report}.''
+For further information about Standard Lisp, see @b{Standard LISP Report}.
 
 PSL and Franz Lisp---a MacLisp-like dialect for Unix machines---were 
 the first examples of widely available Lisp dialects on multiple 
@@ -159,7 +159,8 @@
 closures, first-class continuations, and simplified syntax (no
 separation of value cells and function cells). Some of these contributions made
 a large impact on the design of @r{Common Lisp}.
-For further information about Scheme, see {IEEE Standard for the Scheme Programming Language} or ``{Revised^3 Report on the Algorithmic Language Scheme}.''
+For further information about Scheme, see @b{IEEE Standard for the Scheme Programming Language} 
+or @b{Revised^3 Report on the Algorithmic Language Scheme}.
 
 In the late 1970's object-oriented programming concepts started to
 make a strong impact on Lisp. 
@@ -170,12 +171,13 @@
 At Xerox, the experience with Smalltalk and 
 Knowledge Representation Language (KRL) led to the development of 
 Lisp Object Oriented Programming System (LOOPS) and later Common LOOPS.
-For further information on Smalltalk, see {Smalltalk-80: The Language and its Implementation}.
-For further information on Flavors, see {Flavors: A Non-Hierarchical Approach to Object-Oriented Programming}.
+For further information on Smalltalk, see @b{Smalltalk-80: The Language and its Implementation}.
+For further information on Flavors, see @b{Flavors: A Non-Hierarchical Approach to Object-Oriented Programming}.
 
 These systems influenced the design of the Common Lisp Object System (CLOS).
 CLOS was developed specifically for this standardization effort,
-and was separately written up in ``Common Lisp Object System Specification.''  However, minor details
+and was separately written up in @b{Common Lisp Object System Specification}.  
+However, minor details
 of its design have changed slightly since that publication, and that paper 
 should not be taken as an authoritative reference to the semantics of the
 object system as described in this document.
@@ -254,7 +256,7 @@
 For information about data types, see @ref{Types and Classes}.
 Not all @i{types} and @i{classes} are defined in this chapter;
 many are defined in chapter corresponding to their topic--for example,
-the numeric types are defined in @ref{Numbers}.
+the numeric types are defined in @ref{Numbers (Numbers)}.
 For a complete list of @i{standardized} @i{types}, 
 see @i{Figure~4--2}.
 
@@ -271,32 +273,32 @@
 @table @asis
 
 @item @t{*}  
-{The Anatomy of Lisp},
+@b{The Anatomy of Lisp},
         John Allen, McGraw-Hill, Inc., 1978.
 
 @item @t{*}  
-{The Art of Computer Programming, Volume 3},
+@b{The Art of Computer Programming, Volume 3},
              Donald E. Knuth, Addison-Wesley Company (Reading, MA), 1973.
 
 @item @t{*}  
-{The Art of the Metaobject Protocol},
+@b{The Art of the Metaobject Protocol},
 	Kiczales et al., MIT Press (Cambridge, MA), 1991.
 
 @item @t{*}  
-``Common Lisp Object System Specification,''
+@b{Common Lisp Object System Specification},
         D. Bobrow, L. DiMichiel, R.P. Gabriel, S. Keene, G. Kiczales, D. Moon,
         @i{SIGPLAN Notices} V23, September, 1988.
 
 @item @t{*}  
-{Common Lisp: The Language},
+@b{Common Lisp: The Language},
         Guy L. Steele Jr., Digital Press (Burlington, MA), 1984.
 
 @item @t{*}  
-{Common Lisp: The Language, Second Edition},
+@b{Common Lisp: The Language, Second Edition},
         Guy L. Steele Jr., Digital Press (Bedford, MA), 1990.
 
 @item @t{*}  
-{Exceptional Situations in Lisp},
+@b{Exceptional Situations in Lisp},
 	Kent M. Pitman,
 	@i{Proceedings of the First European Conference
 	     on the Practical Application of LISP\/}
@@ -305,21 +307,21 @@
 	March 27-29, 1990.
 
 @item @t{*}  
-{Flavors: A Non-Hierarchical Approach to Object-Oriented Programming},
+@b{Flavors: A Non-Hierarchical Approach to Object-Oriented Programming},
 	Howard I. Cannon, 1982.
 
 @item @t{*}  
-{IEEE Standard for Binary Floating-Point Arithmetic},
+@b{IEEE Standard for Binary Floating-Point Arithmetic},
         ANSI/IEEE Std 754-1985,
         Institute of Electrical and Electronics Engineers, Inc. (New York), 1985.
 
 @item @t{*}  
-{IEEE Standard for the Scheme Programming Language},
+@b{IEEE Standard for the Scheme Programming Language},
 	IEEE Std 1178-1990,
 	Institute of Electrical and Electronic Engineers, Inc. (New York), 1991.
 
 @item @t{*}  
-{Interlisp Reference Manual}, Third Revision,
+@b{Interlisp Reference Manual}, Third Revision,
 	Teitelman, Warren, et al,
 	Xerox Palo Alto Research Center (Palo Alto, CA), 1978.
 
@@ -331,66 +333,66 @@
 	ISO, 1983.
 
 @item @t{*}  
-{Lisp 1.5 Programmer's Manual},
+@b{Lisp 1.5 Programmer's Manual},
 	John McCarthy, MIT Press (Cambridge, MA), August, 1962.
 
 @item @t{*}  
-{Lisp Machine Manual},
+@b{Lisp Machine Manual},
 	D.L. Weinreb and D.A. Moon,
 	Artificial Intelligence Laboratory, MIT (Cambridge, MA), July, 1981.
 
 @item @t{*}  
-{Maclisp Reference Manual, Revision~0},
+@b{Maclisp Reference Manual, Revision~0},
 	David A. Moon, Project MAC (Laboratory for Computer Science),
         MIT (Cambridge, MA), March, 1974.
 
 @item @t{*}  
-``{NIL---A Perspective},'' 
+@b{NIL---A Perspective}, 
         JonL White, @i{Macsyma User's Conference}, 1979.
 
 @item @t{*}  
-{Performance and Evaluation of Lisp Programs},
+@b{Performance and Evaluation of Lisp Programs},
 	Richard P. Gabriel, MIT Press (Cambridge, MA), 1985.
 
 @item @t{*}  
-``{Principal Values and Branch Cuts in Complex APL},'' 
+@b{Principal Values and Branch Cuts in Complex APL}, 
         Paul Penfield Jr., @i{APL 81 Conference Proceedings},
         ACM SIGAPL (San Francisco, September 1981), 248-256.
         Proceedings published as @i{APL Quote Quad 12}, 1 (September 1981).
 
 @item @t{*}  
-{The Revised Maclisp Manual},
+@b{The Revised Maclisp Manual},
 	Kent M. Pitman, 
 	Technical Report 295,
 	Laboratory for Computer Science, MIT (Cambridge, MA), May 1983.
 
 @item @t{*}  
-``{Revised^3 Report on the Algorithmic Language Scheme},''
+@b{Revised^3 Report on the Algorithmic Language Scheme},
         Jonathan Rees and William Clinger (editors), 
         @i{SIGPLAN Notices} V21, #12, December, 1986.
 
 @item @t{*}  
-``S-1 Common Lisp Implementation,''
+@b{S-1 Common Lisp Implementation},
 	R.A. Brooks, R.P. Gabriel, and G.L. Steele,
 	@i{Conference Record of the 1982 ACM Symposium on Lisp and Functional Programming},
 	108-113, 1982.
 
 @item @t{*}  
-@i{Smalltalk-80: The Language and its Implementation},
+@b{Smalltalk-80: The Language and its Implementation},
         A. Goldberg and D. Robson, Addison-Wesley, 1983.
 
 @item @t{*}  
-``{Standard LISP Report},''
+@b{Standard LISP Report},
         J.B. Marti, A.C. Hearn, M.L. Griss, and C. Griss,
         @i{SIGPLAN Notices} V14, #10, October, 1979.
 
 @item @t{*}  
-{Webster's Third New International Dictionary
+@b{Webster's Third New International Dictionary
  the English Language, Unabridged},
 	Merriam Webster (Springfield, MA), 1986.
 
 @item @t{*}  
-@i{XP: A Common Lisp Pretty Printing System},
+@b{XP: A Common Lisp Pretty Printing System},
         R.C. Waters,
 	Memo 1102a,
 	Artificial Intelligence Laboratory, MIT (Cambridge, MA), September 1989.
@@ -638,15 +640,15 @@
 within the BNF, but might still be useful elsewhere.  For example, consider the
 following definitions:
 
-@code{case}  @i{keyform  @{!@i{normal-clause}@}{*} @r{[}!@i{otherwise-clause}@r{]}} @result{}  @i{@{@i{result}@}{*}}
+@code{case}  @i{keyform  @{!@i{normal-clause}@}* @r{[}!@i{otherwise-clause}@r{]}} @result{}  @i{@{@i{result}@}*}
 
-@code{ccase}  @i{keyplace @{!@i{normal-clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{ccase}  @i{keyplace @{!@i{normal-clause}@}*} @result{}  @i{@{@i{result}@}*}
 
-@code{ecase}  @i{keyform  @{!@i{normal-clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{ecase}  @i{keyform  @{!@i{normal-clause}@}*} @result{}  @i{@{@i{result}@}*}
 
-@w{@i{normal-clause} ::=@r{(}keys @{@i{form}@}{*}@r{)}}
+@w{@i{normal-clause} ::=@r{(}keys @{@i{form}@}*@r{)}}
 
-@w{@i{otherwise-clause} ::=@r{(}@{otherwise | t@} @{@i{form}@}{*}@r{)}}
+@w{@i{otherwise-clause} ::=@r{(}@{otherwise | t@} @{@i{form}@}*@r{)}}
 
 @w{@i{clause} ::=normal-clause | otherwise-clause}
 
@@ -697,7 +699,7 @@
 other indicator) before showing return values, while others do not.
 
 @item @i{OR}@result{}  
-The notation ``{@i{OR}@result{}}'' is used to denote one of several possible
+The notation ``@i{OR}@result{}'' is used to denote one of several possible
 alternate results.  The example
 
 @example
@@ -722,7 +724,7 @@
 of the ways in which it is permitted for implementations to diverge.
 
 @item @i{NOT}@result{}  
-The notation ``{@i{NOT}@result{}}'' is used to denote a result which is not possible.
+The notation ``@i{NOT}@result{}'' is used to denote a result which is not possible.
 This might be used, for example, in order to emphasize a situation where
 some anticipated misconception might lead the reader to falsely believe
 that the result might be possible.  For example,
@@ -750,7 +752,7 @@
 @t{(gcd (gcd x y) z)}  for any 
 @t{x}, @t{y}, and @t{z}.
 
-@item {@t{ |> }}  
+@item @t{ |> }  
 @r{Common Lisp} specifies input and output with respect to a non-interactive stream model.
 The specific details of how interactive input and output are mapped onto that
 non-interactive model are @i{implementation-defined}.
@@ -765,7 +767,7 @@
 a buffer full of input without the command itself being visible on the program's
 input stream.
 
-In the examples in this document, the notation ``{@t{ |> }}'' precedes 
+In the examples in this document, the notation ``@t{ |> }'' precedes 
 lines where interactive input and output occurs.  Within such a scenario,
 ``@b{|>>}@t{this notation}@b{<<|}'' notates user input.
 
@@ -791,11 +793,11 @@
 Sometimes, the non-interactive stream model calls for a @i{newline}.
 How that @i{newline} character is interactively entered is an 
 @i{implementation-defined} detail of the user interface, but in that
-case, either the notation ``<@i{Newline}>'' or ``{@i{[<--}~]}'' might be used.
+case, either the notation ``<@i{Newline}>'' or ``@i{[<--}~]'' might be used.
 
 @example
  (progn (format t "~&Who? ") (read-line))
-@t{ |> } Who? @b{|>>}@t{Fred, Mary, and Sally{@i{[<--}~]}}@b{<<|}
+@t{ |> } Who? @b{|>>}@t{Fred, Mary, and Sally @i{[<--}~]}@b{<<|}
 @result{}  "Fred, Mary, and Sally", @i{false}
 @end example
 
@@ -886,6 +888,7 @@
 By convention, the choice of notation offers a hint as to which of its many
 roles it is playing.
 
+@format
 @group
 @noindent
 @w{  @b{For Evaluation?}  @b{Notation}  @b{Typically Implied Role}       }
@@ -900,6 +903,7 @@
 @w{               Figure 1--1: Notations for NIL             }
 
 @end group
+@end format
 
 Within this document only, @b{nil} is also sometimes notated as @i{false} to
 emphasize its role as a @i{boolean}.
@@ -1263,42 +1267,42 @@
 dictionary entry.
 
 @menu
-* The ``Affected By'' Section of a Dictionary Entry::  
-* The ``Arguments'' Section of a Dictionary Entry::  
-* The ``Arguments and Values'' Section of a Dictionary Entry::	
-* The ``Binding Types Affected'' Section of a Dictionary Entry::  
-* The ``Class Precedence List'' Section of a Dictionary Entry::	 
+* The "Affected By" Section of a Dictionary Entry::  
+* The "Arguments" Section of a Dictionary Entry::  
+* The "Arguments and Values" Section of a Dictionary Entry::	
+* The "Binding Types Affected" Section of a Dictionary Entry::  
+* The "Class Precedence List" Section of a Dictionary Entry::	 
 * Dictionary Entries for Type Specifiers::  
-* The ``Compound Type Specifier Kind'' Section of a Dictionary Entry::	
-* The ``Compound Type Specifier Syntax'' Section of a Dictionary Entry::  
-* The ``Compound Type Specifier Arguments'' Section of a Dictionary Entry::  
-* The ``Compound Type Specifier Description'' Section of a Dictionary Entry::  
-* The ``Constant Value'' Section of a Dictionary Entry::  
-* The ``Description'' Section of a Dictionary Entry::  
-* The ``Examples'' Section of a Dictionary Entry::  
-* The ``Exceptional Situations'' Section of a Dictionary Entry::  
-* The ``Initial Value'' Section of a Dictionary Entry::	 
-* The ``Argument Precedence Order'' Section of a Dictionary Entry::  
-* The ``Method Signature'' Section of a Dictionary Entry::  
-* The ``Name'' Section of a Dictionary Entry::	
-* The ``Notes'' Section of a Dictionary Entry::	 
-* The ``Pronunciation'' Section of a Dictionary Entry::	 
-* The ``See Also'' Section of a Dictionary Entry::  
-* The ``Side Effects'' Section of a Dictionary Entry::	
-* The ``Supertypes'' Section of a Dictionary Entry::  
-* The ``Syntax'' Section of a Dictionary Entry::  
-* Special ``Syntax'' Notations for Overloaded Operators::  
+* The "Compound Type Specifier Kind" Section of a Dictionary Entry::	
+* The "Compound Type Specifier Syntax" Section of a Dictionary Entry::  
+* The "Compound Type Specifier Arguments" Section of a Dictionary Entry::  
+* The "Compound Type Specifier Description" Section of a Dictionary Entry::  
+* The "Constant Value" Section of a Dictionary Entry::  
+* The "Description" Section of a Dictionary Entry::  
+* The "Examples" Section of a Dictionary Entry::  
+* The "Exceptional Situations" Section of a Dictionary Entry::  
+* The "Initial Value" Section of a Dictionary Entry::	 
+* The "Argument Precedence Order" Section of a Dictionary Entry::  
+* The "Method Signature" Section of a Dictionary Entry::  
+* The "Name" Section of a Dictionary Entry::	
+* The "Notes" Section of a Dictionary Entry::	 
+* The "Pronunciation" Section of a Dictionary Entry::	 
+* The "See Also" Section of a Dictionary Entry::  
+* The "Side Effects" Section of a Dictionary Entry::	
+* The "Supertypes" Section of a Dictionary Entry::  
+* The "Syntax" Section of a Dictionary Entry::  
+* Special "Syntax" Notations for Overloaded Operators::  
 * Naming Conventions for Rest Parameters::  
-* Requiring Non-Null Rest Parameters in the ``Syntax'' Section::  
-* Return values in the ``Syntax'' Section::  
-* No Arguments or Values in the ``Syntax'' Section::  
-* Unconditional Transfer of Control in the ``Syntax'' Section::	 
-* The ``Valid Context'' Section of a Dictionary Entry::	 
-* The ``Value Type'' Section of a Dictionary Entry::  
+* Requiring Non-Null Rest Parameters in The "Syntax" Section::  
+* Return values in The "Syntax" Section::  
+* No Arguments or Values in The "Syntax" Section::  
+* Unconditional Transfer of Control in The "Syntax" Section::	 
+* The "Valid Context" Section of a Dictionary Entry::	 
+* The "Value Type" Section of a Dictionary Entry::  
 @end menu
 
-@node The ``Affected By'' Section of a Dictionary Entry, The ``Arguments'' Section of a Dictionary Entry, Interpreting Dictionary Entries, Interpreting Dictionary Entries
-@subsubsection The ``Affected By'' Section of a Dictionary Entry
+@node The "Affected By" Section of a Dictionary Entry, The "Arguments" Section of a Dictionary Entry, Interpreting Dictionary Entries, Interpreting Dictionary Entries
+@subsubsection The "Affected By" Section of a Dictionary Entry
 
 For an @i{operator}, anything that can affect the side effects of
 or @i{values} returned by the @i{operator}.
@@ -1306,15 +1310,15 @@
 For a @i{variable}, anything that can affect the @i{value} of the @i{variable}
 including @i{functions} that bind or assign it.
 
-@node The ``Arguments'' Section of a Dictionary Entry, The ``Arguments and Values'' Section of a Dictionary Entry, The ``Affected By'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Arguments'' Section of a Dictionary Entry
+@node The "Arguments" Section of a Dictionary Entry, The "Arguments and Values" Section of a Dictionary Entry, The "Affected By" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Arguments" Section of a Dictionary Entry
 
 This information describes the syntax information of entries such as those for
 @i{declarations} and special @i{expressions} which are never @i{evaluated}
 as @i{forms}, and so do not return @i{values}.
 
-@node The ``Arguments and Values'' Section of a Dictionary Entry, The ``Binding Types Affected'' Section of a Dictionary Entry, The ``Arguments'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Arguments and Values'' Section of a Dictionary Entry
+@node The "Arguments and Values" Section of a Dictionary Entry, The "Binding Types Affected" Section of a Dictionary Entry, The "Arguments" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Arguments and Values" Section of a Dictionary Entry
 
 An English language description of what @i{arguments} the @i{operator} accepts
 and what @i{values} it returns, including information about defaults for @i{parameters}
@@ -1324,16 +1328,16 @@
 their @i{arguments} are not @i{evaluated} unless it is explicitly stated in their
 descriptions that they are @i{evaluated}.
 
-@node The ``Binding Types Affected'' Section of a Dictionary Entry, The ``Class Precedence List'' Section of a Dictionary Entry, The ``Arguments and Values'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Binding Types Affected'' Section of a Dictionary Entry
+@node The "Binding Types Affected" Section of a Dictionary Entry, The "Class Precedence List" Section of a Dictionary Entry, The "Arguments and Values" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Binding Types Affected" Section of a Dictionary Entry
 
 This information alerts the reader to the kinds of @i{bindings} that might 
 potentially be affected by a declaration.  Whether in fact any particular such
 @i{binding} is actually affected is dependent on additional factors as well.
-See the ``Description'' section of the declaration in question for details.
+See The "Description" Section of the declaration in question for details.
 
-@node The ``Class Precedence List'' Section of a Dictionary Entry, Dictionary Entries for Type Specifiers, The ``Binding Types Affected'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Class Precedence List'' Section of a Dictionary Entry
+@node The "Class Precedence List" Section of a Dictionary Entry, Dictionary Entries for Type Specifiers, The "Binding Types Affected" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Class Precedence List" Section of a Dictionary Entry
 
 This appears in the dictionary entry for a @i{class},
 and contains an ordered list of the @i{classes} defined 
@@ -1356,7 +1360,7 @@
 the @i{classes} listed in this section are also @i{supertypes} of 
 the @i{type} denoted by the @i{class}.
 
-@node Dictionary Entries for Type Specifiers, The ``Compound Type Specifier Kind'' Section of a Dictionary Entry, The ``Class Precedence List'' Section of a Dictionary Entry, Interpreting Dictionary Entries
+@node Dictionary Entries for Type Specifiers, The "Compound Type Specifier Kind" Section of a Dictionary Entry, The "Class Precedence List" Section of a Dictionary Entry, Interpreting Dictionary Entries
 @subsubsection Dictionary Entries for Type Specifiers
 
 The @i{atomic type specifiers} are those @i{defined names} 
@@ -1366,7 +1370,7 @@
 A description of how to interpret 
 a @i{symbol} naming one of these @i{types} or @i{classes} 
 as an @i{atomic type specifier}
-is found in the ``Description'' section of such dictionary entries.
+is found in The "Description" Section of such dictionary entries.
 
 The @i{compound type specifiers} are those @i{defined names} 
 listed in @i{Figure~4--3}.
@@ -1381,8 +1385,8 @@
  and ``Compound Type Specifier Description''
 sections of such dictionary entries.
 
-@node The ``Compound Type Specifier Kind'' Section of a Dictionary Entry, The ``Compound Type Specifier Syntax'' Section of a Dictionary Entry, Dictionary Entries for Type Specifiers, Interpreting Dictionary Entries
-@subsubsection The ``Compound Type Specifier Kind'' Section of a Dictionary Entry
+@node The "Compound Type Specifier Kind" Section of a Dictionary Entry, The "Compound Type Specifier Syntax" Section of a Dictionary Entry, Dictionary Entries for Type Specifiers, Interpreting Dictionary Entries
+@subsubsection The "Compound Type Specifier Kind" Section of a Dictionary Entry
 
 An ``abbreviating'' @i{type specifier} is one that describes a @i{subtype}
 for which it is in principle possible to enumerate the @i{elements},
@@ -1399,8 +1403,8 @@
 in a compositional way, using combining operations (such as ``and,'' ``or,'' and
 ``not'') on other @i{types}.
 
-@node The ``Compound Type Specifier Syntax'' Section of a Dictionary Entry, The ``Compound Type Specifier Arguments'' Section of a Dictionary Entry, The ``Compound Type Specifier Kind'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Compound Type Specifier Syntax'' Section of a Dictionary Entry
+@node The "Compound Type Specifier Syntax" Section of a Dictionary Entry, The "Compound Type Specifier Arguments" Section of a Dictionary Entry, The "Compound Type Specifier Kind" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Compound Type Specifier Syntax" Section of a Dictionary Entry
 
 This information about a @i{type} describes the syntax of a 
 @i{compound type specifier} for that @i{type}.
@@ -1408,40 +1412,40 @@
 Whether or not the @i{type} is acceptable as an @i{atomic type specifier}
 is not represented here; see @ref{Dictionary Entries for Type Specifiers}.
 
-@node The ``Compound Type Specifier Arguments'' Section of a Dictionary Entry, The ``Compound Type Specifier Description'' Section of a Dictionary Entry, The ``Compound Type Specifier Syntax'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Compound Type Specifier Arguments'' Section of a Dictionary Entry
+@node The "Compound Type Specifier Arguments" Section of a Dictionary Entry, The "Compound Type Specifier Description" Section of a Dictionary Entry, The "Compound Type Specifier Syntax" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Compound Type Specifier Arguments" Section of a Dictionary Entry
 
 This information describes @i{type} information for the structures defined in
-the ``Compound Type Specifier Syntax'' section.
+The "Compound Type Specifier Syntax" Section.
 
-@node The ``Compound Type Specifier Description'' Section of a Dictionary Entry, The ``Constant Value'' Section of a Dictionary Entry, The ``Compound Type Specifier Arguments'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Compound Type Specifier Description'' Section of a Dictionary Entry
+@node The "Compound Type Specifier Description" Section of a Dictionary Entry, The "Constant Value" Section of a Dictionary Entry, The "Compound Type Specifier Arguments" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Compound Type Specifier Description" Section of a Dictionary Entry
 
 This information describes the meaning of the structures defined in
-the ``Compound Type Specifier Syntax'' section.
+The "Compound Type Specifier Syntax" Section.
 
-@node The ``Constant Value'' Section of a Dictionary Entry, The ``Description'' Section of a Dictionary Entry, The ``Compound Type Specifier Description'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Constant Value'' Section of a Dictionary Entry
+@node The "Constant Value" Section of a Dictionary Entry, The "Description" Section of a Dictionary Entry, The "Compound Type Specifier Description" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Constant Value" Section of a Dictionary Entry
 
 This information describes the unchanging @i{type} and @i{value} of 
 a @i{constant variable}.
 
-@node The ``Description'' Section of a Dictionary Entry, The ``Examples'' Section of a Dictionary Entry, The ``Constant Value'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Description'' Section of a Dictionary Entry
+@node The "Description" Section of a Dictionary Entry, The "Examples" Section of a Dictionary Entry, The "Constant Value" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Description" Section of a Dictionary Entry
 
 A summary of the @i{operator} and all intended aspects of the @i{operator}, 
 but does not necessarily include all the fields referenced below it 
 (``Side Effects,'' ``Exceptional Situations,'' @i{etc.})
 
-@node The ``Examples'' Section of a Dictionary Entry, The ``Exceptional Situations'' Section of a Dictionary Entry, The ``Description'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Examples'' Section of a Dictionary Entry
+@node The "Examples" Section of a Dictionary Entry, The "Exceptional Situations" Section of a Dictionary Entry, The "Description" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Examples" Section of a Dictionary Entry
 
 Examples of use of the @i{operator}.
 These examples are not considered part of the standard;
 see @ref{Sections Not Formally Part Of This Standard}.
 
-@node The ``Exceptional Situations'' Section of a Dictionary Entry, The ``Initial Value'' Section of a Dictionary Entry, The ``Examples'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Exceptional Situations'' Section of a Dictionary Entry
+@node The "Exceptional Situations" Section of a Dictionary Entry, The "Initial Value" Section of a Dictionary Entry, The "Examples" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Exceptional Situations" Section of a Dictionary Entry
 
   Three kinds of information may appear here:
 @table @asis
@@ -1459,20 +1463,20 @@
 as arguments or through dynamic variables, nor by executing subforms of this
 operator if it is a @i{macro} or @i{special operator}.
 
-@node The ``Initial Value'' Section of a Dictionary Entry, The ``Argument Precedence Order'' Section of a Dictionary Entry, The ``Exceptional Situations'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Initial Value'' Section of a Dictionary Entry
+@node The "Initial Value" Section of a Dictionary Entry, The "Argument Precedence Order" Section of a Dictionary Entry, The "Exceptional Situations" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Initial Value" Section of a Dictionary Entry
 
 This information describes the initial @i{value} of a @i{dynamic variable}.
-Since this variable might change, see @i{type} restrictions in the ``Value Type'' section.
+Since this variable might change, see @i{type} restrictions in The "Value Type" Section.
 
-@node The ``Argument Precedence Order'' Section of a Dictionary Entry, The ``Method Signature'' Section of a Dictionary Entry, The ``Initial Value'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Argument Precedence Order'' Section of a Dictionary Entry
+@node The "Argument Precedence Order" Section of a Dictionary Entry, The "Method Signature" Section of a Dictionary Entry, The "Initial Value" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Argument Precedence Order" Section of a Dictionary Entry
 
 This information describes the argument precedence order.
 If it is omitted, the argument precedence order is the default (left to right).
 
-@node The ``Method Signature'' Section of a Dictionary Entry, The ``Name'' Section of a Dictionary Entry, The ``Argument Precedence Order'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Method Signature'' Section of a Dictionary Entry
+@node The "Method Signature" Section of a Dictionary Entry, The "Name" Section of a Dictionary Entry, The "Argument Precedence Order" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Method Signature" Section of a Dictionary Entry
 
 The description of a @i{generic function} includes descriptions of the
 @i{methods} that are defined on that @i{generic function} by the standard.  
@@ -1483,7 +1487,7 @@
 
 @code{F}  @i{@r{(}@i{x} @i{class}@r{)}
 	      @r{(}@i{y} t@r{)}
-	      {&optional} @i{z} {&key} @i{k}}
+	      @r{&optional} @i{z} @r{&key} @i{k}}
 
 @noindent
 This @i{signature} indicates that this method on the @i{generic function}
@@ -1503,8 +1507,8 @@
 @i{implementation-defined} or user-defined @i{methods} in situations
 where the definition of such @i{methods} is permitted).
 
-@node The ``Name'' Section of a Dictionary Entry, The ``Notes'' Section of a Dictionary Entry, The ``Method Signature'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Name'' Section of a Dictionary Entry
+@node The "Name" Section of a Dictionary Entry, The "Notes" Section of a Dictionary Entry, The "Method Signature" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Name" Section of a Dictionary Entry
 
 This section introduces the dictionary entry.  It is not explicitly labeled.
 It appears preceded and followed by a horizontal bar.
@@ -1579,8 +1583,8 @@
 
 @end table
 
-@node The ``Notes'' Section of a Dictionary Entry, The ``Pronunciation'' Section of a Dictionary Entry, The ``Name'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Notes'' Section of a Dictionary Entry
+@node The "Notes" Section of a Dictionary Entry, The "Pronunciation" Section of a Dictionary Entry, The "Name" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Notes" Section of a Dictionary Entry
 
 Information not found elsewhere in this description
 which pertains to this @i{operator}.
@@ -1594,32 +1598,32 @@
 any @i{conforming implementation} or @i{conforming program}
 is permitted to ignore the presence of this information.
 
-@node The ``Pronunciation'' Section of a Dictionary Entry, The ``See Also'' Section of a Dictionary Entry, The ``Notes'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Pronunciation'' Section of a Dictionary Entry
+@node The "Pronunciation" Section of a Dictionary Entry, The "See Also" Section of a Dictionary Entry, The "Notes" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Pronunciation" Section of a Dictionary Entry
 
 This offers a suggested pronunciation for @i{defined names} 
 so that people not in verbal communication with the original designers
 can figure out how to pronounce words that are not in normal English usage.
 This information is advisory only, and is not considered part of the standard.
 For brevity, it is only provided for entries with names that are specific to
-@r{Common Lisp} and would not be found in {Webster's Third New International Dictionary
+@r{Common Lisp} and would not be found in @b{Webster's Third New International Dictionary
  the English Language, Unabridged}.
 
-@node The ``See Also'' Section of a Dictionary Entry, The ``Side Effects'' Section of a Dictionary Entry, The ``Pronunciation'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``See Also'' Section of a Dictionary Entry
+@node The "See Also" Section of a Dictionary Entry, The "Side Effects" Section of a Dictionary Entry, The "Pronunciation" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "See Also" Section of a Dictionary Entry
 
 List of references to other parts of this standard
 that offer information relevant to this @i{operator}. 
 This list is not part of the standard.
 
-@node The ``Side Effects'' Section of a Dictionary Entry, The ``Supertypes'' Section of a Dictionary Entry, The ``See Also'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Side Effects'' Section of a Dictionary Entry
+@node The "Side Effects" Section of a Dictionary Entry, The "Supertypes" Section of a Dictionary Entry, The "See Also" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Side Effects" Section of a Dictionary Entry
 
 Anything that is changed as a result of the
 evaluation of the @i{form} containing this @i{operator}.
 
-@node The ``Supertypes'' Section of a Dictionary Entry, The ``Syntax'' Section of a Dictionary Entry, The ``Side Effects'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Supertypes'' Section of a Dictionary Entry
+@node The "Supertypes" Section of a Dictionary Entry, The "Syntax" Section of a Dictionary Entry, The "Side Effects" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Supertypes" Section of a Dictionary Entry
 
 This appears in the dictionary entry for a @i{type},
 and contains a list of the @i{standardized} @i{types} 
@@ -1629,15 +1633,15 @@
 the order of the @i{classes} in the @i{class precedence list} 
 is consistent with the order presented in this section.
 
-@node The ``Syntax'' Section of a Dictionary Entry, Special ``Syntax'' Notations for Overloaded Operators, The ``Supertypes'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Syntax'' Section of a Dictionary Entry
+@node The "Syntax" Section of a Dictionary Entry, Special "Syntax" Notations for Overloaded Operators, The "Supertypes" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Syntax" Section of a Dictionary Entry
 
 This section describes how to use the @i{defined name} in code.
-The ``Syntax'' description for a @i{generic function} 
+The "Syntax'' description for a @i{generic function} 
 describes the @i{lambda list} of the @i{generic function} itself, 
-while the ``Method Signatures'' describe the @i{lambda lists} 
+while The "Method Signatures'' describe the @i{lambda lists} 
 of the defined @i{methods}.
-The ``Syntax'' description for 
+The "Syntax'' description for 
      an @i{ordinary function},
      a @i{macro},
   or a @i{special operator}
@@ -1645,7 +1649,7 @@
 
 For example, an @i{operator} description might say:
 
-@code{F}  @i{x y {&optional} z {&key} k}
+@code{F}  @i{x y @r{&optional} z @r{&key} k}
 
 @noindent
 This description indicates that the function @b{F} 
@@ -1658,8 +1662,8 @@
 In both cases, however, the outermost parentheses are omitted,
 and default value information is omitted.
 
-@node Special ``Syntax'' Notations for Overloaded Operators, Naming Conventions for Rest Parameters, The ``Syntax'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection Special ``Syntax'' Notations for Overloaded Operators
+@node Special "Syntax" Notations for Overloaded Operators, Naming Conventions for Rest Parameters, The "Syntax" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection Special "Syntax" Notations for Overloaded Operators
 
 If two descriptions exist for the same operation but with different numbers of
 arguments, then the extra arguments are to be treated as optional.  For example,
@@ -1672,7 +1676,7 @@
 @noindent
 is operationally equivalent to this line:
 
-@code{file-position}  @i{stream {&optional} position-spec} @result{}  @i{result}
+@code{file-position}  @i{stream @r{&optional} position-spec} @result{}  @i{result}
 
 @noindent
 and differs only in that it provides on opportunity to introduce different
@@ -1682,7 +1686,7 @@
 depending on how many @i{arguments} are supplied (@i{e.g.}, for the @i{function} @b{/})
 or the return values are different in the two cases (@i{e.g.}, for the @i{function} @b{file-position}).
 
-@node Naming Conventions for Rest Parameters, Requiring Non-Null Rest Parameters in the ``Syntax'' Section, Special ``Syntax'' Notations for Overloaded Operators, Interpreting Dictionary Entries
+@node Naming Conventions for Rest Parameters, Requiring Non-Null Rest Parameters in The "Syntax" Section, Special "Syntax" Notations for Overloaded Operators, Interpreting Dictionary Entries
 @subsubsection Naming Conventions for Rest Parameters
 
 Within this specification, 
@@ -1694,15 +1698,15 @@
 
 For example, given a syntax description such as:
 
-@code{F}  @i{{&rest} @i{arguments}}
+@code{F}  @i{@r{&rest} @i{arguments}}
 
 @noindent
 it is appropriate to refer either to the @i{rest parameter} named
 @i{arguments} by name, or to one of its elements by speaking of ``an @i{argument},''
 ``some @i{argument},'' ``each @i{argument}'' @i{etc.}
 
-@node Requiring Non-Null Rest Parameters in the ``Syntax'' Section, Return values in the ``Syntax'' Section, Naming Conventions for Rest Parameters, Interpreting Dictionary Entries
-@subsubsection Requiring Non-Null Rest Parameters in the ``Syntax'' Section
+@node Requiring Non-Null Rest Parameters in The "Syntax" Section, Return values in The "Syntax" Section, Naming Conventions for Rest Parameters, Interpreting Dictionary Entries
+@subsubsection Requiring Non-Null Rest Parameters in The "Syntax" Section
 
 In some cases it is useful to refer to all arguments equally as a single
 aggregation using a @i{rest parameter} while at the same time
@@ -1711,21 +1715,21 @@
 restriction, however they generally do not manifest themselves in a
 @i{lambda list}.  For descriptive purposes within this specification,
 
-@code{F}  @i{{&rest} arguments^+}
+@code{F}  @i{@r{&rest} arguments^+}
 
 @noindent
 means the same as
 
-@code{F}  @i{{&rest} arguments}
+@code{F}  @i{@r{&rest} arguments}
 
 @noindent
 but introduces the additional requirement that there be 
 at least one @i{argument}.
 
-@node Return values in the ``Syntax'' Section, No Arguments or Values in the ``Syntax'' Section, Requiring Non-Null Rest Parameters in the ``Syntax'' Section, Interpreting Dictionary Entries
-@subsubsection Return values in the ``Syntax'' Section
+@node Return values in The "Syntax" Section, No Arguments or Values in The "Syntax" Section, Requiring Non-Null Rest Parameters in The "Syntax" Section, Interpreting Dictionary Entries
+@subsubsection Return values in The "Syntax" Section
 
-An evaluation arrow ``{@result{} }'' precedes a list of @i{values} to be returned.
+An evaluation arrow ``@result{}'' precedes a list of @i{values} to be returned.
 For example:
 
 @code{F}  @i{a b c} @result{}  @i{x}
@@ -1738,8 +1742,8 @@
 
 @code{F}  @i{a b c} @result{}  @i{x, y, z}
 
-@node No Arguments or Values in the ``Syntax'' Section, Unconditional Transfer of Control in the ``Syntax'' Section, Return values in the ``Syntax'' Section, Interpreting Dictionary Entries
-@subsubsection No Arguments or Values in the ``Syntax'' Section
+@node No Arguments or Values in The "Syntax" Section, Unconditional Transfer of Control in The "Syntax" Section, Return values in The "Syntax" Section, Interpreting Dictionary Entries
+@subsubsection No Arguments or Values in The "Syntax" Section
 
 If no @i{arguments} are permitted, or no @i{values} are returned, 
 a special notation is used to make this more visually apparent.  For example,
@@ -1749,8 +1753,8 @@
 indicates that @t{F} is an operator that accepts no @i{arguments} and returns
 no @i{values}.
 
-@node Unconditional Transfer of Control in the ``Syntax'' Section, The ``Valid Context'' Section of a Dictionary Entry, No Arguments or Values in the ``Syntax'' Section, Interpreting Dictionary Entries
-@subsubsection Unconditional Transfer of Control in the ``Syntax'' Section
+@node Unconditional Transfer of Control in The "Syntax" Section, The "Valid Context" Section of a Dictionary Entry, No Arguments or Values in The "Syntax" Section, Interpreting Dictionary Entries
+@subsubsection Unconditional Transfer of Control in The "Syntax" Section
 
 Some @i{operators} perform an unconditional transfer of control, and
 so never have any return values.  Such @i{operators} are notated using
@@ -1759,8 +1763,8 @@
 @code{F}  @i{a b c} 
        @result{}  #<NoValue>
 
-@node The ``Valid Context'' Section of a Dictionary Entry, The ``Value Type'' Section of a Dictionary Entry, Unconditional Transfer of Control in the ``Syntax'' Section, Interpreting Dictionary Entries
-@subsubsection The ``Valid Context'' Section of a Dictionary Entry
+@node The "Valid Context" Section of a Dictionary Entry, The "Value Type" Section of a Dictionary Entry, Unconditional Transfer of Control in The "Syntax" Section, Interpreting Dictionary Entries
+@subsubsection The "Valid Context" Section of a Dictionary Entry
 
 This information is used by dictionary entries such as ``Declarations''
 in order to restrict the context in which the declaration may appear.
@@ -1770,8 +1774,8 @@
      a @i{proclamation} (@i{i.e.}, a @b{declaim} or @b{proclaim} @i{form}),
   or both.
 
-@node The ``Value Type'' Section of a Dictionary Entry,  , The ``Valid Context'' Section of a Dictionary Entry, Interpreting Dictionary Entries
-@subsubsection The ``Value Type'' Section of a Dictionary Entry
+@node The "Value Type" Section of a Dictionary Entry,  , The "Valid Context" Section of a Dictionary Entry, Interpreting Dictionary Entries
+@subsubsection The "Value Type" Section of a Dictionary Entry
 
 This information describes any @i{type} restrictions on a @i{dynamic variable}.
 
@@ -2103,6 +2107,7 @@
 @subsection Deprecated Functions
 
 The @i{functions} in Figure 1--2 are deprecated.
+@format
 @group
 @noindent
 @w{  assoc-if-not   nsubst-if-not       require            }
@@ -2116,6 +2121,7 @@
 @w{            Figure 1--2: Deprecated Functions           }
 
 @end group
+@end format
 
 @node Deprecated Argument Conventions, Deprecated Variables, Deprecated Functions, Deprecated Language Features
 @subsection Deprecated Argument Conventions
@@ -2124,6 +2130,7 @@
 
 The @t{:test-not} @i{argument} to the @i{functions} in Figure 1--3 are deprecated.
 
+@format
 @group
 @noindent
 @w{  adjoin             nset-difference    search            }
@@ -2141,6 +2148,7 @@
 @w{  Figure 1--3: Functions with Deprecated :TEST-NOT Arguments}
 
 @end group
+@end format
 
 The use of the situation names @b{compile}, @b{load}, and @b{eval}
 in @b{eval-when} is deprecated.
@@ -2171,6 +2179,7 @@
 of the 978 @i{external} @i{symbols} in the @t{COMMON-LISP} @i{package}.
 @IPindex{common-lisp}
 
+@format
 @group
 @noindent
 @w{  &allow-other-keys            *print-miser-width*          }
@@ -2216,9 +2225,11 @@
 @w{  Figure 1--4: Symbols in the COMMON-LISP package (part one of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  adjoin                      atom          boundp                    }
@@ -2264,9 +2275,11 @@
 @w{  Figure 1--5: Symbols in the COMMON-LISP package (part two of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  cddadr             clear-input                  copy-tree                  }
@@ -2312,9 +2325,11 @@
 @w{    Figure 1--6: Symbols in the COMMON-LISP package (part three of twelve).  }
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  denominator                    eq                   }
@@ -2360,9 +2375,11 @@
 @w{  Figure 1--7: Symbols in the COMMON-LISP package (part four of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  find-symbol                       get-internal-run-time        }
@@ -2408,9 +2425,11 @@
 @w{  Figure 1--8: Symbols in the COMMON-LISP package (part five of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  intern                                  lisp-implementation-type            }
@@ -2456,9 +2475,11 @@
 @w{     Figure 1--9: Symbols in the COMMON-LISP package (part six of twelve).    }
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  machine-version                mask-field                  }
@@ -2504,9 +2525,11 @@
 @w{  Figure 1--10: Symbols in the COMMON-LISP package (part seven of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  nintersection         package-error                  }
@@ -2552,9 +2575,11 @@
 @w{  Figure 1--11: Symbols in the COMMON-LISP package (part eight of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  pprint-tab                 read-char                   }
@@ -2600,9 +2625,11 @@
 @w{  Figure 1--12: Symbols in the COMMON-LISP package (part nine of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  room                          simple-bit-vector                  }
@@ -2648,9 +2675,11 @@
 @w{  Figure 1--13: Symbols in the COMMON-LISP package (part ten of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  standard-class             sublis                      }
@@ -2696,9 +2725,11 @@
 @w{  Figure 1--14: Symbols in the COMMON-LISP package (part eleven of twelve).}
 
 @end group
+@end format
 
 @page
 
+@format
 @group
 @noindent
 @w{  truncate                             values-list               }
@@ -2739,6 +2770,7 @@
 @w{  Figure 1--15: Symbols in the COMMON-LISP package (part twelve of twelve).}
 
 @end group
+@end format
 
 @c end of including concept-cl-symbols
 
diff -uNr gcl-texi-orig/chap-20.texi gcl-texi/chap-20.texi
--- gcl-texi-orig/chap-20.texi	1994-07-16 18:03:06 +0400
+++ gcl-texi/chap-20.texi	2002-10-17 20:53:05 +0400
@@ -32,6 +32,7 @@
 Figure 20--1 lists some @i{operators} 
 that are applicable to @i{files} and directories.
 
+@format
 @group
 @noindent
 @w{  compile-file  file-length      open            }
@@ -43,6 +44,7 @@
 @w{    Figure 20--1: File and Directory Operations  }
 
 @end group
+@end format
 
 @menu
 * Coercion of Streams to Pathnames::  
@@ -82,6 +84,7 @@
 Of these, the @i{functions} in Figure 20--2 treat @i{open} and 
 @i{closed} @i{streams} differently.
 
+@format
 @group
 @noindent
 @w{  delete-file  file-author      probe-file  }
@@ -91,6 +94,7 @@
 @w{  Figure 20--2: File Functions that Treat Open and Closed Streams Differently}
 
 @end group
+@end format
 
 Since treatment of @i{open} @i{streams} by the @i{file system} 
 may vary considerably between @i{implementations}, however, 
@@ -103,6 +107,7 @@
 In general, any code that is intended to be portable should
 use such @i{functions} carefully.
 
+@format
 @group
 @noindent
 @w{  directory  probe-file  truename  }
@@ -111,6 +116,7 @@
 @w{  Figure 20--3: File Functions where Closed Streams Might Work Best}
 
 @end group
+@end format
 
 @node Truenames,  , File Operations on Open and Closed Streams, File System Concepts
 @subsection Truenames
@@ -194,7 +200,7 @@
 @node directory, probe-file, Files Dictionary, Files Dictionary
 @subsection directory                                                        [Function]
 
-@code{directory}  @i{pathspec {&key}} @result{}  @i{pathnames}
+@code{directory}  @i{pathspec @r{&key}} @result{}  @i{pathnames}
 
 @subsubheading  Arguments and Values::
 
@@ -246,7 +252,7 @@
 If the @i{pathspec} is not @i{wild},
 the resulting list will contain either zero or one elements.
 
-@r{Common Lisp} specifies ``{&key}'' in the argument list to @b{directory} 
+@r{Common Lisp} specifies ``@r{&key}'' in the argument list to @b{directory} 
 even though no @i{standardized} keyword arguments to @b{directory} are defined.
 ``@t{:allow-other-keys t}''
 may be used in @i{conforming programs} in order to quietly ignore any
@@ -308,7 +314,7 @@
 @node ensure-directories-exist, truename, probe-file, Files Dictionary
 @subsection ensure-directories-exist                                         [Function]
 
-@code{ensure-directories-exist}  @i{pathspec {&key} verbose} @result{}  @i{pathspec, created}
+@code{ensure-directories-exist}  @i{pathspec @r{&key} verbose} @result{}  @i{pathspec, created}
 
 @subsubheading  Arguments and Values::
 
@@ -687,7 +693,7 @@
 
 @subsubheading  See Also::
 
-{file-error-pathname},
+@r{file-error-pathname},
 @ref{open}
 ,
 @ref{probe-file}
diff -uNr gcl-texi-orig/chap-21.texi gcl-texi/chap-21.texi
--- gcl-texi-orig/chap-21.texi	1994-07-16 18:03:06 +0400
+++ gcl-texi/chap-21.texi	2002-10-17 20:53:05 +0400
@@ -43,6 +43,7 @@
 Figure 21--1 provides a list of @i{standardized} operations
 that are potentially useful with any kind of @i{stream}.
 
+@format
 @group
 @noindent
 @w{  close                 stream-element-type  }
@@ -54,6 +55,7 @@
 @w{  Figure 21--1: Some General-Purpose Stream Operations}
 
 @end group
+@end format
 
 Other operations are only meaningful on certain @i{stream} @i{types}.
 For example, @b{read-char} is only defined for @i{character} @i{streams}
@@ -92,6 +94,7 @@
 Figure 21--2 shows @i{operators} relating to
 @i{input} @i{streams}.
 
+@format
 @group
 @noindent
 @w{  clear-input  read-byte            read-from-string            }
@@ -103,10 +106,12 @@
 @w{        Figure 21--2: Operators relating to Input Streams.      }
 
 @end group
+@end format
 
 Figure 21--3 shows @i{operators} relating to
 @i{output} @i{streams}.
 
+@format
 @group
 @noindent
 @w{  clear-output   prin1            write            }
@@ -120,6 +125,7 @@
 @w{  Figure 21--3: Operators relating to Output Streams.}
 
 @end group
+@end format
 
 A @i{stream} that is both an @i{input} @i{stream} and an @i{output} @i{stream}
 is called a @i{bidirectional}
@@ -134,6 +140,7 @@
 shows a list of @i{operators} that relate specificaly to 
 @i{bidirectional} @i{streams}.
 
+@format
 @group
 @noindent
 @w{  y-or-n-p  yes-or-no-p    }
@@ -142,6 +149,7 @@
 @w{  Figure 21--4: Operators relating to Bidirectional Streams.}
 
 @end group
+@end format
 
 @node Open and Closed Streams, Interactive Streams, Input, Introduction to Streams
 @subsubsection Open and Closed Streams
@@ -235,6 +243,7 @@
 by this specification.  Figure 21--5 shows some information 
 about these subclasses.
 
+@format
 @group
 @noindent
 @w{  Class                Related Operators             }
@@ -260,6 +269,7 @@
 @w{  Figure 21--5: Defined Names related to Specialized Streams}
 
 @end group
+@end format
 
 @node Stream Variables, Stream Arguments to Standardized Functions, Introduction to Streams, Stream Concepts
 @subsection Stream Variables
@@ -277,6 +287,7 @@
 The consequences are undefined if at any time
 the @i{value} of any of these @i{variables} is not an @i{open} @i{stream}.
 
+@format
 @group
 @noindent
 @w{  Glossary Term    Variable Name      }
@@ -292,6 +303,7 @@
 @w{  Figure 21--6: Standardized Stream Variables}
 
 @end group
+@end format
 
 Note that, by convention, @i{standardized} @i{stream variables} have names 
     ending in ``@t{-input*}''  if they must be @i{input} @i{streams},
@@ -307,6 +319,7 @@
 The @i{operators} in Figure 21--7 accept @i{stream} @i{arguments} that
 might be either @i{open} or @i{closed} @i{streams}.
 
+@format
 @group
 @noindent
 @w{  broadcast-stream-streams     file-author       pathnamep                     }
@@ -327,10 +340,12 @@
 @w{        Figure 21--7: Operators that accept either Open or Closed Streams      }
 
 @end group
+@end format
 
 The @i{operators} in Figure 21--8 accept @i{stream} @i{arguments} that
 must be @i{open} @i{streams}.
 
+@format
 @group
 @noindent
 @w{ clear-input              output-stream-p         read-char-no-hang          }
@@ -356,6 +371,7 @@
 @w{             Figure 21--8: Operators that accept Open Streams only            }
 
 @end group
+@end format
 
 @node Restrictions on Composite Streams,  , Stream Arguments to Standardized Functions, Stream Concepts
 @subsection Restrictions on Composite Streams
@@ -453,8 +469,8 @@
 
 @ref{Stream Concepts},
 @ref{Printing Other Objects},
-{@ref{Printer}},
-{@ref{Reader}}
+@ref{Printer},
+@ref{Reader}
 
 @node broadcast-stream, concatenated-stream, stream, Streams Dictionary
 @subsection broadcast-stream                                             [System Class]
@@ -607,7 +623,7 @@
 
 @subsubheading  See Also::
 
-@ref{echo-stream-input-stream; echo-stream-output-stream}
+@ref{echo-stream-input-stream}
 ,
 @b{echo-stream-output-stream},
 @ref{make-echo-stream}
@@ -710,7 +726,7 @@
 
 @ref{make-two-way-stream}
 ,
-@ref{two-way-stream-input-stream; two-way-stream-output-stream}
+@ref{two-way-stream-input-stream}
 ,
 @b{two-way-stream-output-stream}
 
@@ -908,7 +924,7 @@
 @node read-byte, write-byte, streamp, Streams Dictionary
 @subsection read-byte                                                        [Function]
 
-@code{read-byte}  @i{stream {&optional} eof-error-p eof-value} @result{}  @i{byte}
+@code{read-byte}  @i{stream @r{&optional} eof-error-p eof-value} @result{}  @i{byte}
 
 @subsubheading  Arguments and Values::
 
@@ -1022,7 +1038,7 @@
 @node peek-char, read-char, write-byte, Streams Dictionary
 @subsection peek-char                                                        [Function]
 
-@code{peek-char}  @i{{&optional} peek-type input-stream eof-error-p
+@code{peek-char}  @i{@r{&optional} peek-type input-stream eof-error-p
 			       eof-value recursive-p} @result{}  @i{char}
 
 @subsubheading  Arguments and Values::
@@ -1074,9 +1090,9 @@
 If an @i{end of file}_2 occurs and @i{eof-error-p} is @i{false},
 @i{eof-value} is returned.  
 
-{ }{If @i{recursive-p} is @i{true},
+If @i{recursive-p} is @i{true},
 this call is expected to be embedded in a higher-level call to @b{read} 
-or a similar @i{function} used by the @i{Lisp reader}.}
+or a similar @i{function} used by the @i{Lisp reader}.
 
 When @i{input-stream} is an @i{echo stream},
 characters that are only peeked at are not echoed. In the
@@ -1119,7 +1135,7 @@
 @node read-char, read-char-no-hang, peek-char, Streams Dictionary
 @subsection read-char                                                        [Function]
 
-@code{read-char}  @i{{&optional} input-stream eof-error-p eof-value recursive-p} @result{}  @i{char}
+@code{read-char}  @i{@r{&optional} input-stream eof-error-p eof-value recursive-p} @result{}  @i{char}
 
 @subsubheading  Arguments and Values::
 
@@ -1150,9 +1166,9 @@
 and hence are assumed to have been echoed
   already by a previous call to @b{read-char}.
 
-{ }{If @i{recursive-p} is @i{true},
+If @i{recursive-p} is @i{true},
 this call is expected to be embedded in a higher-level call to @b{read} 
-or a similar @i{function} used by the @i{Lisp reader}.}
+or a similar @i{function} used by the @i{Lisp reader}.
 
 If an @i{end of file}_2 occurs and @i{eof-error-p} is @i{false}, 
 @i{eof-value} is returned.  
@@ -1188,7 +1204,7 @@
 
 @ref{write-char}
 ,
-@ref{read; read-preserving-whitespace}
+@ref{read}
 
 @subsubheading  Notes::
 The corresponding output function is @b{write-char}.
@@ -1196,7 +1212,7 @@
 @node read-char-no-hang, terpri, read-char, Streams Dictionary
 @subsection read-char-no-hang                                                [Function]
 
-@code{read-char-no-hang}  @i{{&optional} input-stream eof-error-p
+@code{read-char-no-hang}  @i{@r{&optional} input-stream eof-error-p
 			       eof-value recursive-p} @result{}  @i{char}
 
 @subsubheading  Arguments and Values::
@@ -1221,9 +1237,9 @@
 from @i{input-stream} if such a character is available.  If no character
 is available, @b{read-char-no-hang} returns @b{nil}.
 
-{ }{If @i{recursive-p} is @i{true},
+If @i{recursive-p} is @i{true},
 this call is expected to be embedded in a higher-level call to @b{read} 
-or a similar @i{function} used by the @i{Lisp reader}.}
+or a similar @i{function} used by the @i{Lisp reader}.
 
 If an @i{end of file}_2 occurs and @i{eof-error-p} is @i{false}, 
 @i{eof-value} is returned.  
@@ -1248,7 +1264,7 @@
 ;; interactive input on the console, and where that Newline remains
 ;; on the input stream.
  (test-it)
-@t{ |> } @b{|>>}@t{a{@i{[<--}~]}}@b{<<|}
+@t{ |> } @b{|>>}@t{a@r{@i{[<--}~]}}@b{<<|}
 @result{}  (#\a #\Newline NIL)
 @end example
 
@@ -1276,9 +1292,9 @@
 @node terpri, unread-char, read-char-no-hang, Streams Dictionary
 @subsection terpri, fresh-line                                               [Function]
 
-@code{terpri}  @i{{&optional} output-stream} @result{}  @i{@b{nil}}
+@code{terpri}  @i{@r{&optional} output-stream} @result{}  @i{@b{nil}}
 
-@code{fresh-line}  @i{{&optional} output-stream} @result{}  @i{generalized-boolean}
+@code{fresh-line}  @i{@r{&optional} output-stream} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -1343,7 +1359,7 @@
 @node unread-char, write-char, terpri, Streams Dictionary
 @subsection unread-char                                                      [Function]
 
-@code{unread-char}  @i{character {&optional} input-stream} @result{}  @i{@b{nil}}
+@code{unread-char}  @i{character @r{&optional} input-stream} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -1416,7 +1432,7 @@
 @node write-char, read-line, unread-char, Streams Dictionary
 @subsection write-char                                                       [Function]
 
-@code{write-char}  @i{character {&optional} output-stream} @result{}  @i{character}
+@code{write-char}  @i{character @r{&optional} output-stream} @result{}  @i{character}
 
 @subsubheading  Arguments and Values::
 
@@ -1462,7 +1478,7 @@
 @node read-line, write-string, write-char, Streams Dictionary
 @subsection read-line                                                        [Function]
 
-@code{read-line}  @i{{&optional} input-stream eof-error-p eof-value recursive-p}@*
+@code{read-line}  @i{@r{&optional} input-stream eof-error-p eof-value recursive-p}@*
    @result{}  @i{line, missing-newline-p}
 
 @subsubheading  Arguments and Values::
@@ -1488,9 +1504,9 @@
 Reads from @i{input-stream} a line of text
 that is terminated by a @i{newline} or @i{end of file}.
 
-{ }{If @i{recursive-p} is @i{true},
+If @i{recursive-p} is @i{true},
 this call is expected to be embedded in a higher-level call to @b{read} 
-or a similar @i{function} used by the @i{Lisp reader}.}
+or a similar @i{function} used by the @i{Lisp reader}.
 
 The @i{primary value}, @i{line}, is the line that is read,
 represented as a @i{string} (without the trailing @i{newline}, if any).
@@ -1533,7 +1549,7 @@
 
 @subsubheading  See Also::
 
-@ref{read; read-preserving-whitespace}
+@ref{read}
 
 @subsubheading  Notes::
 
@@ -1542,9 +1558,9 @@
 @node write-string, read-sequence, read-line, Streams Dictionary
 @subsection write-string, write-line                                         [Function]
 
-@code{write-string}  @i{string {&optional} output-stream {&key} start end} @result{}  @i{string}
+@code{write-string}  @i{string @r{&optional} output-stream @r{&key} start end} @result{}  @i{string}
 
-@code{write-line}  @i{string {&optional} output-stream {&key} start end} @result{}  @i{string}
+@code{write-line}  @i{string @r{&optional} output-stream @r{&key} start end} @result{}  @i{string}
 
 @subsubheading  Arguments and Values::
 
@@ -1609,7 +1625,7 @@
 @node read-sequence, write-sequence, write-string, Streams Dictionary
 @subsection read-sequence                                                    [Function]
 
-@code{read-sequence}  @i{sequence stream {&key} start end} @result{}  @i{position}
+@code{read-sequence}  @i{sequence stream @r{&key} start end} @result{}  @i{position}
 
 @i{sequence}---a @i{sequence}.
 
@@ -1681,7 +1697,7 @@
 @node write-sequence, file-length, read-sequence, Streams Dictionary
 @subsection write-sequence                                                   [Function]
 
-@code{write-sequence}  @i{sequence stream {&key} start end} @result{}  @i{sequence}
+@code{write-sequence}  @i{sequence stream @r{&key} start end} @result{}  @i{sequence}
 
 @i{sequence}---a @i{sequence}.
 
@@ -1726,7 +1742,7 @@
 @ref{Compiler Terminology},
 @ref{read-sequence}
 ,
-@ref{write-string; write-line}
+@ref{write-string}
 ,
 @b{write-line}
 
@@ -1922,7 +1938,7 @@
 @node open, stream-external-format, file-string-length, Streams Dictionary
 @subsection open                                                             [Function]
 
-@code{open}  @i{filespec {&key} direction element-type
+@code{open}  @i{filespec @r{&key} direction element-type
 				               if-exists if-does-not-exist
 						     external-format}@*
    @result{}  @i{stream}
@@ -2252,9 +2268,9 @@
 
 @subsubheading  Syntax::
 
-@code{with-open-file}  @i{@r{(}stream filespec @{@i{options}@}{*}@r{)}
-		   @{@i{declaration}@}{*}
-		   @{@i{form}@}{*}}@*
+@code{with-open-file}  @i{@r{(}stream filespec @{@i{options}@}*@r{)}
+		   @{@i{declaration}@}*
+		   @{@i{form}@}*}@*
    @result{}  @i{results}
 
 @subsubheading  Arguments and Values::
@@ -2367,7 +2383,7 @@
 @node close, with-open-stream, with-open-file, Streams Dictionary
 @subsection close                                                            [Function]
 
-@code{close}  @i{stream {&key} abort} @result{}  @i{result}
+@code{close}  @i{stream @r{&key} abort} @result{}  @i{result}
 
 @subsubheading  Arguments and Values::
 
@@ -2440,9 +2456,9 @@
 @subsection with-open-stream                                                    [Macro]
 
 @code{with-open-stream}  @i{@r{(}var stream@r{)}
-		   @{@i{declaration}@}{*} 
-		   @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+		   @{@i{declaration}@}* 
+		   @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2492,7 +2508,7 @@
 @node listen, clear-input, with-open-stream, Streams Dictionary
 @subsection listen                                                           [Function]
 
-@code{listen}  @i{{&optional} input-stream} @result{}  @i{generalized-boolean}
+@code{listen}  @i{@r{&optional} input-stream} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -2536,7 +2552,7 @@
 @node clear-input, finish-output, listen, Streams Dictionary
 @subsection clear-input                                                      [Function]
 
-@code{clear-input}  @i{{&optional} input-stream} @result{}  @i{@b{nil}}
+@code{clear-input}  @i{@r{&optional} input-stream} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -2606,11 +2622,11 @@
 @node finish-output, y-or-n-p, clear-input, Streams Dictionary
 @subsection finish-output, force-output, clear-output                        [Function]
 
-@code{finish-output}  @i{{&optional} output-stream} @result{}  @i{@b{nil}}
+@code{finish-output}  @i{@r{&optional} output-stream} @result{}  @i{@b{nil}}
 
-@code{force-output}  @i{{&optional} output-stream} @result{}  @i{@b{nil}}
+@code{force-output}  @i{@r{&optional} output-stream} @result{}  @i{@b{nil}}
 
-@code{clear-output}  @i{{&optional} output-stream} @result{}  @i{@b{nil}}
+@code{clear-output}  @i{@r{&optional} output-stream} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -2666,9 +2682,9 @@
 @node y-or-n-p, make-synonym-stream, finish-output, Streams Dictionary
 @subsection y-or-n-p, yes-or-no-p                                            [Function]
 
-@code{y-or-n-p}  @i{{&optional} control {&rest} arguments} @result{}  @i{generalized-boolean}
+@code{y-or-n-p}  @i{@r{&optional} control @r{&rest} arguments} @result{}  @i{generalized-boolean}
 
-@code{yes-or-no-p}  @i{{&optional} control {&rest} arguments} @result{}  @i{generalized-boolean}
+@code{yes-or-no-p}  @i{@r{&optional} control @r{&rest} arguments} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -2823,7 +2839,7 @@
 @node make-broadcast-stream, make-two-way-stream, broadcast-stream-streams, Streams Dictionary
 @subsection make-broadcast-stream                                            [Function]
 
-@code{make-broadcast-stream}  @i{{&rest} streams} @result{}  @i{broadcast-stream}
+@code{make-broadcast-stream}  @i{@r{&rest} streams} @result{}  @i{broadcast-stream}
 
 @subsubheading  Arguments and Values::
 
@@ -2975,7 +2991,7 @@
 
 @subsubheading  See Also::
 
-@ref{echo-stream-input-stream; echo-stream-output-stream}
+@ref{echo-stream-input-stream}
 ,
 @b{echo-stream-output-stream},
 @ref{make-two-way-stream}
@@ -3004,7 +3020,7 @@
 @node make-concatenated-stream, get-output-stream-string, concatenated-stream-streams, Streams Dictionary
 @subsection make-concatenated-stream                                         [Function]
 
-@code{make-concatenated-stream}  @i{{&rest} input-streams} @result{}  @i{concatenated-stream}
+@code{make-concatenated-stream}  @i{@r{&rest} input-streams} @result{}  @i{concatenated-stream}
 
 @subsubheading  Arguments and Values::
 
@@ -3083,7 +3099,7 @@
 @node make-string-input-stream, make-string-output-stream, get-output-stream-string, Streams Dictionary
 @subsection make-string-input-stream                                         [Function]
 
-@code{make-string-input-stream}  @i{string {&optional} start end} @result{}  @i{string-stream}
+@code{make-string-input-stream}  @i{string @r{&optional} start end} @result{}  @i{string-stream}
 
 @subsubheading  Arguments and Values::
 
@@ -3121,7 +3137,7 @@
 @node make-string-output-stream, with-input-from-string, make-string-input-stream, Streams Dictionary
 @subsection make-string-output-stream                                        [Function]
 
-@code{make-string-output-stream}  @i{{&key} element-type} @result{}  @i{string-stream}
+@code{make-string-output-stream}  @i{@r{&key} element-type} @result{}  @i{string-stream}
 
 @subsubheading  Arguments and Values::
 
@@ -3163,10 +3179,10 @@
 @node with-input-from-string, with-output-to-string, make-string-output-stream, Streams Dictionary
 @subsection with-input-from-string                                              [Macro]
 
-@code{with-input-from-string}  @i{@r{(}var string {&key} index start end@r{)}
-			  @{@i{declaration}@}{*}
-			  @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{with-input-from-string}  @i{@r{(}var string @r{&key} index start end@r{)}
+			  @{@i{declaration}@}*
+			  @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -3252,10 +3268,10 @@
 @node with-output-to-string, *debug-io*, with-input-from-string, Streams Dictionary
 @subsection with-output-to-string                                               [Macro]
 
-@code{with-output-to-string}  @i{@r{(}var {&optional} string-form {&key} element-type@r{)}
- 			  @{@i{declaration}@}{*}
- 			  @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{with-output-to-string}  @i{@r{(}var @r{&optional} string-form @r{&key} element-type@r{)}
+ 			  @{@i{declaration}@}*
+ 			  @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -3449,11 +3465,11 @@
 @b{synonym-stream},
 @ref{Time}
 ,
-@ref{trace; untrace}
+@ref{trace}
 ,
-{@ref{Conditions}},
-{@ref{Reader}},
-{@ref{Printer}}
+@ref{Conditions},
+@ref{Reader},
+@ref{Printer}
 
 @subsubheading  Notes::
 
diff -uNr gcl-texi-orig/chap-22.texi gcl-texi/chap-22.texi
--- gcl-texi-orig/chap-22.texi	1994-07-16 18:03:05 +0400
+++ gcl-texi/chap-22.texi	2002-10-17 22:10:07 +0400
@@ -86,6 +86,7 @@
 Figure 22--1 shows the @i{standardized} @i{printer control variables};
 there might also be @i{implementation-defined} @i{printer control variables}.
 
+@format
 @group
 @noindent
 @w{  *print-array*   *print-gensym*       *print-pprint-dispatch*  }
@@ -98,11 +99,13 @@
 @w{       Figure 22--1: Standardized Printer Control Variables     }
 
 @end group
+@end format
 
 In addition to the @i{printer control variables}, 
 the following additional @i{defined names} 
 relate to or affect the behavior of the @i{Lisp printer}:
 
+@format
 @group
 @noindent
 @w{  *package*                    *read-eval*  readtable-case  }
@@ -112,6 +115,7 @@
 @w{   Figure 22--2: Additional Influences on the Lisp printer. }
 
 @end group
+@end format
 
 @node Printer Escaping,  , Multiple Possible Textual Representations, Overview of The Lisp Printer
 @subsubsection Printer Escaping
@@ -222,7 +226,7 @@
 
 @IRindex{float}
 
-If the magnitude of the @i{float} is either zero or between 10^{-3} (inclusive)
+If the magnitude of the @i{float} is either zero or between 10^@r{-3} (inclusive)
 and 10^7 (exclusive), it is printed as the integer part of the number,
 then a decimal point,
 followed by the fractional part of the number;
@@ -238,7 +242,7 @@
 For example, the base of the natural logarithms as a @i{short float}
 might be printed as @t{2.71828S0}.
 
-For non-zero magnitudes outside of the range 10^{-3} to 10^7,
+For non-zero magnitudes outside of the range 10^@r{-3} to 10^7,
 a @i{float} is printed in computerized scientific notation.
 The representation of the number is scaled to be between
 1 (inclusive) and 10 (exclusive) and then printed, with one digit
@@ -815,7 +819,7 @@
 the default notation for structures is:
 
 @example
- #S(@i{structure-name} @{@i{slot-key} @i{slot-value}@}{*})
+ #S(@i{structure-name} @{@i{slot-key} @i{slot-value}@}*)
 @end example
 
 where @t{#S} indicates structure syntax,
@@ -918,7 +922,7 @@
 @menu
 * Pretty Printer Concepts::	
 * Examples of using the Pretty Printer::  
-* Notes about the Pretty Printer's Background::	 
+* Notes about the Pretty Printer`s Background::	 
 @end menu
 
 @node Pretty Printer Concepts, Examples of using the Pretty Printer, The Lisp Pretty Printer, The Lisp Pretty Printer
@@ -1034,6 +1038,7 @@
 arrangement of output is provided through the functions and macros of the
 pretty printer.  Figure 22--3 shows the defined names related to @i{pretty printing}.
 
+@format
 @group
 @noindent
 @w{  *print-lines*            pprint-dispatch                pprint-pop           }
@@ -1048,11 +1053,13 @@
 @w{             Figure 22--3: Defined names related to pretty printing.           }
 
 @end group
+@end format
 
 Figure 22--4 identifies a set of @i{format directives} which serve
 as an alternate interface to the same pretty printing operations in a 
 more textually compact form.
 
+@format
 @group
 @noindent
 @w{  @t{~I}   @t{~W}      @t{~<...~:>}  }
@@ -1062,6 +1069,7 @@
 @w{  Figure 22--4: Format directives related to Pretty Printing}
 
 @end group
+@end format
 
 @node Compiling Format Strings, Pretty Print Dispatch Tables, Format Directive Interface, Pretty Printer Concepts
 @subsubsection Compiling Format Strings
@@ -1127,7 +1135,7 @@
 the left margin is assumed to be zero.
 The right margin is controlled by @b{*print-right-margin*}.
 
-@node Examples of using the Pretty Printer, Notes about the Pretty Printer's Background, Pretty Printer Concepts, The Lisp Pretty Printer
+@node Examples of using the Pretty Printer, Notes about the Pretty Printer`s Background, Pretty Printer Concepts, The Lisp Pretty Printer
 @subsection Examples of using the Pretty Printer
 
 As an example of the interaction of logical blocks, conditional newlines,
@@ -1347,7 +1355,7 @@
   (format T "~:<~W ~@@_~:I~W ~:_~W~1I ~_~W~:>" list))
 
 (defun pprint-let (*standard-output* list)
-  (format T "~:<~W~{@t{^}}~:<~@@@{~:<~@@@{~W~{@t{^}}~_~@}~:>~{@t{^}}~:_~@}~:>~1I~@@@{~{@t{^}}~_~W~@}~:>" list)) 
+  (format T "~:<~W~@t{^}~:<~@@@{~:<~@@@{~W~@t{^}~_~@}~:>~@t{^}~:_~@}~:>~1I~@@@{~@t{^}~_~W~@}~:>" list)) 
 @end example
 
 In the following example, the first @i{form} restores
@@ -1459,8 +1467,8 @@
 its @b{print-object} @i{method}
 is used instead.
 
-@node Notes about the Pretty Printer's Background,  , Examples of using the Pretty Printer, The Lisp Pretty Printer
-@subsection Notes about the Pretty Printer's Background
+@node Notes about the Pretty Printer`s Background,  , Examples of using the Pretty Printer, The Lisp Pretty Printer
+@subsection Notes about the Pretty Printer`s Background
 
 For a background reference to the abstract concepts detailed in this
 section, see @i{XP: A Common Lisp Pretty Printing System}.  The details of that paper are not binding on
@@ -1535,6 +1543,7 @@
 
 Examples of @i{format strings}:
 
+@format
 @group
 @noindent
 @w{  @t{"~S"}        ;This is an S directive with no parameters or modifiers.  }
@@ -1547,6 +1556,7 @@
 @w{             Figure 22--5: Examples of format control strings           }
 
 @end group
+@end format
 
 @b{format} sends the output to @i{destination}.
 If @i{destination} is @b{nil},
@@ -1647,7 +1657,7 @@
 this fact is mentioned.  For example,
 
 @example
- (format nil "~:@@C" #\Control-Partial) @result{}  "Control-{\partial} (Top-F)"  
+ (format nil "~:@@C" #\Control-Partial) @result{}  "Control-\partial (Top-F)"  
 @end example
 
 This is the format used for telling the user about a key he is expected to type,
@@ -1902,7 +1912,7 @@
 If both @i{w} and @i{d} are omitted, then the effect is to print
 the value using ordinary free-format output; @b{prin1} uses this format
 for any number whose magnitude is either zero or between
-10^{-3} (inclusive) and 10^7 (exclusive).
+10^@r{-3} (inclusive) and 10^7 (exclusive).
 
 If @i{w} is omitted, then if the magnitude of @i{arg} is so large (or, if
 @i{d} is also omitted, so small) that more than 100 digits would have to
@@ -2020,7 +2030,7 @@
 a similar
 
 format for any non-zero number whose magnitude
-is less than 10^{-3} or greater than or equal to 10^7.
+is less than 10^@r{-3} or greater than or equal to 10^7.
 
 The only difference is that the @t{~E} 
 directive always prints a plus or minus sign in front of the
@@ -2057,7 +2067,7 @@
 The full form is @t{~@i{w},@i{d},@i{e},@i{k},@i{overflowchar},@i{padchar},@i{exponentchar}G}.
 The format in which to print @i{arg} depends on the magnitude (absolute
 value) of the @i{arg}.  Let @i{n} be an integer such that
-10^{{n}-1} \le |@i{arg}| < 10^@i{n}.
+10^@r{@r{n}-1} \le |@i{arg}| < 10^@i{n}.
 Let @i{ee} equal @i{e}+2, or 4 if @i{e} is omitted.
 Let @i{ww} equal @i{w}- @i{ee},
 or @b{nil} if @i{w} is omitted.  If @i{d} is omitted, first let @i{q}
@@ -2263,7 +2273,7 @@
 Elements are extracted from this list using @b{pprint-pop},
 thereby providing automatic support for malformed lists, and the detection
 of circularity, sharing, and length abbreviation.
-Within the body segment, @t{~{@t{^}}} acts like @b{pprint-exit-if-list-exhausted}.
+Within the body segment, @t{~@t{^}} acts like @b{pprint-exit-if-list-exhausted}.
 
 @t{~<...~:>} supports a feature not supported by @b{pprint-logical-block}.
 If @t{~:@@>} is used to terminate the directive (@i{i.e.}, @t{~<...~:@@>}), 
@@ -2599,7 +2609,7 @@
 @node Tilde Left-Brace-> Iteration, Tilde Right-Brace-> End of Iteration, Tilde Right-Bracket-> End of Conditional Expression, FORMAT Control-Flow Operations
 @subsubsection Tilde Left-Brace: Iteration
 
-@t{~@{{@i{str}}~@}}
+@t{~@{@i{str}~@}}
 
 This is an iteration construct.  The argument should be a @i{list},
 which is used as a set of arguments 
@@ -2837,7 +2847,7 @@
 @node Tilde Circumflex-> Escape Upward, Tilde Newline-> Ignored Newline, Tilde Semicolon-> Clause Separator, FORMAT Miscellaneous Pseudo-Operations
 @subsubsection Tilde Circumflex: Escape Upward
 
-{@t{~@t{^} }}
+@t{~@t{^} }
 
 This is an escape construct.  If there are no more arguments remaining to
 be processed, then the immediately           
@@ -2851,16 +2861,16 @@
 construct.
 
 @example
- (setq donestr "Done.~{@t{^}} ~D warning~:P.~{@t{^}} ~D error~:P.")
-@result{}  "Done.~{@t{^}} ~D warning~:P.~{@t{^}} ~D error~:P."
+ (setq donestr "Done.~@t{^} ~D warning~:P.~@t{^} ~D error~:P.")
+@result{}  "Done.~@t{^} ~D warning~:P.~@t{^} ~D error~:P."
  (format nil donestr) @result{}  "Done."
  (format nil donestr 3) @result{}  "Done. 3 warnings."
  (format nil donestr 1 5) @result{}  "Done. 1 warning. 5 errors."
 @end example
 
 If a prefix parameter is given, then termination occurs if the parameter
-is zero.  (Hence @t{~{@t{^}}} is equivalent to 
-@t{~#{@t{^}}}.)  If two
+is zero.  (Hence @t{~@t{^}} is equivalent to 
+@t{~#@t{^}}.)  If two
 parameters are given, termination occurs if they are equal.
 
 [Reviewer Note by Barmar: Which equality predicate?]  If three
@@ -2869,14 +2879,14 @@
 Of course, this is useless if all the prefix parameters are constants; at
 least one of them should be a @t{#} or a @t{V} parameter.
 
-If @t{~{@t{^}}} is used within a @t{~:@{  } 
+If @t{~@t{^}} is used within a @t{~:@{  } 
 construct, then it terminates
 the current iteration step because in the standard case it tests for
 remaining arguments of the current step only; the next iteration step
-commences immediately.  @t{~:{@t{^}}} is used to terminate
+commences immediately.  @t{~:@t{^}} is used to terminate
 the iteration process.
 
-@t{~:{@t{^}}} 
+@t{~:@t{^}} 
 may be used only if the command it would terminate is 
 @t{~:@{  } or @t{~:@@@{  }.
 The entire iteration process is terminated if and only if the sublist that is
@@ -2884,8 +2894,8 @@
 the case of @t{~:@{ }, 
 or the last @b{format}        
 argument in the case of @t{~:@@@{  }. 
-@t{~:{@t{^}}} is not
-equivalent to @t{~#:{@t{^}}}; 
+@t{~:@t{^}} is not
+equivalent to @t{~#:@t{^}}; 
 the latter terminates the entire iteration if and only if no
 arguments remain for the current iteration step.
 For example:
@@ -2894,7 +2904,7 @@
  (format nil "~:@{ ~@@?~:@t{^} ...~@} " '(("a") ("b"))) @result{}  "a...b"
 @end example
 
-If @t{~{@t{^}}} appears within a control string being processed
+If @t{~@t{^}} appears within a control string being processed
 under the control of a @t{~?} directive, but not within
 any @t{~@{  } or @t{~<} construct within that string,
 then the string being
@@ -2903,9 +2913,9 @@
 continues within the string   
 containing the @t{~?} directive at the point following that directive.
 
-If @t{~{@t{^}}}                                          
+If @t{~@t{^}}                                          
 appears within a @t{~[} or @t{~(} construct,
-then all the commands up to the @t{~{@t{^}}} are properly selected
+then all the commands up to the @t{~@t{^}} are properly selected
 or case-converted,                   
 the @t{~[} or @t{~(} processing is terminated,
 and the outward search continues         
@@ -2913,22 +2923,22 @@
 to be terminated.  For example:
 
 @example
- (setq tellstr "~@@(~@@[~R~]~{@t{^}} ~A!~)")
-@result{}  "~@@(~@@[~R~]~{@t{^}} ~A!~)"
+ (setq tellstr "~@@(~@@[~R~]~@t{^} ~A!~)")
+@result{}  "~@@(~@@[~R~]~@t{^} ~A!~)"
  (format nil tellstr 23) @result{}  "Twenty-three!"
  (format nil tellstr nil "losers") @result{}  " Losers!"
  (format nil tellstr 23 "losers") @result{}  "Twenty-three losers!"
 @end example
 
-Following are examples of the use of @t{~{@t{^}}} 
+Following are examples of the use of @t{~@t{^}} 
 within a @t{~<} construct.
 
 @example
- (format nil "~15<~S~;~{@t{^}}~S~;~{@t{^}}~S~>" 'foo)
+ (format nil "~15<~S~;~@t{^}~S~;~@t{^}~S~>" 'foo)
 @result{}   "            FOO"
- (format nil "~15<~S~;~{@t{^}}~S~;~{@t{^}}~S~>" 'foo 'bar)
+ (format nil "~15<~S~;~@t{^}~S~;~@t{^}~S~>" 'foo 'bar)
 @result{}   "FOO         BAR"
- (format nil "~15<~S~;~{@t{^}}~S~;~{@t{^}}~S~>" 'foo 'bar 'baz)
+ (format nil "~15<~S~;~@t{^}~S~;~@t{^}~S~>" 'foo 'bar 'baz)
 @result{}   "FOO   BAR   BAZ"
 @end example
 
@@ -3149,7 +3159,7 @@
 Note that the meaning of @b{nil} and @b{t} as destinations to @b{format} 
 are different than those of @b{nil} and @b{t} as @i{stream designators}.
 
-The @t{~{@t{^}}} should appear only at the beginning of a @t{~<} clause,
+The @t{~@t{^}} should appear only at the beginning of a @t{~<} clause,
 because it aborts the entire clause in which it appears (as well as
 all following clauses).                                     
 
@@ -3197,7 +3207,7 @@
 @node copy-pprint-dispatch, formatter, Printer Dictionary, Printer Dictionary
 @subsection copy-pprint-dispatch                                             [Function]
 
-@code{copy-pprint-dispatch}  @i{{&optional} table} @result{}  @i{new-table}
+@code{copy-pprint-dispatch}  @i{@r{&optional} table} @result{}  @i{new-table}
 
 @subsubheading  Arguments and Values::
 
@@ -3267,7 +3277,7 @@
 @node pprint-dispatch, pprint-exit-if-list-exhausted, formatter, Printer Dictionary
 @subsection pprint-dispatch                                                  [Function]
 
-@code{pprint-dispatch}  @i{object {&optional} table} @result{}  @i{function, found-p}
+@code{pprint-dispatch}  @i{object @r{&optional} table} @result{}  @i{function, found-p}
 
 @subsubheading  Arguments and Values::
 
@@ -3361,11 +3371,11 @@
 @node pprint-fill, pprint-indent, pprint-exit-if-list-exhausted, Printer Dictionary
 @subsection pprint-fill, pprint-linear, pprint-tabular                       [Function]
 
-@code{pprint-fill}  @i{stream object {&optional} colon-p at-sign-p} @result{}  @i{@b{nil}}
+@code{pprint-fill}  @i{stream object @r{&optional} colon-p at-sign-p} @result{}  @i{@b{nil}}
 
-@code{pprint-linear}  @i{stream object {&optional} colon-p at-sign-p} @result{}  @i{@b{nil}}
+@code{pprint-linear}  @i{stream object @r{&optional} colon-p at-sign-p} @result{}  @i{@b{nil}}
 
-@code{pprint-tabular}  @i{stream object {&optional} colon-p at-sign-p tabsize} @result{}  @i{@b{nil}}
+@code{pprint-tabular}  @i{stream object @r{&optional} colon-p at-sign-p tabsize} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -3467,7 +3477,7 @@
 @node pprint-indent, pprint-logical-block, pprint-fill, Printer Dictionary
 @subsection pprint-indent                                                    [Function]
 
-@code{pprint-indent}  @i{relative-to n {&optional} stream} @result{}  @i{@b{nil}}
+@code{pprint-indent}  @i{relative-to n @r{&optional} stream} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -3521,8 +3531,8 @@
 @subsection pprint-logical-block                                                [Macro]
 
 @code{pprint-logical-block}  @i{@r{(}stream-symbol object 
-					     {&key} prefix per-line-prefix suffix@r{)}
-				@{@i{declaration}@}{*} @{@i{form}@}{*}}@*
+					     @r{&key} prefix per-line-prefix suffix@r{)}
+				@{@i{declaration}@}* @{@i{form}@}*}@*
    @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values:: 
@@ -3663,7 +3673,7 @@
 @node pprint-newline, pprint-pop, pprint-logical-block, Printer Dictionary
 @subsection pprint-newline                                                   [Function]
 
-@code{pprint-newline}  @i{kind {&optional} stream} @result{}  @i{@b{nil}}
+@code{pprint-newline}  @i{kind @r{&optional} stream} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -3888,7 +3898,7 @@
 @node pprint-tab, print-object, pprint-pop, Printer Dictionary
 @subsection pprint-tab                                                       [Function]
 
-@code{pprint-tab}  @i{kind colnum colinc {&optional} stream} @result{}  @i{@b{nil}}
+@code{pprint-tab}  @i{kind colnum colinc @r{&optional} stream} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -4064,13 +4074,13 @@
 
 @subsubheading  See Also::
 
-@ref{pprint-fill; pprint-linear; pprint-tabular}
+@ref{pprint-fill}
 ,
 @ref{pprint-logical-block}
 ,
 @ref{pprint-pop}
 ,
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 ,
 @b{*print-readably*},
 @b{*print-escape*},
@@ -4086,7 +4096,7 @@
 @node print-unreadable-object, set-pprint-dispatch, print-object, Printer Dictionary
 @subsection print-unreadable-object                                             [Macro]
 
-@code{print-unreadable-object}  @i{@r{(}object stream {&key} type identity@r{)} @{@i{form}@}{*}} @result{}  @i{@b{nil}}
+@code{print-unreadable-object}  @i{@r{(}object stream @r{&key} type identity@r{)} @{@i{form}@}*} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -4144,7 +4154,7 @@
 @node set-pprint-dispatch, write, print-unreadable-object, Printer Dictionary
 @subsection set-pprint-dispatch                                              [Function]
 
-@code{set-pprint-dispatch}  @i{type-specifier function {&optional} priority table} @result{}  @i{@b{nil}}
+@code{set-pprint-dispatch}  @i{type-specifier function @r{&optional} priority table} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -4208,16 +4218,16 @@
 @node write, write-to-string, set-pprint-dispatch, Printer Dictionary
 @subsection write, prin1, print, pprint, princ                               [Function]
 
-@code{write}  @i{@i{object} {&key} \writekeys{stream}}@*
+@code{write}  @i{@i{object} @r{&key} \writekeys@r{stream}}@*
    @result{}  @i{object}
 
-@code{prin}  @i{1} @result{}  @i{object {&optional} output-stream}
- {object}
-@code{princ}  @i{object {&optional} output-stream} @result{}  @i{object}
+@code{prin}  @i{1} @result{}  @i{object @r{&optional} output-stream}
+ @r{object}
+@code{princ}  @i{object @r{&optional} output-stream} @result{}  @i{object}
 
-@code{print}  @i{object {&optional} output-stream} @result{}  @i{object}
+@code{print}  @i{object @r{&optional} output-stream} @result{}  @i{object}
 
-@code{pprint}  @i{object {&optional} output-stream} @result{}  @i{<@i{no @i{values}}>}
+@code{pprint}  @i{object @r{&optional} output-stream} @result{}  @i{<@i{no @i{values}}>}
 
 @subsubheading  Arguments and Values::
 
@@ -4226,7 +4236,7 @@
 @i{output-stream}---an @i{output} @i{stream designator}.
 		        The default is @i{standard output}.
 
-\writekeydescriptions{@i{stream}---an @i{output} @i{stream designator}.
+\writekeydescriptions@r{@i{stream}---an @i{output} @i{stream designator}.
 The default is @i{standard output}.}
 
 @subsubheading  Description::
@@ -4244,6 +4254,7 @@
 Once the appropriate @i{bindings} are @i{established},
 the @i{object} is output by the @i{Lisp printer}.
 
+@format
 @group
 @noindent
 @w{  Parameter        Corresponding Dynamic Variable  }
@@ -4267,6 +4278,7 @@
 @w{  Figure 22--6: Argument correspondences for the WRITE function.}
 
 @end group
+@end format
 
 @b{prin1}, @b{princ}, @b{print}, and @b{pprint} implicitly 
 @i{bind} certain print parameters to particular values.  The remaining parameter
@@ -4364,11 +4376,11 @@
 @node write-to-string, *print-array*, write, Printer Dictionary
 @subsection write-to-string, prin1-to-string, princ-to-string                [Function]
 
-@code{write-to-string}  @i{object {&key} \writekeys{}}@*
+@code{write-to-string}  @i{object @r{&key} \writekeys}@*
    @result{}  @i{string}
 
 @code{prin}  @i{1} @result{}  @i{-to-string}
- {object} {string}
+ @r{object} @r{string}
 
 @code{princ-to-string}  @i{object} @result{}  @i{string}
 
@@ -4376,7 +4388,7 @@
 
 @i{object}---an @i{object}.
 
-\writekeydescriptions{}
+\writekeydescriptions
 
 @i{string}---a @i{string}.
 
@@ -4433,14 +4445,14 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 
 @subsubheading  Notes::       
 
 @example
- (write-to-string @i{object} @{@i{key} @i{argument}@}{*})
+ (write-to-string @i{object} @{@i{key} @i{argument}@}*)
 @equiv{} (with-output-to-string (#1=#:string-stream) 
-     (write object :stream #1# @{@i{key} @i{argument}@}{*}))
+     (write object :stream #1# @{@i{key} @i{argument}@}*))
 
  (princ-to-string @i{object})
 @equiv{} (with-output-to-string (string-stream)
@@ -4554,9 +4566,9 @@
 
 @ref{format}
 ,
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 ,
-@ref{write-to-string; prin1-to-string; princ-to-string}
+@ref{write-to-string}
 
 @node *print-case*, *print-circle*, *print-base*, Printer Dictionary
 @subsection *print-case*                                                     [Variable]
@@ -4606,7 +4618,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 
 @subsubheading  Notes::
 
@@ -4685,7 +4697,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 
 @subsubheading  Notes::
 
@@ -4733,7 +4745,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 , 
 @ref{readtable-case}
 
@@ -4771,7 +4783,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 , @b{*print-escape*}
 
 @node *print-level*, *print-lines*, *print-gensym*, Printer Dictionary
@@ -4862,7 +4874,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 
 @node *print-lines*, *print-miser-width*, *print-level*, Printer Dictionary
 @subsection *print-lines*                                                    [Variable]
@@ -5027,7 +5039,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 
 @node *print-readably*, *print-right-margin*, *print-pretty*, Printer Dictionary
 @subsection *print-readably*                                                 [Variable]
@@ -5129,7 +5141,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 , 
 @ref{print-unreadable-object}
 
@@ -5217,7 +5229,7 @@
 @node format,  , print-not-readable-object, Printer Dictionary
 @subsection format                                                           [Function]
 
-@code{format}  @i{destination control-string {&rest} args} @result{}  @i{result}
+@code{format}  @i{destination control-string @r{&rest} args} @result{}  @i{result}
 
 @subsubheading  Arguments and Values:: 
 
@@ -5275,7 +5287,7 @@
 
 @subsubheading  See Also::
 
-@ref{write; prin1; print; pprint; princ}
+@ref{write}
 ,
 @ref{Documentation of Implementation-Defined Scripts}
 
diff -uNr gcl-texi-orig/chap-23.texi gcl-texi/chap-23.texi
--- gcl-texi-orig/chap-23.texi	1994-07-16 18:03:03 +0400
+++ gcl-texi/chap-23.texi	2002-10-17 20:53:05 +0400
@@ -263,7 +263,7 @@
 @node copy-readtable, make-dispatch-macro-character, readtable, Reader Dictionary
 @subsection copy-readtable                                                   [Function]
 
-@code{copy-readtable}  @i{{&optional} from-readtable to-readtable} @result{}  @i{readtable}
+@code{copy-readtable}  @i{@r{&optional} from-readtable to-readtable} @result{}  @i{readtable}
 
 @subsubheading  Arguments and Values::
 
@@ -332,7 +332,7 @@
 @node make-dispatch-macro-character, read, copy-readtable, Reader Dictionary
 @subsection make-dispatch-macro-character                                    [Function]
 
-@code{make-dispatch-macro-character}  @i{char {&optional} non-terminating-p readtable} @result{}  @i{@b{t}}
+@code{make-dispatch-macro-character}  @i{char @r{&optional} non-terminating-p readtable} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -374,14 +374,14 @@
 
 @ref{readtable}
 , 
-@ref{set-dispatch-macro-character; get-dispatch-macro-character}
+@ref{set-dispatch-macro-character}
 
 @node read, read-delimited-list, make-dispatch-macro-character, Reader Dictionary
 @subsection read, read-preserving-whitespace                                 [Function]
 
-@code{read}  @i{{&optional} input-stream eof-error-p eof-value recursive-p} @result{}  @i{object}
+@code{read}  @i{@r{&optional} input-stream eof-error-p eof-value recursive-p} @result{}  @i{object}
 
-@code{read-preserving-whitespace}  @i{{&optional} input-stream eof-error-p
+@code{read-preserving-whitespace}  @i{@r{&optional} input-stream eof-error-p
 		               eof-value recursive-p}@*
    @result{}  @i{object}
 
@@ -543,13 +543,13 @@
 , 
 @ref{parse-integer}
 , 
-{@ref{Syntax}},
-{@ref{Reader Concepts}}
+@ref{Syntax},
+@ref{Reader Concepts}
 
 @node read-delimited-list, read-from-string, read, Reader Dictionary
 @subsection read-delimited-list                                              [Function]
 
-@code{read-delimited-list}  @i{char {&optional} input-stream recursive-p} @result{}  @i{list}
+@code{read-delimited-list}  @i{char @r{&optional} input-stream recursive-p} @result{}  @i{list}
 
 @subsubheading  Arguments and Values::
 
@@ -596,11 +596,11 @@
 
 @subsubheading  Examples::
 @example
- (read-delimited-list #\{]}) 1 2 3 4 5 6 {]}
+ (read-delimited-list #\@r{]}) 1 2 3 4 5 6 @r{]}
 @result{}  (1 2 3 4 5 6)
 @end example
 
-Suppose you wanted @t{#@{{@i{a}} @i{b} @i{c} ... @i{z}@}}
+Suppose you wanted @t{#@{@i{a} @i{b} @i{c} ... @i{z}@}}
 to read as a list of all pairs of the elements @i{a}, @i{b}, @i{c}, 
 ..., @i{z}, for example.
 
@@ -659,7 +659,7 @@
 
 @subsubheading  See Also::
 
-@ref{read; read-preserving-whitespace}
+@ref{read}
 ,
 @ref{peek-char}
 ,
@@ -680,8 +680,8 @@
 @node read-from-string, readtable-case, read-delimited-list, Reader Dictionary
 @subsection read-from-string                                                 [Function]
 
-@code{read-from-string}  @i{string {&optional} eof-error-p eof-value
-                               {&key} start end preserve-whitespace}@*
+@code{read-from-string}  @i{string @r{&optional} eof-error-p eof-value
+                               @r{&key} start end preserve-whitespace}@*
    @result{}  @i{object, position}
 
 @subsubheading  Arguments and Values::
@@ -748,7 +748,7 @@
 
 @subsubheading  See Also::
 
-@ref{read; read-preserving-whitespace}
+@ref{read}
 ,
 @b{read-preserving-whitespace}
 
@@ -840,9 +840,9 @@
 @i{[Function]}
 @end flushright
 
-@code{get-dispatch-macro-character}  @i{disp-char sub-char {&optional} readtable} @result{}  @i{function}
+@code{get-dispatch-macro-character}  @i{disp-char sub-char @r{&optional} readtable} @result{}  @i{function}
 
-@code{set-dispatch-macro-character}  @i{disp-char sub-char new-function {&optional} readtable} @result{}  @i{@b{t}}
+@code{set-dispatch-macro-character}  @i{disp-char sub-char new-function @r{&optional} readtable} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -940,9 +940,9 @@
 @node set-macro-character, set-syntax-from-char, set-dispatch-macro-character, Reader Dictionary
 @subsection set-macro-character, get-macro-character                         [Function]
 
-@code{get-macro-character}  @i{char {&optional} readtable} @result{}  @i{function, non-terminating-p}
+@code{get-macro-character}  @i{char @r{&optional} readtable} @result{}  @i{function, non-terminating-p}
 
-@code{set-macro-character}  @i{char new-function {&optional} non-terminating-p readtable} @result{}  @i{@b{t}}
+@code{set-macro-character}  @i{char new-function @r{&optional} non-terminating-p readtable} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -1022,7 +1022,7 @@
 @node set-syntax-from-char, with-standard-io-syntax, set-macro-character, Reader Dictionary
 @subsection set-syntax-from-char                                             [Function]
 
-@code{set-syntax-from-char}  @i{to-char from-char {&optional} to-readtable from-readtable} @result{}  @i{@b{t}}
+@code{set-syntax-from-char}  @i{to-char from-char @r{&optional} to-readtable from-readtable} @result{}  @i{@b{t}}
 
 @subsubheading  Arguments and Values::
 
@@ -1075,7 +1075,7 @@
 
 @subsubheading  See Also::
 
-@ref{set-macro-character; get-macro-character}
+@ref{set-macro-character}
 ,
 @ref{make-dispatch-macro-character}
 ,
@@ -1093,7 +1093,7 @@
 @node with-standard-io-syntax, *read-base*, set-syntax-from-char, Reader Dictionary
 @subsection with-standard-io-syntax                                             [Macro]
 
-@code{with-standard-io-syntax}  @i{@{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{with-standard-io-syntax}  @i{@{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -1111,6 +1111,7 @@
 
 [Reviewer Note by Barrett: *print-pprint-dispatch* should probably be mentioned here, too.]
 
+@format
 @group
 @noindent
 @w{  Variable                     Value                               }
@@ -1140,6 +1141,7 @@
 @w{         Figure 23--1: Values of standard control variables        }
 
 @end group
+@end format
 
 @subsubheading  Examples::
 
@@ -1363,9 +1365,9 @@
 
 @subsubheading  See Also::
 
-@ref{read; read-preserving-whitespace}
+@ref{read}
 ,
-{@ref{Syntax}}
+@ref{Syntax}
 
 @subsubheading  Notes::
 
@@ -1443,7 +1445,7 @@
 
 @subsubheading  See Also::
 
-@ref{read; read-preserving-whitespace}
+@ref{read}
 ,
 @ref{stream-error-stream}
 ,
diff -uNr gcl-texi-orig/chap-24.texi gcl-texi/chap-24.texi
--- gcl-texi-orig/chap-24.texi	1994-07-16 18:03:03 +0400
+++ gcl-texi/chap-24.texi	2002-10-17 20:53:05 +0400
@@ -97,12 +97,12 @@
 if its argument @i{feature-conditional} fails;
 otherwise, it succeeds.
 
-@item @t{(and @{@i{feature-conditional}@}{*})}  
+@item @t{(and @{@i{feature-conditional}@}*)}  
 An @b{and} @i{feature expression} succeeds 
 if all of its argument @i{feature-conditionals} succeed;
 otherwise, it fails.
 
-@item @t{(or @{@i{feature-conditional}@}{*})}  
+@item @t{(or @{@i{feature-conditional}@}*)}  
 An @b{or} @i{feature expression} succeeds 
 if any of its argument @i{feature-conditionals} succeed;
 otherwise, it fails.
@@ -124,6 +124,7 @@
 Figure 24--1 shows some sample @i{expressions}, and how they would be 
 @i{read}_2 in these @i{implementations}.
 
+@format
 @group
 @noindent
 @w{  @t{(cons #+spice "Spice" #-spice "Lispm" x)} }
@@ -151,6 +152,7 @@
 @w{              Figure 24--1: Features examples             }
 
 @end group
+@end format
 
 @c end of including concept-systems
 
@@ -176,7 +178,7 @@
 @node compile-file, compile-file-pathname, System Construction Dictionary, System Construction Dictionary
 @subsection compile-file                                                     [Function]
 
-@code{compile-file}  @i{input-file {&key} output-file verbose
+@code{compile-file}  @i{input-file @r{&key} output-file verbose
 					         print external-format}@*
    @result{}  @i{output-truename, warnings-p, failure-p}
 
@@ -320,7 +322,7 @@
 @node compile-file-pathname, load, compile-file, System Construction Dictionary
 @subsection compile-file-pathname                                            [Function]
 
-@code{compile-file-pathname}  @i{input-file {&key} output-file {&allow-other-keys}} @result{}  @i{pathname}
+@code{compile-file-pathname}  @i{input-file @r{&key} output-file @r{&allow-other-keys}} @result{}  @i{pathname}
 
 @subsubheading  Arguments and Values::
 
@@ -388,7 +390,7 @@
 @node load, with-compilation-unit, compile-file-pathname, System Construction Dictionary
 @subsection load                                                             [Function]
 
-@code{load}  @i{filespec {&key} verbose print
+@code{load}  @i{filespec @r{&key} verbose print
 					       if-does-not-exist external-format}@*
    @result{}  @i{generalized-boolean}
 
@@ -567,7 +569,7 @@
 @subsection with-compilation-unit                                               [Macro]
 
 @code{with-compilation-unit}  @i{@r{(}[[!@i{option}]]@r{)}
-		   @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+		   @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @w{@i{option} ::=@t{:override} override}
 
@@ -908,7 +910,7 @@
 
 @subsubheading  See Also::
 
-@ref{provide; require}
+@ref{provide}
 ,
 @b{require}
 
@@ -921,7 +923,7 @@
 
 @code{provide}  @i{module-name} @result{}  @i{@i{implementation-dependent}}
 
-@code{require}  @i{module-name {&optional} pathname-list} @result{}  @i{@i{implementation-dependent}}
+@code{require}  @i{module-name @r{&optional} pathname-list} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Arguments and Values::
 
diff -uNr gcl-texi-orig/chap-25.texi gcl-texi/chap-25.texi
--- gcl-texi-orig/chap-25.texi	1994-07-16 18:03:02 +0400
+++ gcl-texi/chap-25.texi	2002-10-17 20:53:05 +0400
@@ -36,6 +36,7 @@
 @i{form}.
 Figure 25--1 lists variables that are maintained by the @i{Lisp read-eval-print loop}.
 
+@format
 @group
 @noindent
 @w{  *    +    /    -  }
@@ -46,6 +47,7 @@
 @w{  Figure 25--1: Variables maintained by the Read-Eval-Print Loop}
 
 @end group
+@end format
 
 @node Debugging Utilities, Environment Inquiry, Top level loop, The External Environment
 @subsection Debugging Utilities
@@ -53,6 +55,7 @@
 Figure 25--2 shows @i{defined names} relating to
 debugging.
 
+@format
 @group
 @noindent
 @w{  *debugger-hook*  documentation    step     }
@@ -65,6 +68,7 @@
 @w{  Figure 25--2: Defined names relating to debugging}
 
 @end group
+@end format
 
 @node Environment Inquiry, Time, Debugging Utilities, The External Environment
 @subsection Environment Inquiry
@@ -75,6 +79,7 @@
 
 Figure 25--3 shows @i{defined names} relating to environment inquiry.
 
+@format
 @group
 @noindent
 @w{  *features*                   machine-instance  short-site-name   }
@@ -86,6 +91,7 @@
 @w{    Figure 25--3: Defined names relating to environment inquiry.   }
 
 @end group
+@end format
 
 @node Time,  , Environment Inquiry, The External Environment
 @subsection Time
@@ -110,6 +116,7 @@
 
 Figure 25--4 shows @i{defined names} relating to @i{time}.
 
+@format
 @group
 @noindent
 @w{  decode-universal-time   get-internal-run-time           }
@@ -121,6 +128,7 @@
 @w{        Figure 25--4: Defined names involving Time.       }
 
 @end group
+@end format
 
 @menu
 * Decoded Time::		
@@ -183,6 +191,7 @@
 
 Figure 25--5 shows @i{defined names} relating to @i{decoded time}.
 
+@format
 @group
 @noindent
 @w{  decode-universal-time  get-decoded-time  }
@@ -191,6 +200,7 @@
 @w{  Figure 25--5: Defined names involving time in Decoded Time.}
 
 @end group
+@end format
 
 @node Universal Time, Internal Time, Decoded Time, Time
 @subsubsection Universal Time
@@ -211,6 +221,7 @@
 Because @i{universal time} must be a non-negative @i{integer},
 times before the base time of midnight, January 1, 1900 GMT cannot be processed by @r{Common Lisp}.
 
+@format
 @group
 @noindent
 @w{  decode-universal-time  get-universal-time  }
@@ -220,6 +231,7 @@
 @w{  Figure 25--6: Defined names involving time in Universal Time.}
 
 @end group
+@end format
 
 @node Internal Time, Seconds, Universal Time, Time
 @subsubsection Internal Time
@@ -233,6 +245,7 @@
 
 Figure 25--7 shows @i{defined names} related to @i{internal time}.
 
+@format
 @group
 @noindent
 @w{  get-internal-real-time  internal-time-units-per-second  }
@@ -242,6 +255,7 @@
 @w{  Figure 25--7: Defined names involving time in Internal Time.}
 
 @end group
+@end format
 
 @node Seconds,  , Internal Time, Time
 @subsubsection Seconds
@@ -253,6 +267,7 @@
 @b{sleep} can be any kind of non-negative @i{real}, in order to allow for
 the possibility of fractional seconds.
 
+@format
 @group
 @noindent
 @w{  sleep    }
@@ -261,6 +276,7 @@
 @w{  Figure 25--8: Defined names involving time in Seconds.}
 
 @end group
+@end format
 
 @c end of including concept-environment
 
@@ -289,10 +305,10 @@
 * ed::				
 * inspect::			
 * dribble::			
-* -::				
-* +::				
-* *::				
-* /::				
+* - (Variable)::				
+* + (Variable)::				
+* * (Variable)::				
+* / (Variable)::				
 * lisp-implementation-type::	
 * short-site-name::		
 * machine-instance::		
@@ -305,7 +321,7 @@
 @node decode-universal-time, encode-universal-time, Environment Dictionary, Environment Dictionary
 @subsection decode-universal-time                                            [Function]
 
-@code{decode-universal-time}  @i{universal-time {&optional} time-zone}@*
+@code{decode-universal-time}  @i{universal-time @r{&optional} time-zone}@*
    @result{}  @i{second, minute, hour, date, month, year, day, daylight-p, zone}
 
 @subsubheading  Arguments and Values::
@@ -354,7 +370,7 @@
 
 @ref{encode-universal-time}
 , 
-@ref{get-universal-time; get-decoded-time}
+@ref{get-universal-time}
 , 
 @ref{Time}
 
@@ -364,7 +380,7 @@
 @subsubheading  Syntax::
 
 @code{encode-universal-time}  @i{second minute hour date month year
-                               {&optional} time-zone}@*
+                               @r{&optional} time-zone}@*
    @result{}  @i{universal-time}
 
 @subsubheading  Arguments and Values::
@@ -511,9 +527,9 @@
 @node apropos, describe, sleep, Environment Dictionary
 @subsection apropos, apropos-list                                            [Function]
 
-@code{apropos}  @i{string {&optional} package} @result{}  @i{<@i{no @i{values}}>}
+@code{apropos}  @i{string @r{&optional} package} @result{}  @i{<@i{no @i{values}}>}
 
-@code{apropos-list}  @i{string {&optional} package} @result{}  @i{symbols}
+@code{apropos-list}  @i{string @r{&optional} package} @result{}  @i{symbols}
 
 @subsubheading  Arguments and Values::
 
@@ -560,7 +576,7 @@
 @node describe, describe-object, apropos, Environment Dictionary
 @subsection describe                                                         [Function]
 
-@code{describe}  @i{object {&optional} stream} @result{}  @i{<@i{no @i{values}}>}
+@code{describe}  @i{object @r{&optional} stream} @result{}  @i{<@i{no @i{values}}>}
 
 @subsubheading  Arguments and Values::
 
@@ -700,9 +716,9 @@
 @node trace, step, describe-object, Environment Dictionary
 @subsection trace, untrace                                                      [Macro]
 
-@code{trace}  @i{@{@i{function-name}@}{*}} @result{}  @i{trace-result}
+@code{trace}  @i{@{@i{function-name}@}*} @result{}  @i{trace-result}
 
-@code{untrace}  @i{@{@i{function-name}@}{*}} @result{}  @i{untrace-result}
+@code{untrace}  @i{@{@i{function-name}@}*} @result{}  @i{untrace-result}
 
 @subsubheading  Arguments and Values::
 
@@ -795,7 +811,7 @@
 @node step, time, trace, Environment Dictionary
 @subsection step                                                                [Macro]
 
-@code{step}  @i{form} @result{}  @i{@{@i{result}@}{*}}
+@code{step}  @i{form} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values:: 
 
@@ -830,7 +846,7 @@
 
 @subsubheading  See Also::
 
-@ref{trace; untrace}
+@ref{trace}
 
 @subsubheading  Notes::
 
@@ -841,7 +857,7 @@
 @node time, internal-time-units-per-second, step, Environment Dictionary
 @subsection time                                                                [Macro]
 
-@code{time}  @i{form} @result{}  @i{@{@i{result}@}{*}}
+@code{time}  @i{form} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -895,7 +911,7 @@
 purposes.
 
 For useful background information on the complicated issues involved in
-interpreting timing results, see {Performance and Evaluation of Lisp Programs}.
+interpreting timing results, see @i{Performance and Evaluation of Lisp Programs}.
 
 @node internal-time-units-per-second, get-internal-real-time, time, Environment Dictionary
 @subsection internal-time-units-per-second                          [Constant Variable]
@@ -1215,7 +1231,7 @@
 @node room, ed, documentation, Environment Dictionary
 @subsection room                                                             [Function]
 
-@code{room}  @i{{&optional} x} @result{}  @i{@i{implementation-dependent}}
+@code{room}  @i{@r{&optional} x} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1249,7 +1265,7 @@
 @node ed, inspect, room, Environment Dictionary
 @subsection ed                                                               [Function]
 
-@code{ed}  @i{{&optional} x} @result{}  @i{@i{implementation-dependent}}
+@code{ed}  @i{@r{&optional} x} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Arguments and Values::
 
@@ -1337,10 +1353,10 @@
 of @t{?} or a ``help key'' by providing help, including a list
 of commands.
 
-@node dribble, -, inspect, Environment Dictionary
+@node dribble, - (Variable), inspect, Environment Dictionary
 @subsection dribble                                                          [Function]
 
-@code{dribble}  @i{{&optional} pathname} @result{}  @i{@i{implementation-dependent}}
+@code{dribble}  @i{@r{&optional} pathname} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Arguments and Values::
 
@@ -1396,7 +1412,7 @@
 @b{dribble} is intended primarily for interactive debugging;
 its effect cannot be relied upon when used in a program.
 
-@node -, +, dribble, Environment Dictionary
+@node - (Variable), + (Variable), dribble, Environment Dictionary
 @subsection -                                                              [Variable]
 
 @subsubheading  Value Type::
@@ -1432,7 +1448,7 @@
  (@i{variable}), 
 @ref{Top level loop}
 
-@node +, *, -, Environment Dictionary
+@node + (Variable), * (Variable), - (Variable), Environment Dictionary
 @subsection +, ++, +++                                                       [Variable]
 
 @subsubheading  Value Type::
@@ -1479,7 +1495,7 @@
  (@i{variable}), 
 @ref{Top level loop}
 
-@node *, /, +, Environment Dictionary
+@node * (Variable), / (Variable), + (Variable), Environment Dictionary
 @subsection *, **, ***                                                       [Variable]
 
 @subsubheading  Value Type::
@@ -1543,7 +1559,7 @@
  *** @equiv{} (car ///)
 @end example
 
-@node /, lisp-implementation-type, *, Environment Dictionary
+@node / (Variable), lisp-implementation-type, * (Variable), Environment Dictionary
 @subsection /, //, ///                                                       [Variable]
 
 @subsubheading  Value Type::
@@ -1588,7 +1604,7 @@
 @b{*} (@i{variable}),
 @ref{Top level loop}
 
-@node lisp-implementation-type, short-site-name, /, Environment Dictionary
+@node lisp-implementation-type, short-site-name, / (Variable), Environment Dictionary
 @subsection lisp-implementation-type,
 @subheading lisp-implementation-version
 @flushright
@@ -1804,7 +1820,7 @@
 @node user-homedir-pathname,  , software-type, Environment Dictionary
 @subsection user-homedir-pathname                                            [Function]
 
-@code{user-homedir-pathname}  @i{{&optional} host} @result{}  @i{pathname}
+@code{user-homedir-pathname}  @i{@r{&optional} host} @result{}  @i{pathname}
 
 @subsubheading  Arguments and Values::
 
diff -uNr gcl-texi-orig/chap-26.texi gcl-texi/chap-26.texi
--- gcl-texi-orig/chap-26.texi	1994-07-16 18:03:01 +0400
+++ gcl-texi/chap-26.texi	2002-10-17 20:53:05 +0400
@@ -25,7 +25,7 @@
 pronounced 'a ,list .  The pronunciation key follows
 @i{Webster's Third New International Dictionary
  the English Language, Unabridged},
-  except that ``{e}'' is used to notate the schwa (upside-down ``e'') character.
+  except that ``e'' is used to notate the schwa (upside-down ``e'') character.
 
 @item @t{*}  
 the part or parts of speech, set in italics.  If a term
@@ -48,7 +48,7 @@
 
 @item --  
 an optional discipline, set in italics, present if the term
-has a standard definition being repeated. For example, ``{Math.}''
+has a standard definition being repeated. For example, ``Math.''
 
 @item --  
 an optional context, present if this definition is
@@ -59,7 +59,7 @@
 
 @item --  
 an optional example sentence. For example,
-           {``This is an example of an example.''}
+           ``This is an example of an example.''
 
 @item --  
 optional cross references.
@@ -70,7 +70,7 @@
 
 In addition, some terms have idiomatic usage in the Common Lisp
 community which is not shared by other communities, or which is not
-technically correct.  Definitions labeled ``{Idiom.}'' represent
+technically correct.  Definitions labeled ``Idiom.'' represent
 such idiomatic usage; these definitions are sometimes followed by an
 explanatory note.
 
@@ -272,7 +272,7 @@
 @item @b{alphanumeric}
  @i{adj.} (of a @i{character})
   being either an @i{alphabetic}_1 @i{character}
-            or a @i{numeric} {character}.
+            or a @i{numeric} @i{character}.
 
 @IGindex{ampersand}
 @item @b{ampersand}
@@ -332,8 +332,8 @@
  @i{v.t.} (a @i{function} to a @i{list})
   to @i{call} the @i{function} with arguments that are the @i{elements}
   of the @i{list}.
-  {``Applying the function @b{+} to a list of integers returns
-	    the sum of the elements of that list.''} 
+  ``Applying the function @b{+} to a list of integers returns
+	    the sum of the elements of that list.''
 
 @IGindex{argument}
 @item @b{argument}
@@ -347,7 +347,7 @@
 @item @b{argument evaluation order}
  @i{n.} 
   the order in which @i{arguments} are evaluated in a function call.
-  {``The argument evaluation order for Common Lisp is left to right.''}
+  ``The argument evaluation order for Common Lisp is left to right.''
   See @ref{Evaluation}.
 
 @IGindex{argument precedence order}
@@ -418,13 +418,13 @@
 @item @b{atom}
  @i{n.}
   any @i{object} that is not a @i{cons}.
-  {``A vector is an atom.''}
+  ``A vector is an atom.''
 
 @IGindex{atomic}
 @item @b{atomic}
  @i{adj.} 
   being an @i{atom}.
-  {``The number 3, the symbol @t{foo}, and @b{nil} are atomic.''}
+  ``The number 3, the symbol @t{foo}, and @b{nil} are atomic.''
 
 @IGindex{atomic type specifier}
 @item @b{atomic type specifier}
@@ -441,9 +441,9 @@
   is its @i{code}_2, but @i{implementations} are permitted to have
   additional @i{implementation-defined} @i{attributes}.
   See @ref{Character Attributes}.
-  {``An implementation that support fonts
+  ``An implementation that support fonts
             might make font information an attribute of a character,
-            while others might represent font information separately from characters.''}
+            while others might represent font information separately from characters.''
 
 @IGindex{aux variable}
 @item @b{aux variable}
@@ -530,8 +530,8 @@
  @i{n.} 
   an association between a @i{name} and that which the @i{name} 
   denotes.  
-  {``A lexical binding is a lexical association between a 
-            name and its value.''}
+  ``A lexical binding is a lexical association between a 
+            name and its value.''
 
 @IGindex{bit}
 @item @b{bit}
@@ -624,13 +624,13 @@
 @item @b{bound}
  @i{adj.}, @i{v.t.} 
   1. @i{adj.} having an associated denotation in a @i{binding}.
-     {``The variables named by a @b{let} are bound within
-               its body.''}
+     ``The variables named by a @b{let} are bound within
+               its body.''
      See @i{unbound}.
   2. @i{adj.} having a local @i{binding} which 
      @i{shadows}_2 another. 
-     {``The variable @b{*print-escape*} is bound while in
-               the @b{princ} function.''}
+     ``The variable @b{*print-escape*} is bound while in
+               the @b{princ} function.''
   3. @i{v.t.} the past tense of @i{bind}.
 
 @IGindex{bound declaration}
@@ -736,8 +736,8 @@
      @i{executed} in an @i{environment} where @i{bindings} for
      the @i{values} of its @i{parameters} have been @i{established}
      based on the @i{arguments}.
-     {``Calling the function @b{+} with the arguments 
-               @t{5} and @t{1} yields a value of @t{6}.''}
+     ``Calling the function @b{+} with the arguments 
+               @t{5} and @t{1} yields a value of @t{6}.''
   2. @i{n.} a @i{situation} in which a @i{function} is called.
 
 @IGindex{captured initialization form}
@@ -746,9 +746,9 @@
   an @i{initialization form} along with the @i{lexical environment}
   in which the @i{form} that defined the @i{initialization form}
   was @i{evaluated}.
-  {``Each newly added shared slot is set to the result of evaluating
+  ``Each newly added shared slot is set to the result of evaluating
             the captured initialization form for the slot that was specified
-            in the @b{defclass} form for the new class.''}
+            in the @b{defclass} form for the new class.''
 
 @IGindex{car}
 @item @b{car}
@@ -757,20 +757,20 @@
         the component of a @i{cons} corresponding to the first
         @i{argument} to @b{cons}; the other component is the
         @i{cdr}.
-	{``The function @b{rplaca} modifies the car of a cons.''}
+	``The function @b{rplaca} modifies the car of a cons.''
      b. (of a @i{list})
         the first @i{element} of the @i{list}, or @b{nil} if the
         @i{list} is the @i{empty list}.
   2. the @i{object} that is held in the @i{car}_1.
-     {``The function @b{car} returns the car of a cons.''}
+     ``The function @b{car} returns the car of a cons.''
 
 @IGindex{case}
 @item @b{case}
  @i{n.} (of a @i{character})
   the property of being either @i{uppercase} or @i{lowercase}.
   Not all @i{characters} have @i{case}.
-  {``The characters @t{#\A} and @t{#\a} have case,
-	    but the character @t{#\$} has no case.''}
+  ``The characters @t{#\A} and @t{#\a} have case,
+	    but the character @t{#\$} has no case.''
   See @ref{Characters With Case} and the @i{function} @b{both-case-p}.
 
 @IGindex{case sensitivity mode}
@@ -808,13 +808,13 @@
   1. a. (of a @i{cons}) 
         the component of a @i{cons} corresponding to the second @i{argument}
         to @b{cons}; the other component is the @i{car}.
-	{``The function @b{rplacd} modifies the cdr of a cons.''}
+	``The function @b{rplacd} modifies the cdr of a cons.''
      b. (of a @i{list} L_1)
         either the @i{list} L_2 that contains 
 	       the @i{elements} of L_1 that follow after the first, 
 	or else @b{nil} if L_1 is the @i{empty list}.
   2. the @i{object} that is held in the @i{cdr}_1.
-     {``The function @b{cdr} returns the cdr of a cons.''}
+     ``The function @b{cdr} returns the cdr of a cons.''
 
 @IGindex{cell}
 @item @b{cell}
@@ -884,7 +884,7 @@
      other @i{objects} called its @i{indirect instances},
      and that acts as a @i{type specifier} for a set of objects
      called its @i{generalized instances}.
-     {``The class @b{integer} is a subclass of the class @b{number}.''}
+     ``The class @b{integer} is a subclass of the class @b{number}.''
      (Note that the phrase ``the @i{class} @t{foo}'' is often substituted for
       the more precise phrase ``the @i{class} named @t{foo}''---in both
       cases, a @i{class} @i{object} (not a @i{symbol}) is denoted.)
@@ -892,8 +892,8 @@
      the uniquely determined @i{class} of which the @i{object} is
      a @i{direct instance}.
      See the @i{function} @b{class-of}.
-     {``The class of the object returned by @b{gensym} 
- 	       is @b{symbol}.''}
+     ``The class of the object returned by @b{gensym} 
+ 	       is @b{symbol}.''
      (Note that with this usage a phrase such as ``its @i{class} is @t{foo}'' 
       is often substituted for the more precise phrase
       ``its @i{class} is the @i{class} named @t{foo}''---in both
@@ -929,7 +929,7 @@
 @IGindex{closed}
 @item @b{closed}
  @i{adj.} (of a @i{stream})
-  having been @i{closed} (see @i{@i}{close}).
+  having been @i{closed} (see @i{close}).
   Some (but not all) operations that are valid on @i{open} @i{streams} 
   are not valid on @i{closed} @i{streams}.
   See @ref{File Operations on Open and Closed Streams}.
@@ -1149,7 +1149,7 @@
 @item @b{composite stream}
  @i{n.}
   a @i{stream} that is composed of one or more other @i{streams}.
-  {``@b{make-synonym-stream} creates a composite stream.''}
+  ``@b{make-synonym-stream} creates a composite stream.''
 
 @IGindex{compound form}
 @item @b{compound form}
@@ -1165,7 +1165,7 @@
  @i{n.}
   a @i{type specifier} that is a @i{cons};
   @i{i.e.}, a @i{type specifier} that is not an @i{atomic type specifier}.
-  {``@t{(vector single-float)} is a compound type specifier.''}
+  ``@t{(vector single-float)} is a compound type specifier.''
 
 @IGindex{concatenated stream}
 @item @b{concatenated stream}
@@ -1286,24 +1286,24 @@
    that neither affects nor is affected by the state of any @i{object}
      except those @i{objects} that are @i{otherwise inaccessible parts}
      of @i{objects} created by the @i{form} itself.
-  {``A @b{car} form in which the argument is a
-            @b{quote} form is a constant form.''}
+  ``A @b{car} form in which the argument is a
+            @b{quote} form is a constant form.''
 
 @IGindex{constant object}
 @item @b{constant object}
  @i{n.}
   an @i{object} that is constrained (@i{e.g.}, by its context in a @i{program}
   or by the source from which it was obtained) to be @i{immutable}.
-  {``A literal object that has been processed by @b{compile-file}
-	    is a constant object.''}
+  ``A literal object that has been processed by @b{compile-file}
+	    is a constant object.''
 
 @IGindex{constant variable}
 @item @b{constant variable}
  @i{n.}
   a @i{variable}, the @i{value} of which can never change;
   that is, a @i{keyword}_1 or a @i{named constant}.
-  {``The symbols @b{t}, @b{nil}, @t{:direction}, and
-            @b{most-positive-fixnum} are constant variables.''}
+  ``The symbols @b{t}, @b{nil}, @t{:direction}, and
+            @b{most-positive-fixnum} are constant variables.''
 
 @IGindex{constituent}
 @item @b{constituent}
@@ -1329,7 +1329,7 @@
   a @i{stream} whose source or sink is a Lisp @i{object}.
   Note that since a @i{stream} is another Lisp @i{object},
   @i{composite streams} are considered @i{constructed streams}.
-  {``A string stream is a constructed stream.''}
+  ``A string stream is a constructed stream.''
 
 @IGindex{contagion}
 @item @b{contagion}
@@ -1394,8 +1394,8 @@
   1. (by a @i{restart} other than @b{abort} 
       that has been associated with the @i{error})
      capable of being corrected by invoking that @i{restart}.
-     {``The function @b{cerror} signals an error 
-	       that is correctable by the @b{continue} @i{restart}.''}
+     ``The function @b{cerror} signals an error 
+	       that is correctable by the @b{continue} @i{restart}.''
 
      (Note that correctability is not a property of an
       @i{error} @i{object}, but rather a property of the 
@@ -1407,9 +1407,9 @@
 
   2. (when no specific @i{restart} is mentioned)
      @i{correctable}_1 by at least one @i{restart}.
-     {``@b{import} signals a correctable error of @i{type} @b{package-error}
+     ``@b{import} signals a correctable error of @i{type} @b{package-error}
 	       if any of the imported symbols has the same name as
-	        some distinct symbol already accessible in the package.''}
+	        some distinct symbol already accessible in the package.''
 
 @IGindex{current input base}
 @item @b{current input base}
@@ -1573,7 +1573,7 @@
 @item @b{defining form}
  @i{n.}
   a @i{form} that has the side-effect of @i{establishing} a definition.
-  {``@b{defun} and @b{defparameter} are defining forms.''}
+  ``@b{defun} and @b{defparameter} are defining forms.''
 
 @IGindex{defsetf lambda list}
 @item @b{defsetf lambda list}
@@ -1595,7 +1595,7 @@
 @item @b{denormalized}
  @i{adj.}, @i{ANSI}, @i{IEEE} (of a @i{float})
   conforming to the description of ``denormalized'' as described by 
-  {IEEE Standard for Binary Floating-Point Arithmetic}.
+  @i{IEEE Standard for Binary Floating-Point Arithmetic}.
   For example, in an @i{implementation} where the minimum possible exponent 
   was @t{-7} but where @t{0.001} was a valid mantissa, the number @t{1.0e-10}
   might be representable as @t{0.001e-7} internally even if the @i{normalized}
@@ -1646,8 +1646,8 @@
 @item @b{different}
  @i{adj.} 
   not the @i{same}
-  {``The strings @t{"FOO"} and @t{"foo"} are different under
-	    @b{equal} but not under @b{equalp}.''}
+  ``The strings @t{"FOO"} and @t{"foo"} are different under
+	    @b{equal} but not under @b{equalp}.''
 
 @IGindex{digit}
 @item @b{digit}
@@ -1664,18 +1664,18 @@
      @i{objects} an @i{array} can hold along one axis.
      If the @i{array} is a @i{vector} with a @i{fill pointer},
      the @i{fill pointer} is ignored.
-     {``The second dimension of that array is 7.''}
+     ``The second dimension of that array is 7.''
   2. an axis of an array.
-     {``This array has six dimensions.''}
+     ``This array has six dimensions.''
 
 @IGindex{direct instance}
 @item @b{direct instance}
  @i{n.} (of a @i{class} C)
   an @i{object} whose @i{class} is C itself,
   rather than some @i{subclass} of C.
-  {``The function @b{make-instance} always returns a 
+  ``The function @b{make-instance} always returns a 
   	    direct instance of the class which is (or is named by)
-	    its first argument.''}
+	    its first argument.''
 
 @IGindex{direct subclass}
 @item @b{direct subclass}
@@ -1737,8 +1737,8 @@
   In some cases, the @i{documentation string} is saved in such a
   way that it can later be obtained by supplying either an @i{object}, 
   or by supplying a @i{name} and a ``kind'' to the @i{function} @b{documentation}.
-  {``The body of code in a @b{defmacro} form can be preceded 
-	    by a documentation string of kind @b{function}.''}
+  ``The body of code in a @b{defmacro} form can be preceded 
+	    by a documentation string of kind @b{function}.''
 
 @IGindex{dot}
 @item @b{dot}
@@ -1801,7 +1801,7 @@
   an @i{extent} whose duration is bounded by points of 
   @i{establishment} and @i{disestablishment} within the execution
   of a particular @i{form}.  See @i{indefinite extent}.
-  {``Dynamic variable bindings have dynamic extent.''}
+  ``Dynamic variable bindings have dynamic extent.''
 
 @IGindex{dynamic scope}
 @item @b{dynamic scope}
@@ -1907,7 +1907,7 @@
  @i{n.}
   1. a set of @i{bindings}. See @ref{Introduction to Environments}.
   2. an @i{environment object}.
-     {``@b{macroexpand} takes an optional environment argument.''}
+     ``@b{macroexpand} takes an optional environment argument.''
 
 @IGindex{environment object}
 @item @b{environment object}
@@ -1915,7 +1915,7 @@
   an @i{object} representing a set of @i{lexical bindings},
      used in the processing of a @i{form} to provide meanings for
      @i{names} within that @i{form}.
-     {``@b{macroexpand} takes an optional environment argument.''}
+     ``@b{macroexpand} takes an optional environment argument.''
      (The @i{object} @b{nil} when used as an @i{environment object}
       denotes the @i{null lexical environment};
       the @i{values} of @i{environment parameters} 
@@ -1966,7 +1966,7 @@
       a  @i{handler}, 
       a @i{restart},
    or an @i{environment}. 
-  {``@b{let} establishes lexical bindings.''}
+  ``@b{let} establishes lexical bindings.''
 
 @IGindex{evaluate}
 @item @b{evaluate}
@@ -2029,7 +2029,7 @@
   control and possibly @i{values} can be transferred both actively by using 
   another @i{control form} and passively through the normal control and
   data flow of @i{evaluation}.
-  {``@b{catch} and @b{block} establish bindings for
+  ``@b{catch} and @b{block} establish bindings for
             exit points to which @b{throw} and @b{return-from},
 	    respectively, can transfer control and values;
 	    @b{tagbody} establishes a binding for an exit point
@@ -2037,7 +2037,7 @@
 	    and @b{unwind-protect} establishes an exit point 
 	    through which control might be transferred by 
 	    operators such as @b{throw}, @b{return-from},
-            and @b{go}.''}
+            and @b{go}.''
 
 @IGindex{explicit return}
 @item @b{explicit return}
@@ -2062,9 +2062,10 @@
   The characters defined as @i{exponent markers} in the @i{standard readtable}
   are shown in Figure 26--1.
   For more information, see @ref{Character Syntax}.
-  {``The exponent marker `d' in `3.0d7' indicates
-	    that this number is to be represented as a double float.''}
+  ``The exponent marker `d' in `3.0d7' indicates
+	    that this number is to be represented as a double float.''
 
+@format
 @group
 @noindent
 @w{  Marker  Meaning                                  }
@@ -2078,6 +2079,7 @@
 @w{           Figure 26--1: Exponent Markers          }
 
 @end group
+@end format
 
 @IGindex{export}
 @item @b{export}
@@ -2135,10 +2137,10 @@
   1. an @i{object}, often used to emphasize the use 
      of the @i{object} to encode or represent information in a specialized
      format, such as program text.
-     {``The second expression in a @b{let} form is a list
-   	       of bindings.''}
+     ``The second expression in a @b{let} form is a list
+   	       of bindings.''
   2. the textual notation used to notate an @i{object} in a source file.
-     {``The expression @t{'sample} is equivalent to @t{(quote sample)}.''}
+     ``The expression @t{'sample} is equivalent to @t{(quote sample)}.''
 
 @IGindex{expressly adjustable}
 @item @b{expressly adjustable}
@@ -2181,7 +2183,7 @@
   a list resembling an @i{ordinary lambda list} in form and purpose, but 
   offering additional syntax or functionality not available in an
   @i{ordinary lambda list}.
-  {``@b{defmacro} uses extended lambda lists.''}
+  ``@b{defmacro} uses extended lambda lists.''
 
 @IGindex{extension}
 @item @b{extension}
@@ -2282,7 +2284,7 @@
      or of the @i{environment}.
   2. a @i{symbol} that names a @i{feature}_1.
   See @ref{Features}.
-  {``The @t{:ansi-cl} feature is present in all conforming implementations.''}
+  ``The @t{:ansi-cl} feature is present in all conforming implementations.''
 
 @IGindex{feature expression}
 @item @b{feature expression}
@@ -2370,8 +2372,8 @@
 @item @b{finite}
  @i{adj.} (of a @i{type})
   having a finite number of @i{elements}.
-  {``The type specifier @t{(integer 0 5)} denotes a finite type,
-	    but the type specifiers @b{integer} and @t{(integer 0)} do not.''}
+  ``The type specifier @t{(integer 0 5)} denotes a finite type,
+	    but the type specifiers @b{integer} and @t{(integer 0)} do not.''
 
 @IGindex{fixnum}
 @item @b{fixnum}
@@ -2398,7 +2400,7 @@
      or a @i{self-evaluating object}.
   3. (for an @i{operator}, as in ``<<@i{operator}>> @i{form}'')
      a @i{compound form} having that @i{operator} as its first element.
-     {``A @b{quote} form is a constant form.''}
+     ``A @b{quote} form is a constant form.''
 
 @IGindex{formal argument}
 @item @b{formal argument}
@@ -2439,12 +2441,12 @@
      to mean that some special operation should be performed, possibly
      involving data supplied by the @i{format arguments} that 
      accompanied the @i{format string}.  See the @i{function} @b{format}.
-     {``In @t{"~D base 10 = ~8R"}, the character
-     	       sequences `@t{~D}' and `@t{~8R}' are format directives.''}
+     ``In @t{"~D base 10 = ~8R"}, the character
+     	       sequences `@t{~D}' and `@t{~8R}' are format directives.''
   2. the conceptual category of all @i{format directives}_1
      which use the same dispatch character.
-     {``Both @t{"~3d"} and @t{"~3,'0D"} are valid uses of the
-	       `@t{~D}' format directive.''}
+     ``Both @t{"~3d"} and @t{"~3,'0D"} are valid uses of the
+	       `@t{~D}' format directive.''
 
 @IGindex{format string}
 @item @b{format string}
@@ -2581,8 +2583,8 @@
  @i{n.} 
   @i{implementation-dependent} compilation beyond @i{minimal compilation}.
   Further compilation is permitted to take place at @i{run time}.
-  {``Block compilation and generation of machine-specific instructions
-            are examples of further compilation.''}  
+  ``Block compilation and generation of machine-specific instructions
+            are examples of further compilation.''  
 
 @end table
 @subheading @b{G}
@@ -2673,7 +2675,7 @@
 @item @b{glyph}
  @i{n.} 
   a visual representation.
-  {``Graphic characters have associated glyphs.''}
+  ``Graphic characters have associated glyphs.''
 
 @IGindex{go}
 @item @b{go}
@@ -2749,6 +2751,7 @@
       that is defined by the @i{implementation} 
       to be an @i{I/O customization variable}.
 
+@format
 @group
 @noindent
 @w{  *debug-io*        *error-io*         query-io*       }
@@ -2758,6 +2761,7 @@
 @w{  Figure 26--2: Standardized I/O Customization Variables}
 
 @end group
+@end format
 
 @IGindex{identical}
 @item @b{identical}
@@ -2780,7 +2784,7 @@
   @i{implementations} are not required to detect attempts to modify
   @i{immutable} @i{objects} or @i{cells}; the consequences of attempting
   to make such modification are undefined.
-  {``Numbers are immutable.''}
+  ``Numbers are immutable.''
 
 @IGindex{implementation}
 @item @b{implementation}
@@ -2861,7 +2865,7 @@
 @item @b{indefinite extent}
  @i{n.} 
   an @i{extent} whose duration is unlimited.
-  {``Most Common Lisp objects have indefinite extent.''}
+  ``Most Common Lisp objects have indefinite extent.''
 
 @IGindex{indefinite scope}
 @item @b{indefinite scope}
@@ -2878,7 +2882,7 @@
  @i{n.} (of a @i{class} C_1)
   an @i{object} of @i{class} C_2, 
   where C_2 is a @i{subclass} of C_1.
-  {``An integer is an indirect instance of the class @b{number}.''}
+  ``An integer is an indirect instance of the class @b{number}.''
 
 @IGindex{inherit}
 @item @b{inherit}
@@ -2912,8 +2916,8 @@
  @i{n.} 
   a @i{form} used to supply the initial @i{value} for a @i{slot}
   or @i{variable}.
-  {``The initialization form for a slot in a @b{defclass} form
-            is introduced by the keyword @t{:initform}.''}
+  ``The initialization form for a slot in a @b{defclass} form
+            is introduced by the keyword @t{:initform}.''
 
 @IGindex{input}
 @item @b{input}
@@ -3028,6 +3032,7 @@
   or a @i{compound form} that has an @i{implementation-defined} @i{operator}
      and that is defined by the @i{implementation} to be an @i{iteration form}.
 
+@format
 @group
 @noindent
 @w{  do              do-external-symbols  dotimes  }
@@ -3038,6 +3043,7 @@
 @w{    Figure 26--3: Standardized Iteration Forms  }
 
 @end group
+@end format
 
 @IGindex{iteration variable}
 @item @b{iteration variable}
@@ -3199,7 +3205,7 @@
  @i{n.} 
   @i{scope} that is limited to a spatial or textual region within the
   establishing @i{form}.
-  {``The names of parameters to a function normally are lexically scoped.''}
+  ``The names of parameters to a function normally are lexically scoped.''
 
 @IGindex{lexical variable}
 @item @b{lexical variable}
@@ -3303,9 +3309,9 @@
   appearing as data in a @b{quote} @i{form}, 
   or, if the @i{object} is a @i{self-evaluating object},
   appearing as unquoted data.
-  {``In the form @t{(cons "one" '("two"))}, 
+  ``In the form @t{(cons "one" '("two"))}, 
             the expressions @t{"one"}, @t{("two")}, and @t{"two"}
-            are literal objects.''}
+            are literal objects.''
 
 @IGindex{load}
 @item @b{load}
@@ -3544,7 +3550,7 @@
   but which deviates in syntax or functionality from the definition of an 
   @i{ordinary lambda list}.
   See @i{ordinary lambda list}.
-  {``@b{deftype} uses a modified lambda list.''}
+  ``@b{deftype} uses a modified lambda list.''
 
 @IGindex{most recent}
 @item @b{most recent}
@@ -3571,13 +3577,13 @@
 @item @b{multiple values}
  @i{n.} 
   1. more than one @i{value}.
-     {``The function @b{truncate} returns multiple values.''}
+     ``The function @b{truncate} returns multiple values.''
   2. a variable number of @i{values}, possibly including zero or one.
-     {``The function @b{values} returns multiple values.''}
+     ``The function @b{values} returns multiple values.''
   3. a fixed number of values other than one.
-     {``The macro @b{multiple-value-bind} is among the few
+     ``The macro @b{multiple-value-bind} is among the few
 	       operators in @r{Common Lisp} which can detect and manipulate
- 	       multiple values.''}
+ 	       multiple values.''
 
 @end table
 @subheading @b{N}
@@ -3592,8 +3598,8 @@
   2. @i{v.t.} to give a @i{name} to.
   3. @i{n.} (of an @i{object} having a name component) 
      the @i{object} which is that component.  
-     {``The string which is a symbol's name is returned
-	       by @b{symbol-name}.''}
+     ``The string which is a symbol's name is returned
+	       by @b{symbol-name}.''
   4. @i{n.} (of a @i{pathname})
      a. the name component, returned by @b{pathname-name}.
      b. the entire namestring, returned by @b{namestring}.
@@ -3612,16 +3618,16 @@
 				    by the @i{implementation},
   				 or by user code (see the @i{macro} @b{defconstant})
   to always @i{yield} the same @i{value} when @i{evaluated}.
-  {``The value of a named constant may not be changed
-            by assignment or by binding.''}
+  ``The value of a named constant may not be changed
+            by assignment or by binding.''
 
 @IGindex{namespace}
 @item @b{namespace}
  @i{n.} 
   1. @i{bindings} whose denotations are restricted to a particular kind.
-     {``The bindings of names to tags is the tag namespace.''}
+     ``The bindings of names to tags is the tag namespace.''
   2. any @i{mapping} whose domain is a set of @i{names}.
-     {``A package defines a namespace.''}
+     ``A package defines a namespace.''
 
 @IGindex{namestring}
 @item @b{namestring}
@@ -3710,8 +3716,8 @@
  @i{n.} 
   a transfer of control (and sometimes @i{values}) to 
   an @i{exit point} for reasons other than a @i{normal return}.
-  {``The operators @b{go}, @b{throw}, 
-	    and @b{return-from} cause a non-local exit.''}
+  ``The operators @b{go}, @b{throw}, 
+	    and @b{return-from} cause a non-local exit.''
 
 @IGindex{non-nil}
 @item @b{non-nil}
@@ -3755,7 +3761,7 @@
 @IGindex{normalized}
 @item @b{normalized}
  @i{adj.}, @i{ANSI}, @i{IEEE} (of a @i{float})
-  conforming to the description of ``normalized'' as described by {IEEE Standard for Binary Floating-Point Arithmetic}.
+  conforming to the description of ``normalized'' as described by @i{IEEE Standard for Binary Floating-Point Arithmetic}.
   See @i{denormalized}.
 
 @IGindex{null}
@@ -3803,24 +3809,24 @@
 @item @b{object}
  @i{n.} 
   1. any Lisp datum. 
-     {``The function @b{cons} creates an object which refers
-               to two other objects.''}
+     ``The function @b{cons} creates an object which refers
+               to two other objects.''
   2. (immediately following the name of a @i{type})
      an @i{object} which is of that @i{type}, used to emphasize that the
      @i{object} is not just a @i{name} for an object of that @i{type}
      but really an @i{element} of the @i{type} in cases where @i{objects}
      of that @i{type} (such as @b{function} or @b{class}) are commonly
      referred to by @i{name}.
-     {``The function @b{symbol-function} takes a function name 
-	       and returns a function object.''}
+     ``The function @b{symbol-function} takes a function name 
+	       and returns a function object.''
 
 @IGindex{object-traversing}
 @item @b{object-traversing}
  @i{adj.} 
   operating in succession on components of an @i{object}.
-  {``The operators @b{mapcar}, @b{maphash}, 
+  ``The operators @b{mapcar}, @b{maphash}, 
 	    @b{with-package-iterator} and @b{count}
- 	    perform object-traversing operations.''}
+ 	    perform object-traversing operations.''
 
 @IGindex{open}
 @item @b{open}
@@ -3878,7 +3884,7 @@
  @i{n.} 
   the kind of @i{lambda list} used by @b{lambda}.
   See @i{modified lambda list} and @i{extended lambda list}.
-  {``@b{defun} uses an ordinary lambda list.''}
+  ``@b{defun} uses an ordinary lambda list.''
 
 @IGindex{otherwise inaccessible part}
 @item @b{otherwise inaccessible part}
@@ -3957,10 +3963,10 @@
 @item @b{pairwise}
  @i{adv.} (of an adjective on a set)
   applying individually to all possible pairings of elements of the set.
-  {``The types A, B, and C are pairwise disjoint if 
+  ``The types A, B, and C are pairwise disjoint if 
             A and B are disjoint,
             B and C are disjoint, and
-            A and C are disjoint.''}
+            A and C are disjoint.''
 
 @IGindex{parallel}
 @item @b{parallel}
@@ -3988,8 +3994,8 @@
      due to a prefix notation within the @i{format string} at the 
      @i{format directive}'s point of use.
      See @ref{Formatted Output}.
-     {``In @t{"~3,'0D"}, the number @t{3} and the character
-	       @t{#\0} are parameters to the @t{~D} format directive.''}
+     ``In @t{"~3,'0D"}, the number @t{3} and the character
+	       @t{#\0} are parameters to the @t{~D} format directive.''
 
 @IGindex{parameter specializer}
 @item @b{parameter specializer}
@@ -4150,8 +4156,8 @@
  @i{n.} (of @i{values} resulting from the
 				   @i{evaluation} of a @i{form})
   the first @i{value}, if any, or else @b{nil} if there are no @i{values}.
-  {``The primary value returned by @b{truncate} is an
-            integer quotient, truncated toward zero.''}
+  ``The primary value returned by @b{truncate} is an
+            integer quotient, truncated toward zero.''
 
 @IGindex{principal}
 @item @b{principal}
@@ -4501,8 +4507,8 @@
   2. (of a @i{pathname})
      representing a position in a directory hierarchy by motion 
      from a position other than the root, which might therefore vary.
-     {``The notation @t{#P"../foo.text"} denotes a relative
-	       pathname if the host file system is Unix.''}
+     ``The notation @t{#P"../foo.text"} denotes a relative
+	       pathname if the host file system is Unix.''
   See @i{absolute}.
 
 @IGindex{repertoire}
@@ -4563,6 +4569,7 @@
   as the @i{restart} which it invokes. Figure 26--4 shows a list of the
   @i{standardized} @i{restart functions}.
 
+@format
 @group
 @noindent
 @w{  abort     muffle-warning  use-value  }
@@ -4572,6 +4579,7 @@
 @w{  Figure 26--4: Standardized Restart Functions}
 
 @end group
+@end format
 
 @IGindex{return}
 @item @b{return}
@@ -4646,8 +4654,8 @@
  @i{adj.} 
   1. (of @i{objects} under a specified @i{predicate}) 
      indistinguishable by that @i{predicate}.
-     {``The symbol @t{car}, the string @t{"car"}, and the string @t{"CAR"}
-	       are the @t{same} under @b{string-equal}''}.
+     ``The symbol @t{car}, the string @t{"car"}, and the string @t{"CAR"}
+	       are the @t{same} under @b{string-equal}''.
   2. (of @i{objects} if no predicate is implied by context)
      indistinguishable by @b{eql}.
      Note that @b{eq} might be capable of distinguishing some 
@@ -4656,13 +4664,13 @@
      is @i{implementation-dependent}.
      Since @b{eq} is used only rarely in this specification,
      @b{eql} is the default predicate when none is mentioned explicitly.
-     {``The conses returned by two successive calls to @b{cons}
-	       are never the same.''}
+     ``The conses returned by two successive calls to @b{cons}
+	       are never the same.''
   3. (of @i{types}) having the same set of @i{elements};
      that is, each @i{type} is a @i{subtype} of the others.
-     {``The types specified by @t{(integer 0 1)},
+     ``The types specified by @t{(integer 0 1)},
 				      @t{(unsigned-byte 1)},
-				  and @t{bit} are the same.''}
+				  and @t{bit} are the same.''
 
 @IGindex{satisfy the test}
 @item @b{satisfy the test}
@@ -4711,7 +4719,7 @@
 				   @i{evaluation} of a @i{form})
   the second @i{value}, if any, 
   or else @b{nil} if there are fewer than two @i{values}.
-  {``The secondary value returned by @b{truncate} is a remainder.''}
+  ``The secondary value returned by @b{truncate} is a remainder.''
 
 @IGindex{section}
 @item @b{section}
@@ -4726,7 +4734,7 @@
   @i{cons}.
   If a @i{self-evaluating object} is @i{evaluated},
   it @i{yields} itself as its only @i{value}.
-  {``Strings are self-evaluating objects.''}
+  ``Strings are self-evaluating objects.''
 
 @IGindex{semi-standard}
 @item @b{semi-standard}
@@ -4822,13 +4830,13 @@
 @item @b{shadow}
  @i{v.t.} 
   1. to override the meaning of.
-     {``That binding of @t{X} shadows an outer one.''} 
+     ``That binding of @t{X} shadows an outer one.'' 
   2. to hide the presence of.
-     {``That @b{macrolet} of @t{F} shadows the
-               outer @b{flet} of @t{F}.''}
+     ``That @b{macrolet} of @t{F} shadows the
+               outer @b{flet} of @t{F}.''
   3. to replace.
-     {``That package shadows the symbol @t{cl:car} with
-               its own symbol @t{car}.''}
+     ``That package shadows the symbol @t{cl:car} with
+               its own symbol @t{car}.''
 
 @IGindex{shadowing symbol}
 @item @b{shadowing symbol}
@@ -4981,7 +4989,7 @@
 @item @b{singleton}
  @i{adj.} (of a @i{sequence})
   having only one @i{element}.
-  {``@t{(list 'hello)} returns a singleton list.''}
+  ``@t{(list 'hello)} returns a singleton list.''
 
 @IGindex{situation}
 @item @b{situation}
@@ -5067,8 +5075,8 @@
      having an @i{actual array element type}
      that is a @i{proper subtype} of the @i{type} @b{t};
      see @ref{Array Elements}.
-     {``@t{(make-array 5 :element-type 'bit)} makes an array of length
-	       five that is specialized for bits.''}
+     ``@t{(make-array 5 :element-type 'bit)} makes an array of length
+	       five that is specialized for bits.''
 
 @IGindex{specialized lambda list}
 @item @b{specialized lambda list}
@@ -5086,8 +5094,8 @@
   whose last element is a @i{list} L2 of length m
   (denoting a list L3 of length m+n-1 whose @i{elements} are
    L1_i for i < n-1 followed by L2_j for j < m).
-  {``The list (1 2 (3 4 5)) is a spreadable argument list designator for
-	    the list (1 2 3 4 5).''}
+  ``The list (1 2 (3 4 5)) is a spreadable argument list designator for
+	    the list (1 2 3 4 5).''
 
 @IGindex{stack allocate}
 @item @b{stack allocate}
@@ -5190,8 +5198,8 @@
 @item @b{standardized}
  @i{adj.} (of a @i{name}, @i{object}, or definition)
   having been defined by @r{Common Lisp}.
-  {``All standardized variables that are required to 
-	    hold bidirectional streams have ``@t{-io*}'' in their name.''}
+  ``All standardized variables that are required to 
+	    hold bidirectional streams have ``@t{-io*}'' in their name.''
 
 @IGindex{startup environment}
 @item @b{startup environment}
@@ -5341,8 +5349,8 @@
   an @i{expression} that is a @i{subexpression} of the @i{form},
   and which by virtue of its position in that @i{form} is also a
   @i{form}.
-  {``@t{(f x)} and @t{x}, but not @t{exit}, are subforms of
-	    @t{(return-from exit (f x))}.''}
+  ``@t{(f x)} and @t{x}, but not @t{exit}, are subforms of
+	    @t{(return-from exit (f x))}.''
 
 @IGindex{subrepertoire}
 @item @b{subrepertoire}
@@ -5465,15 +5473,15 @@
   an @i{object} that is the @i{same} as either some @i{cons}
   which makes up that @i{list} or the @i{atom} (if any) which terminates
   the @i{list}.
-  {``The empty list is a tail of every proper list.''}
+  ``The empty list is a tail of every proper list.''
 
 @IGindex{target}
 @item @b{target}
  @i{n.} 
   1. (of a @i{constructed stream}) 
      a @i{constituent} of the @i{constructed stream}.
-     {``The target of a synonym stream is 
-	       the value of its synonym stream symbol.''}
+     ``The target of a synonym stream is 
+	       the value of its synonym stream symbol.''
   2. (of a @i{displaced array})
      the @i{array} to which the @i{displaced array} is displaced.
   (In the case of a chain of @i{constructed streams} or @i{displaced arrays},
@@ -5611,7 +5619,7 @@
       @i{S_a} is a @i{subtype} of @i{S_b}.)
   2. (immediately following the name of a @i{type})
      a @i{subtype} of that @i{type}.
-     {``The type @b{vector} is an array type.''}
+     ``The type @b{vector} is an array type.''
 
 @IGindex{type declaration}
 @item @b{type declaration}
@@ -5641,9 +5649,9 @@
 @item @b{type specifier}
  @i{n.} 
   an @i{expression} that denotes a @i{type}.
-  {``The symbol @t{random-state}, the list @t{(integer 3 5)},
+  ``The symbol @t{random-state}, the list @t{(integer 3 5)},
             the list @t{(and list (not null))}, and the class named
-            @t{standard-class} are type specifiers.''}
+            @t{standard-class} are type specifiers.''
 
 @end table
 @subheading @b{U}
@@ -5765,7 +5773,7 @@
    the @i{external symbols} of P_1
    become @i{internal symbols} of P_2 
    unless they are explicitly @i{exported}.)
-  {``The package @t{CL-USER} uses the package @t{CL}.''}
+  ``The package @t{CL-USER} uses the package @t{CL}.''
 
 @IGindex{use list}
 @item @b{use list}
@@ -5808,9 +5816,9 @@
    the phrase ``a @i{list} of @i{valid array indices}'' further implies
    that the @i{length} of the @i{list} must be the same as the
    @i{rank} of the @i{array}.)
-  {``For a @t{2} by~@t{3} array,
+  ``For a @t{2} by~@t{3} array,
 	    valid array indices for the first  dimension are @t{0} and~@t{1}, and
-	    valid array indices for the second dimension are @t{0}, @t{1} and~@t{2}.''}
+	    valid array indices for the second dimension are @t{0}, @t{1} and~@t{2}.''
 
 @IGindex{valid array row-major index}
 @item @b{valid array row-major index}
@@ -6018,7 +6026,7 @@
 @item @b{yield}
  @i{v.t.} (@i{values})
   to produce the @i{values} as the result of @i{evaluation}.
-  {``The form @t{(+ 2 3)} yields @t{5}.''}
+  ``The form @t{(+ 2 3)} yields @t{5}.''
 
 @end table
 
diff -uNr gcl-texi-orig/chap-2.texi gcl-texi/chap-2.texi
--- gcl-texi-orig/chap-2.texi	1994-07-16 18:03:22 +0400
+++ gcl-texi/chap-2.texi	2002-10-17 20:53:05 +0400
@@ -48,6 +48,7 @@
 Figure 2--1 lists some @i{defined names} that are applicable to
 @i{readtables}.
 
+@format
 @group
 @noindent
 @w{  *readtable*                    readtable-case                }
@@ -60,6 +61,7 @@
 @w{              Figure 2--1: Readtable defined names             }
 
 @end group
+@end format
 
 @menu
 * The Current Readtable::	
@@ -115,6 +117,7 @@
 but also by various @i{dynamic variables}.  Figure 2--2 lists
 the @i{variables} that influence the behavior of the @i{Lisp reader}.
 
+@format
 @group
 @noindent
 @w{  *package*    *read-default-float-format*  *readtable*  }
@@ -124,6 +127,7 @@
 @w{  Figure 2--2: Variables that influence the Lisp reader. }
 
 @end group
+@end format
 
 @node Standard Characters, Character Syntax Types, Variables that affect the Lisp Reader, Character Syntax
 @subsection Standard Characters
@@ -140,6 +144,7 @@
 and the following additional
 ninety-four @i{graphic} @i{characters} or their equivalents:
 
+@format
 @group
 @noindent
 @w{  Graphic ID  Glyph  Description  Graphic ID  Glyph  Description  }
@@ -174,7 +179,9 @@
 @w{  Figure 2--3: Standard Character Subrepertoire (Part 1 of 3: Latin Characters)}
 
 @end group
+@end format
 
+@format
 @group
 @noindent
 @w{  Graphic ID  Glyph  Description  Graphic ID  Glyph  Description  }
@@ -188,7 +195,9 @@
 @w{  Figure 2--4: Standard Character Subrepertoire (Part 2 of 3: Numeric Characters)}
 
 @end group
+@end format
 
+@format
 @group
 @noindent
 @w{  Graphic ID  Glyph  Description                              }
@@ -229,9 +238,10 @@
 @w{  Figure 2--5: Standard Character Subrepertoire (Part 3 of 3: Special Characters)}
 
 @end group
+@end format
 
 The graphic IDs are not used within @r{Common Lisp},
-but are provided for cross reference purposes with {@r{ISO 6937/2}}.
+but are provided for cross reference purposes with @r{ISO 6937/2}.
 Note that the first letter of the graphic ID 
 categorizes the character as follows:
 L---Latin, N---Numeric, S---Special.
@@ -256,6 +266,7 @@
 Every @i{character} that can appear in the @i{input} @i{stream}
 is of one of the @i{syntax types} shown in @i{Figure~2--6}.
 
+@format
 @group
 @noindent
 @w{  @i{constituent}  @i{macro character}  @i{single escape}  }
@@ -265,6 +276,7 @@
 @w{  Figure 2--6: Possible Character Syntax Types }
 
 @end group
+@end format
 
 The @i{syntax type} of a @i{character} in a @i{readtable}
 determines how that character is interpreted by the @i{Lisp reader}
@@ -274,8 +286,9 @@
 @i{Figure~2--7} 
 lists the @i{syntax type} of each @i{character} in @i{standard syntax}.
 
-{
 
+
+@format
 @group
 @noindent
 @w{  character  syntax type                 character  syntax type             }
@@ -306,7 +319,8 @@
 @w{            Figure 2--7: Character Syntax Types in Standard Syntax          }
 
 @end group
-}
+@end format
+
 
 The characters marked with an asterisk (*) are initially @i{constituents},
 but they are not used in any standard @r{Common Lisp} notations.
@@ -381,6 +395,7 @@
 Any @i{character} quoted by a @i{single escape} 
 is treated as an @i{alphabetic}_2 constituent, regardless of its normal syntax.
 
+@format
 @group
 @noindent
 @w{ constituent traits         constituent traits                                   }
@@ -421,6 +436,7 @@
 @w{ @t{|}           @i{alphabetic}_2*  Rubout      @i{invalid}                                  }
 @w{ @t{~}           @i{alphabetic}_2   }
 @end group
+@end format
 
 @w{  Figure 2--8: Constituent Traits of Standard Characters and Semi-Standard Characters}
 
@@ -799,13 +815,14 @@
 The @i{token} is interpreted as a @i{number} if it satisfies
 the syntax for numbers specified in Figure 2--9.
 
+@format
 @group
 @noindent
 @w{ @i{numeric-token} ::= !@i{integer} | !@i{ratio} | !@i{float}                                              }
 @w{ @i{integer}       ::= @t{[}@i{sign}@t{]} @{@i{decimal-digit}@}^+ @i{decimal-point} | @t{[}@i{sign}@t{]} @{@i{digit}@}^+               }
 @w{ @i{ratio}         ::= @t{[}@i{sign}@t{]} @{@i{digit}@}^+ @i{slash} @{@i{digit}@}^+                                        }
-@w{ @i{float}         ::= @t{[}@i{sign}@t{]} @{@i{decimal-digit}@}{*} @i{decimal-point} @{@i{decimal-digit}@}^+ @t{[}!@i{exponent}@t{]}   }
-@w{                   | @t{[}@i{sign}@t{]} @{@i{decimal-digit}@}^+ @t{[}@i{decimal-point} @{@i{decimal-digit}@}{*}@t{]} !@i{exponent} }
+@w{ @i{float}         ::= @t{[}@i{sign}@t{]} @{@i{decimal-digit}@}* @i{decimal-point} @{@i{decimal-digit}@}^+ @t{[}!@i{exponent}@t{]}   }
+@w{                   | @t{[}@i{sign}@t{]} @{@i{decimal-digit}@}^+ @t{[}@i{decimal-point} @{@i{decimal-digit}@}*@t{]} !@i{exponent} }
 @w{ @i{exponent}      ::= @i{exponent-marker} @t{[}@i{sign}@t{]} @{@i{digit}@}^+                                        }
 @w{ @i{sign}---a @i{sign}.}
 @w{ @i{slash}---a @i{slash}}
@@ -814,6 +831,7 @@
 @w{ @i{decimal-digit}---a @i{digit} in @i{radix} @t{10}.}
 @w{ @i{digit}---a @i{digit} in the @i{current input radix}.}
 @end group
+@end format
 
 @w{  Figure 2--9: Syntax for Numeric Tokens}
 
@@ -863,7 +881,7 @@
 The syntax involving a leading 
 @i{package marker} followed by a @i{potential number} is
 not well-defined. The consequences of the use 
-of notation such as @t{:1}, @t{:1/2}, and @t{:2{@t{^}}3} in a
+of notation such as @t{:1}, @t{:1/2}, and @t{:2^3} in a
 position where an expression appropriate for @b{read} 
 is expected are unspecified.
 
@@ -916,42 +934,48 @@
 a @i{conforming implementation} is permitted, but not required,
 to define their meaning.
 
+@format
 @group
 @noindent
 @w{  @t{1b5000}                       @t{777777q}                @t{1.7J}  @t{-3/4+6.7J}  @t{12/25/83}  }
-@w{  @t{27{@t{^}}19}                      @t{3{@t{^}}4/5}                @t{6//7}  @t{3.1.2.6}    @t{{@t{^}}-43@t{^}}   }
+@w{  @t{27^19}                      @t{3^4/5}                @t{6//7}  @t{3.1.2.6}    @t{@t{^}-43@t{^}}   }
 @w{  @t{3.141_592_653_589_793_238_4}  @t{-3.7+2.6i-6.17j+19.6k}  }
 
 @noindent
 @w{                     Figure 2--10: Examples of reserved tokens                   }
 
 @end group
+@end format
 
 The @i{tokens} in Figure 2--11 are not @i{potential numbers}; 
 they are always treated as @i{symbols}:
 
+@format
 @group
 @noindent
 @w{  @t{/}     @t{/5}     @t{+}  @t{1+}  @t{1-}     }
-@w{  @t{foo+}  @t{ab.cd}  @t{_}  @t{@t{^}}   @t{{@t{^}}/-}  }
+@w{  @t{foo+}  @t{ab.cd}  @t{_}  @t{@t{^}}   @t{@t{^}/-}  }
 
 @noindent
 @w{  Figure 2--11: Examples of symbols}
 
 @end group
+@end format
 
 The @i{tokens} in Figure 2--12 are @i{potential numbers}
 if the @i{current input base} is @t{16}, 
 but they are always treated as @i{symbols} if the @i{current input base} is @t{10}. 
 
+@format
 @group
 @noindent
-@w{  @t{bad-face}  @t{25-dec-83}  @t{a/b}  @t{fad_cafe}  @t{f{@t{^}}}  }
+@w{  @t{bad-face}  @t{25-dec-83}  @t{a/b}  @t{fad_cafe}  @t{f@t{^}} }
 
 @noindent
 @w{  Figure 2--12: Examples of symbols or potential numbers}
 
 @end group
+@end format
 
 @node Constructing Numbers from Tokens, The Consing Dot, Numbers as Tokens, Interpretation of Tokens
 @subsection Constructing Numbers from Tokens
@@ -1005,12 +1029,13 @@
 entirely of zeros.
 Examples of @i{ratios} are in Figure 2--13.
 
+@format
 @group
 @noindent
 @w{  @t{2/3}                 ;This is in canonical form                  }
 @w{  @t{4/6}                 ;A non-canonical form for 2/3               }
 @w{  @t{-17/23}              ;A ratio preceded by a sign                 }
-@w{  @t{-30517578125/32768}  ;This is (-5/2)^{15}                        }
+@w{  @t{-30517578125/32768}  ;This is (-5/2)^15                        }
 @w{  @t{10/5}                ;The canonical form for this is @t{2}           }
 @w{  @t{#o-101/75}           ;Octal notation for -65/61                  }
 @w{  @t{#3r120/21}           ;Ternary notation for 15/7                  }
@@ -1021,6 +1046,7 @@
 @w{                  Figure 2--13: Examples of Ratios                }
 
 @end group
+@end format
 
 [Reviewer Note by Barmar: #o, #3r, #X, and #x mentioned above 
 		  are not in the syntax rules defined just above that.]
@@ -1059,6 +1085,7 @@
 
 Figure 2--14 contains examples of notations for @i{floats}: 
 
+@format
 @group
 @noindent
 @w{  @t{0.0}       ;Floating-point zero in default format                          }
@@ -1084,6 +1111,7 @@
 @w{               Figure 2--14: Examples of Floating-point numbers             }
 
 @end group
+@end format
 
 For information on how @i{floats} are printed,
 see @ref{Printing Floats}.
@@ -1140,6 +1168,7 @@
 these examples assume that
 the @i{readtable case} of the @i{current readtable} is @t{:upcase}.
 
+@format
 @group
 @noindent
 @w{  @t{FROBBOZ}         The @i{symbol} whose @i{name} is @t{FROBBOZ}.                }
@@ -1163,30 +1192,33 @@
 @w{  Figure 2--15: Examples of the printed representation of symbols (Part 1 of 2)}
 
 @end group
+@end format
 
+@format
 @group
 @noindent
 @w{  @t{APL\\360}               The @i{symbol} whose @i{name} is @t{APL\360}.       }
 @w{  @t{apl\\360}               Also the @i{symbol} whose @i{name} is @t{APL\360}.  }
-@w{  @t{\(b{@t{^}}2\)\ -\ 4*a@t{*c}}    The @i{name} is @t{(B{@t{^}}2) - 4*A*C}.            }
+@w{  @t{\(b@t{^}2\)\ -\ 4*a@t{*c}}    The @i{name} is @t{(B@t{^}2) - 4*A*C}.            }
 @w{                         Parentheses and two spaces in it.       }
-@w{  @t{\(\b{@t{^}}2\)\ -\4*\a*\c}  The @i{name} is @t{(b{@t{^}}2) - 4*a*c}.            }
+@w{  @t{\(\b@t{^}2\)\ -\4*\a*\c}  The @i{name} is @t{(b@t{^}2) - 4*a*c}.            }
 @w{                         Letters explicitly lowercase.           }
 @w{  @t{|"|}                    The same as writing @t{\"}.                 }
-@w{  @t{|(b{@t{^}}2) - 4*a*c|}      The @i{name} is @t{(b{@t{^}}2) - 4*a*c}.            }
+@w{  @t{|(b@t{^}2) - 4*a*c|}      The @i{name} is @t{(b@t{^}2) - 4*a*c}.            }
 @w{  @t{|frobboz|}              The @i{name} is @t{frobboz}, not @t{FROBBOZ}.       }
 @w{  @t{|APL\360|}              The @i{name} is @t{APL360}.                     }
 @w{  @t{|APL\\360|}             The @i{name} is @t{APL\360}.                    }
 @w{  @t{|apl\\360|}             The @i{name} is @t{apl\360}.                    }
 @w{  @t{|\|\||}                 Same as @t{\|\|} ---the @i{name} is @t{||}.          }
-@w{  @t{|(B{@t{^}}2) - 4*A*C|}      The @i{name} is @t{(B{@t{^}}2) - 4*A*C}.            }
+@w{  @t{|(B@t{^}2) - 4*A*C|}      The @i{name} is @t{(B@t{^}2) - 4*A*C}.            }
 @w{                         Parentheses and two spaces in it.       }
-@w{  @t{|(b{@t{^}}2) - 4*a*c|}      The @i{name} is @t{(b{@t{^}}2) - 4*a*c}.            }
+@w{  @t{|(b@t{^}2) - 4*a*c|}      The @i{name} is @t{(b@t{^}2) - 4*a*c}.            }
 
 @noindent
 @w{  Figure 2--16: Examples of the printed representation of symbols (Part 2 of 2)}
 
 @end group
+@end format
 
 In the process of parsing a @i{symbol},
 it is @i{implementation-dependent} which
@@ -1214,6 +1246,7 @@
 
 The valid patterns for @i{tokens} are summarized in Figure 2--17. 
 
+@format
 @group
 @noindent
 @w{  @t{@i{nnnnn}}              a @i{number}                                           }
@@ -1232,6 +1265,7 @@
 @w{                 Figure 2--17: Valid patterns for tokens                }
 
 @end group
+@end format
 
 Note that @i{nnnnn} has number syntax,
           neither @i{xxxxx} nor @i{ppppp} has number syntax,
@@ -1591,6 +1625,7 @@
 
 Examples of the use of the @i{double-quote} character are in Figure 2--18. 
 
+@format
 @group
 @noindent
 @w{  @t{"Foo"}                      ;A string with three characters in it  }
@@ -1602,6 +1637,7 @@
 @w{          Figure 2--18: Examples of the use of double-quote         }
 
 @end group
+@end format
 
 Note that to place a single escape character or a @i{double-quote} into a string,
 such a character must be preceded by a single escape character.
@@ -1670,7 +1706,7 @@
 may be interpreted to mean
 
 @example
- (append {[} x1{]} {[} x2{]} {[} x3{]} ... {[} xn{]} (quote atom))
+ (append [ x1 ] [ x2 ] [ x3 ] ... [ xn ] (quote atom))
 @end example
 
 where the brackets are used to indicate
@@ -1699,7 +1735,7 @@
 @t{`(x1 x2 x3 ... xn . ,form)} may be interpreted to mean
 
 @example
- (append {[} x1{]} {[} x2{]} {[} x3{]} ... {[} xn{]} form)
+ (append [ x1 ] [ x2 ] [ x3 ] ... [ xn ] form)
 @end example
 
 where the brackets indicate a transformation of an @t{xj} as described above.
@@ -1769,7 +1805,7 @@
 requirement.
 
 Implementors who have no particular reason to make one choice or another
-might wish to refer to {IEEE Standard for the Scheme Programming Language}, which identifies a popular choice of
+might wish to refer to @b{IEEE Standard for the Scheme Programming Language}, which identifies a popular choice of
 representation for such expressions that might provide useful to be useful
 compatibility for some user communities.  There is no requirement, however,
 that any @i{conforming implementation} use this particular representation.
@@ -1804,8 +1840,9 @@
 The @i{reader macros} associated with the @i{dispatching macro character} @t{#}
 are described later in this section and summarized in Figure 2--19.
 
-{
 
+
+@format
 @group
 @noindent
 @w{  dispatch char  purpose                  dispatch char  purpose                }
@@ -1837,7 +1874,7 @@
 @w{  [              undefined*               T, t           undefined              }
 @w{  @t{\}              character object         U, u           undefined              }
 @w{  ]              undefined*               V, v           undefined              }
-@w{  {@t{^}}            undefined                W, w           undefined              }
+@w{  @t{^}            undefined                W, w           undefined              }
 @w{  @t{_}              undefined                X, x           hexadecimal rational   }
 @w{  `              undefined                Y, y           undefined              }
 @w{  @t{|}              balanced comment         Z, z           undefined              }
@@ -1847,7 +1884,8 @@
 @w{           Figure 2--19: Standard # Dispatching Macro Character Syntax         }
 
 @end group
-}
+@end format
+
 
 The combinations marked by an asterisk (*) are explicitly reserved to the
 user.  No @i{conforming implementation} defines them.
@@ -2075,7 +2113,7 @@
 For example, 
 
 @example
- #B1101 @equiv{} 13 ;1101{{}_2}
+ #B1101 @equiv{} 13 ;1101_2
  #b101/11 @equiv{} 5/3
 @end example
 
@@ -2091,7 +2129,7 @@
 @example
  #o37/15 @equiv{} 31/13
  #o777 @equiv{} 511
- #o105 @equiv{} 69 ;105{{}_8}
+ #o105 @equiv{} 69 ;105_8
 @end example
 
 The consequences are undefined if the token immediately following
@@ -2106,7 +2144,7 @@
 
 @example
  #xF00 @equiv{} 3840             
- #x105 @equiv{} 261 ;105{{}_@{16@}}
+ #x105 @equiv{} 261 ;105_@t{16}
 @end example
 
 The consequences are undefined if the token immediately following
@@ -2135,6 +2173,7 @@
 Figure 2--20 contains examples of the use of @t{#B},
 @t{#O}, @t{#X}, and @t{#R}.
 
+@format
 @group
 @noindent
 @w{  @t{#2r11010101}  ;Another way of writing @t{213} decimal  }
@@ -2152,6 +2191,7 @@
 @w{        Figure 2--20: Radix Indicator Example       }
 
 @end group
+@end format
 
 The consequences are undefined if the token immediately following
 the @t{#@i{n}R} does not have the syntax of a @i{rational} in radix @i{n}.
@@ -2176,6 +2216,7 @@
 
 Figure 2--21 contains examples of the use of @t{#C}.
 
+@format
 @group
 @noindent
 @w{  @t{#C(3.0s1 2.0s-1)}  ;A @i{complex} with @i{small float} parts.                }
@@ -2187,6 +2228,7 @@
 @w{                  Figure 2--21: Complex Number Example                }
 
 @end group
+@end format
 
 For further information, 
 see @ref{Printing Complexes} and @ref{Syntax of a Complex}.
diff -uNr gcl-texi-orig/chap-3.texi gcl-texi/chap-3.texi
--- gcl-texi-orig/chap-3.texi	1994-07-16 18:03:21 +0400
+++ gcl-texi/chap-3.texi	2002-10-17 20:58:11 +0400
@@ -297,6 +297,7 @@
 Figure 3--1 lists some @i{defined names} that
 are applicable to assigning, binding, and defining @i{variables}.
 
+@format
 @group
 @noindent
 @w{  boundp        let                  progv         }
@@ -309,6 +310,7 @@
 @w{  Figure 3--1: Some Defined Names Applicable to Variables}
 
 @end group
+@end format
 
 The following is a description of each kind of variable.
 
@@ -469,6 +471,7 @@
 Figure 3--2 lists all of the @r{Common Lisp} @i{symbols}
 that have definitions as @i{special operators}.
 
+@format
 @group
 @noindent
 @w{  block      let*                  return-from      }
@@ -485,6 +488,7 @@
 @w{      Figure 3--2: Common Lisp Special Operators    }
 
 @end group
+@end format
 
 @node Macro Forms, Function Forms, Special Forms, The Evaluation Model
 @subsubsection Macro Forms
@@ -526,6 +530,7 @@
 Figure 3--3 lists some @i{defined names} that are applicable
 to @i{macros}.
 
+@format
 @group
 @noindent
 @w{  *macroexpand-hook*  macro-function  macroexpand-1  }
@@ -535,6 +540,7 @@
 @w{    Figure 3--3: Defined names applicable to macros  }
 
 @end group
+@end format
 
 @node Function Forms, Lambda Forms, Macro Forms, The Evaluation Model
 @subsubsection Function Forms
@@ -593,6 +599,7 @@
 
 Figure 3--4 lists some @i{defined names} that are applicable to @i{functions}.
 
+@format
 @group
 @noindent
 @w{  apply                 fdefinition  mapcan               }
@@ -608,6 +615,7 @@
 @w{      Figure 3--4: Some function-related defined names    }
 
 @end group
+@end format
 
 @node Lambda Forms, Self-Evaluating Objects, Function Forms, The Evaluation Model
 @subsubsection Lambda Forms
@@ -837,15 +845,15 @@
 
 @example
  (contorted-example nil nil 2)
-   (block here{{}_1} ...)
-     (contorted-example nil #'(lambda () (return-from here{{}_1} 4)) 1)
-       (block here{{}_2} ...)
-         (contorted-example #'(lambda () (return-from here{{}_1} 4))
-                            #'(lambda () (return-from here{{}_2} 4))
+   (block here_1 ...)
+     (contorted-example nil #'(lambda () (return-from here_1 4)) 1)
+       (block here_2 ...)
+         (contorted-example #'(lambda () (return-from here_1 4))
+                            #'(lambda () (return-from here_2 4))
                             0)
              (funcall f)
-                    where f @result{}  #'(lambda () (return-from here{{}_1} 4))
-                 (return-from here{{}_1} 4)
+                    where f @result{}  #'(lambda () (return-from here_1 4))
+                 (return-from here_1 4)
 @end example
 
 At the time the @t{funcall} is executed
@@ -854,8 +862,8 @@
 The @b{return-from} @i{form} executed as a result of the @t{funcall}
 operation
 refers to the outer outstanding @i{exit point}
-(here{{}_1}), not the
-inner one (here{{}_2}).
+(here_1), not the
+inner one (here_2).
 It
 refers to that @i{exit point} textually visible at the point of
 execution of @b{function}
@@ -867,8 +875,8 @@
 @t{(funcall g)}, then the value of the call @t{(contorted-example nil nil 2)}
 would be @t{9}.  The value would change because 
 @b{funcall} would cause the
-execution of @t{(return-from here{{}_2} 4)}, thereby causing
-a return from the inner @i{exit point} (here{{}_2}).
+execution of @t{(return-from here_2 4)}, thereby causing
+a return from the inner @i{exit point} (here_2).
 When that occurs, the value @t{4} is returned from the
 middle invocation of @t{contorted-example}, @t{5} is added to that
 to get @t{9}, and that value is returned from the outer block
@@ -967,6 +975,7 @@
     one or more @i{forms} to @i{evaluate} 
 and where to put the @i{values} returned by those @i{forms}.
 
+@format
 @group
 @noindent
 @w{  multiple-value-bind  multiple-value-prog1  return-from  }
@@ -977,6 +986,7 @@
 @w{  Figure 3--5: Some operators applicable to receiving multiple values}
 
 @end group
+@end format
 
 The @i{function} @b{values} can produce @i{multiple values}_2.
 @t{(values)} returns zero values;
@@ -1202,6 +1212,7 @@
 or else a form that can, at the discretion of the @i{code} doing the expansion, 
 be used in place of the original @i{form}.
 
+@format
 @group
 @noindent
 @w{  *macroexpand-hook*  compiler-macro-function  define-compiler-macro  }
@@ -1210,6 +1221,7 @@
 @w{        Figure 3--6: Defined names applicable to compiler macros      }
 
 @end group
+@end format
 
 @node Purpose of Compiler Macros, Naming of Compiler Macros, Compiler Macros, Compilation Semantics
 @subsubsection Purpose of Compiler Macros
@@ -1573,6 +1585,7 @@
 
   plus .5 fil
 \offinterlineskip
+@format
 @group
 @noindent
 @w{  @b{CT}   @b{LT}   @b{E}    @b{Mode}  @b{Action}    @b{New Mode}          }
@@ -1586,6 +1599,7 @@
 @w{  No   No   Yes   NCT  Discard   ---               }
 @w{  No   No   No   ---   Discard   ---               }
 @end group
+@end format
 
 @w{  Figure 3--7: EVAL-WHEN processing}
 
@@ -1689,6 +1703,7 @@
 effects happen only when the defining macros appear at 
 top level.
 
+@format
 @group
 @noindent
 @w{  declaim                define-modify-macro   defsetf    }
@@ -1701,6 +1716,7 @@
 @w{  Figure 3--8: Defining Macros That Affect the Compile-Time Environment}
 
 @end group
+@end format
 
 @node Constraints on Macros and Compiler Macros,  , Processing of Defining Macros, File Compilation
 @subsubsection Constraints on Macros and Compiler Macros
@@ -2225,6 +2241,7 @@
 
 defined by this standard.
 
+@format
 @group
 @noindent
 @w{  declaration     ignore     special  }
@@ -2236,6 +2253,7 @@
 @w{  Figure 3--9: Common Lisp Declaration Identifiers}
 
 @end group
+@end format
 
 An implementation is free to support other (@i{implementation-defined})
 @i{declaration identifiers} as well.  
@@ -2254,8 +2272,8 @@
 @subsubsection Shorthand notation for Type Declarations
 
 A @i{type specifier} can be used as a @i{declaration identifier}.
-@t{(@i{type-specifier} @{@i{var}@}{*})} is taken as shorthand for
-@t{(type @i{type-specifier} @{@i{var}@}{*})}.
+@t{(@i{type-specifier} @{@i{var}@}*)} is taken as shorthand for
+@t{(type @i{type-specifier} @{@i{var}@}*)}.
 
 @node Declaration Scope,  , Declaration Identifiers, Declarations
 @subsection Declaration Scope
@@ -2424,6 +2442,7 @@
 
 There are several kinds of @i{lambda lists}.
 
+@format
 @group
 @noindent
 @w{ Context                                     Kind of Lambda List                             }
@@ -2452,10 +2471,12 @@
 @w{                         Figure 3--10: What Kind of Lambda Lists to Use                       }
 
 @end group
+@end format
 
 Figure 3--11 lists some @i{defined names} that are applicable
 to @i{lambda lists}.
 
+@format
 @group
 @noindent
 @w{  lambda-list-keywords  lambda-parameters-limit    }
@@ -2464,6 +2485,7 @@
 @w{  Figure 3--11: Defined names applicable to lambda lists}
 
 @end group
+@end format
 
 @menu
 * Ordinary Lambda Lists::	
@@ -2489,6 +2511,7 @@
 The @i{defined names} in Figure 3--12 are those which use
 @i{ordinary lambda lists}:
 
+@format
 @group
 @noindent
 @w{  define-method-combination  handler-case  restart-case  }
@@ -2499,10 +2522,12 @@
 @w{  Figure 3--12: Standardized Operators that use Ordinary Lambda Lists}
 
 @end group
+@end format
 
 An @i{ordinary lambda list} can contain the @i{lambda list keywords} shown
 in Figure 3--13.
 
+@format
 @group
 @noindent
 @w{  @b{&allow-other-keys}  @b{&key}       @b{&rest}  }
@@ -2512,6 +2537,7 @@
 @w{  Figure 3--13: Lambda List Keywords used by Ordinary Lambda Lists}
 
 @end group
+@end format
 
 Each @i{element} of a @i{lambda list} is either a parameter specifier
 or a @i{lambda list keyword}.
@@ -2521,15 +2547,15 @@
 
 The syntax for @i{ordinary lambda lists} is as follows: 
 
-@w{@i{lambda-list} ::=@r{(}@{@i{var}@}{*}}
-@w{                 @t{[}{&optional} @{@i{var} |
-		       @r{(}@i{var} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*}@t{]}}
-@w{                 @t{[}{&rest} @i{var}@t{]}}
-@w{                 @t{[}{&key} @{@i{var} |
+@w{@i{lambda-list} ::=@r{(}@{@i{var}@}*}
+@w{                 @t{[}@r{&optional} @{@i{var} |
+		       @r{(}@i{var} @r{[}init-form @r{[}supplied-p-parameter @r{]}@r{]}@r{)}@}*@t{]}}
+@w{                 @t{[}@r{&rest} @i{var}@t{]}}
+@w{                 @t{[}@r{&key} @{@i{var} |
 		          	 @r{(}@{@i{var} | 
 					       @r{(}@i{keyword-name} @i{var}@r{)}@}
-				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*} pt @r{[}@t{&allow-other-keys}@r{]}@t{]}}
-@w{                 @t{[}{&aux} @{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}{*}@t{]}@r{)}}
+				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}* pt @r{[}@t{&allow-other-keys}@r{]}@t{]}}
+@w{                 @t{[}@r{&aux} @{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}*@t{]}@r{)}}
 @w{               }
 
 A @i{var} or @i{supplied-p-parameter} must be a @i{symbol}
@@ -2759,7 +2785,7 @@
 These are not really parameters.  If the @i{lambda list keyword}
 @b{&aux} is present, all specifiers after it are auxiliary variable
 specifiers.  After all parameter specifiers have been processed, the
-auxiliary variable specifiers (those following {&aux}) are processed
+auxiliary variable specifiers (those following @b{&aux}) are processed
 from left to right.  For each one, @i{init-form} is evaluated and
 @i{var} is bound to that value (or to @b{nil} if no @i{init-form}
 was specified).  @b{&aux} variable processing is analogous to
@@ -2876,16 +2902,17 @@
 
 A @i{generic function lambda list} has the following syntax:
 
-@w{@i{lambda-list} ::=@r{(}@{@i{var}@}{*}}
-@w{                 @t{[}{&optional} @{@i{var} | @r{(}@i{var}@r{)}@}{*}@t{]}}
-@w{                 @t{[}{&rest} @i{var}@t{]}}
-@w{                 @t{[}{&key} @{@i{var} | @r{(}@{@i{var} | 
-					       @r{(}@i{keyword-name} @i{var}@r{)}@}{)}@}{*} pt @r{[}@t{&allow-other-keys}@r{]}@t{]}@r{)}}
+@w{@i{lambda-list} ::=@r{(}@{@i{var}@}*}
+@w{                 @t{[}@r{&optional} @{@i{var} | @r{(}@i{var}@r{)}@}*@t{]}}
+@w{                 @t{[}@r{&rest} @i{var}@t{]}}
+@w{                 @t{[}@r{&key} @{@i{var} | @r{(}@{@i{var} | 
+					       @r{(}@i{keyword-name} @i{var}@r{)}@}@r{)}@}* pt @r{[}@t{&allow-other-keys}@r{]}@t{]}@r{)}}
 @w{               }
 
 A @i{generic function lambda list} can contain the @i{lambda list keywords} shown
 in Figure 3--14.
 
+@format
 @group
 @noindent
 @w{  @b{&allow-other-keys}  @b{&optional}    }
@@ -2895,6 +2922,7 @@
 @w{  Figure 3--14: Lambda List Keywords used by Generic Function Lambda Lists}
 
 @end group
+@end format
 
 A @i{generic function lambda list} differs from an @i{ordinary lambda list} 
 in the following ways:
@@ -2923,6 +2951,7 @@
 The @i{defined names} in Figure 3--15 use @i{specialized lambda lists}
 in some way; see the dictionary entry for each for information about how.
 
+@format
 @group
 @noindent
 @w{  defmethod  defgeneric    }
@@ -2931,10 +2960,12 @@
 @w{  Figure 3--15: Standardized Operators that use Specialized Lambda Lists}
 
 @end group
+@end format
 
 A @i{specialized lambda list} can contain the @i{lambda list keywords} shown
 in Figure 3--16.
 
+@format
 @group
 @noindent
 @w{  @b{&allow-other-keys}  @b{&key}       @b{&rest}  }
@@ -2944,20 +2975,21 @@
 @w{  Figure 3--16: Lambda List Keywords used by Specialized Lambda Lists}
 
 @end group
+@end format
 
 A @i{specialized lambda list} is syntactically the same as an @i{ordinary lambda list}
 except that each @i{required parameter} may optionally be associated with a @i{class}
 or @i{object} for which that @i{parameter} is @i{specialized}.
 
-@w{@i{lambda-list} ::=@r{(}@{@i{var} | @r{(}@i{var} @r{[}@i{specializer}@r{]}@r{)}@}{*}}
-@w{                @t{[}{&optional} @{@i{var} |
-		       @r{(}@i{var} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*}@t{]}}
-@w{                @t{[}{&rest} @i{var}@t{]}}
-@w{                @t{[}{&key} @{@i{var} |
+@w{@i{lambda-list} ::=@r{(}@{@i{var} | @r{(}@i{var} @r{[}@i{specializer}@r{]}@r{)}@}*}
+@w{                @t{[}@r{&optional} @{@i{var} |
+		       @r{(}@i{var} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}*@t{]}}
+@w{                @t{[}@r{&rest} @i{var}@t{]}}
+@w{                @t{[}@r{&key} @{@i{var} |
 		          	 @r{(}@{@i{var} | 
 					       @r{(}@i{keyword-name} @i{var}@r{)}@}
-				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*} @r{[}@t{&allow-other-keys}@r{]}@t{]}}
-@w{                @t{[}{&aux} @{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}{*}@t{]}@r{)}}
+				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}* @r{[}@t{&allow-other-keys}@r{]}@t{]}}
+@w{                @t{[}@r{&aux} @{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}*@t{]}@r{)}}
 @w{               }
 
 @node Macro Lambda Lists, Destructuring Lambda Lists, Specialized Lambda Lists, Lambda Lists
@@ -2968,6 +3000,7 @@
  is used in describing @i{macros} 
 defined by the @i{operators} in Figure 3--17.
 
+@format
 @group
 @noindent
 @w{  define-compiler-macro  defmacro  macrolet  }
@@ -2977,32 +3010,33 @@
 @w{  Figure 3--17: Operators that use Macro Lambda Lists}
 
 @end group
+@end format
 
 With the additional restriction that
 an @i{environment parameter} may appear only once
 (at any of the positions indicated),
 a @i{macro lambda list} has the following syntax:
 
-{
-@w{@i{reqvars} ::=@{@i{var} | !@i{pattern}@}{*}}
 
-@w{@i{optvars} ::=@t{[}{&optional} @{@i{var} |
-		       @r{(}{@{@i{var} | !@i{pattern}@}} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*}@t{]}}
+@w{@i{reqvars} ::=@{@i{var} | !@i{pattern}@}*}
 
-@w{@i{restvar} ::=@t{[}@{{@t{&rest}} | {&body}@} @i{@{@i{var} | !@i{pattern}@}}@t{]}}
+@w{@i{optvars} ::=@t{[}@r{&optional} @{@i{var} |
+		       @r{(}@r{@{@i{var} | !@i{pattern}@}} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}*@t{]}}
 
-@w{@i{keyvars} ::=@r{[}{&key} @{@i{var} |
+@w{@i{restvar} ::=@t{[}@{@t{&rest} | @r{&body}@} @i{@{@i{var} | !@i{pattern}@}}@t{]}}
+
+@w{@i{keyvars} ::=@r{[}@r{&key} @{@i{var} |
 		          	 @r{(}@{@i{var} | 
-					       @r{(}@i{keyword-name} {@{@i{var} | !@i{pattern}@}}@r{)}@}
-				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*}}
+					       @r{(}@i{keyword-name} @{@i{var} | !@i{pattern}@}@r{)}@}
+				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}*}
 @w{            @r{[}@t{&allow-other-keys}@r{]}@r{]}}
 
-{
-@w{@i{auxvars} ::=@t{[}{&aux} @{@i{var} | @r{(}{@i{var}} @r{[}@i{init-form}@r{]}@r{)}@}{*}@t{]}}
-}
-@w{@i{envvar} ::=@t{[}{&environment} @i{var}@t{]}}
 
-@w{@i{wholevar} ::=@t{[}{&whole} @i{var}@t{]}}
+@w{@i{auxvars} ::=@t{[}@r{&aux} @{@i{var} | @r{(}@r{@i{var}} @r{[}@i{init-form}@r{]}@r{)}@}*@t{]}}
+
+@w{@i{envvar} ::=@t{[}@r{&environment} @i{var}@t{]}}
+
+@w{@i{wholevar} ::=@t{[}@r{&whole} @i{var}@t{]}}
 
 @w{@i{lambda-list} ::=@r{(}!@i{wholevar} !@i{envvar} !@i{reqvars} !@i{envvar} !@i{optvars} !@i{envvar}}
 @w{                !@i{restvar} !@i{envvar} !@i{keyvars} !@i{envvar} !@i{auxvars} !@i{envvar}@r{)} |}
@@ -3011,11 +3045,12 @@
 @w{@i{pattern} ::=@r{(}!@i{wholevar} !@i{reqvars} !@i{optvars} !@i{restvar} !@i{keyvars} !@i{auxvars}@r{)} |}
 @w{            @r{(}!@i{wholevar} !@i{reqvars} !@i{optvars} @t{.} @i{var}@r{)}}
 
-}
+
 
 A @i{macro lambda list} can contain
 the @i{lambda list keywords} shown in Figure 3--18.
 
+@format
 @group
 @noindent
 @w{  @b{&allow-other-keys}  @b{&environment}  @b{&rest}   }
@@ -3026,6 +3061,7 @@
 @w{  Figure 3--18: Lambda List Keywords used by Macro Lambda Lists}
 
 @end group
+@end format
 
 @i{Optional parameters} (introduced by @b{&optional}) and
 @i{keyword parameters} (introduced by @b{&key})
@@ -3287,31 +3323,30 @@
 
 A @i{destructuring lambda list} has the following syntax:
 
-{
-@w{@i{reqvars} ::=@{@i{var} | !@i{lambda-list}@}{*}}
 
-@w{@i{optvars} ::=@t{[}{&optional} @{@i{var} |
-		       @r{(}{@{@i{var} | !@i{lambda-list}@}} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*}@t{]}}
+@w{@i{reqvars} ::=@{@i{var} | !@i{lambda-list}@}*}
 
-@w{@i{restvar} ::=@t{[}@{{@t{&rest}} | {&body}@} @i{@{@i{var} | !@i{lambda-list}@}}@t{]}}
+@w{@i{optvars} ::=@t{[}@r{&optional} @{@i{var} |
+		       @r{(}@{@i{var} | !@i{lambda-list}@} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}*@t{]}}
 
-@w{@i{keyvars} ::=@r{[}{&key} @{@i{var} |
+@w{@i{restvar} ::=@t{[}@{@t{&rest}} | @t{&body}@} @i{@{@i{var} | !@i{lambda-list}@}@t{]}}
+
+@w{@i{keyvars} ::=@r{[}@r{&key} @{@i{var} |
 		          	 @r{(}@{@i{var} | 
-					       @r{(}@i{keyword-name} {@{@i{var} | !@i{lambda-list}@}}@r{)}@}
-				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*}}
+					       @r{(}@i{keyword-name} @{@i{var} | !@i{lambda-list}@}@r{)}@}
+				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}*}
 @w{            @r{[}@t{&allow-other-keys}@r{]}@r{]}}
 
-{
-@w{@i{auxvars} ::=@t{[}{&aux} @{@i{var} | @r{(}{@i{var}} @r{[}@i{init-form}@r{]}@r{)}@}{*}@t{]}}
-}
-@w{@i{envvar} ::=@t{[}{&environment} @i{var}@t{]}}
 
-@w{@i{wholevar} ::=@t{[}{&whole} @i{var}@t{]}}
+@w{@i{auxvars} ::=@t{[}@r{&aux} @{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}*@t{]}}
+
+@w{@i{envvar} ::=@t{[}@r{&environment} @i{var}@t{]}}
+
+@w{@i{wholevar} ::=@t{[}@r{&whole} @i{var}@t{]}}
 
 @w{@i{lambda-list} ::=@r{(}!@i{wholevar} !@i{reqvars} !@i{optvars} !@i{restvar} !@i{keyvars} !@i{auxvars}@r{)} |}
 @w{                @r{(}!@i{wholevar} !@i{reqvars} !@i{optvars} @t{.} @i{var}@r{)}}
 
-}
 
 @node Boa Lambda Lists, Defsetf Lambda Lists, Destructuring Lambda Lists, Lambda Lists
 @subsection Boa Lambda Lists
@@ -3432,19 +3467,20 @@
 
 A @i{defsetf lambda list} has the following syntax:
 
-@w{@i{lambda-list} ::=@r{(}@{@i{var}@}{*}}
-@w{                @t{[}{&optional} @{@i{var} |
-		       @r{(}@i{var} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*}@t{]}}
-@w{                @t{[}{&rest} @i{var}@t{]}}
-@w{                @t{[}{&key} @{@i{var} |
+@w{@i{lambda-list} ::=@r{(}@{@i{var}@}*}
+@w{                @t{[}@r{&optional} @{@i{var} |
+		       @r{(}@i{var} @r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}*@t{]}}
+@w{                @t{[}@r{&rest} @i{var}@t{]}}
+@w{                @t{[}@r{&key} @{@i{var} |
 		          	 @r{(}@{@i{var} | 
 					       @r{(}@i{keyword-name} @i{var}@r{)}@}
-				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}{*} pt @r{[}@t{&allow-other-keys}@r{]}@t{]}}
-@w{                @t{[}{&environment} @i{var}@t{]}}
+				 	@r{[}init-form @r{[}supplied-p-parameter@r{]}@r{]}@r{)}@}* pt @r{[}@t{&allow-other-keys}@r{]}@t{]}}
+@w{                @t{[}@r{&environment} @i{var}@t{]}}
 
 A @i{defsetf lambda list} can contain the @i{lambda list keywords} shown
 in Figure 3--19.
 
+@format
 @group
 @noindent
 @w{  @b{&allow-other-keys}  @b{&key}       @b{&rest}  }
@@ -3454,6 +3490,7 @@
 @w{  Figure 3--19: Lambda List Keywords used by Defsetf Lambda Lists}
 
 @end group
+@end format
 
 A @i{defsetf lambda list} differs from an @i{ordinary lambda list} 
 only in that it does not permit the use of @b{&aux}, 
@@ -3486,6 +3523,7 @@
 A @i{define-modify-macro lambda list} can contain the 
 @i{lambda list keywords} shown in Figure 3--20.
 
+@format
 @group
 @noindent
 @w{  @b{&optional}  @b{&rest}  }
@@ -3494,6 +3532,7 @@
 @w{  Figure 3--20: Lambda List Keywords used by Define-modify-macro Lambda Lists}
 
 @end group
+@end format
 
 @i{Define-modify-macro lambda lists} are similar to 
 @i{ordinary lambda lists}, but do not support keyword arguments.
@@ -3513,6 +3552,7 @@
 A @i{define-method-combination arguments lambda list} can contain the 
 @i{lambda list keywords} shown in Figure 3--21.
 
+@format
 @group
 @noindent
 @w{  @b{&allow-other-keys}  @b{&key}       @b{&rest}   }
@@ -3522,6 +3562,7 @@
 @w{  Figure 3--21: Lambda List Keywords used by Define-method-combination arguments Lambda Lists}
 
 @end group
+@end format
 
 @i{Define-method-combination arguments lambda lists} are similar to 
 @i{ordinary lambda lists}, but also permit the use of @b{&whole}.
@@ -3979,7 +4020,7 @@
 
 @subsubheading  Syntax::
 
-@code{lambda}  @i{lambda-list {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}} 
+@code{lambda}  @i{lambda-list [[@{@i{declaration}@}* | @i{documentation}]] @{@i{form}@}*} 
 @subsubheading  Arguments:: 
 
 @i{lambda-list}---an @i{ordinary lambda list}.
@@ -4003,7 +4044,7 @@
 @subsubheading  See Also::
 
 @b{function},
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Lambda Expressions},
 @ref{Lambda Forms},
@@ -4026,7 +4067,7 @@
 @node lambda, compile, lambda (Symbol), Evaluation and Compilation Dictionary
 @subsection lambda                                                              [Macro]
 
-@code{lambda}  @i{lambda-list {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}} @result{}  @i{@i{function}}
+@code{lambda}  @i{lambda-list [[@{@i{declaration}@}* | @i{documentation}]] @{@i{form}@}*} @result{}  @i{@i{function}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -4046,9 +4087,9 @@
 involving a @i{lambda expression} such that:
 
 @example
-    (lambda @i{lambda-list} {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*})
- @equiv{} (function (lambda @i{lambda-list} {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}))
- @equiv{} #'(lambda @i{lambda-list} {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*})
+    (lambda @i{lambda-list} [[@{@i{declaration}@}* | @i{documentation}]] @{@i{form}@}*)
+ @equiv{} (function (lambda @i{lambda-list} [[@{@i{declaration}@}* | @i{documentation}]] @{@i{form}@}*))
+ @equiv{} #'(lambda @i{lambda-list} [[@{@i{declaration}@}* | @i{documentation}]] @{@i{form}@}*)
 @end example
 
 @subsubheading  Examples::
@@ -4074,7 +4115,7 @@
 @node compile, eval, lambda, Evaluation and Compilation Dictionary
 @subsection compile                                                          [Function]
 
-@code{compile}  @i{name {&optional} definition} @result{}  @i{function, warnings-p, failure-p}
+@code{compile}  @i{name @r{&optional} definition} @result{}  @i{function, warnings-p, failure-p}
 
 @subsubheading  Arguments and Values::
 
@@ -4174,7 +4215,7 @@
 @node eval, eval-when, compile, Evaluation and Compilation Dictionary
 @subsection eval                                                             [Function]
 
-@code{eval}  @i{form} @result{}  @i{@{@i{result}@}{*}}
+@code{eval}  @i{form} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -4242,19 +4283,19 @@
 @node eval-when, load-time-value, eval, Evaluation and Compilation Dictionary
 @subsection eval-when                                                [Special Operator]
 
-@code{eval-when}  @i{@r{(}@{@i{situation}@}{*}@r{)} @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{eval-when}  @i{@r{(}@{@i{situation}@}*@r{)} @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
 @i{situation}---One of the @i{symbols} 
 		    @t{:compile-toplevel}
-@IKindex{compile-toplevel}
+@c @IKindex{compile-toplevel}
 ,
 		    @t{:load-toplevel}
-@IKindex{load-toplevel}
+@c @IKindex{load-toplevel}
 ,
 		    @t{:execute}
-@IKindex{execute}
+@c @IKindex{execute}
 ,
 		    @b{compile}
 @IRindex{compile}
@@ -4452,7 +4493,7 @@
 @node load-time-value, quote, eval-when, Evaluation and Compilation Dictionary
 @subsection load-time-value                                          [Special Operator]
 
-@code{load-time-value}  @i{form {&optional} read-only-p} @result{}  @i{object}
+@code{load-time-value}  @i{form @r{&optional} read-only-p} @result{}  @i{object}
 
 @subsubheading  Arguments and Values::         
 
@@ -4653,9 +4694,9 @@
 @node compiler-macro-function, define-compiler-macro, quote, Evaluation and Compilation Dictionary
 @subsection compiler-macro-function                                          [Accessor]
 
-@code{compiler-macro-function}  @i{name {&optional} environment} @result{}  @i{function}
+@code{compiler-macro-function}  @i{name @r{&optional} environment} @result{}  @i{function}
 
-(setf (@code{         compiler-macro-function} @i{name {&optional} environment}) new-function)@*
+(setf (@code{         compiler-macro-function} @i{name @r{&optional} environment}) new-function)@*
 
 @subsubheading  Arguments and Values::
 
@@ -4685,7 +4726,7 @@
 @node define-compiler-macro, defmacro, compiler-macro-function, Evaluation and Compilation Dictionary
 @subsection define-compiler-macro                                               [Macro]
 
-@code{define-compiler-macro}  @i{name lambda-list {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}}@*
+@code{define-compiler-macro}  @i{name lambda-list [[@{@i{declaration}@}* | @i{documentation}]] @{@i{form}@}*}@*
    @result{}  @i{name}
 
 @subsubheading  Arguments and Values::
@@ -4849,7 +4890,7 @@
 ,
 @ref{defmacro}
 ,
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Syntactic Interaction of Documentation Strings and Declarations}
 
@@ -4867,7 +4908,7 @@
 @node defmacro, macro-function, define-compiler-macro, Evaluation and Compilation Dictionary
 @subsection defmacro                                                            [Macro]
 
-@code{defmacro}  @i{name lambda-list {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}}@*
+@code{defmacro}  @i{name lambda-list [[@{@i{declaration}@}* | @i{documentation}]] @{@i{form}@}*}@*
    @result{}  @i{name}
 
 @subsubheading  Arguments and Values::
@@ -5041,9 +5082,9 @@
 
 @ref{destructuring-bind}
 , 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
-@ref{macroexpand; macroexpand-1}
+@ref{macroexpand}
 ,
 @b{*macroexpand-hook*},
 @b{macrolet}, 
@@ -5056,9 +5097,9 @@
 @node macro-function, macroexpand, defmacro, Evaluation and Compilation Dictionary
 @subsection macro-function                                                   [Accessor]
 
-@code{macro-function}  @i{symbol {&optional} environment} @result{}  @i{function}
+@code{macro-function}  @i{symbol @r{&optional} environment} @result{}  @i{function}
 
-(setf (@code{         macro-function} @i{symbol {&optional} environment}) new-function)@*
+(setf (@code{         macro-function} @i{symbol @r{&optional} environment}) new-function)@*
 
 @subsubheading  Arguments and Values::
 
@@ -5139,10 +5180,10 @@
 @node macroexpand, define-symbol-macro, macro-function, Evaluation and Compilation Dictionary
 @subsection macroexpand, macroexpand-1                                       [Function]
 
-@code{macroexpand}  @i{form {&optional} env} @result{}  @i{expansion, expanded-p}
+@code{macroexpand}  @i{form @r{&optional} env} @result{}  @i{expansion, expanded-p}
 
-@code{macroexpand-}  @i{1} @result{}  @i{form {&optional} env}
- {expansion, expanded-p}
+@code{macroexpand-}  @i{1} @result{}  @i{form @r{&optional} env}
+ @r{expansion, expanded-p}
 
 @subsubheading  Arguments and Values::
 
@@ -5276,7 +5317,7 @@
 @b{*macroexpand-hook*},
 @ref{defmacro}
 ,
-@ref{setf; psetf}
+@ref{setf}
  of 
 @ref{macro-function}
 ,
@@ -5372,15 +5413,15 @@
 
 @ref{symbol-macrolet}
 ,
-@ref{macroexpand; macroexpand-1}
+@ref{macroexpand}
 
 @node symbol-macrolet, *macroexpand-hook*, define-symbol-macro, Evaluation and Compilation Dictionary
 @subsection symbol-macrolet                                          [Special Operator]
 
-@code{symbol-macrolet}  @i{@r{(}@{{(}symbol expansion@r{)}@}{*}@r{)}
-			   @{@i{declaration}@}{*} 
-			   @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{symbol-macrolet}  @i{@r{(}@{@r{(}symbol expansion @r{)}@}*@r{)}
+			   @{@i{declaration}@}* 
+			   @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -5463,7 +5504,7 @@
 
 @ref{with-slots}
 , 
-@ref{macroexpand; macroexpand-1}
+@ref{macroexpand}
 
 @subsubheading  Notes::
 
@@ -5518,7 +5559,7 @@
 
 @subsubheading  See Also::
 
-@ref{macroexpand; macroexpand-1}
+@ref{macroexpand}
 , @b{macroexpand-1}, 
 @ref{funcall}
 , @ref{Evaluation}
@@ -5566,6 +5607,7 @@
 Figure 3--22 shows a list of @i{declaration identifiers} 
 that can be used with @b{proclaim}.
 
+@format
 @group
 @noindent
 @w{  declaration  inline     optimize  type  }
@@ -5575,6 +5617,7 @@
 @w{  Figure 3--22: Global Declaration Specifiers}
 
 @end group
+@end format
 
 An implementation is free to support other (@i{implementation-defined})
 @i{declaration identifiers} as well.
@@ -5628,7 +5671,7 @@
 @node declaim, declare, proclaim, Evaluation and Compilation Dictionary
 @subsection declaim                                                             [Macro]
 
-@code{declaim}  @i{@{@i{declaration-specifier}@}{*}} @result{}  @i{@i{implementation-dependent}}
+@code{declaim}  @i{@{@i{declaration-specifier}@}*} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Arguments and Values::
 
@@ -5656,7 +5699,7 @@
 
 @subsubheading  Syntax::
 
-@code{declare}  @i{@{@i{declaration-specifier}@}{*}} 
+@code{declare}  @i{@{@i{declaration-specifier}@}*} 
 @subsubheading  Arguments:: 
 
 @i{declaration-specifier}---a @i{declaration specifier}; not evaluated.
@@ -5671,6 +5714,7 @@
 A @b{declare} @i{expression} can occur in a @i{lambda expression}
 or in any of the @i{forms} listed in Figure 3--23.
 
+@format
 @group
 @noindent
 @w{  defgeneric                 do-external-symbols   prog                      }
@@ -5691,6 +5735,7 @@
 @w{       Figure 3--23: Standardized Forms In Which Declarations Can Occur      }
 
 @end group
+@end format
 
 A @b{declare} @i{expression} can only occur 
 where specified by the syntax of these @i{forms}.
@@ -5708,6 +5753,7 @@
 Figure 3--24 shows a list of @i{declaration identifiers} 
 that can be used with @b{declare}.
 
+@format
 @group
 @noindent
 @w{  dynamic-extent  ignore     optimize  }
@@ -5718,6 +5764,7 @@
 @w{  Figure 3--24: Local Declaration Specifiers}
 
 @end group
+@end format
 
 An implementation is free to support other (@i{implementation-defined})
 @i{declaration identifiers} as well.
@@ -5782,9 +5829,9 @@
 
 @subsubheading  Syntax::
 
-@t{@r{(}ignore @{@i{var} | @r{(}@b{function} @i{fn}@r{)}@}{*}@r{)}}
+@t{@r{(}ignore @{@i{var} | @r{(}@b{function} @i{fn}@r{)}@}*@r{)}}
 
-@t{@r{(}ignorable @{@i{var} | @r{(}@b{function} @i{fn}@r{)}@}{*}@r{)}}
+@t{@r{(}ignorable @{@i{var} | @r{(}@b{function} @i{fn}@r{)}@}*@r{)}}
 
 @subsubheading  Arguments::
 
@@ -5861,7 +5908,7 @@
 
 @subsubheading  Syntax::
 
-@t{(dynamic-extent [[@{@i{var}@}{*} |
+@t{(dynamic-extent [[@{@i{var}@}* |
 		               @r{(}@b{function} @i{fn}@r{)}@r{*}]])}
 
 @subsubheading  Arguments::
@@ -6075,9 +6122,9 @@
 
 @subsubheading  Syntax::
 
-@t{(type @i{typespec} @{@i{var}@}{*})}
+@t{(type @i{typespec} @{@i{var}@}*)}
 
-@t{(@i{typespec} @{@i{var}@}{*})}
+@t{(@i{typespec} @{@i{var}@}*)}
 
 @subsubheading  Arguments::
 
@@ -6250,8 +6297,8 @@
 
 @subsubheading  Notes::
 
-@t{(@i{typespec} @{@i{var}@}{*})} 
-is an abbreviation for @t{(type @i{typespec} @{@i{var}@}{*})}.
+@t{(@i{typespec} @{@i{var}@}*)} 
+is an abbreviation for @t{(type @i{typespec} @{@i{var}@}*)}.
 
 A @b{type} declaration for the arguments to a function does not
 necessarily imply anything about the type of the result.  The following
@@ -6303,9 +6350,9 @@
 
 @subsubheading  Syntax::
 
-@t{(inline @{@i{function-name}@}{*})}
+@t{(inline @{@i{function-name}@}*)}
 
-@t{(notinline @{@i{function-name}@}{*})}
+@t{(notinline @{@i{function-name}@}*)}
 
 @subsubheading  Arguments::
 
@@ -6422,7 +6469,7 @@
 
 @subsubheading  Syntax::
 
-@t{(ftype @i{type} @{@i{function-name}@}{*})}
+@t{(ftype @i{type} @{@i{function-name}@}*)}
 
 @subsubheading  Arguments::
 
@@ -6483,7 +6530,7 @@
 
 @subsubheading  Syntax::
 
-@t{(declaration @{@i{name}@}{*})}
+@t{(declaration @{@i{name}@}*)}
 
 @subsubheading  Arguments::
 
@@ -6522,7 +6569,7 @@
 
 @subsubheading  Syntax::
 
-@t{(optimize @{@i{quality} | (@i{quality} @i{value})@}{*})}
+@t{(optimize @{@i{quality} | (@i{quality} @i{value})@}*)}
 
 @IRindex{compilation-speed}
 
@@ -6552,6 +6599,7 @@
 the names and meanings of the standard @i{optimize qualities} are shown in 
 Figure 3--25.
 
+@format
 @group
 @noindent
 @w{  Name               Meaning                            }
@@ -6565,6 +6613,7 @@
 @w{             Figure 3--25: Optimize qualities           }
 
 @end group
+@end format
 
 There may be other, @i{implementation-defined} @i{optimize qualities}.
 
@@ -6617,7 +6666,7 @@
 
 @subsubheading  Syntax::
 
-@t{(special @{@i{var}@}{*})}
+@t{(special @{@i{var}@}*)}
 
 @subsubheading  Arguments::
 
@@ -6764,14 +6813,14 @@
 
 @subsubheading  See Also::
 
-@ref{defparameter; defvar}
+@ref{defparameter}
 ,
 @b{defvar}
 
 @node locally, the, special, Evaluation and Compilation Dictionary
 @subsection locally                                                  [Special Operator]
 
-@code{locally}  @i{@{@i{declaration}@}{*} @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{locally}  @i{@{@i{declaration}@}* @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -6838,7 +6887,7 @@
 @node the, special-operator-p, locally, Evaluation and Compilation Dictionary
 @subsection the                                                      [Special Operator]
 
-@code{the}  @i{value-type form} @result{}  @i{@{@i{result}@}{*}}
+@code{the}  @i{value-type form} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -6950,7 +6999,7 @@
 @node constantp,  , special-operator-p, Evaluation and Compilation Dictionary
 @subsection constantp                                                        [Function]
 
-@code{constantp}  @i{form {&optional} environment} @result{}  @i{generalized-boolean}
+@code{constantp}  @i{form @r{&optional} environment} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
diff -uNr gcl-texi-orig/chap-4.texi gcl-texi/chap-4.texi
--- gcl-texi-orig/chap-4.texi	1994-07-16 18:03:20 +0400
+++ gcl-texi/chap-4.texi	2002-10-17 20:53:05 +0400
@@ -88,6 +88,7 @@
 that are particularly relevant to the object system.
 @i{Figure~9--1} lists the defined @i{condition} @i{types}.
 
+@format
 @group
 @noindent
 @w{  @b{Section}                                Data Type                         }
@@ -106,6 +107,7 @@
 @w{           Figure 4--1: Cross-References to Data Type Information          }
 
 @end group
+@end format
 
 @node Type Relationships, Type Specifiers, Data Type Definition, Types
 @subsection Type Relationships
@@ -182,6 +184,7 @@
 or
  @b{deftype}.
 
+@format
 @group
 @noindent
 @w{ arithmetic-error                 function           simple-condition          }
@@ -222,6 +225,7 @@
 @w{                 Figure 4--2: Standardized Atomic Type Specifiers               }
 
 @end group
+@end format
 
 \indent               
 If a @i{type specifier} is a @i{list}, the @i{car} of the @i{list} 
@@ -270,6 +274,7 @@
 and then to 
 @t{vector}.
 
+@format
 @group
 @noindent
 @w{  and           long-float    simple-base-string  }
@@ -288,11 +293,13 @@
 @w{  Figure 4--3: Standardized Compound Type Specifier Names}
 
 @end group
+@end format
 
 Figure 4--4 show the @i{defined names} that can be used as 
 @i{compound type specifier} @i{names}
 but that cannot be used as @i{atomic type specifiers}.
 
+@format
 @group
 @noindent
 @w{  and     mod  satisfies  }
@@ -303,6 +310,7 @@
 @w{  Figure 4--4: Standardized Compound-Only Type Specifier Names}
 
 @end group
+@end format
 
 New @i{type specifiers} can come into existence in two ways.
 @table @asis
@@ -327,6 +335,7 @@
 Figure 4--5 shows some @i{defined names} relating to 
 @i{types} and @i{declarations}.
 
+@format
 @group
 @noindent
 @w{  coerce            defstruct  subtypep  }
@@ -339,12 +348,14 @@
 @w{  Figure 4--5: Defined names relating to types and declarations.}
 
 @end group
+@end format
 
 Figure 4--6 shows all @i{defined names} that are @i{type specifier} @i{names},
 whether for @i{atomic type specifiers} or @i{compound type specifiers};
 this list is the union of the lists in @i{Figure~4--2} 
 and @i{Figure~4--3}.
 
+@format
 @group
 @noindent
 @w{ and                              function           simple-array              }
@@ -387,6 +398,7 @@
 @w{                  Figure 4--6: Standardized Type Specifier Names                }
 
 @end group
+@end format
 
 @c end of including concept-types
 
@@ -400,6 +412,7 @@
 @b{symbol}), Figure 4--7 contains a list of @i{classes} that are
 especially relevant to understanding the object system.
 
+@format
 @group
 @noindent
 @w{  built-in-class    method-combination         standard-object   }
@@ -411,6 +424,7 @@
 @w{                Figure 4--7: Object System Classes               }
 
 @end group
+@end format
 
 @menu
 * Introduction to Classes::	
@@ -744,7 +758,7 @@
 
 Let S_C be the set of C and its @i{superclasses}. Let R be
 
-@center R=\bigcup_@{c\in {S_C}@}R_c
+@center R=\bigcup_@{c\in S_C @}R_c
 .
 
 [Reviewer Note by Barmar: ``Consistent'' needs to be defined, or maybe we should say
@@ -838,25 +852,25 @@
  (defclass food () ())
 @end example
 
-The set S_@{pie@}~= @{{pie, apple, cinnamon, fruit, spice, food,
-standard-object, t}@}. The set R~= @{{(pie, apple),
+The set S_@{pie@}~= @{pie, apple, cinnamon, fruit, spice, food,
+standard-object, t @}. The set R~= @{ (pie, apple),
 (apple, cinnamon), (apple, fruit), (cinnamon, spice), \break
 (fruit, food), (spice, food), (food, standard-object), (standard-object,
-t)}@}.
+t) @}.
 
 The class @t{pie} is not preceded by anything, so it comes first;
 the result so far is @t{(pie)}.  Remove @t{pie} from S and pairs
-mentioning @t{pie} from R to get S~= @{{apple, cinnamon,
-fruit, spice, food, standard-object, t}@} and R~=~@{{(apple, cinnamon), (apple, fruit), (cinnamon, spice),\break (fruit,
+mentioning @t{pie} from R to get S~= @{apple, cinnamon,
+fruit, spice, food, standard-object, t @} and R~=~@{(apple, cinnamon), (apple, fruit), (cinnamon, spice),\break (fruit,
 food), (spice, food), (food, standard-object),
-(standard-object, t)}@}.
+(standard-object, t) @}.
 
 The class @t{apple} is not preceded by anything, so it is next; the
 result is @t{(pie apple)}. Removing @t{apple} and the relevant
-pairs results in S~= @{{cinnamon, fruit, spice, food,
-standard-object, t}@} and R~= @{{(cinnamon, spice),
+pairs results in S~= @{ cinnamon, fruit, spice, food,
+standard-object, t @} and R~= @{ (cinnamon, spice),
 (fruit, food), (spice, food), (food, standard-object),\break
-(standard-object, t)}@}.
+(standard-object, t) @}.
 
 The classes @t{cinnamon} and @t{fruit} are not preceded by
 anything, so the one with a direct @i{subclass} rightmost in the 
@@ -865,14 +879,14 @@
 @i{subclass} of @t{cinnamon}.  Because @t{apple} appears to the right
 of @t{pie} in the @i{class precedence list}, 
 @t{fruit} goes next, and the
-result so far is @t{(pie apple fruit)}.  S~= @{{cinnamon,
-spice, food, standard-object, t}@}; R~= @{{(cinnamon,
+result so far is @t{(pie apple fruit)}.  S~= @{ cinnamon,
+spice, food, standard-object, t @}; R~= @{(cinnamon,
 spice), (spice, food),\break (food, standard-object),
-(standard-object, t)}@}.
+(standard-object, t) @}.
 
-The class @t{cinnamon} is next, giving the result so far as @t{(pie apple fruit cinnamon)}.  At this point S~= @{{spice,
-food, standard-object, t}@}; R~= @{{(spice, food), (food,
-standard-object), (standard-object, t)}@}.
+The class @t{cinnamon} is next, giving the result so far as @t{(pie apple fruit cinnamon)}.  At this point S~= @{ spice,
+food, standard-object, t @}; R~= @{ (spice, food), (food,
+standard-object), (standard-object, t) @}.
 
 The classes @t{spice}, @t{food}, @b{standard-object}, and 
 @b{t} are added in that order, and the @i{class precedence list} 
@@ -1161,6 +1175,7 @@
 @i{Figure~4--8} lists the set of @i{classes} 
 that correspond to predefined @i{type specifiers}.
 
+@format
 @group
 @noindent
 @w{ arithmetic-error                 generic-function   simple-error              }
@@ -1193,6 +1208,7 @@
 @w{       Figure 4--8: Classes that correspond to pre-defined type specifiers      }
 
 @end group
+@end format
 
 The @i{class precedence list} information specified in the entries for
 each of these @i{classes} are those that are required by the object system.
@@ -1232,7 +1248,7 @@
 * method-combination::		
 * t (System Class)::		
 * satisfies::			
-* member::			
+* member (Type Specifier)::			
 * not (Type Specifier)::	
 * and (Type Specifier)::	
 * or (Type Specifier)::		
@@ -1330,10 +1346,10 @@
 
 (@code{function}@{@i{@t{[}arg-typespec @r{[}value-typespec@r{]}@t{]}}@})
 
-@w{@i{arg-typespec} ::=@r{(}@{@i{typespec}@}{*} }
-@w{                  @t{[}{&optional} @{@i{typespec}@}{*}@t{]} }
-@w{                  @t{[}{&rest} @i{typespec}@t{]} }
-@w{                  @t{[}{&key} @{{(}keyword typespec@r{)}@}{*}@t{]}@r{)}}
+@w{@i{arg-typespec} ::=@r{(}@{@i{typespec}@}* }
+@w{                  @t{[}@r{&optional} @{@i{typespec}@}*@t{]} }
+@w{                  @t{[}@r{&rest} @i{typespec}@t{]} }
+@w{                  @t{[}@r{&key} @{@r{(}keyword typespec @r{)}@}*@t{]}@r{)}}
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -1728,7 +1744,7 @@
 The @i{type} @b{t} is a @i{supertype} of every @i{type}, 
 including itself. Every @i{object} is of @i{type} @b{t}.
 
-@node satisfies, member, t (System Class), Types and Classes Dictionary
+@node satisfies, member (Type Specifier), t (System Class), Types and Classes Dictionary
 @subsection satisfies                                                  [Type Specifier]
 
 @subsubheading  Compound Type Specifier Kind::
@@ -1762,7 +1778,7 @@
 
 The symbol @b{satisfies} is not valid as a @i{type specifier}.
 
-@node member, not (Type Specifier), satisfies, Types and Classes Dictionary
+@node member (Type Specifier), not (Type Specifier), satisfies, Types and Classes Dictionary
 @subsection member                                                     [Type Specifier]
 
 @subsubheading  Compound Type Specifier Kind::
@@ -1771,7 +1787,7 @@
 
 @subsubheading  Compound Type Specifier Syntax::
 
-(@code{member}@{@i{@{@i{object}@}{*}}@})
+(@code{member}@{@i{@{@i{object}@}*}@})
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -1794,7 +1810,7 @@
 
 the @i{type} @b{eql}
 
-@node not (Type Specifier), and (Type Specifier), member, Types and Classes Dictionary
+@node not (Type Specifier), and (Type Specifier), member (Type Specifier), Types and Classes Dictionary
 @subsection not                                                        [Type Specifier]
 
 @subsubheading  Compound Type Specifier Kind::
@@ -1826,7 +1842,7 @@
 
 @subsubheading  Compound Type Specifier Syntax::
 
-(@code{and}@{@i{@{@i{typespec}@}{*}}@})
+(@code{and}@{@i{@{@i{typespec}@}*}@})
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -1852,7 +1868,7 @@
 
 @subsubheading  Compound Type Specifier Syntax::
 
-(@code{or}@{@i{@{@i{typespec}@}{*}}@})
+(@code{or}@{@i{@{@i{typespec}@}*}@})
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -1885,7 +1901,7 @@
 
 [Reviewer Note by Barmar: Missing @b{&key}]
 
-@w{@i{value-typespec} ::=@{@i{typespec}@}{*} @t{[}{&optional} {@{@i{typespec}@}{*}}@t{]} @t{[}{&rest} typespec@t{]} @t{[}@b{&allow-other-keys}@t{]}}
+@w{@i{value-typespec} ::=@{@i{typespec}@}* @t{[}@r{&optional} @r{@{@i{typespec}@}*}@t{]} @t{[}@r{&rest} typespec @t{]} @t{[}@b{&allow-other-keys}@t{]}}
 
 @subsubheading  Compound Type Specifier Arguments::
 
@@ -2075,9 +2091,9 @@
 
 @subsubheading  See Also::
 
-@ref{rational}
+@ref{rational (Function)}
 , 
-@ref{floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround}
+@ref{floor}
 , 
 @ref{char-code}
 , 
@@ -2096,7 +2112,7 @@
 @node deftype, subtypep, coerce, Types and Classes Dictionary
 @subsection deftype                                                             [Macro]
 
-@code{deftype}  @i{name lambda-list {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}} @result{}  @i{name}
+@code{deftype}  @i{name lambda-list @r{[[@{@i{declaration}@}* | @i{documentation}]]} @{@i{form}@}*} @result{}  @i{name}
 
 @subsubheading  Arguments and Values::
 
@@ -2185,7 +2201,7 @@
 @b{declare},
 @ref{defmacro}
 ,
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Type Specifiers},
 @ref{Syntactic Interaction of Documentation Strings and Declarations}
@@ -2193,7 +2209,7 @@
 @node subtypep, type-of, deftype, Types and Classes Dictionary
 @subsection subtypep                                                         [Function]
 
-@code{subtypep}  @i{type-1 type-2 {&optional} environment} @result{}  @i{subtype-p, valid-p}
+@code{subtypep}  @i{type-1 type-2 @r{&optional} environment} @result{}  @i{subtype-p, valid-p}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2228,6 +2244,7 @@
 Figure 4--9 summarizes the possible combinations of @i{values}
 that might result.
 
+@format
 @group
 @noindent
 @w{  Value 1  Value 2  Meaning                                               }
@@ -2240,6 +2257,7 @@
 @w{               Figure 4--9: Result possibilities for subtypep             }
 
 @end group
+@end format
 
 @b{subtypep} is permitted to return the 
 @i{values} @i{false} and @i{false} only when at least
@@ -2541,7 +2559,7 @@
 ,
 @ref{defstruct}
 ,
-@ref{typecase; ctypecase; etypecase}
+@ref{typecase}
 ,
 @ref{typep}
 ,
@@ -2556,7 +2574,7 @@
 @node typep, type-error, type-of, Types and Classes Dictionary
 @subsection typep                                                            [Function]
 
-@code{typep}  @i{object type-specifier {&optional} environment} @result{}  @i{generalized-boolean}
+@code{typep}  @i{object type-specifier @r{&optional} environment} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values::
 
@@ -2625,26 +2643,26 @@
  (typep #c(0 0) '(complex (eql 0))) @result{}  @i{false}
 @end example
 
-Let @t{A{{}_x}} and @t{A{{}_y}} be two @i{type specifiers} that 
+Let @t{A_x} and @t{A_y} be two @i{type specifiers} that 
 denote different @i{types}, but for which
 
 @example
- (upgraded-array-element-type 'A{{}_x})
+ (upgraded-array-element-type 'A_x)
 @end example
 
 and
 
 @example
- (upgraded-array-element-type 'A{{}_y})
+ (upgraded-array-element-type 'A_y)
 @end example
 
 denote the same @i{type}.  Notice that
 
 @example
- (typep (make-array 0 :element-type 'A{{}_x}) '(array A{{}_x})) @result{}  @i{true}
- (typep (make-array 0 :element-type 'A{{}_y}) '(array A{{}_y})) @result{}  @i{true}
- (typep (make-array 0 :element-type 'A{{}_x}) '(array A{{}_y})) @result{}  @i{true}
- (typep (make-array 0 :element-type 'A{{}_y}) '(array A{{}_x})) @result{}  @i{true}
+ (typep (make-array 0 :element-type 'A_x) '(array A_x)) @result{}  @i{true}
+ (typep (make-array 0 :element-type 'A_y) '(array A_y)) @result{}  @i{true}
+ (typep (make-array 0 :element-type 'A_x) '(array A_y)) @result{}  @i{true}
+ (typep (make-array 0 :element-type 'A_y) '(array A_x)) @result{}  @i{true}
 @end example
 
 @subsubheading  Exceptional Situations::
@@ -2697,7 +2715,7 @@
 
 @subsubheading  See Also::
 
-@ref{type-error-datum; type-error-expected-type}
+@ref{type-error-datum}
 , @b{type-error-expected-type}
 
 @node type-error-datum, simple-type-error, type-error, Types and Classes Dictionary
@@ -2773,11 +2791,11 @@
 
 @b{simple-condition},
 
-@ref{simple-condition-format-control; simple-condition-format-arguments}
+@ref{simple-condition-format-control}
 ,
 
 @b{simple-condition-format-arguments}, 
-@ref{type-error-datum; type-error-expected-type}
+@ref{type-error-datum}
 ,
 @b{type-error-expected-type}
 
diff -uNr gcl-texi-orig/chap-5.texi gcl-texi/chap-5.texi
--- gcl-texi-orig/chap-5.texi	1994-07-16 18:03:19 +0400
+++ gcl-texi/chap-5.texi	2002-10-17 21:17:54 +0400
@@ -50,6 +50,7 @@
  that the ultimate result of evaluating @b{setf} is the value
   or values being stored.
 
+@format
 @group
 @noindent
 @w{  Access function   Update Function   Update using @b{setf}              }
@@ -61,10 +62,12 @@
 @w{                     Figure 5--1: Examples of setf                   }
 
 @end group
+@end format
 
 Figure 5--2 shows @i{operators} relating to
 @i{places} and @i{generalized reference}.
 
+@format
 @group
 @noindent
 @w{  assert                defsetf             push     }
@@ -78,6 +81,7 @@
 @w{  Figure 5--2: Operators relating to places and generalized reference.}
 
 @end group
+@end format
 
 Some of the @i{operators} above manipulate @i{places}
 and some manipulate @i{setf expanders}.
@@ -281,6 +285,7 @@
 
 For a variable @i{x}:
 
+@format
 @group
 @noindent
 @w{  @t{()}              ;list of temporary variables  }
@@ -293,9 +298,11 @@
 @w{  Figure 5--3: Sample Setf Expansion of a Variable}
 
 @end group
+@end format
 
 For @t{(car @i{exp})}:
 
+@format
 @group
 @noindent
 @w{  @t{(g0002)}                             ;list of temporary variables  }
@@ -308,9 +315,11 @@
 @w{           Figure 5--4: Sample Setf Expansion of a CAR Form         }
 
 @end group
+@end format
 
 For @t{(subseq @i{seq} @i{s} @i{e})}:
 
+@format
 @group
 @noindent
 @w{  @t{(g0004 g0005 g0006)}         ;list of temporary variables  }
@@ -324,12 +333,14 @@
 @w{     Figure 5--5: Sample Setf Expansion of a SUBSEQ Form    }
 
 @end group
+@end format
 
 In some cases, if a @i{subform} of a @i{place} is itself
 a @i{place}, it is necessary to expand the @i{subform}
 in order to compute some of the values in the expansion of the outer
 @i{place}.  For @t{(ldb @i{bs} (car @i{exp}))}:
 
+@format
 @group
 @noindent
 @w{  @t{(g0001 g0002)}            ;list of temporary variables  }
@@ -343,6 +354,7 @@
 @w{     Figure 5--6: Sample Setf Expansion of a LDB Form    }
 
 @end group
+@end format
 
 @node Kinds of Places, Treatment of Other Macros Based on SETF, Overview of Places and Generalized Reference, Generalized Reference
 @subsection Kinds of Places
@@ -387,6 +399,7 @@
 	         search for these items and eliminate stray references to them as `accessors',
 		 which they are not, but I will do that at some point.]
 
+@format
 @group
 @noindent
 @w{  aref    cdadr                    get                            }
@@ -416,6 +429,7 @@
 @w{       Figure 5--7: Functions that setf can be used with---1      }
 
 @end group
+@end format
 
 In the case of @b{subseq}, the replacement value must be a @i{sequence}
 whose elements might be contained by the sequence argument to @b{subseq},
@@ -440,6 +454,7 @@
 in this case the new @i{place} has stored back into it the
 result of applying the supplied ``update'' function.
 
+@format
 @group
 @noindent
 @w{  Function name  Argument that is a @i{place}  Update function used      }
@@ -451,6 +466,7 @@
 @w{         Figure 5--8: Functions that setf can be used with---2       }
 
 @end group
+@end format
 
 During the @b{setf} expansion of these @i{forms}, it is necessary to call 
 
@@ -652,17 +668,17 @@
 
 @item @t{*}  
 @t{(setf (apply #'aref @i{array}
-				        @{@i{subscript}@}{*}
+				        @{@i{subscript}@}*
 					@i{more-subscripts})
 			  @i{new-element})}
 @item @t{*}  
 @t{(setf (apply #'bit @i{array} 
-				       @{@i{subscript}@}{*}
+				       @{@i{subscript}@}*
 				       @i{more-subscripts})
 			  @i{new-element})}
 @item @t{*}  
 @t{(setf (apply #'sbit @i{array} 
-					@{@i{subscript}@}{*}
+					@{@i{subscript}@}*
 					@i{more-subscripts}) 
 			  @i{new-element})}
 @end table
@@ -687,8 +703,8 @@
 to preserve proper left-to-right evaluation of argument @i{subforms}:
 
 @example
- (setf (apply #'@i{name} @{@i{arg}@}{*}) @i{val})
- @equiv{} (apply #'(setf @i{name}) @i{val} @{@i{arg}@}{*})
+ (setf (apply #'@i{name} @{@i{arg}@}*) @i{val})
+ @equiv{} (apply #'(setf @i{name}) @i{val} @{@i{arg}@}*)
 @end example
 
 @node Setf Expansions and Places, Macro Forms as Places, APPLY Forms as Places, Kinds of Places
@@ -772,7 +788,7 @@
 @i{form} with the following general syntax:
 
 @example
- (@i{operator} @{@i{preceding-form}@}{*} @i{place} @{@i{following-form}@}{*})
+ (@i{operator} @{@i{preceding-form}@}* @i{place} @{@i{following-form}@}*)
 @end example
 
 The evaluation of each such @i{form} proceeds like this:
@@ -795,6 +811,7 @@
 Store the new value into @i{place}.
 @end table
 
+@format
 @group
 @noindent
 @w{  decf  pop   pushnew  }
@@ -804,6 +821,7 @@
 @w{  Figure 5--9: Read-Modify-Write Macros}
 
 @end group
+@end format
 
 @c end of including concept-places
 
@@ -944,7 +962,7 @@
 @node apply, defun, Data and Control Flow Dictionary, Data and Control Flow Dictionary
 @subsection apply                                                            [Function]
 
-@code{apply}  @i{function {&rest} args^+} @result{}  @i{@{@i{result}@}{*}}
+@code{apply}  @i{function @r{&rest} args^+} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -1011,7 +1029,7 @@
 @node defun, fdefinition, apply, Data and Control Flow Dictionary
 @subsection defun                                                               [Macro]
 
-@code{defun}  @i{function-name lambda-list {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}}@*
+@code{defun}  @i{function-name lambda-list @r{[[@{@i{declaration}@}* | @i{documentation}]]} @{@i{form}@}*}@*
    @result{}  @i{function-name}
 
 @subsubheading  Arguments and Values:: 
@@ -1056,8 +1074,8 @@
 
 @example
  (lambda @i{lambda-list}
-   {[[@{@i{declaration}@}{*} | @i{documentation}]]}
-   (block @i{block-name} @{@i{form}@}{*}))
+   @r{[[@{@i{declaration}@}* | @i{documentation}]]}
+   (block @i{block-name} @{@i{form}@}*))
 @end example
 
 processed in the @i{lexical environment} in which @b{defun} was executed.
@@ -1106,7 +1124,7 @@
 
 @subsubheading  See Also::
 
-@ref{flet; labels; macrolet}
+@ref{flet}
 ,
 @b{labels}, 
 @ref{block}
@@ -1114,7 +1132,7 @@
 @ref{return-from}
 ,
 @b{declare}, 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Evaluation},
 @ref{Ordinary Lambda Lists},
@@ -1313,29 +1331,29 @@
 @node flet, funcall, fmakunbound, Data and Control Flow Dictionary
 @subsection flet, labels, macrolet                                   [Special Operator]
 
-@code{flet}  @i{@r{(}@{{(}@i{function-name} 
+@code{flet}  @i{@r{(}@{@r{(}@i{function-name} 
 				                  @i{lambda-list}
-				      		  {[[@{@i{local-declaration}@}{*} 
+				      		  @r{[[@{@i{local-declaration}@}* 
 				  | @i{local-documentation}]]}
-				      		  @{@i{local-form}@}{*}@r{)}@}{*}@r{)}
-			  @{@i{declaration}@}{*} @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+				      		  @{@i{local-form}@}*@r{)}@}*@r{)}
+			  @{@i{declaration}@}* @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
-@code{labels}  @i{@r{(}@{{(}@i{function-name} 
+@code{labels}  @i{@r{(}@{@r{(}@i{function-name} 
 				                  @i{lambda-list}
-				      		  {[[@{@i{local-declaration}@}{*} 
+				      		  @r{[[@{@i{local-declaration}@}* 
 				  | @i{local-documentation}]]}
-				      		  @{@i{local-form}@}{*}@r{)}@}{*}@r{)}
-			  @{@i{declaration}@}{*} @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+				      		  @{@i{local-form}@}*@r{)}@}*@r{)}
+			  @{@i{declaration}@}* @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
-@code{macrolet}  @i{@r{(}@{{(}@i{name} 
+@code{macrolet}  @i{@r{(}@{@r{(}@i{name} 
 				                  @i{lambda-list}
-				      		  {[[@{@i{local-declaration}@}{*} 
+				      		  @r{[[@{@i{local-declaration}@}* 
 				  | @i{local-documentation}]]}
-				      		  @{@i{local-form}@}{*}@r{)}@}{*}@r{)}
-			  @{@i{declaration}@}{*} @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+				      		  @{@i{local-form}@}*@r{)}@}*@r{)}
+			  @{@i{declaration}@}* @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1556,9 +1574,9 @@
 ,
 @ref{defun}
 ,
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
-@ref{let; let*}
+@ref{let}
 ,
 @ref{Evaluation},
 @ref{Syntactic Interaction of Documentation Strings and Declarations}
@@ -1575,7 +1593,7 @@
 @node funcall, function (Special Operator), flet, Data and Control Flow Dictionary
 @subsection funcall                                                          [Function]
 
-@code{funcall}  @i{function {&rest} args} @result{}  @i{@{@i{result}@}{*}}
+@code{funcall}  @i{function @r{&rest} args} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -1693,7 +1711,7 @@
 ,
 @ref{fdefinition}
 ,
-@ref{flet; labels; macrolet}
+@ref{flet}
 ,
 @b{labels},
 @ref{symbol-function}
@@ -1936,7 +1954,7 @@
 
 @ref{defun}
 ,
-@ref{flet; labels; macrolet}
+@ref{flet}
 ,
 @ref{defmacro}
 ,
@@ -2049,10 +2067,10 @@
 
 @ref{declaim}
 ,
-@ref{defparameter; defvar}
+@ref{defparameter}
 , 
 @b{defvar},
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{proclaim}
 ,
@@ -2196,7 +2214,7 @@
 , 
 @ref{defconstant}
 ,
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Compilation}
 
@@ -2242,8 +2260,8 @@
 @node destructuring-bind, let, defparameter, Data and Control Flow Dictionary
 @subsection destructuring-bind                                                  [Macro]
 
-@code{destructuring-bind}  @i{lambda-list expression @{@i{declaration}@}{*} @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{destructuring-bind}  @i{lambda-list expression @{@i{declaration}@}* @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2287,9 +2305,9 @@
 @node let, progv, destructuring-bind, Data and Control Flow Dictionary
 @subsection let, let*                                                [Special Operator]
 
-@code{let}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}{*}@r{)} @{@i{declaration}@}{*} @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{let}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}*@r{)} @{@i{declaration}@}* @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
-@code{let*}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}{*}@r{)} @{@i{declaration}@}{*} @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{let*}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}*@r{)} @{@i{declaration}@}* @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2417,7 +2435,7 @@
 @node progv, setq, let, Data and Control Flow Dictionary
 @subsection progv                                                    [Special Operator]
 
-@code{progv}  @i{@i{symbols} @i{values} @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{progv}  @i{@i{symbols} @i{values} @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2462,7 +2480,7 @@
 
 @subsubheading  See Also::
 
-@ref{let; let*}
+@ref{let}
 , @ref{Evaluation}
 
 @subsubheading  Notes::
@@ -2474,7 +2492,7 @@
 @node setq, psetq, progv, Data and Control Flow Dictionary
 @subsection setq                                                         [Special Form]
 
-@code{setq}  @i{@{!@i{pair}@}{*}} @result{}  @i{result}
+@code{setq}  @i{@{!@i{pair}@}*} @result{}  @i{result}
 
 @w{@i{pair} ::=var form}
 
@@ -2541,18 +2559,19 @@
 ,
 @ref{set}
 ,
-@ref{setf; psetf}
+@ref{setf}
 
 @node psetq, block, setq, Data and Control Flow Dictionary
 @subsection psetq                                                               [Macro]
 
-@code{psetq}  @i{@{!@i{pair}@}{*}} @result{}  @i{@b{nil}}
+@code{psetq}  @i{@{!@i{pair}@}*} @result{}  @i{@b{nil}}
 
 @w{@i{pair} ::=var form}
 
 @subsubheading  Pronunciation::
 
-@b{psetq}: pronounced {{{\vrule width 1pt height 2pt depth 2pt}\kern -1pt\raise 6pt{\vrule width 1pt height 2pt depth 2pt}}}p\=e'set ,ky\"u 
+@b{psetq}: pronounced  @tex p\=e'set ,ky\"u 
+@end tex
 
 @subsubheading  Arguments and Values::
 
@@ -2621,7 +2640,7 @@
 @node block, catch, psetq, Data and Control Flow Dictionary
 @subsection block                                                    [Special Operator]
 
-@code{block}  @i{@i{name} @i{form}@r{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{block}  @i{@i{name} @i{form}@r{*}} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2681,7 +2700,7 @@
 @node catch, go, block, Data and Control Flow Dictionary
 @subsection catch                                                    [Special Operator]
 
-@code{catch}  @i{@i{tag} @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{catch}  @i{@i{tag} @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2980,7 +2999,7 @@
 @node tagbody, throw, return, Data and Control Flow Dictionary
 @subsection tagbody                                                  [Special Operator]
 
-@code{tagbody}  @i{@{@i{tag} | @i{statement}@}{*}} @result{}  @i{@b{nil}}
+@code{tagbody}  @i{@{@i{tag} | @i{statement}@}*} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -3060,6 +3079,7 @@
 
 The @i{macros} in Figure 5--10 have @i{implicit tagbodies}.
 
+@format
 @group
 @noindent
 @w{  do              do-external-symbols  dotimes  }
@@ -3070,6 +3090,7 @@
 @w{  Figure 5--10: Macros that have implicit tagbodies.}
 
 @end group
+@end format
 
 @node throw, unwind-protect, tagbody, Data and Control Flow Dictionary
 @subsection throw                                                    [Special Operator]
@@ -3175,7 +3196,7 @@
 @node unwind-protect, nil, throw, Data and Control Flow Dictionary
 @subsection unwind-protect                                           [Special Operator]
 
-@code{unwind-protect}  @i{@i{protected-form} @{@i{cleanup-form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{unwind-protect}  @i{@i{protected-form} @{@i{cleanup-form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -3519,7 +3540,7 @@
 ,
 @ref{equalp}
 ,
-@ref{=; /=; <; >; <=; >=}
+@ref{=}
 ,
 @ref{Compilation}
 
@@ -3544,6 +3565,7 @@
 rather than @b{eql} in a way that cannot be overridden by the
 @i{code} which employs them:
 
+@format
 @group
 @noindent
 @w{  catch           getf     throw  }
@@ -3554,6 +3576,7 @@
 @w{  Figure 5--11: Operators that always prefer EQ over EQL}
 
 @end group
+@end format
 
 @node eql, equal, eq, Data and Control Flow Dictionary
 @subsection eql                                                              [Function]
@@ -3631,9 +3654,9 @@
 ,
 @ref{equalp}
 ,
-@ref{=; /=; <; >; <=; >=}
+@ref{=}
 ,
-@ref{char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal; char-lessp; char-greaterp; char-not-greaterp; char-not-lessp}
+@ref{char=}
 
 @subsubheading  Notes::
 
@@ -3731,6 +3754,7 @@
 with upper
   entries taking priority over lower ones.
 
+@format
 @group
 @noindent
 @w{  Type          Behavior                   }
@@ -3749,6 +3773,7 @@
 @w{  Figure 5--12: Summary and priorities of behavior of @b{equal}}
 
 @end group
+@end format
 
 Any two @i{objects} that are @b{eql} are also @b{equal}. 
 
@@ -3783,11 +3808,11 @@
 , 
 @ref{equalp}
 , 
-@ref{=; /=; <; >; <=; >=}
+@ref{=}
 , 
-@ref{string=; string/=; string<; string>; string<=; string>=; string-equal; string-not-equal; string-lessp; string-greaterp; string-not-greaterp; string-not-lessp}
+@ref{string=}
 , @b{string-equal}, 
-@ref{char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal; char-lessp; char-greaterp; char-not-greaterp; char-not-lessp}
+@ref{char=}
 , 
 @b{char-equal}, 
 @ref{tree-equal}
@@ -3869,6 +3894,7 @@
 with upper
   entries taking priority over lower ones.
 
+@format
 @group
 @noindent
 @w{  Type          Behavior                      }
@@ -3887,6 +3913,7 @@
 @w{  Figure 5--13: Summary and priorities of behavior of @b{equalp}}
 
 @end group
+@end format
 
 @subsubheading  Examples::
 
@@ -3928,11 +3955,11 @@
 , 
 @ref{equal}
 , 
-@ref{=; /=; <; >; <=; >=}
+@ref{=}
 , 
-@ref{string=; string/=; string<; string>; string<=; string>=; string-equal; string-not-equal; string-lessp; string-greaterp; string-not-greaterp; string-not-lessp}
+@ref{string=}
 , @b{string-equal}, 
-@ref{char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal; char-lessp; char-greaterp; char-not-greaterp; char-not-lessp}
+@ref{char=}
 , 
 @b{char-equal}
 
@@ -4089,13 +4116,13 @@
 @node every, and, constantly, Data and Control Flow Dictionary
 @subsection every, some, notevery, notany                                    [Function]
 
-@code{every}  @i{predicate {&rest} sequences^+} @result{}  @i{generalized-boolean}
+@code{every}  @i{predicate @r{&rest} sequences^+} @result{}  @i{generalized-boolean}
 
-@code{some}  @i{predicate {&rest} sequences^+} @result{}  @i{result}
+@code{some}  @i{predicate @r{&rest} sequences^+} @result{}  @i{result}
 
-@code{notevery}  @i{predicate {&rest} sequences^+} @result{}  @i{generalized-boolean}
+@code{notevery}  @i{predicate @r{&rest} sequences^+} @result{}  @i{generalized-boolean}
 
-@code{notany}  @i{predicate {&rest} sequences^+} @result{}  @i{generalized-boolean}
+@code{notany}  @i{predicate @r{&rest} sequences^+} @result{}  @i{generalized-boolean}
 
 @subsubheading  Arguments and Values:: 
 
@@ -4178,14 +4205,14 @@
 @subsubheading  Notes::
 
 @example
- (notany @i{predicate} @{@i{sequence}@}{*}) @equiv{} (not (some @i{predicate} @{@i{sequence}@}{*}))
- (notevery @i{predicate} @{@i{sequence}@}{*}) @equiv{} (not (every @i{predicate} @{@i{sequence}@}{*}))
+ (notany @i{predicate} @{@i{sequence}@}*) @equiv{} (not (some @i{predicate} @{@i{sequence}@}*))
+ (notevery @i{predicate} @{@i{sequence}@}*) @equiv{} (not (every @i{predicate} @{@i{sequence}@}*))
 @end example
 
 @node and, cond, every, Data and Control Flow Dictionary
 @subsection and                                                                 [Macro]
 
-@code{and}  @i{@{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{and}  @i{@{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -4236,13 +4263,13 @@
 
 @ref{cond}
 ,
-@ref{every; some; notevery; notany}
+@ref{every}
 ,
 @ref{if}
 ,
 @ref{or}
 ,
-@ref{when; unless}
+@ref{when}
 
 @subsubheading  Notes::
 
@@ -4254,9 +4281,9 @@
 @node cond, if, and, Data and Control Flow Dictionary
 @subsection cond                                                                [Macro]
 
-@code{cond}  @i{@{!@i{clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{cond}  @i{@{!@i{clause}@}*} @result{}  @i{@{@i{result}@}*}
 
-@w{@i{clause} ::=@r{(}test-form @{@i{form}@}{*}@r{)}}
+@w{@i{clause} ::=@r{(}test-form @{@i{form}@}*@r{)}}
 
 @subsubheading  Arguments and Values::
 
@@ -4312,13 +4339,13 @@
 
 @ref{if}
 , 
-@ref{case; ccase; ecase}
+@ref{case}
 .
 
 @node if, or, cond, Data and Control Flow Dictionary
 @subsection if                                                       [Special Operator]
 
-@code{if}  @i{@i{test-form} @i{then-form} @r{[}@i{else-form}@r{]}} @result{}  @i{@{@i{result}@}{*}}
+@code{if}  @i{@i{test-form} @i{then-form} @r{[}@i{else-form}@r{]}} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -4365,7 +4392,7 @@
 @ref{cond}
 ,
 @b{unless},
-@ref{when; unless}
+@ref{when}
 
 @subsubheading  Notes::
 
@@ -4377,7 +4404,7 @@
 @node or, when, if, Data and Control Flow Dictionary
 @subsection or                                                                  [Macro]
 
-@code{or}  @i{@{@i{form}@}{*}} @result{}  @i{@{@i{results}@}{*}}
+@code{or}  @i{@{@i{form}@}*} @result{}  @i{@{@i{results}@}*}
 
 @subsubheading  Arguments and Values:: 
 
@@ -4428,9 +4455,9 @@
 @node when, case, or, Data and Control Flow Dictionary
 @subsection when, unless                                                        [Macro]
 
-@code{when}  @i{test-form @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{when}  @i{test-form @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
-@code{unless}  @i{test-form @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{unless}  @i{test-form @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -4520,15 +4547,15 @@
 @node case, typecase, when, Data and Control Flow Dictionary
 @subsection case, ccase, ecase                                                  [Macro]
 
-@code{case}  @i{keyform  @{!@i{normal-clause}@}{*} @r{[}!@i{otherwise-clause}@r{]}} @result{}  @i{@{@i{result}@}{*}}
+@code{case}  @i{keyform  @{!@i{normal-clause}@}* @r{[}!@i{otherwise-clause}@r{]}} @result{}  @i{@{@i{result}@}*}
 
-@code{ccase}  @i{keyplace @{!@i{normal-clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{ccase}  @i{keyplace @{!@i{normal-clause}@}*} @result{}  @i{@{@i{result}@}*}
 
-@code{ecase}  @i{keyform  @{!@i{normal-clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{ecase}  @i{keyform  @{!@i{normal-clause}@}*} @result{}  @i{@{@i{result}@}*}
 
-@w{@i{normal-clause} ::=@r{(}keys @{@i{form}@}{*}@r{)}}
+@w{@i{normal-clause} ::=@r{(}keys @{@i{form}@}*@r{)}}
 
-@w{@i{otherwise-clause} ::=@r{(}@{otherwise | t@} @{@i{form}@}{*}@r{)}}
+@w{@i{otherwise-clause} ::=@r{(}@{otherwise | t@} @{@i{form}@}*@r{)}}
 
 @w{@i{clause} ::=normal-clause | otherwise-clause}
 
@@ -4668,9 +4695,9 @@
 
 @ref{cond}
 ,
-@ref{typecase; ctypecase; etypecase}
+@ref{typecase}
 ,
-@ref{setf; psetf}
+@ref{setf}
 ,
 @ref{Generalized Reference}
 
@@ -4678,10 +4705,10 @@
 
 @example
 (case @i{test-key}
-  @{((@{@i{key}@}{*}) @{@i{form}@}{*})@}{*})
+  @{((@{@i{key}@}*) @{@i{form}@}*)@}*)
 @equiv{}
 (let ((#1=#:g0001 @i{test-key}))
-  (cond @{((member #1# '(@{@i{key}@}{*})) @{@i{form}@}{*})@}{*}))
+  (cond @{((member #1# '(@{@i{key}@}*)) @{@i{form}@}*)@}*))
 @end example
 
 The specific error message used by @b{ecase} and @b{ccase} can vary
@@ -4693,15 +4720,15 @@
 @node typecase, multiple-value-bind, case, Data and Control Flow Dictionary
 @subsection typecase, ctypecase, etypecase                                      [Macro]
 
-@code{typecase}  @i{keyform  @{!@i{normal-clause}@}{*} @r{[}!@i{otherwise-clause}@r{]}} @result{}  @i{@{@i{result}@}{*}}
+@code{typecase}  @i{keyform  @{!@i{normal-clause}@}* @r{[}!@i{otherwise-clause}@r{]}} @result{}  @i{@{@i{result}@}*}
 
-@code{ctypecase}  @i{keyplace @{!@i{normal-clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{ctypecase}  @i{keyplace @{!@i{normal-clause}@}*} @result{}  @i{@{@i{result}@}*}
 
-@code{etypecase}  @i{keyform  @{!@i{normal-clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{etypecase}  @i{keyform  @{!@i{normal-clause}@}*} @result{}  @i{@{@i{result}@}*}
 
-@w{@i{normal-clause} ::=@r{(}type @{@i{form}@}{*}@r{)}}
+@w{@i{normal-clause} ::=@r{(}type @{@i{form}@}*@r{)}}
 
-@w{@i{otherwise-clause} ::=@r{(}@{otherwise | t@} @{@i{form}@}{*}@r{)}}
+@w{@i{otherwise-clause} ::=@r{(}@{otherwise | t@} @{@i{form}@}*@r{)}}
 
 @w{@i{clause} ::=normal-clause | otherwise-clause}
 
@@ -4846,11 +4873,11 @@
 
 @subsubheading  See Also::
 
-@ref{case; ccase; ecase}
+@ref{case}
 ,
 @ref{cond}
 ,
-@ref{setf; psetf}
+@ref{setf}
 ,
 @ref{Generalized Reference}
 
@@ -4858,10 +4885,10 @@
 
 @example
 (typecase @i{test-key}
-  @{(@i{type} @{@i{form}@}{*})@}{*})
+  @{(@i{type} @{@i{form}@}*)@}*)
 @equiv{}
 (let ((#1=#:g0001 @i{test-key}))
-  (cond @{((typep #1# '@i{type}) @{@i{form}@}{*})@}{*}))
+  (cond @{((typep #1# '@i{type}) @{@i{form}@}*)@}*))
 @end example
 
 The specific error message used by @b{etypecase} and @b{ctypecase} can vary
@@ -4873,11 +4900,11 @@
 @node multiple-value-bind, multiple-value-call, typecase, Data and Control Flow Dictionary
 @subsection multiple-value-bind                                                 [Macro]
 
-@code{multiple-value-bind}  @i{@r{(}@{@i{var}@}{*}@r{)}
+@code{multiple-value-bind}  @i{@r{(}@{@i{var}@}*@r{)}
  		   @i{values-form}
- 		   @{@i{declaration}@}{*}
- 		   @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+ 		   @{@i{declaration}@}*
+ 		   @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -4924,24 +4951,24 @@
 
 @subsubheading  See Also::
 
-@ref{let; let*}
+@ref{let}
 ,
 @ref{multiple-value-call}
 
 @subsubheading  Notes::
 
 @example
- (multiple-value-bind (@{@i{var}@}{*}) @i{values-form} @{@i{form}@}{*})
- @equiv{} (multiple-value-call #'(lambda (&optional @{@i{var}@}{*} &rest #1=#:ignore)
+ (multiple-value-bind (@{@i{var}@}*) @i{values-form} @{@i{form}@}*)
+ @equiv{} (multiple-value-call #'(lambda (&optional @{@i{var}@}* &rest #1=#:ignore)
                              (declare (ignore #1#))
-                             @{@i{form}@}{*})
+                             @{@i{form}@}*)
                          @i{values-form})
 @end example
 
 @node multiple-value-call, multiple-value-list, multiple-value-bind, Data and Control Flow Dictionary
 @subsection multiple-value-call                                      [Special Operator]
 
-@code{multiple-value-call}  @i{@i{function-form} @i{form}@r{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{multiple-value-call}  @i{@i{function-form} @i{form}@r{*}} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -5021,9 +5048,9 @@
 @node multiple-value-prog1, multiple-value-setq, multiple-value-list, Data and Control Flow Dictionary
 @subsection multiple-value-prog1                                     [Special Operator]
 
-@code{multiple-value-prog}  @i{1} @result{}  @i{first-form @{@i{form}@}{*}}
+@code{multiple-value-prog}  @i{1} @result{}  @i{first-form @{@i{form}@}*}
 
-		   {first-form-results}
+		   @r{first-form-results}
 
 @subsubheading  Arguments and Values::
 
@@ -5052,7 +5079,7 @@
 
 @subsubheading  See Also::
 
-@ref{prog1; prog2}
+@ref{prog1}
 
 @node multiple-value-setq, values, multiple-value-prog1, Data and Control Flow Dictionary
 @subsection multiple-value-setq                                                 [Macro]
@@ -5126,9 +5153,9 @@
 @node values, values-list, multiple-value-setq, Data and Control Flow Dictionary
 @subsection values                                                           [Accessor]
 
-@code{values}  @i{{&rest} object} @result{}  @i{@{@i{object}@}{*}}
+@code{values}  @i{@r{&rest} object} @result{}  @i{@{@i{object}@}*}
 
-(setf (@code{         values} @i{{&rest} place}) new-values)@*
+(setf (@code{         values} @i{@r{&rest} place}) new-values)@*
 
 @subsubheading  Arguments and Values:: 
 
@@ -5206,7 +5233,7 @@
 @node values-list, multiple-values-limit, values, Data and Control Flow Dictionary
 @subsection values-list                                                      [Function]
 
-@code{values-list}  @i{list} @result{}  @i{@{@i{element}@}{*}}
+@code{values-list}  @i{list} @result{}  @i{@{@i{element}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -5331,16 +5358,16 @@
 @subsection prog, prog*                                                         [Macro]
 
 @code{prog}  @i{@r{(}@{@i{var} | 
-			  	       @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}{*}@r{)}
-	      	   @{@i{declaration}@}{*}
-	      	   @{@i{tag} | @i{statement}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+			  	       @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}*@r{)}
+	      	   @{@i{declaration}@}*
+	      	   @{@i{tag} | @i{statement}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @code{prog*}  @i{@r{(}@{@i{var} | 
-				       @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}{*}@r{)}
-		   @{@i{declaration}@}{*} 
-		   @{@i{tag} | @i{statement}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+				       @r{(}@i{var} @r{[}@i{init-form}@r{]}@r{)}@}*@r{)}
+		   @{@i{declaration}@}* 
+		   @{@i{tag} | @i{statement}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -5369,7 +5396,7 @@
 
 @example
  (prog (var1 var2 (var3 init-form-3) var4 (var5 init-form-5))
-       @{@i{declaration}@}{*}
+       @{@i{declaration}@}*
        statement1
   tag1
        statement2
@@ -5457,7 +5484,7 @@
 
 @ref{block}
 , 
-@ref{let; let*}
+@ref{let}
 , 
 @ref{tagbody}
 , 
@@ -5479,10 +5506,10 @@
 @node prog1, progn, prog, Data and Control Flow Dictionary
 @subsection prog1, prog2                                                        [Macro]
 
-@code{prog}  @i{1} @result{}  @i{first-form             @{@i{form}@}{*}}
- {result-1}
-@code{prog}  @i{2} @result{}  @i{first-form second-form @{@i{form}@}{*}}
- {result-2}
+@code{prog}  @i{1} @result{}  @i{first-form             @{@i{form}@}*}
+ @r{result-1}
+@code{prog}  @i{2} @result{}  @i{first-form second-form @{@i{form}@}*}
+ @r{result-2}
 
 @subsubheading  Arguments and Values::
 
@@ -5553,14 +5580,14 @@
 must be computed before some or all of the side effects happen.
 
 @example
- (prog1 @{@i{form}@}{*}) @equiv{} (values (multiple-value-prog1 @{@i{form}@}{*}))
- (prog2 @i{form1} @{@i{form}@}{*}) @equiv{} (let () @i{form1} (prog1 @{@i{form}@}{*}))
+ (prog1 @{@i{form}@}*) @equiv{} (values (multiple-value-prog1 @{@i{form}@}*))
+ (prog2 @i{form1} @{@i{form}@}*) @equiv{} (let () @i{form1} (prog1 @{@i{form}@}*))
 @end example
 
 @node progn, define-modify-macro, prog1, Data and Control Flow Dictionary
 @subsection progn                                                    [Special Operator]
 
-@code{progn}  @i{@{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{progn}  @i{@{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values:: 
 
@@ -5593,7 +5620,7 @@
 
 @subsubheading  See Also::
 
-@ref{prog1; prog2}
+@ref{prog1}
 , @b{prog2}, @ref{Evaluation}
 
 @subsubheading  Notes::
@@ -5690,7 +5717,7 @@
 @ref{define-setf-expander}
 ,
 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Syntactic Interaction of Documentation Strings and Declarations}
 
@@ -5704,8 +5731,8 @@
 
 The ``long form'':
 
-@code{defsetf}  @i{access-fn lambda-list @r{(}@{@i{store-variable}@}{*}@r{)}
-                          {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}}@*
+@code{defsetf}  @i{access-fn lambda-list @r{(}@{@i{store-variable}@}*@r{)}
+                          @r{[[@{@i{declaration}@}* | @i{documentation}]]} @{@i{form}@}*}@*
    @result{}  @i{access-fn}
 
 @subsubheading  Arguments and Values:: 
@@ -5870,9 +5897,9 @@
 
 @subsubheading  See Also::
 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
-@ref{setf; psetf}
+@ref{setf}
 ,
 
 @ref{define-setf-expander}
@@ -5913,7 +5940,7 @@
 @subsection define-setf-expander                                                [Macro]
 
 @code{define-setf-expander}  @i{access-fn lambda-list
-			 {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}}@*
+			 @r{[[@{@i{declaration}@}* | @i{documentation}]]} @{@i{form}@}*}@*
    @result{}  @i{access-fn}
 
 @subsubheading  Arguments and Values::
@@ -6025,11 +6052,11 @@
 
 @subsubheading  See Also::
 
-@ref{setf; psetf}
+@ref{setf}
 ,
 @ref{defsetf}
 ,
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{get-setf-expansion}
 ,
@@ -6049,7 +6076,7 @@
 @node get-setf-expansion, setf, define-setf-expander, Data and Control Flow Dictionary
 @subsection get-setf-expansion                                               [Function]
 
-@code{get-setf-expansion}  @i{place {&optional} environment}@*
+@code{get-setf-expansion}  @i{place @r{&optional} environment}@*
    @result{}  @i{vars, vals, store-vars, writer-form, reader-form}
 
 @subsubheading  Arguments and Values:: 
@@ -6102,7 +6129,7 @@
 ,
 @ref{define-setf-expander}
 ,
-@ref{setf; psetf}
+@ref{setf}
 
 @subsubheading  Notes::
 
@@ -6113,9 +6140,9 @@
 @node setf, shiftf, get-setf-expansion, Data and Control Flow Dictionary
 @subsection setf, psetf                                                         [Macro]
 
-@code{setf}  @i{@{!@i{pair}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{setf}  @i{@{!@i{pair}@}*} @result{}  @i{@{@i{result}@}*}
 
-@code{psetf}  @i{@{!@i{pair}@}{*}} @result{}  @i{@b{nil}}
+@code{psetf}  @i{@{!@i{pair}@}*} @result{}  @i{@b{nil}}
 
 @w{@i{pair} ::=place newvalue}
 
@@ -6276,7 +6303,7 @@
 
 @subsubheading  See Also::
 
-@ref{setf; psetf}
+@ref{setf}
 , 
 @ref{rotatef}
 , @ref{Generalized Reference}
@@ -6315,7 +6342,7 @@
 @node rotatef, control-error, shiftf, Data and Control Flow Dictionary
 @subsection rotatef                                                             [Macro]
 
-@code{rotatef}  @i{@{@i{place}@}{*}} @result{}  @i{@b{nil}}
+@code{rotatef}  @i{@{@i{place}@}*} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
@@ -6358,7 +6385,7 @@
 ,
 @ref{defsetf}
 ,
-@ref{setf; psetf}
+@ref{setf}
 ,
 @ref{shiftf}
 ,
diff -uNr gcl-texi-orig/chap-6.texi gcl-texi/chap-6.texi
--- gcl-texi-orig/chap-6.texi	1994-07-16 18:03:17 +0400
+++ gcl-texi/chap-6.texi	2002-10-17 20:53:05 +0400
@@ -889,7 +889,7 @@
   subsequent iterations.  If @i{form2} is omitted, the construct
   uses @i{form1} on the second and
   subsequent iterations.  
-The @i{loop keywords} {=} and @t{then} serve as valid prepositions
+The @i{loop keywords} @r{=} and @t{then} serve as valid prepositions
 in this syntax. 
 This construct does not provide any termination tests.
 
@@ -981,12 +981,12 @@
 In effect 
 
 @t{being}
-@{{each} | @t{the}@}
-@{{hash-value}  |
+@{@t{each} | @t{the}@}
+@{@t{hash-value}  |
        @t{hash-values} |
        @t{hash-key}    |
        @t{hash-keys}@}
-@{{in} | @t{of}@}
+@{@t{in} | @t{of}@}
 
 is a compound preposition.
 
@@ -1059,14 +1059,14 @@
 In effect 
 
 @t{being}
-@{{each} | @t{the}@}
-@{{symbol}          |
+@{@t{each} | @t{the}@}
+@{@t{symbol}          |
        @t{symbols}         |
        @t{present-symbol}  |
        @t{present-symbols} |
        @t{external-symbol} |
        @t{external-symbols}@}
-@{{in} | @t{of}@}
+@{@t{in} | @t{of}@}
 
 is a compound preposition.
 
@@ -2099,15 +2099,15 @@
 @node do, dotimes, Iteration Dictionary, Iteration Dictionary
 @subsection do, do*                                                             [Macro]
 
-@code{do}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}init-form @r{[}step-form@r{]}@r{]}@r{)}@}{*}@r{)}
-	 	   	 @r{(}end-test-form @{@i{result-form}@}{*}@r{)}
-	 	   	 @{@i{declaration}@}{*} @{tag | statement@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
-
-@code{do*}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}init-form @r{[}step-form@r{]}@r{]}@r{)}@}{*}@r{)}
-	 	   	 @r{(}end-test-form {@{@i{result-form}@}{*}}@r{)}
-	 	   	 @{@i{declaration}@}{*} @{tag | statement@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{do}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}init-form @r{[}step-form@r{]}@r{]}@r{)}@}*@r{)}
+	 	   	 @r{(}end-test-form @{@i{result-form}@}*@r{)}
+	 	   	 @{@i{declaration}@}* @{tag | statement@}*}@*
+   @result{}  @i{@{@i{result}@}*}
+
+@code{do*}  @i{@r{(}@{@i{var} | @r{(}@i{var} @r{[}init-form @r{[}step-form@r{]}@r{]}@r{)}@}*@r{)}
+	 	   	 @r{(}end-test-form @r{@{@i{result-form}@}*}@r{)}
+	 	   	 @{@i{declaration}@}* @{tag | statement@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2337,7 +2337,7 @@
 @ref{return}
 , 
 
-@ref{let; let*}
+@ref{let}
 , and 
 @ref{setq}
 )
@@ -2377,9 +2377,9 @@
 @subsection dotimes                                                             [Macro]
 
 @code{dotimes}  @i{@r{(}var count-form @r{[}result-form@r{]}@r{)}
-		  @{@i{declaration}@}{*}
-		  @{tag | statement@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+		  @{@i{declaration}@}*
+		  @{tag | statement@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2481,7 +2481,7 @@
 
 @subsubheading  See Also::
 
-@ref{do; do*}
+@ref{do}
 , 
 @ref{dolist}
 , 
@@ -2496,9 +2496,9 @@
 @subsection dolist                                                              [Macro]
 
 @code{dolist}  @i{@r{(}var list-form @r{[}result-form@r{]}@r{)}
-		   @{@i{declaration}@}{*}
-	           @{tag | statement@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+		   @{@i{declaration}@}*
+	           @{tag | statement@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2569,7 +2569,7 @@
 
 @subsubheading  See Also::
 
-@ref{do; do*}
+@ref{do}
 ,
 @ref{dotimes}
 ,
@@ -2588,44 +2588,44 @@
 
 The ``simple'' @b{loop} @i{form}:
 
-@code{loop}  @i{@{@i{compound-form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{loop}  @i{@{@i{compound-form}@}*} @result{}  @i{@{@i{result}@}*}
 
 The ``extended'' @b{loop} @i{form}:
 
 @code{loop}  @i{@r{[}!@i{name-clause}@r{]}
-			@{!@i{variable-clause}@}{*}
-		        @{!@i{main-clause}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+			@{!@i{variable-clause}@}*
+		        @{!@i{main-clause}@}*} @result{}  @i{@{@i{result}@}*}
 
 @w{@i{name-clause} ::=@t{named} @i{name}}
 
 @w{@i{variable-clause} ::=!@i{with-clause} | !@i{initial-final} | !@i{for-as-clause}}
 
-@w{@i{with-clause} ::=@t{with} @i{var1} @r{[}@i{type-spec}@r{]} @r{[}= @i{form1}@r{]} @{{and} @i{var2} @r{[}@i{type-spec}@r{]} @r{[}= @i{form2}@r{]}@}{*}}
+@w{@i{with-clause} ::=@t{with} @i{var1} @r{[}@i{type-spec}@r{]} @r{[}= @i{form1}@r{]} @{@t{and} @i{var2} @r{[}@i{type-spec}@r{]} @r{[}= @i{form2}@r{]}@}*}
 
 @w{@i{main-clause} ::=!@i{unconditional} | !@i{accumulation} | !@i{conditional} | !@i{termination-test} | !@i{initial-final}}
 
 @w{@i{initial-final} ::=@t{initially} @{@i{compound-form}@}^+ | @t{finally} @{@i{compound-form}@}^+}
 
-@w{@i{unconditional} ::=@{{do} | @t{doing}@} @{@i{compound-form}@}^+ | @t{return} @{@i{form} | @t{it}@}}
+@w{@i{unconditional} ::=@{@t{do} | @t{doing}@} @{@i{compound-form}@}^+ | @t{return} @{@i{form} | @t{it}@}}
 
 @w{@i{accumulation} ::=!@i{list-accumulation} | !@i{numeric-accumulation}}
 
-@w{@i{list-accumulation} ::=@{{collect} | @t{collecting} | @t{append} | @t{appending} | @t{nconc} | @t{nconcing}@} @{@i{form} | @t{it}@} }
+@w{@i{list-accumulation} ::=@{@t{collect} | @t{collecting} | @t{append} | @t{appending} | @t{nconc} | @t{nconcing}@} @{@i{form} | @t{it}@} }
 @w{                      @r{[}@t{into} @i{simple-var}@r{]}}
 
-@w{@i{numeric-accumulation} ::=@{{count} | @t{counting} | @t{sum} | @t{summing} | @}
+@w{@i{numeric-accumulation} ::=@{@t{count} | @t{counting} | @t{sum} | @t{summing} | @}
 @w{                         @t{maximize} | @t{maximizing} | @t{minimize} | @t{minimizing}} @{@i{form} | @t{it}@} }
 @w{                         @r{[}@t{into} @i{simple-var}@r{]} @r{[}@i{type-spec}@r{]}}
 
-@w{@i{conditional} ::=@{{if} | @t{when} | @t{unless}@} @i{form} !@i{selectable-clause} @{{and} !@i{selectable-clause}@}{*} }
-@w{                @r{[}@t{else} !@i{selectable-clause} @{{and} !@i{selectable-clause}@}{*}@r{]} }
+@w{@i{conditional} ::=@{@t{if} | @t{when} | @t{unless}@} @i{form} !@i{selectable-clause} @{@t{and} !@i{selectable-clause}@}* }
+@w{                @r{[}@t{else} !@i{selectable-clause} @{@t{and} !@i{selectable-clause}@}*@r{]} }
 @w{                @r{[}@t{end}@r{]}}
 
 @w{@i{selectable-clause} ::=!@i{unconditional} | !@i{accumulation} | !@i{conditional}}
 
 @w{@i{termination-test} ::=@t{while} @i{form} | @t{until} @i{form} | @t{repeat} @i{form} | @t{always} @i{form} | @t{never} @i{form} | @t{thereis} @i{form}}
 
-@w{@i{for-as-clause} ::=@{{for} | @t{as}@} !@i{for-as-subclause} @{{and} !@i{for-as-subclause}@}{*}}
+@w{@i{for-as-clause} ::=@{@t{for} | @t{as}@} !@i{for-as-subclause} @{@t{and} !@i{for-as-subclause}@}*}
 
 @w{@i{for-as-subclause} ::=!@i{for-as-arithmetic} | !@i{for-as-in-list} | !@i{for-as-on-list} | !@i{for-as-equals-then} |}
 @w{                     !@i{for-as-across} | !@i{for-as-hash} | !@i{for-as-package}}
@@ -2634,11 +2634,11 @@
 
 @w{@i{for-as-arithmetic-subclause} ::=!@i{arithmetic-up} | !@i{arithmetic-downto} | !@i{arithmetic-downfrom}}
 
-@w{@i{arithmetic-up} ::=[[@{{from} | @t{upfrom}@} @i{form1} | @{{to} | @t{upto} | @t{below}@} @i{form2} | @t{by} @i{form3}]]^+}
+@w{@i{arithmetic-up} ::=[[@{@t{from} | @t{upfrom}@} @i{form1} | @{@t{to} | @t{upto} | @t{below}@} @i{form2} | @t{by} @i{form3}]]^+}
 
-@w{@i{arithmetic-downto} ::=[[@{{from} @i{form1}@}^1 | @{@{{downto} | @t{above}@} @i{form2}@}^1 | @t{by} @i{form3}]]}
+@w{@i{arithmetic-downto} ::=[[@{@t{from} @i{form1}@}^1 | @{@{@t{downto} | @t{above}@} @i{form2}@}^1 | @t{by} @i{form3}]]}
 
-@w{@i{arithmetic-downfrom} ::=[[@{{downfrom} @i{form1}@}^1 | @{{to} | @t{downto} | @t{above}@} @i{form2} | @t{by} @i{form3}]]}
+@w{@i{arithmetic-downfrom} ::=[[@{@t{downfrom} @i{form1}@}^1 | @{@t{to} | @t{downto} | @t{above}@} @i{form2} | @t{by} @i{form3}]]}
 
 @w{@i{for-as-in-list} ::=@i{var} @r{[}@i{type-spec}@r{]} @t{in} @i{form1} @r{[}@t{by} @i{step-fun}@r{]}}
 
@@ -2648,17 +2648,17 @@
 
 @w{@i{for-as-across} ::=@i{var} @r{[}@i{type-spec}@r{]} @t{across} @i{vector}}
 
-@w{@i{for-as-hash} ::=@i{var} @r{[}@i{type-spec}@r{]} @t{being} @{{each} | @t{the}@} }
-@w{                @{@{{hash-key} | @t{hash-keys}@} @{{in} | @t{of}@} @i{hash-table} }
+@w{@i{for-as-hash} ::=@i{var} @r{[}@i{type-spec}@r{]} @t{being} @{@t{each} | @t{the}@} }
+@w{                @{@{@t{hash-key} | @t{hash-keys}@} @{@t{in} | @t{of}@} @i{hash-table} }
 @w{                @r{[}@t{using} @r{(}@t{hash-value} @i{other-var}@r{)}@r{]} | }
-@w{                @{{hash-value} | @t{hash-values}@} @{{in} | @t{of}@} @i{hash-table} }
+@w{                @{@t{hash-value} | @t{hash-values}@} @{@t{in} | @t{of}@} @i{hash-table} }
 @w{                @r{[}@t{using} @r{(}@t{hash-key} @i{other-var}@r{)}@r{]}@}}
 
-@w{@i{for-as-package} ::=@i{var} @r{[}@i{type-spec}@r{]} @t{being} @{{each} | @t{the}@} }
-@w{                   @{{symbol} | @t{symbols} |}
+@w{@i{for-as-package} ::=@i{var} @r{[}@i{type-spec}@r{]} @t{being} @{@t{each} | @t{the}@} }
+@w{                   @{@t{symbol} | @t{symbols} |}
 @w{                   @t{present-symbol} | @t{present-symbols} |}
 @w{                   @t{external-symbol} | @t{external-symbols}@} }
-@w{                   @r{[}@{{in} | @t{of}@} @i{package}@r{]}}
+@w{                   @r{[}@{@t{in} | @t{of}@} @i{package}@r{]}}
 
 @w{@i{type-spec} ::=!@i{simple-type-spec} | !@i{destructured-type-spec}}
 
@@ -2718,11 +2718,11 @@
            (format t "~&The square root of ~D is ~D.~
 @result{}  SQRT-ADVISOR
  (sqrt-advisor)
-@t{ |> } Number: @b{|>>}@t{5{@i{[<--}~]}}@b{<<|}
+@t{ |> } Number: @b{|>>}@t{5 @t{@i{[<--}~]}}@b{<<|}
 @t{ |> } The square root of 5 is 2.236068.
-@t{ |> } Number: @b{|>>}@t{4{@i{[<--}~]}}@b{<<|}
+@t{ |> } Number: @b{|>>}@t{4 @t{@i{[<--}~]}}@b{<<|}
 @t{ |> } The square root of 4 is 2.
-@t{ |> } Number: @b{|>>}@t{done{@i{[<--}~]}}@b{<<|}
+@t{ |> } Number: @b{|>>}@t{done @t{@i{[<--}~]}}@b{<<|}
 @result{}  NIL
 
 ;; An example of the extended form of LOOP.
@@ -2733,11 +2733,11 @@
          do (format t "~&The square of ~D is ~D.~
 @result{}  SQUARE-ADVISOR
  (square-advisor)
-@t{ |> } Number: @b{|>>}@t{4{@i{[<--}~]}}@b{<<|}
+@t{ |> } Number: @b{|>>}@t{4 @t{@i{[<--}~]}}@b{<<|}
 @t{ |> } The square of 4 is 16.
-@t{ |> } Number: @b{|>>}@t{23{@i{[<--}~]}}@b{<<|}
+@t{ |> } Number: @b{|>>}@t{23 @t{@i{[<--}~]}}@b{<<|}
 @t{ |> } The square of 23 is 529.
-@t{ |> } Number: @b{|>>}@t{done{@i{[<--}~]}}@b{<<|}
+@t{ |> } Number: @b{|>>}@t{done @t{@i{[<--}~]}}@b{<<|}
 @result{}  NIL
 
 ;; Another example of the extended form of LOOP.
@@ -2749,7 +2749,7 @@
 
 @subsubheading  See Also::
 
-@ref{do; do*}
+@ref{do}
 , 
 @ref{dolist}
 , 
@@ -2770,7 +2770,7 @@
 in the following way:
 
 @example
- (loop @{@i{compound-form}@}{*}) @equiv{} (loop do @{@i{compound-form}@}{*})
+ (loop @{@i{compound-form}@}*) @equiv{} (loop do @{@i{compound-form}@}*)
 @end example
 
 @node loop-finish,  , loop, Iteration Dictionary
diff -uNr gcl-texi-orig/chap-7.texi gcl-texi/chap-7.texi
--- gcl-texi-orig/chap-7.texi	1994-07-16 18:03:16 +0400
+++ gcl-texi/chap-7.texi	2002-10-17 20:53:05 +0400
@@ -187,7 +187,7 @@
 @i{lambda list} becomes an initialization argument for all @i{classes} 
 for which the @i{method} is applicable.
 
-The presence of {&allow-other-keys} in the
+The presence of @t{&allow-other-keys} in the
 @i{lambda list} of an applicable method disables validity checking of 
 initialization arguments.
 
@@ -388,9 +388,10 @@
 
 @center 
 @example
+@format
 @group
 @noindent
-@w{ {}                           Defaulted                    {}                 }
+@w{ @t{}                           Defaulted                    @t{}                 }
 @w{ Form                         Initialization Argument List Contents of Slot X }
 @w{ _____________________________________________________________________________}
 @w{ @t{(make-instance 'r)}           @t{(a 1 b 2)}                    @t{1}                  }
@@ -398,6 +399,7 @@
 @w{ @t{(make-instance 'r 'b 4)}      @t{(b 4 a 1)}                    @t{4}                  }
 @w{ @t{(make-instance 'r 'a 1 'a 2)} @t{(a 1 a 2 b 2)}                @t{1}                  }
 @end group
+@end format
 
 @end example
 
@@ -607,10 +609,10 @@
 @c including concept-change-class
 
 The @i{function} @b{change-class} can be used to change the @i{class} 
-of an @i{instance} from its current class, C_@{{from}@},
-to a different class, C_@{{to}@}; it changes the
+of an @i{instance} from its current class, C_@{@r{from}@},
+to a different class, C_@{@r{to}@}; it changes the
 structure of the @i{instance} to conform to the definition of the class
-C_@{{to}@}.
+C_@{@r{to}@}.
 
 Note that changing the @i{class} of an @i{instance} may cause
 @i{slots} to be added or deleted.  Changing the @i{class} of an
@@ -634,14 +636,14 @@
 @node Modifying the Structure of the Instance, Initializing Newly Added Local Slots (Changing the Class of an Instance), Changing the Class of an Instance, Changing the Class of an Instance
 @subsection Modifying the Structure of the Instance
 
-In order to make the @i{instance} conform to the class C_@{{to}@}, @i{local slots} specified by the class C_@{{to}@} that are not specified by the class C_@{{from}@} are added, and @i{local slots} not specified by
-the class C_@{{to}@} that are specified by the
-class C_@{{from}@} are discarded.
+In order to make the @i{instance} conform to the class C_@{@r{to}@}, @i{local slots} specified by the class C_@{@r{to}@} that are not specified by the class C_@{@r{from}@} are added, and @i{local slots} not specified by
+the class C_@{@r{to}@} that are specified by the
+class C_@{@r{from}@} are discarded.
 
-The values of @i{local slots} specified by both the class C_@{{to}@} and the class C_@{{from}@} are retained. If such a @i{local slot} was unbound, it remains
+The values of @i{local slots} specified by both the class C_@{@r{to}@} and the class C_@{@r{from}@} are retained. If such a @i{local slot} was unbound, it remains
 unbound.
 
-The values of @i{slots} specified as shared in the class C_@{{from}@} and as local in the class C_@{{to}@} are retained.
+The values of @i{slots} specified as shared in the class C_@{@r{from}@} and as local in the class C_@{@r{to}@} are retained.
 
 This first step of the update does not affect the values of any 
 @i{shared slots}.
@@ -659,10 +661,10 @@
 The generic function @b{update-instance-for-different-class} is
 invoked on arguments computed by @b{change-class}.
 The first argument passed is a copy of the @i{instance} being updated 
-and is an @i{instance} of the class C_@{{from}@}; 
+and is an @i{instance} of the class C_@{@r{from}@}; 
 this copy has @i{dynamic extent} within the generic function @b{change-class}.  
 The second argument is the @i{instance} as updated so far by @b{change-class}
-and is an @i{instance} of the class C_@{{to}@}.
+and is an @i{instance} of the class C_@{@r{to}@}.
 The remaining arguments are an @i{initialization argument list}.
 
 There is a system-supplied primary @i{method} for 
@@ -1156,6 +1158,7 @@
 their associated @i{forms} are called @i{method-defining forms}.
 The @i{standardized} @i{method-defining operators} are listed in Figure 7--2.
 
+@format
 @group
 @noindent
 @w{  defgeneric        defmethod  defclass  }
@@ -1165,6 +1168,7 @@
 @w{  Figure 7--2: Standardized Method-Defining Operators}
 
 @end group
+@end format
 
 Note that of the @i{standardized} @i{method-defining operators}
 only @b{defgeneric}
@@ -1507,14 +1511,14 @@
 @table @asis
 
 @item 1.  
-{Select the applicable methods.}
+@r{Select the applicable methods.}
 
 @item 2.  
-{Sort the applicable methods by precedence order, putting
+@r{Sort the applicable methods by precedence order, putting
 the most specific method first.}
 
 @item 3.  
-{Apply method combination to the sorted list of
+@r{Apply method combination to the sorted list of
 applicable methods, producing the effective method.}
 
 @end table
@@ -1773,6 +1777,7 @@
 
 @IRindex{standard}
 
+@format
 @group
 @noindent
 @w{  +    append  max  nconc  progn     }
@@ -1782,6 +1787,7 @@
 @w{  Figure 7--3: Built-in Method Combination Types}
 
 @end group
+@end format
 
 The semantics of the @b{standard} built-in method combination type is
 described in @ref{Standard Method Combination}.  The other
@@ -1999,7 +2005,7 @@
 @node ensure-generic-function, allocate-instance, function-keywords, Objects Dictionary
 @subsection ensure-generic-function                                          [Function]
 
-@code{ensure-generic-function}  @i{function-name {&key}
+@code{ensure-generic-function}  @i{function-name @r{&key}
 			 argument-precedence-order declare
                                documentation environment
                                generic-function-class lambda-list
@@ -2106,13 +2112,13 @@
 
 @subsubheading  Syntax::
 
-@code{allocate-instance}  @i{class {&rest} initargs {&key} {&allow-other-keys}} @result{}  @i{new-instance}
+@code{allocate-instance}  @i{class @r{&rest} initargs @r{&key} @r{&allow-other-keys}} @result{}  @i{new-instance}
 
 @subsubheading  Method Signatures::
 
-@code{allocate-instance}  @i{@r{(}@i{class} @b{standard-class}@r{)} {&rest} initargs}
+@code{allocate-instance}  @i{@r{(}@i{class} @b{standard-class}@r{)} @r{&rest} initargs}
 
-@code{allocate-instance}  @i{@r{(}@i{class} @b{structure-class}@r{)} {&rest} initargs}
+@code{allocate-instance}  @i{@r{(}@i{class} @b{structure-class}@r{)} @r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
@@ -2159,11 +2165,11 @@
 
 @subsubheading  Syntax::
 
-@code{reinitialize-instance}  @i{instance {&rest} initargs {&key} {&allow-other-keys}} @result{}  @i{instance}
+@code{reinitialize-instance}  @i{instance @r{&rest} initargs @r{&key} @r{&allow-other-keys}} @result{}  @i{instance}
 
 @subsubheading  Method Signatures::
 
-@code{reinitialize-instance}  @i{@r{(}@i{instance} @b{standard-object}@r{)} {&rest} initargs}
+@code{reinitialize-instance}  @i{@r{(}@i{instance} @b{standard-object}@r{)} @r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
@@ -2232,11 +2238,11 @@
 
 @subsubheading  Syntax::
 
-@code{shared-initialize}  @i{instance slot-names {&rest} initargs {&key} {&allow-other-keys}} @result{}  @i{instance}
+@code{shared-initialize}  @i{instance slot-names @r{&rest} initargs @r{&key} @r{&allow-other-keys}} @result{}  @i{instance}
 
 @subsubheading  Method Signatures::
 
-@code{shared-initialize}  @i{@r{(}@i{instance} @b{standard-object}@r{)} slot-names {&rest} initargs}
+@code{shared-initialize}  @i{@r{(}@i{instance} @b{standard-object}@r{)} slot-names @r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
@@ -2356,14 +2362,14 @@
 @subsubheading  Syntax::
 
 @code{update-instance-for-different-class}  @i{previous current 
-		   {&rest} initargs
-		   {&key} {&allow-other-keys}} @result{}  @i{@i{implementation-dependent}}
+		   @r{&rest} initargs
+		   @r{&key} @r{&allow-other-keys}} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Method Signatures::
 
 @code{update-instance-for-different-class}  @i{@r{(}@i{previous} @b{standard-object}@r{)}
 	        @r{(}@i{current} @b{standard-object}@r{)}
-	        {&rest} initargs}
+	        @r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
@@ -2462,15 +2468,15 @@
 @code{update-instance-for-redefined-class}  @i{instance
                                 added-slots discarded-slots
                                 property-list
-                                {&rest} initargs {&key} {&allow-other-keys}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+                                @r{&rest} initargs @r{&key} @r{&allow-other-keys}}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Method Signatures::
 
 @code{update-instance-for-redefined-class}  @i{@r{(}@i{instance} @b{standard-object}@r{)}
 		added-slots discarded-slots
 		property-list
-		{&rest} initargs}
+		@r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
@@ -2610,17 +2616,17 @@
 
 @subsubheading  Syntax::
 
-@code{change-class}  @i{instance new-class {&key} {&allow-other-keys}} @result{}  @i{instance}
+@code{change-class}  @i{instance new-class @r{&key} @r{&allow-other-keys}} @result{}  @i{instance}
 
 @subsubheading  Method Signatures::
 
 @code{change-class}  @i{@r{(}@i{instance} @b{standard-object}@r{)}
 			 @r{(}@i{new-class} @b{standard-class}@r{)}
-			 {&rest} initargs}
+			 @r{&rest} initargs}
 
 @code{change-class}  @i{@r{(}@i{instance} @b{t}@r{)}
 		         @r{(}@i{new-class} @b{symbol}@r{)}
-			 {&rest} initargs}
+			 @r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
@@ -2651,7 +2657,7 @@
 generic function @b{update-instance-for-different-class} can be used
 to assign values to slots in the transformed instance.
 
-See @ref{Initializing Newly Added Local Slots}.
+See @ref{Initializing Newly Added Local Slots (Changing the Class of an Instance)}.
 
 If the second of the above @i{methods} is selected, 
 that @i{method} invokes @b{change-class} 
@@ -2868,13 +2874,13 @@
 
 @subsubheading  Syntax::
 
-@code{slot-missing}  @i{class object slot-name operation {&optional} new-value} @result{}  @i{@{@i{result}@}{*}}
+@code{slot-missing}  @i{class object slot-name operation @r{&optional} new-value} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Method Signatures::
 
 @code{slot-missing}  @i{@r{(}@i{class} @b{t}@r{)}
 				   object slot-name
-			     operation {&optional} new-value}
+			     operation @r{&optional} new-value}
 
 @subsubheading  Arguments and Values::
 
@@ -2961,7 +2967,7 @@
 
 @subsubheading  Syntax::
 
-@code{slot-unbound}  @i{class instance slot-name} @result{}  @i{@{@i{result}@}{*}}
+@code{slot-unbound}  @i{class instance slot-name} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Method Signatures::
 
@@ -3153,12 +3159,12 @@
 
 @subsubheading  Syntax::
 
-@code{no-applicable-method}  @i{generic-function {&rest} function-arguments} @result{}  @i{@{@i{result}@}{*}}
+@code{no-applicable-method}  @i{generic-function @r{&rest} function-arguments} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Method Signatures::
 
 @code{no-applicable-method}  @i{@r{(}@i{generic-function} @b{t}@r{)}
-				     {&rest} function-arguments}
+				     @r{&rest} function-arguments}
 
 @subsubheading  Arguments and Values::
 
@@ -3191,13 +3197,13 @@
 
 @subsubheading  Syntax::
 
-@code{no-next-method}  @i{generic-function method {&rest} args} @result{}  @i{@{@i{result}@}{*}}
+@code{no-next-method}  @i{generic-function method @r{&rest} args} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Method Signatures::
 
 @code{no-next-method}  @i{@r{(}@i{generic-function} @b{standard-generic-function}@r{)}
 			       @r{(}@i{method} @b{standard-method}@r{)}
-			       {&rest} args}
+			       @r{&rest} args}
 
 @subsubheading  Arguments and Values::
 
@@ -3263,13 +3269,13 @@
 
 @subsubheading  Syntax::
 
-@code{make-instance}  @i{class {&rest} initargs {&key} {&allow-other-keys}} @result{}  @i{instance}
+@code{make-instance}  @i{class @r{&rest} initargs @r{&key} @r{&allow-other-keys}} @result{}  @i{instance}
 
 @subsubheading  Method Signatures::
 
-@code{make-instance}  @i{@r{(}@i{class} @b{standard-class}@r{)} {&rest} initargs}
+@code{make-instance}  @i{@r{(}@i{class} @b{standard-class}@r{)} @r{&rest} initargs}
 
-@code{make-instance}  @i{@r{(}@i{class} @b{symbol}@r{)} {&rest} initargs}
+@code{make-instance}  @i{@r{(}@i{class} @b{symbol}@r{)} @r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
@@ -3359,17 +3365,17 @@
 
 @subsubheading  Syntax::
 
-@code{make-load-form}  @i{object {&optional} environment} @result{}  @i{creation-form@r{[}, initialization-form@r{]}}
+@code{make-load-form}  @i{object @r{&optional} environment} @result{}  @i{creation-form @r{[}, initialization-form @r{]}}
 
 @subsubheading  Method Signatures::
 
-@code{make-load-form}  @i{@r{(}@i{object} @b{standard-object}@r{)}  {&optional} environment}
+@code{make-load-form}  @i{@r{(}@i{object} @b{standard-object}@r{)}  @r{&optional} environment}
 
-@code{make-load-form}  @i{@r{(}@i{object} @b{structure-object}@r{)} {&optional} environment}
+@code{make-load-form}  @i{@r{(}@i{object} @b{structure-object}@r{)} @r{&optional} environment}
 
-@code{make-load-form}  @i{@r{(}@i{object} @b{condition}@r{)}        {&optional} environment}
+@code{make-load-form}  @i{@r{(}@i{object} @b{condition}@r{)}        @r{&optional} environment}
 
-@code{make-load-form}  @i{@r{(}@i{object} @b{class}@r{)}            {&optional} environment}
+@code{make-load-form}  @i{@r{(}@i{object} @b{class}@r{)}            @r{&optional} environment}
 
 @subsubheading  Arguments and Values::
 
@@ -3643,7 +3649,7 @@
 @node make-load-form-saving-slots, with-accessors, make-load-form, Objects Dictionary
 @subsection make-load-form-saving-slots                                      [Function]
 
-@code{make-load-form-saving-slots}  @i{object {&key} slot-names environment}@*
+@code{make-load-form-saving-slots}  @i{object @r{&key} slot-names environment}@*
    @result{}  @i{creation-form, initialization-form}
 
 @subsubheading  Arguments and Values::
@@ -3687,7 +3693,7 @@
 ,
 @ref{make-instance}
 ,
-@ref{setf; psetf}
+@ref{setf}
 ,
 @ref{slot-value}
 ,
@@ -3708,12 +3714,12 @@
 @node with-accessors, with-slots, make-load-form-saving-slots, Objects Dictionary
 @subsection with-accessors                                                      [Macro]
 
-@code{with-accessors}  @i{{@r{(}@{@i{slot-entry}@}{*}@r{)}} 
+@code{with-accessors}  @i{@r{@r{(}@{@i{slot-entry}@}*@r{)}} 
 		   instance-form
- 		   @{@i{declaration}@}{*} @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+ 		   @{@i{declaration}@}* @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
-@w{@i{slot-entry} ::=@r{(}variable-name accessor-name@r{)}}
+@w{@i{slot-entry} ::=@r{(}variable-name accessor-name @r{)}}
 
 @subsubheading  Arguments and Values::
 
@@ -3794,7 +3800,7 @@
 @center 
 @example
 
-@w{@t{(with-accessors} ({slot-entry}_1 ...{slot-entry}_n) @i{instance-form} {form}_1 ...{form}_k)}@*
+@w{@t{(with-accessors} (@r{slot-entry}_1 ...@r{slot-entry}_n) @i{instance-form} @r{form}_1 ...@r{form}_k)}@*
 @end example
 
 @noindent
@@ -3804,26 +3810,26 @@
 @example
 
 @w{@t{(}@t{let ((}in @i{instance-form}@t{))}}@*
-@w{ @t{(symbol-macrolet (}{Q}_1... {Q}_n@t{)} {form}_1 ...{form}_k@t{))}}@*
+@w{ @t{(symbol-macrolet (}@r{Q}_1... @r{Q}_n@t{)} @r{form}_1 ...@r{form}_k@t{))}}@*
 @end example
 
 @noindent
-where {Q}_i is 
+where @r{Q}_i is 
 
-@center {
+@center
 @example
-@t{(}{variable-name}_i () 
-@t{({accessor-name}_i in))}
+@t{(}@r{variable-name}_i () 
+@t{(@r{accessor-name}_i in))}
 @end example
-}
+
 
 @node with-slots, defclass, with-accessors, Objects Dictionary
 @subsection with-slots                                                          [Macro]
 
-@code{with-slots}  @i{@r{(}@{@i{slot-entry}@}{*}@r{)}
+@code{with-slots}  @i{@r{(}@{@i{slot-entry}@}*@r{)}
 		          instance-form 
-                          @{@i{declaration}@}{*} @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+                          @{@i{declaration}@}* @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @w{@i{slot-entry} ::=slot-name | @r{(}variable-name slot-name@r{)}}
 
@@ -3916,7 +3922,7 @@
 @center 
 @example
 
-@w{@t{(with-slots} ({slot-entry}_1 ...{slot-entry}_n) @i{instance-form} {form}_1 ...{form}_k)}@*
+@w{@t{(with-slots} (@r{slot-entry}_1 ...@r{slot-entry}_n) @i{instance-form} @r{form}_1 ...@r{form}_k)}@*
 @end example
 
 @noindent
@@ -3926,44 +3932,44 @@
 @example
 
 @w{@t{(}@t{let ((}in @i{instance-form}@t{))}}@*
-@w{ @t{(symbol-macrolet (}{Q}_1... {Q}_n@t{)} {form}_1 ...{form}_k@t{))}}@*
+@w{ @t{(symbol-macrolet (}@r{Q}_1... @r{Q}_n@t{)} @r{form}_1 ...@r{form}_k@t{))}}@*
 @end example
 
 @noindent
-where {Q}_i is 
+where @r{Q}_i is 
 
 @center 
 @example
-@t{(}{slot-entry}_i () 
-@t{(slot-value }in '{slot-entry}_i@t{))}
+@t{(}@r{slot-entry}_i () 
+@t{(slot-value }in '@r{slot-entry}_i@t{))}
 @end example
 
 @noindent
-if {slot-entry}_i is a @i{symbol}
+if @r{slot-entry}_i is a @i{symbol}
 and is
 
-@center {
+@center 
 @example
-@t{(}{variable-name}_i () 
-@t{(slot-value }in '{slot-name}_i@t{))}
+@t{(}@r{variable-name}_i () 
+@t{(slot-value }in '@r{slot-name}_i@t{))}
 @end example
-}
+
 
 @noindent
-if {slot-entry}_i
+if @r{slot-entry}_i
 is of the form 
 
 @center 
 @example
-@t{(}{variable-name}_i 
-{slot-name}_i@t{)}
+@t{(}@r{variable-name}_i 
+@r{slot-name}_i@t{)}
 @end example
 
 @node defclass, defgeneric, with-slots, Objects Dictionary
 @subsection defclass                                                            [Macro]
 
-@code{defclass}  @i{@i{class-name} @r{(}@{@i{superclass-name}@}{*}@r{)}
-@r{(}@{{@i{slot-specifier}}@}{*}@r{)}
+@code{defclass}  @i{@i{class-name} @r{(}@{@i{superclass-name}@}*@r{)}
+@r{(}@{@i{slot-specifier}@}*@r{)}
  [[!@i{class-option}]]}@*
    @result{}  @i{new-class}
 
@@ -3971,14 +3977,14 @@
 
 @w{ @i{slot-name}::= @i{symbol}}@*
 
-@w{ slot-option::=@{{:reader} @i{reader-function-name}@}{*} |}@*
-@w{                         @{{:writer} @i{writer-function-name}@}{*} |}@*
-@w{                         @{{:accessor} @i{reader-function-name}@}{*} |}@*
-@w{                         @{{:allocation} @i{allocation-type}@} |}@*
-@w{                         @{{:initarg} @i{initarg-name}@}{*} |}@*
-@w{                         @{{:initform} @i{form}@} |}@*
-@w{                         @{{:type} @i{type-specifier}@} |}@*
-@w{                         @{{:documentation} @i{string}@}}@*
+@w{ slot-option::=@{@t{:reader} @i{reader-function-name}@}* |}@*
+@w{                         @{@t{:writer} @i{writer-function-name}@}* |}@*
+@w{                         @{@t{:accessor} @i{reader-function-name}@}* |}@*
+@w{                         @{@t{:allocation} @i{allocation-type}@} |}@*
+@w{                         @{@t{:initarg} @i{initarg-name}@}* |}@*
+@w{                         @{@t{:initform} @i{form}@} |}@*
+@w{                         @{@t{:type} @i{type-specifier}@} |}@*
+@w{                         @{@t{:documentation} @i{string}@}}@*
 
 @w{ @i{function-name}::= @{@i{symbol} | @t{(setf @i{symbol})}@}}@*
 
@@ -4283,7 +4289,7 @@
 
 @subsubheading  See Also::
 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Initialize-Instance}
 ,
@@ -4301,17 +4307,17 @@
 @subsection defgeneric                                                          [Macro]
 
 @code{defgeneric}  @i{function-name gf-lambda-list
-	  		  [[!@i{option} | @{!@i{method-description}@}{*}]]}@*
+	  		  [[!@i{option} | @{!@i{method-description}@}*]]}@*
    @result{}  @i{new-generic}
 
 @w{@i{option} ::=@r{(}@t{:argument-precedence-order} @{@i{parameter-name}@}^+@r{)} |}
 @w{           @r{(}@b{declare} @{@i{gf-declaration}@}^+@r{)} |}
 @w{           @r{(}@t{:documentation} @i{gf-documentation}@r{)} |}
-@w{           @r{(}@t{:method-combination} @i{method-combination} @{@i{method-combination-argument}@}{*}@r{)} |}
+@w{           @r{(}@t{:method-combination} @i{method-combination} @{@i{method-combination-argument}@}*@r{)} |}
 @w{           @r{(}@t{:generic-function-class} @i{generic-function-class}@r{)} |}
 @w{           @r{(}@t{:method-class} @i{method-class}@r{)}}
 
-@w{@i{method-description} ::=@r{(}@t{:method} @{@i{method-qualifier}@}{*} @i{specialized-lambda-list} {[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}@r{)}}
+@w{@i{method-description} ::=@r{(}@t{:method} @{@i{method-qualifier}@}* @i{specialized-lambda-list} @r{[[@{@i{declaration}@}* | @i{documentation}]]} @{@i{form}@}*@r{)}}
 
 @subsubheading  Arguments and Values::
 
@@ -4560,7 +4566,7 @@
 
 @ref{defmethod}
 ,
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{ensure-generic-function}
 ,
@@ -4573,9 +4579,9 @@
 @subsection defmethod                                                           [Macro]
 
 @code{defmethod}  @i{@i{function-name}
-				      @{{@i{method-qualifier}}@}{*}
+				      @{@i{method-qualifier}@}*
 				      @i{specialized-lambda-list}
-				{[[@{@i{declaration}@}{*} | @i{documentation}]]} @{@i{form}@}{*}}@*
+				@r{[[@{@i{declaration}@}* | @i{documentation}]]} @{@i{form}@}*}@*
    @result{}  @i{new-method}
 
 @i{function-name}::= @{@i{symbol} 
@@ -4583,12 +4589,12 @@
 
 @i{method-qualifier}::= @i{non-list}
 
-@w{ @i{specialized-lambda-list}::= (@{@i{var} | @r{(}{@i{var} @i{parameter-specializer-name}}@r{)}@}{*}}@*
-@w{                             @t{[}{&optional} @{@i{var} | @r{(}var @t{[}@i{initform} {@r{[}@i{supplied-p-parameter}@r{]}} @t{]}@r{)}@}{*}@t{]}}@*
+@w{ @i{specialized-lambda-list}::= (@{@i{var} | @r{(}@r{@i{var} @i{parameter-specializer-name}}@r{)}@}*}@*
+@w{                             @t{[}@r{&optional} @{@i{var} | @r{(}var @t{[}@i{initform} @r{@r{[}@i{supplied-p-parameter}@r{]}} @t{]}@r{)}@}*@t{]}}@*
 @w{                             @t{[}@t{&rest} @i{var}@t{]}}@*
-@w{                             @t{{[}}{{&key}{}}@{@i{var} | @r{(}@{@i{var} | @r{(}@i{keyword}@i{var}@r{)}@} @t{[}@i{initform} @r{[}@i{supplied-p-parameter}@r{]} @t{]}@r{)}@}{*}}@*
-@w{                                          @r{[}@b{&allow-other-keys}@r{]} @t{{]}}}@*
-@w{                             @t{[}@t{&aux} @{@i{var} | @r{(}@i{var} @r{[}@i{initform}@r{]} @r{)}@}{*}@t{]} @r{)}}@*
+@w{                             @t{[}@r{@r{&key}}@{@i{var} | @r{(}@{@i{var} | @r{(}@i{keyword}@i{var}@r{)}@} @t{[}@i{initform} @r{[}@i{supplied-p-parameter}@r{]} @t{]}@r{)}@}*}@*
+@w{                                          @r{[}@b{&allow-other-keys}@r{]} @t{]}}@*
+@w{                             @t{[}@t{&aux} @{@i{var} | @r{(}@i{var} @r{[}@i{initform}@r{]} @r{)}@}*@t{]} @r{)}}@*
 
 @w{ @i{parameter-specializer-name}::= @i{symbol} | @r{(}@t{eql} @i{eql-specializer-form}@r{)}}@*
 
@@ -4747,7 +4753,7 @@
 
 @ref{defgeneric}
 , 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{Introduction to Methods},
 @ref{Congruent Lambda-lists for all Methods of a Generic Function},
@@ -4757,9 +4763,9 @@
 @node find-class, next-method-p, defmethod, Objects Dictionary
 @subsection find-class                                                       [Accessor]
 
-@code{find-class}  @i{symbol {&optional} errorp environment} @result{}  @i{class}
+@code{find-class}  @i{symbol @r{&optional} errorp environment} @result{}  @i{class}
 
-(setf (@code{         find-class} @i{symbol {&optional} errorp environment}) new-class)@*
+(setf (@code{         find-class} @i{symbol @r{&optional} errorp environment}) new-class)@*
 
 @subsubheading  Arguments and Values::
 
@@ -4857,14 +4863,14 @@
 ,
 @ref{defmethod}
 ,
-@ref{call-method; make-method}
+@ref{call-method}
 
 @node call-method, call-next-method, next-method-p, Objects Dictionary
 @subsection call-method, make-method                                      [Local Macro]
 
 @subsubheading  Syntax::
 
-@code{call-method}  @i{method {&optional} next-method-list} @result{}  @i{@{@i{result}@}{*}}
+@code{call-method}  @i{method @r{&optional} next-method-list} @result{}  @i{@{@i{result}@}*}
 
 @code{make-method}  @i{form} @result{}  @i{method-object}
 
@@ -4935,7 +4941,7 @@
 @b{call-next-method} function available to
 @i{method} signals an error of @i{type} @b{control-error}
 and the @b{next-method-p} function
-available to @i{method} returns {@b{nil}}.
+available to @i{method} returns @b{nil}.
 
 @subsubheading  Examples::
 
@@ -4952,7 +4958,7 @@
 
 @subsubheading  Syntax::
 
-@code{call-next-method}  @i{{&rest} args} @result{}  @i{@{@i{result}@}{*}}
+@code{call-next-method}  @i{@r{&rest} args} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -5034,7 +5040,7 @@
 ,
 @ref{no-next-method}
 ,
-@ref{call-method; make-method}
+@ref{call-method}
 ,
 @ref{Method Selection and Combination},
 @ref{Standard Method Combination},
@@ -5083,12 +5089,12 @@
    @result{}  @i{name}
 
 @code{define-method-combination}  @i{name lambda-list
-                                @r{(}@{@i{method-group-specifier}@}{*}@r{)}
+                                @r{(}@{@i{method-group-specifier}@}*@r{)}
                                 @r{[}@r{(}@t{:arguments} . args-lambda-list@r{)}@r{]}
                                 @r{[}@r{(}@t{:generic-function} 
                                                    generic-function-symbol@r{)}@r{]}
-                                [[@{@i{declaration}@}{*} | @i{documentation}]]
-                                @{@i{form}@}{*}}@*
+                                [[@{@i{declaration}@}* | @i{documentation}]]
+                                @{@i{form}@}*}@*
    @result{}  @i{name}
 
 @w{@i{short-form-option} ::=@t{:documentation} @i{documentation} | }
@@ -5159,7 +5165,7 @@
 when the second @i{subform} is a @i{non-nil} symbol or is not present.
 When the short form is used, @i{name} is defined as a type of
 method combination that produces a Lisp form
-@t{({@i{operator} @i{method-call} @i{method-call} ...})}.
+@t{(@r{@i{operator} @i{method-call} @i{method-call} ...})}.
 The @i{operator} is a @i{symbol} that can be the @i{name} of a 
 @i{function}, @i{macro}, or @i{special operator}.  
 The @i{operator} can be supplied by a keyword option;
@@ -5620,11 +5626,11 @@
 
 @subsubheading  See Also:: 
 
-@ref{call-method; make-method}
+@ref{call-method}
 ,
 @ref{call-next-method}
 ,
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{method-qualifiers}
 ,
@@ -5651,13 +5657,13 @@
 
 @subsubheading  Syntax::
 
-@code{find-method}  @i{generic-function method-qualifiers specializers {&optional} errorp}@*
+@code{find-method}  @i{generic-function method-qualifiers specializers @r{&optional} errorp}@*
    @result{}  @i{method}
 
 @subsubheading  Method Signatures::
 
 @code{find-method}  @i{@r{(}@i{generic-function} @b{standard-generic-function}@r{)}
-		method-qualifiers specializers {&optional} errorp}
+		method-qualifiers specializers @r{&optional} errorp}
 
 @subsubheading  Arguments and Values::
 
@@ -5783,11 +5789,11 @@
 
 @subsubheading  Syntax::
 
-@code{initialize-instance}  @i{instance {&rest} initargs {&key} {&allow-other-keys}} @result{}  @i{instance}
+@code{initialize-instance}  @i{instance @r{&rest} initargs @r{&key} @r{&allow-other-keys}} @result{}  @i{instance}
 
 @subsubheading  Method Signatures::
 
-@code{initialize-instance}  @i{@r{(}@i{instance} @b{standard-object}@r{)} {&rest} initargs}
+@code{initialize-instance}  @i{@r{(}@i{instance} @b{standard-object}@r{)} @r{&rest} initargs}
 
 @subsubheading  Arguments and Values::
 
diff -uNr gcl-texi-orig/chap-8.texi gcl-texi/chap-8.texi
--- gcl-texi-orig/chap-8.texi	1994-07-16 18:03:14 +0400
+++ gcl-texi/chap-8.texi	2002-10-17 20:53:05 +0400
@@ -20,13 +20,13 @@
 @node defstruct, copy-structure, Structures Dictionary, Structures Dictionary
 @subsection defstruct                                                           [Macro]
 
-@code{defstruct}  @i{name-and-options @r{[}documentation@r{]} @{!@i{slot-description}@}{*}}@*
+@code{defstruct}  @i{name-and-options @r{[}documentation@r{]} @{!@i{slot-description}@}*}@*
    @result{}  @i{structure-name}
 
 @w{@i{name-and-options} ::=structure-name | @r{(}structure-name [[!@i{options}]]@r{)}}
 
 @w{@i{options} ::=!@i{conc-name-option} |}
-@w{            @{!@i{constructor-option}@}{*} |}
+@w{            @{!@i{constructor-option}@}* |}
 @w{            !@i{copier-option} |}
 @w{            !@i{include-option} |}
 @w{            !@i{initial-offset-option} |}
@@ -46,7 +46,7 @@
 
 @w{@i{predicate-option} ::=@t{:predicate} | @r{(}@t{:predicate}@r{)} | @r{(}@t{:predicate} @i{predicate-name}@r{)}}
 
-@w{@i{include-option} ::=@r{(}@t{:include} @i{included-structure-name} @{!@i{slot-description}@}{*}@r{)}}
+@w{@i{include-option} ::=@r{(}@t{:include} @i{included-structure-name} @{!@i{slot-description}@}*@r{)}}
 
 @w{@i{printer-option} ::=!@i{print-object-option} | !@i{print-function-option}}
 
@@ -461,7 +461,7 @@
 structure specifies, by giving the @t{:include} option as:
 
 @example
- (:include @i{included-structure-name} @{@i{slot-description}@}{*})
+ (:include @i{included-structure-name} @{@i{slot-description}@}*)
 @end example
 
 Each @i{slot-description} must have a @i{slot-name} 
@@ -1106,11 +1106,11 @@
 
 @subsubheading  See Also::
 
-@ref{documentation; (setf documentation)}
+@ref{documentation}
 ,
 @ref{print-object}
 ,
-@ref{setf; psetf}
+@ref{setf}
 ,
 @ref{subtypep}
 ,
diff -uNr gcl-texi-orig/chap-9.texi gcl-texi/chap-9.texi
--- gcl-texi-orig/chap-9.texi	1994-07-16 18:03:14 +0400
+++ gcl-texi/chap-9.texi	2002-10-17 22:06:25 +0400
@@ -98,7 +98,7 @@
 * Printing Conditions::		
 * Signaling and Handling Conditions::  
 * Assertions::			
-* Notes about the Condition System's Background::  
+* Notes about the Condition System`s Background::  
 @end menu
 
 @node Condition Types, Creating Conditions, Condition System Concepts, Condition System Concepts
@@ -107,6 +107,7 @@
 Figure 9--1 lists the @i{standardized} @i{condition} @i{types}.
 Additional @i{condition} @i{types} can be defined by using @b{define-condition}.
 
+@format
 @group
 @noindent
 @w{ arithmetic-error                 floating-point-overflow  simple-type-error  }
@@ -124,6 +125,7 @@
 @w{                    Figure 9--1: Standardized Condition Types                  }
 
 @end group
+@end format
 
 All @i{condition} types are @i{subtypes} of @i{type} @b{condition}.  That is,
 
@@ -147,6 +149,7 @@
 Figure 9--2 shows @i{operators} that
 define @i{condition} @i{types} and creating @i{conditions}.
 
+@format
 @group
 @noindent
 @w{  define-condition  make-condition    }
@@ -155,10 +158,12 @@
 @w{  Figure 9--2: Operators that define and create conditions.}
 
 @end group
+@end format
 
 Figure 9--3 shows @i{operators} that @i{read} 
 the @i{value} of @i{condition} @i{slots}.
 
+@format
 @group
 @noindent
 @w{  arithmetic-error-operands   simple-condition-format-arguments  }
@@ -172,6 +177,7 @@
 @w{         Figure 9--3: Operators that read condition slots.       }
 
 @end group
+@end format
 
 @menu
 * Serious Conditions::		
@@ -210,7 +216,7 @@
 .
 By convention, those arguments are notated as
 
- @i{datum} {&rest} @i{arguments}
+ @i{datum} @r{&rest} @i{arguments}
 
 Taken together, the @i{datum} and the @i{arguments} are 
 ``@i{designators} for a @i{condition} of default type @i{default-type}.''
@@ -218,7 +224,7 @@
 
 @table @asis
 
-@item {@t{*}} If the @i{datum} is a @i{symbol} 
+@item @t{*} If the @i{datum} is a @i{symbol} 
               naming a @i{condition} @i{type} ...  
 The denoted @i{condition} is the result of
 
@@ -226,7 +232,7 @@
  (apply #'make-condition @i{datum} @i{arguments})
 @end example
 
-@item {@t{*}} If the @i{datum} is a @i{format control} ...  
+@item @t{*} If the @i{datum} is a @i{format control} ...  
 
 The denoted @i{condition} is the result of 
 
@@ -238,7 +244,7 @@
 
 where the @i{defaulted-type} is a @i{subtype} of @i{default-type}.
 
-@item {@t{*}} If the @i{datum} is a @i{condition} ...  
+@item @t{*} If the @i{datum} is a @i{condition} ...  
 The denoted @i{condition} is the @i{datum} itself.
 In this case, unless otherwise specified by the description of the
 @i{operator} in question, the @i{arguments} must be @i{null};
@@ -456,6 +462,7 @@
 Figure 9--4 shows @i{operators} relating to 
 the @i{handling} of @i{conditions}.
 
+@format
 @group
 @noindent
 @w{  handler-bind  handler-case  ignore-errors  }
@@ -464,6 +471,7 @@
 @w{  Figure 9--4: Operators relating to handling conditions.}
 
 @end group
+@end format
 
 @menu
 * Signaling::			
@@ -502,6 +510,7 @@
 Figure 9--5 shows @i{defined names} relating to
 the @i{signaling} of @i{conditions}.
 
+@format
 @group
 @noindent
 @w{  *break-on-signals*  error   warn  }
@@ -511,6 +520,7 @@
 @w{  Figure 9--5: Defined names relating to signaling conditions.}
 
 @end group
+@end format
 
 @node Resignaling a Condition, Restarts, Signaling, Signaling and Handling Conditions
 @subsubsection Resignaling a Condition
@@ -642,6 +652,7 @@
 Figure 9--6 shows @i{defined names} relating to
 @i{restarts}.
 
+@format
 @group
 @noindent
 @w{  abort             invoke-restart-interactively  store-value          }
@@ -654,6 +665,7 @@
 @w{            Figure 9--6: Defined names relating to restarts.           }
 
 @end group
+@end format
 
 @node Restart Tests, Associating a Restart with a Condition, Interfaces to Restarts, Signaling and Handling Conditions
 @subsubsection Restart Tests
@@ -683,7 +695,7 @@
 @i{condition} by calling such a function without a @i{condition} @i{argument},
 or by supplying a value of @b{nil} for such an @i{argument}.
 
-@node Assertions, Notes about the Condition System's Background, Signaling and Handling Conditions, Condition System Concepts
+@node Assertions, Notes about the Condition System`s Background, Signaling and Handling Conditions, Condition System Concepts
 @subsection Assertions
 
 Conditional signaling of @i{conditions}
@@ -691,6 +703,7 @@
 and @i{type} are handled by assertion @i{operators}.
 Figure 9--7 shows @i{operators} relating to assertions.
 
+@format
 @group
 @noindent
 @w{  assert  check-type  ecase      }
@@ -700,9 +713,10 @@
 @w{  Figure 9--7: Operators relating to assertions.}
 
 @end group
+@end format
 
-@node Notes about the Condition System's Background,  , Assertions, Condition System Concepts
-@subsection Notes about the Condition System's Background
+@node Notes about the Condition System`s Background,  , Assertions, Condition System Concepts
+@subsection Notes about the Condition System`s Background
 
 For a background reference to the abstract concepts detailed in this
 section, see @i{Exceptional Situations in Lisp}.  The details of that paper are not binding on
@@ -757,12 +771,12 @@
 * restart-name::		
 * with-condition-restarts::	
 * with-simple-restart::		
-* abort::			
+* abort (Restart)::			
 * continue::			
 * muffle-warning::		
 * store-value::			
 * use-value::			
-* abort::			
+* abort (Function)::			
 @end menu
 
 @node condition, warning, Conditions Dictionary, Conditions Dictionary
@@ -1038,9 +1052,9 @@
 @node assert, error, storage-condition, Conditions Dictionary
 @subsection assert                                                              [Macro]
 
-@code{assert}  @i{test-form @r{[}@r{(}@{@i{place}@}{*}@r{)}
+@code{assert}  @i{test-form @r{[}@r{(}@{@i{place}@}*@r{)}
                                           @r{[}datum-form
-                                                @{@i{argument-form}@}{*}@r{]}@r{]}}@*
+                                                @{@i{argument-form}@}*@r{]}@r{]}}@*
    @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values:: 
@@ -1158,7 +1172,7 @@
 @node error, cerror, assert, Conditions Dictionary
 @subsection error                                                            [Function]
 
-@code{error}  @i{datum {&rest} arguments} 
+@code{error}  @i{datum @r{&rest} arguments} 
        @result{}  #<NoValue>
 
 @subsubheading  Arguments and Values:: 
@@ -1276,7 +1290,7 @@
 @node cerror, check-type, error, Conditions Dictionary
 @subsection cerror                                                           [Function]
 
-@code{cerror}  @i{continue-format-control datum {&rest} arguments} @result{}  @i{@b{nil}}
+@code{cerror}  @i{continue-format-control datum @r{&rest} arguments} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1441,7 +1455,7 @@
 @node check-type, simple-error, cerror, Conditions Dictionary
 @subsection check-type                                                          [Macro]
 
-@code{check-type}  @i{place typespec {@r{[}@i{string}@r{]}}} @result{}  @i{@b{nil}}
+@code{check-type}  @i{place typespec @r{@r{[}@i{string}@r{]}}} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1596,7 +1610,7 @@
 @node invalid-method-error, method-combination-error, simple-error, Conditions Dictionary
 @subsection invalid-method-error                                             [Function]
 
-@code{invalid-method-error}  @i{method format-control {&rest} args} @result{}  @i{@i{implementation-dependent}}
+@code{invalid-method-error}  @i{method format-control @r{&rest} args} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Arguments and Values::
 
@@ -1642,7 +1656,7 @@
 @node method-combination-error, signal, invalid-method-error, Conditions Dictionary
 @subsection method-combination-error                                         [Function]
 
-@code{method-combination-error}  @i{format-control {&rest} args} @result{}  @i{@i{implementation-dependent}}
+@code{method-combination-error}  @i{format-control @r{&rest} args} @result{}  @i{@i{implementation-dependent}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1679,7 +1693,7 @@
 @node signal, simple-condition, method-combination-error, Conditions Dictionary
 @subsection signal                                                           [Function]
 
-@code{signal}  @i{datum {&rest} arguments} @result{}  @i{@b{nil}}
+@code{signal}  @i{datum @r{&rest} arguments} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::                                               
 
@@ -1779,7 +1793,7 @@
 
 @subsubheading  See Also::
 
-@ref{simple-condition-format-control; simple-condition-format-arguments}
+@ref{simple-condition-format-control}
 ,
 
 @b{simple-condition-format-arguments}
@@ -1831,7 +1845,7 @@
 @node warn, simple-warning, simple-condition-format-control, Conditions Dictionary
 @subsection warn                                                             [Function]
 
-@code{warn}  @i{datum {&rest} arguments} @result{}  @i{@b{nil}}
+@code{warn}  @i{datum @r{&rest} arguments} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -1999,7 +2013,7 @@
 @node break, *debugger-hook*, invoke-debugger, Conditions Dictionary
 @subsection break                                                            [Function]
 
-@code{break}  @i{{&optional} format-control {&rest} format-arguments} @result{}  @i{@b{nil}}
+@code{break}  @i{@r{&optional} format-control @r{&rest} format-arguments} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values:: 
 
@@ -2241,8 +2255,8 @@
 @node handler-bind, handler-case, *break-on-signals*, Conditions Dictionary
 @subsection handler-bind                                                        [Macro]
 
-@code{handler-bind}  @i{@r{(}@{!@i{binding}@}{*}@r{)} 
-		   @{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{handler-bind}  @i{@r{(}@{!@i{binding}@}*@r{)} 
+		   @{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @w{@i{binding} ::=@r{(}type handler@r{)}}
 
@@ -2325,13 +2339,13 @@
 @subsection handler-case                                                        [Macro]
 
 @code{handler-case}  @i{@i{expression}
-		   [[@{!@i{error-clause}@}{*} | !@i{no-error-clause}]]} @result{}  @i{@{@i{result}@}{*}}
+		   [[@{!@i{error-clause}@}* | !@i{no-error-clause}]]} @result{}  @i{@{@i{result}@}*}
 
 @w{@i{clause} ::=!@i{error-clause} | !@i{no-error-clause}}
 
-@w{@i{error-clause} ::=@r{(}typespec @r{(}@t{[}var@t{]}@r{)} @{@i{declaration}@}{*} @{@i{form}@}{*}@r{)}}
+@w{@i{error-clause} ::=@r{(}typespec @r{(}@t{[}var@t{]}@r{)} @{@i{declaration}@}* @{@i{form}@}*@r{)}}
 
-@w{@i{no-error-clause} ::=@r{(}@t{:no-error} @i{lambda-list} @{@i{declaration}@}{*} @{@i{form}@}{*}@r{)}}
+@w{@i{no-error-clause} ::=@r{(}@t{:no-error} @i{lambda-list} @{@i{declaration}@}* @{@i{form}@}*@r{)}}
 
 @subsubheading  Arguments and Values::
 
@@ -2406,7 +2420,7 @@
 @i{expression} returns normally and a @i{no-error-clause}
    does exist, the values returned are used as arguments to the function
    described by constructing
- @t{(lambda @i{lambda-list} @{@i{form}@}{*})}
+ @t{(lambda @i{lambda-list} @{@i{form}@}*)}
    from the @i{no-error-clause}, and the @i{values} of that function call are
    returned by @b{handler-case}.
 The handlers which were established around the @i{expression} are no longer active at the time of this call.
@@ -2490,7 +2504,7 @@
 @node ignore-errors, define-condition, handler-case, Conditions Dictionary
 @subsection ignore-errors                                                       [Macro]
 
-@code{ignore-errors}  @i{@{@i{form}@}{*}} @result{}  @i{@{@i{result}@}{*}}
+@code{ignore-errors}  @i{@{@i{form}@}*} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -2561,20 +2575,20 @@
 
 [Editorial Note by KMP: This syntax stuff is still very confused and needs lots of work.]
 
-@code{define-condition}  @i{name @r{(}@{@i{parent-type}@}{*}@r{)}
-	                @r{(}@{!@i{slot-spec}@}{*}@r{)}
-                        @{@i{option}@}{*}}@*
+@code{define-condition}  @i{name @r{(}@{@i{parent-type}@}*@r{)}
+	                @r{(}@{!@i{slot-spec}@}*@r{)}
+                        @{@i{option}@}*}@*
    @result{}  @i{name}
 
 @w{@i{slot-spec} ::=slot-name | @r{(}slot-name !@i{slot-option}@r{)}}
 
-@w{@i{slot-option} ::=[[ @{{:reader} @i{symbol}@}{*} | }
-@w{                @{{:writer} !@i{function-name}@}{*} | }
-@w{                @{{:accessor} @i{symbol}@}{*} | }
-@w{                @{{:allocation} !@i{allocation-type}@} | }
-@w{                @{{:initarg} @i{symbol}@}{*} | }
-@w{                @{{:initform} @i{form}@} | }
-@w{                @{{:type} @i{type-specifier}@} ]]}
+@w{@i{slot-option} ::=[[ @{@t{:reader} @i{symbol}@}* | }
+@w{                @{@t{:writer} !@i{function-name}@}* | }
+@w{                @{@t{:accessor} @i{symbol}@}* | }
+@w{                @{@t{:allocation} !@i{allocation-type}@} | }
+@w{                @{@t{:initarg} @i{symbol}@}* | }
+@w{                @{@t{:initform} @i{form}@} | }
+@w{                @{@t{:type} @i{type-specifier}@} ]]}
 
 @w{@i{option} ::=[[ @r{(}@t{:default-initargs} @t{.} @i{initarg-list}@r{)} | }
 @w{           @r{(}@t{:documentation} @i{string}@r{)} | }
@@ -2897,7 +2911,7 @@
 @node make-condition, restart, define-condition, Conditions Dictionary
 @subsection make-condition                                                   [Function]
 
-@code{make-condition}  @i{type {&rest} slot-initializations} @result{}  @i{condition}
+@code{make-condition}  @i{type @r{&rest} slot-initializations} @result{}  @i{condition}
 
 @subsubheading  Arguments and Values::
 
@@ -2963,7 +2977,7 @@
 @node compute-restarts, find-restart, restart, Conditions Dictionary
 @subsection compute-restarts                                                 [Function]
 
-@code{compute-restarts}  @i{{&optional} condition} @result{}  @i{restarts}
+@code{compute-restarts}  @i{@r{&optional} condition} @result{}  @i{restarts}
 
 @subsubheading  Arguments and Values::
 
@@ -3051,8 +3065,8 @@
 @node find-restart, invoke-restart, compute-restarts, Conditions Dictionary
 @subsection find-restart                                                     [Function]
 
-@code{find-restart}  @i{identifier {&optional} condition}
- {restart}
+@code{find-restart}  @i{identifier @r{&optional} condition}
+ @r{restart}
 
 @subsubheading  Arguments and Values::
 
@@ -3120,7 +3134,7 @@
 @node invoke-restart, invoke-restart-interactively, find-restart, Conditions Dictionary
 @subsection invoke-restart                                                   [Function]
 
-@code{invoke-restart}  @i{restart {&rest} arguments} @result{}  @i{@{@i{result}@}{*}}
+@code{invoke-restart}  @i{restart @r{&rest} arguments} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -3185,7 +3199,7 @@
 @node invoke-restart-interactively, restart-bind, invoke-restart, Conditions Dictionary
 @subsection invoke-restart-interactively                                     [Function]
 
-@code{invoke-restart-interactively}  @i{restart} @result{}  @i{@{@i{result}@}{*}}
+@code{invoke-restart-interactively}  @i{restart} @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -3270,14 +3284,14 @@
 @node restart-bind, restart-case, invoke-restart-interactively, Conditions Dictionary
 @subsection restart-bind                                                        [Macro]
 
-@code{restart-bind}  @i{@r{(}@{{(}name function
-				        @{!@i{key-val-pair}@}{*}@r{)}@}{)}
-		   @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
-
-@w{@i{key-val-pair} ::=@t{:interactive-function} {interactive-function} | }
-@w{                 @t{:report-function} {report-function} | }
-@w{                 @t{:test-function} {test-function}}
+@code{restart-bind}  @i{@r{(}@{@r{(}name function
+				        @{!@i{key-val-pair}@}*@r{)}@}@r{)}
+		   @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
+
+@w{@i{key-val-pair} ::=@t{:interactive-function} @r{interactive-function} | }
+@w{                 @t{:report-function} @r{report-function} | }
+@w{                 @t{:test-function} @r{test-function}}
 
 @subsubheading  Arguments and Values::
 
@@ -3386,11 +3400,11 @@
 @node restart-case, restart-name, restart-bind, Conditions Dictionary
 @subsection restart-case                                                        [Macro]
 
-@code{restart-case}  @i{restartable-form {@{!@i{clause}@}}} @result{}  @i{@{@i{result}@}{*}}
+@code{restart-case}  @i{restartable-form @r{@{!@i{clause}@}}} @result{}  @i{@{@i{result}@}*}
 
 @w{@i{clause} ::=@r{(} case-name lambda-list }
 @w{            [[@t{:interactive} interactive-expression | @t{:report} report-expression | @t{:test} test-expression]] }
-@w{            @{@i{declaration}@}{*} @{@i{form}@}{*}@r{)}}
+@w{            @{@i{declaration}@}* @{@i{form}@}*@r{)}}
 
 @subsubheading  Arguments and Values::
 
@@ -3700,8 +3714,8 @@
 @node with-condition-restarts, with-simple-restart, restart-name, Conditions Dictionary
 @subsection with-condition-restarts                                             [Macro]
 
-@code{with-condition-restarts}  @i{condition-form restarts-form @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{with-condition-restarts}  @i{condition-form restarts-form @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -3740,12 +3754,12 @@
 since @b{restart-case} handles most of the common cases
 in a way that is syntactically more concise.
 
-@node with-simple-restart, abort, with-condition-restarts, Conditions Dictionary
+@node with-simple-restart, abort (Restart), with-condition-restarts, Conditions Dictionary
 @subsection with-simple-restart                                                 [Macro]
 
-@code{with-simple-restart}  @i{@r{(}name format-control @{@i{format-argument}@}{*}@r{)}
-		   @{@i{form}@}{*}}@*
-   @result{}  @i{@{@i{result}@}{*}}
+@code{with-simple-restart}  @i{@r{(}name format-control @{@i{format-argument}@}*@r{)}
+		   @{@i{form}@}*}@*
+   @result{}  @i{@{@i{result}@}*}
 
 @subsubheading  Arguments and Values::
 
@@ -3800,7 +3814,7 @@
 
 @example
  (defun compute-fixnum-power-of-2 (x)
-   (with-simple-restart (nil "Give up on computing 2{@t{^}}~D." x)
+   (with-simple-restart (nil "Give up on computing 2@t{^}~D." x)
      (let ((result 1))
        (dotimes (i x result)
          (setq result (* 2 result))
@@ -3815,7 +3829,7 @@
  (compute-power-of-2 10000)
 @t{ |> } Error: Power of 2 is too large.
 @t{ |> } To continue, type :CONTINUE followed by an option number.
-@t{ |> }  1: Give up on computing 2{@t{^}}10000.
+@t{ |> }  1: Give up on computing 2@t{^}10000.
 @t{ |> }  2: Return to Lisp Toplevel
 @t{ |> } Debug> @b{|>>}@t{:continue 1}@b{<<|}
 @result{}  SOMETHING-BIG
@@ -3848,7 +3862,7 @@
 in the normal case to be missing or @b{nil} so that the two situations
 can be distinguished.
 
-@node abort, continue, with-simple-restart, Conditions Dictionary
+@node abort (Restart), continue, with-simple-restart, Conditions Dictionary
 @subsection abort                                                             [Restart]
 
 @subsubheading  Data Arguments Required::
@@ -3875,10 +3889,10 @@
 @ref{Interfaces to Restarts},
 @ref{invoke-restart}
 ,
-@ref{abort}
+@ref{abort (Function)}
  (@i{function})
 
-@node continue, muffle-warning, abort, Conditions Dictionary
+@node continue, muffle-warning, abort (Restart), Conditions Dictionary
 @subsection continue                                                          [Restart]
 
 @subsubheading  Data Arguments Required::
@@ -4020,7 +4034,7 @@
 @ref{use-value}
  (@i{function} and @i{restart})
 
-@node use-value, abort, store-value, Conditions Dictionary
+@node use-value, abort (Function), store-value, Conditions Dictionary
 @subsection use-value                                                         [Restart]
 
 @subsubheading  Data Arguments Required::
@@ -4044,7 +4058,7 @@
 @ref{store-value}
  (@i{function} and @i{restart})
 
-@node abort,  , use-value, Conditions Dictionary
+@node abort (Function), , use-value, Conditions Dictionary
 @subsection abort, continue, muffle-warning, store-value, use-value          [Function]
 
 @IRindex{abort}
@@ -4057,17 +4071,17 @@
 
 @IRindex{use-value}
 
-@code{abort}  @i{{&optional} condition} 
+@code{abort}  @i{@r{&optional} condition} 
        @result{}  #<NoValue>
 
-@code{continue}  @i{{&optional} condition} @result{}  @i{@b{nil}}
+@code{continue}  @i{@r{&optional} condition} @result{}  @i{@b{nil}}
 
-@code{muffle-warning}  @i{{&optional} condition} 
+@code{muffle-warning}  @i{@r{&optional} condition} 
        @result{}  #<NoValue>
 
-@code{store-value}  @i{value {&optional} condition} @result{}  @i{@b{nil}}
+@code{store-value}  @i{value @r{&optional} condition} @result{}  @i{@b{nil}}
 
-@code{use-value}  @i{value {&optional} condition} @result{}  @i{@b{nil}}
+@code{use-value}  @i{value @r{&optional} condition} @result{}  @i{@b{nil}}
 
 @subsubheading  Arguments and Values::
 
diff -uNr gcl-texi-orig/gcl.texi gcl-texi/gcl.texi
--- gcl-texi-orig/gcl.texi	1994-07-16 18:03:23 +0400
+++ gcl-texi/gcl.texi	2002-10-18 12:47:46 +0400
@@ -5,11 +5,19 @@
 @settitle ANSI and GNU Common Lisp Document
 @c %**end of header
 @setchapternewpage odd
+
 @ifinfo
 This is a Texinfo GNU Common Lisp Manual based on the draft ANSI standard
 for Common Lisp.  
 
 Copyright 1994 William F. Schelter
+
+@format
+INFO-DIR-SECTION GNU Common Lisp
+START-INFO-DIR-ENTRY
+* gcl: (gcl.info). GNU Common Lisp Manual
+END-INFO-DIR-ENTRY
+@end format
 @end ifinfo
 
 @titlepage
@@ -32,7 +40,7 @@
 @c Example index
 @defcodeindex IP 
 @c Package index
-@defcodeindex IK 
+@c @defcodeindex IK 
 @c Keyword Index
 
 @node Top, Introduction (Introduction), (dir), (dir)
@@ -110,38 +118,38 @@
 
 Interpreting Dictionary Entries
 
-* The ``Affected By'' Section of a Dictionary Entry::  
-* The ``Arguments'' Section of a Dictionary Entry::  
-* The ``Arguments and Values'' Section of a Dictionary Entry::	
-* The ``Binding Types Affected'' Section of a Dictionary Entry::  
-* The ``Class Precedence List'' Section of a Dictionary Entry::	 
+* The "Affected By" Section of a Dictionary Entry::  
+* The "Arguments" Section of a Dictionary Entry::  
+* The "Arguments and Values" Section of a Dictionary Entry::	
+* The "Binding Types Affected" Section of a Dictionary Entry::  
+* The "Class Precedence List" Section of a Dictionary Entry::	 
 * Dictionary Entries for Type Specifiers::  
-* The ``Compound Type Specifier Kind'' Section of a Dictionary Entry::	
-* The ``Compound Type Specifier Syntax'' Section of a Dictionary Entry::  
-* The ``Compound Type Specifier Arguments'' Section of a Dictionary Entry::  
-* The ``Compound Type Specifier Description'' Section of a Dictionary Entry::  
-* The ``Constant Value'' Section of a Dictionary Entry::  
-* The ``Description'' Section of a Dictionary Entry::  
-* The ``Examples'' Section of a Dictionary Entry::  
-* The ``Exceptional Situations'' Section of a Dictionary Entry::  
-* The ``Initial Value'' Section of a Dictionary Entry::	 
-* The ``Argument Precedence Order'' Section of a Dictionary Entry::  
-* The ``Method Signature'' Section of a Dictionary Entry::  
-* The ``Name'' Section of a Dictionary Entry::	
-* The ``Notes'' Section of a Dictionary Entry::	 
-* The ``Pronunciation'' Section of a Dictionary Entry::	 
-* The ``See Also'' Section of a Dictionary Entry::  
-* The ``Side Effects'' Section of a Dictionary Entry::	
-* The ``Supertypes'' Section of a Dictionary Entry::  
-* The ``Syntax'' Section of a Dictionary Entry::  
-* Special ``Syntax'' Notations for Overloaded Operators::  
+* The "Compound Type Specifier Kind" Section of a Dictionary Entry::	
+* The "Compound Type Specifier Syntax" Section of a Dictionary Entry::  
+* The "Compound Type Specifier Arguments" Section of a Dictionary Entry::  
+* The "Compound Type Specifier Description" Section of a Dictionary Entry::  
+* The "Constant Value" Section of a Dictionary Entry::  
+* The "Description" Section of a Dictionary Entry::  
+* The "Examples" Section of a Dictionary Entry::  
+* The "Exceptional Situations" Section of a Dictionary Entry::  
+* The "Initial Value" Section of a Dictionary Entry::	 
+* The "Argument Precedence Order" Section of a Dictionary Entry::  
+* The "Method Signature" Section of a Dictionary Entry::  
+* The "Name" Section of a Dictionary Entry::	
+* The "Notes" Section of a Dictionary Entry::	 
+* The "Pronunciation" Section of a Dictionary Entry::	 
+* The "See Also" Section of a Dictionary Entry::  
+* The "Side Effects" Section of a Dictionary Entry::	
+* The "Supertypes" Section of a Dictionary Entry::  
+* The "Syntax" Section of a Dictionary Entry::  
+* Special "Syntax" Notations for Overloaded Operators::  
 * Naming Conventions for Rest Parameters::  
-* Requiring Non-Null Rest Parameters in the ``Syntax'' Section::  
-* Return values in the ``Syntax'' Section::  
-* No Arguments or Values in the ``Syntax'' Section::  
-* Unconditional Transfer of Control in the ``Syntax'' Section::	 
-* The ``Valid Context'' Section of a Dictionary Entry::	 
-* The ``Value Type'' Section of a Dictionary Entry::  
+* Requiring Non-Null Rest Parameters in The "Syntax" Section::  
+* Return values in The "Syntax" Section::  
+* No Arguments or Values in The "Syntax" Section::  
+* Unconditional Transfer of Control in The "Syntax" Section::	 
+* The "Valid Context" Section of a Dictionary Entry::	 
+* The "Value Type" Section of a Dictionary Entry::  
 
 Conformance
 
@@ -529,7 +537,7 @@
 * method-combination::		
 * t (System Class)::		
 * satisfies::			
-* member::			
+* member (Type Specifier)::			
 * not (Type Specifier)::	
 * and (Type Specifier)::	
 * or (Type Specifier)::		
@@ -871,7 +879,7 @@
 * Printing Conditions::		
 * Signaling and Handling Conditions::  
 * Assertions::			
-* Notes about the Condition System's Background::  
+* Notes about the Condition System`s Background::  
 
 Condition Types
 
@@ -942,12 +950,12 @@
 * restart-name::		
 * with-condition-restarts::	
 * with-simple-restart::		
-* abort::			
+* abort (Restart)::			
 * continue::			
 * muffle-warning::		
 * store-value::			
 * use-value::			
-* abort::			
+* abort (Function)::			
 
 Symbols
 
@@ -1095,13 +1103,13 @@
 * real::			
 * float (System Class)::	
 * short-float::			
-* rational::			
+* rational (System Class)::			
 * ratio::			
 * integer::			
 * signed-byte::			
 * unsigned-byte::		
-* mod::				
-* bit::				
+* mod (System Class)::				
+* bit (System Class)::				
 * fixnum::			
 * bignum::			
 * =::				
@@ -1125,7 +1133,7 @@
 * incf::			
 * lcm::				
 * log::				
-* mod::				
+* mod (Function)::				
 * signum::			
 * sqrt::			
 * random-state::		
@@ -1143,7 +1151,7 @@
 * upgraded-complex-part-type::	
 * realp::			
 * numerator::			
-* rational::			
+* rational (Function)::			
 * rationalp::			
 * ash::				
 * integer-length::		
@@ -1257,7 +1265,7 @@
 
 Conses Dictionary
 
-* list::			
+* list (System Class)::			
 * null (System Class)::		
 * cons (System Class)::		
 * atom (Type)::			
@@ -1271,7 +1279,7 @@
 * subst::			
 * tree-equal::			
 * copy-list::			
-* list::			
+* list (Function)::			
 * list-length::			
 * listp::			
 * make-list::			
@@ -1289,7 +1297,7 @@
 * ldiff::			
 * nthcdr::			
 * rest::			
-* member::			
+* member (Function)::			
 * mapc::			
 * acons::			
 * assoc::			
@@ -1368,7 +1376,7 @@
 * vector-pop::			
 * vector-push::			
 * vectorp::			
-* bit::				
+* bit (Array)::				
 * bit-and::			
 * bit-vector-p::		
 * simple-bit-vector-p::		
@@ -1741,7 +1749,7 @@
 
 * Pretty Printer Concepts::	
 * Examples of using the Pretty Printer::  
-* Notes about the Pretty Printer's Background::	 
+* Notes about the Pretty Printer`s Background::	 
 
 Pretty Printer Concepts
 
