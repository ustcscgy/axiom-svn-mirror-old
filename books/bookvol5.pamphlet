\documentclass[dvipdfm]{book}
\usepackage{hyperref}
\usepackage{axiom}
\usepackage{makeidx}
\makeindex
\usepackage{graphicx}
%%
%% Note that this file will eventually generate a dvi file
%% which will eventually be processed by dvipdfm to create a pdf.
%% The categories/domains/packages will be placed in a graphviz graph.
%% The graphviz dot syntax allows an href parameter.
%% The href parameter will reference this file. 
%% pdf href syntax allows named destinations.
%% This macro creates a named destination using \special
%% Thus, you reference http://thispdf#nameddest=ABBREV 
%% and you end up at the right page.
%% This macro is called implicitly by \pagehead so every 
%% category/domain/package can be referenced by fullname or abbrev.
%%
%% dest will give the ability to use nameddest= in html pdfs
%%
\newcommand{\dest}[1]{% e.g. \dest{abb}
\special{pdf:dest (#1) [ @thispage /FitH @ypos ]}}

%%
%% cmdhead consolidates standard command page setup
%%
\newcommand{\cmdhead}[1]{% e.g. \cmdhead{name}
\chapter{)#1~Command}%
\label{#1}%
\index{#1}%
\section{#1 man page}%
\index{mapage!#1}%
\index{#1!manpage}}

%%
%% pagehead consolidates standard page indexing
%%
\newcommand{\pagehead}[2]{% e.g. \pagehead{name}{abb}
\dest{#1}%
\dest{#2}%
\subsection{#1 (#2)}
\label{#1}%
\label{#2}%
\index{{#1}}%
\index{{#2}}}%

%%
%% pagepic adds an image and an index entry
%%
\newcommand{\pagepic}[3]{% e.g. \pagepic{pathandfile}{abb}{scale}
\includegraphics[scale=#3]{#1}\\%
\index{images!#2}}

%%
%% \refto is a link to a referenced page that returns it arg
%%
\newcommand{\refto}[1]{% e.g. \refto{name}
(p\pageref{#1}) #1}

%%
%% pageto is a forward link to a referenced page
%%
\newcommand{\pageto}[2]{% e.g. \pageto{abb}{name}
\ \\${\bf\Rightarrow{}}${``#1''} (#2) \ref{#1} on page~\pageref{#1}}

%%
%% pagefrom is a backward link to a referencing page
%%
\newcommand{\pagefrom}[2]{% e.g. \pagefrom{name}{abb}
\ \\${\bf\Leftarrow{}}${``#1''} (#2) \ref{#1} on page~\pageref{#1}}


%%
%% fnref sets a reference link
%%
\newcommand{\fnref}[1]{% e.g. \fnref{functionname}
``#1'' (\ref{#1} p~\pageref{#1})}

%%
%% varref sets a reference link
%%
\newcommand{\varref}[1]{% e.g. \varref{variablename}
``#1'' (\ref{#1} p~\pageref{#1})}

%% cross will put the category and function in the index
%% cross will leave the funcname so it can be put inline.
%%
\newcommand{\cross}[2]{% e.g. \pagefrom{cat}{funcname}
\index{#1!#2}%
\index{#2!#1}%
#2}

%% these commands are used in the man page descriptions for each command
%% they should probably be replaced by other equivalents
\newcommand{\lanb}{{\tt [}}
\newcommand{\ranb}{{\tt ]}}
\newcommand{\vertline}{$|$}

% struggle with latex figure-floating behavior
\renewcommand\floatpagefraction{.9}
\renewcommand\topfraction{.9}
\renewcommand\bottomfraction{.9}
\renewcommand\textfraction{.1}
\setcounter{totalnumber}{50}
\setcounter{topnumber}{50}
\setcounter{bottomnumber}{50}

\begin{document}
\begin{titlepage}
\center{\includegraphics{ps/axiomfront.ps}}
\vskip 0.1in
\includegraphics{ps/bluebayou.ps}\\
\vskip 0.1in
{\Huge{The 30 Year Horizon}}
\vskip 0.1in
$$
\begin{array}{lll}
Manuel\ Bronstein      & William\ Burge   & Timothy\ Daly \\
James\ Davenport       & Michael\ Dewar   & Martin\ Dunstan \\
Albrecht\ Fortenbacher & Patrizia\ Gianni & Johannes\ Grabmeier \\
Jocelyn\ Guidry        & Richard\ Jenks   & Larry\ Lambe \\
Michael\ Monagan       & Scott\ Morrison  & William\ Sit \\
Jonathan\ Steinbach    & Robert\ Sutor    & Barry\ Trager \\
Stephen\ Watt          & Jim\ Wen         & Clifton\ Williamson
\end{array}
$$
\center{\large{Volume 5: Axiom Interpreter}}
\end{titlepage}
\pagenumbering{roman}
\begin{verbatim}
Portions Copyright (c) 2005 Timothy Daly

The Blue Bayou image Copyright (c) 2004 Jocelyn Guidry

Portions Copyright (c) 2004 Martin Dunstan

Portions Copyright (c) 1991-2002, 
The Numerical ALgorithms Group Ltd.
All rights reserved.

This book and the Axiom software is licensed as follows:

Redistribution and use in source and binary forms, with or 
without modification, are permitted provided that the following 
conditions are
met:

    - Redistributions of source code must retain the above 
      copyright notice, this list of conditions and the 
      following disclaimer.

    - Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the 
      following disclaimer in the documentation and/or other 
      materials provided with the distribution.

    - Neither the name of The Numerical ALgorithms Group Ltd. 
      nor the names of its contributors may be used to endorse 
      or promote products derived from this software without 
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
SUCH DAMAGE.

\end{verbatim}
\tableofcontents
\vfill
\eject
\setlength{\parindent}{0em}
\setlength{\parskip}{1ex}
{\Large{\bf New Foreword}}
\vskip .25in

On October 1, 2001 Axiom was withdrawn from the market and ended
life as a commercial product.
On September 3, 2002 Axiom was released under the Modified BSD
license, including this document.
On August 27, 2003 Axiom was released as free and open source
software available for download from the Free Software Foundation's
website, Savannah.

Work on Axiom has had the generous support of the Center for 
Algorithms and Interactive Scientific Computation (CAISS) at
City College of New York. Special thanks go to Dr. Gilbert 
Baumslag for his support of the long term goal.

The online version of this documentation is roughly 1000 pages.
In order to make printed versions we've broken it up into three
volumes. The first volume is tutorial in nature. The second volume
is for programmers. The third volume is reference material. We've
also added a fourth volume for developers. All of these changes
represent an experiment in print-on-demand delivery of documentation.
Time will tell whether the experiment succeeded.

Axiom has been in existence for over thirty years. It is estimated to
contain about three hundred man-years of research and has, as of
September 3, 2003, 143 people listed in the credits. All of these
people have contributed directly or indirectly to making Axiom
available.  Axiom is being passed to the next generation. I'm looking
forward to future milestones.

With that in mind I've introduced the theme of the ``30 year horizon''.
We must invent the tools that support the Computational Mathematician
working 30 years from now. How will research be done when every bit of
mathematical knowledge is online and instantly available? What happens
when we scale Axiom by a factor of 100, giving us 1.1 million domains?
How can we integrate theory with code? How will we integrate theorems
and proofs of the mathematics with space-time complexity proofs and
running code? What visualization tools are needed? How do we support
the conceptual structures and semantics of mathematics in effective
ways? How do we support results from the sciences? How do we teach
the next generation to be effective Computational Mathematicians?

The ``30 year horizon'' is much nearer than it appears.

\vskip .25in
%\noindent
Tim Daly\\
CAISS, City College of New York\\
November 10, 2003 ((iHy))
\vfill
\eject
\pagenumbering{arabic}
\setcounter{chapter}{0} % Chapter 1
\chapter{The Interpreter}
The Axiom interpreter is a large common lisp program. 
It has several forms of interaction and run from
terminal in a standalone fashion, run under the control of a
session handler program, run as a web server, or run in a unix
pipe. 
\chapter{The Fundamental Data Structures}
\chapter{Starting Axiom}
Axiom starts by invoking a function value of the lisp symbol
[[*top-level-hook*]]. The function invocation path to from this
point until the prompt is approximates (skipping initializations):
\begin{verbatim}
  lisp -> restart
       -> |spad|
       -> |runspad|
       -> |ncTopLevel|
       -> |ncIntLoop|
       -> |intloop|
       -> |SpadInterpretStream|
       -> |intloopReadConsole|
\end{verbatim}
The [[|intloopReadConsole|]] function does tail-recursive calls to
itself (don't break this) and never exits.
\section{Variables Used}
\section{Data Structures}
\section{Functions}
\subsection{defun set-restart-hook}
When a lisp image containing code is reloaded there is a hook to
allow a function to be called. In our case it is the [[restart]]
function which is the entry to the Axiom interpreter.
<<defun set-restart-hook>>=
(defun set-restart-hook ()
  #+KCL (setq system::*top-level-hook* 'restart)
  #+Lucid (setq boot::restart-hook 'restart)
  'restart
 )

@
\pagehead{restart}{restart}
\pagepic{ps/v5restart.ps}{restart}{1.00}
The restart function is the real root of the world. It sets up memory
if we are working in a GCL/akcl version of the system. 

The [[compiler::*compile-verbose*]] flag has been set to nil globally.
We do not want to know about the microsteps of GCL's compile facility.

The [[compiler::*suppress-compiler-warnings*]] flag has been set to t.
We do not care that certain generated variables are not used.

The [[compiler::*suppress-compiler-notes*]] flag has been set to t.
We do not care that tail recursion occurs.

It sets the
current package to be the ``BOOT'' package which is the standard
package in which the interpreter runs. 

The \fnref{initroot} function sets global variables that depend on the
AXIOM shell variable. These are needed to find basic files like s2-us.msgs,
which contains the error message text.

The \fnref{openserver} function tried to set up the socket connection
used for things like hyperdoc. The \verb|$openServerIfTrue| variable
starts true, which implies trying to start a server.

The \verb|$IOindex| variable is the number associated with the input prompt.
Every successful expression evaluated increments this number until a
\verb|)clear all| resets it. Here we set it to the initial value.

Axiom has multiple frames that contain independent information about a
computation. There can be several frames at any one time and you can 
shift back and forth between the frames. By default, the system starts
in ``frame0'' (try the \verb|)frame names| command). See the Frame
Mechanism chapter (\ref{TheFrameMechanism} page~\pageref{TheFrameMechanism}).

The \verb|$InteractiveFrame| variable contains the state information
related to the current frame, which includes things like the last value,
the value of all of the variables, etc.

The \varref{printLoadMsgs} variable controls whether load messages will
be output as library routines are loaded. We enable this by default.
It can be changed by using \verb|)set message autoload|.

The \varref{current-directory} variable is set to the current directory.
This is used by the \verb|)cd| function and some of the compile routines.

The \fnref{loadExposureGroupData} function initializes several variables
with the exposure groups. These lists limit the user visible names in
order to keep the user and interpreter from being confused by names
which are common but whose signatures are for internal algebra uses.

The \fnref{statisticsInitialization} function initializes variables
used to collect statistics. Currently, only the garbage collector
information is initialized.


<<defun restart>>=
(defun restart ()
#+:akcl
  (init-memory-config :cons 500 :fixnum 200 :symbol 500 :package 8
    :array 400 :string 500 :cfun 100 :cpages 3000 :rpages 1000 :hole 2000)
#+:akcl (setq compiler::*compile-verbose* nil)
#+:akcl (setq compiler::*suppress-compiler-warnings* t)
#+:akcl (setq compiler::*suppress-compiler-notes* t)
  (in-package "BOOT")
  (initroot)
#+:akcl
  (when (and $openServerIfTrue (zerop (openserver $SpadServerName)))
    (setq $openServerIfTrue nil) 
    (setq |$SpadServer| t))
  (setq |$IOindex| 1)
  (setq |$InteractiveFrame| (|makeInitialModemapFrame|))
  (setq |$printLoadMsgs| t)
  (setq $current-directory (get-current-directory))
  (setq *default-pathname-defaults* (pathname $current-directory))
  (|loadExposureGroupData|)
  (|statisticsInitialization|)
  (|initHist|)
  (|initializeInterpreterFrameRing|)
  (when |$displayStartMsgs| (|spadStartUpMsgs|))
  (setq |$currentLine| nil)
  (restart0)
  (|readSpadProfileIfThere|)
  (|spad|))

@
\subsection{defun spad}
Starts the interpreter but does not read in profiles, etc.
<<defun spad>>=
(defun |spad| () 
 (let (|$PrintCompilerMessageIfTrue| |$inLispVM|) 
  (declare (special |$PrintCompilerMessageIfTrue| |$inLispVM|)) 
  (setq |$PrintCompilerMessageIfTrue| nil) 
  (setq |$inLispVM| nil) 
  (|setOutputAlgebra| '|%initialize%|) 
  (|runspad|) 
  '|EndOfSpad|))

@
\subsection{defun runspad}
<<defun runspad>>=
(defun |runspad| () 
 (prog (mode) 
  (return 
   (seq 
    (progn 
     (setq mode '|restart|) 
     (do () 
         ((null (eq mode '|restart|)) nil)
      (seq 
       (exit 
        (progn 
         (|resetStackLimits|) 
         (catch |$quitTag| 
          (catch '|coerceFailure| 
           (setq mode (catch '|top_level| (|ncTopLevel|))))))))))))))

@
\subsection{defun ncTopLevel}
Top-level read-parse-eval-print loop for the interpreter.  Uses
the Bill Burge's parser.
<<defun ncTopLevel>>=
(defun |ncTopLevel| ()
 (let (|$e| $spad $newspad $boot |$InteractiveMode| *eof* in-stream) 
  (declare (special |$e| $spad $newspad $boot |$InteractiveMode| *eof*
             in-stream |$InteractiveFrame|)) 
   (setq in-stream curinstream) 
   (setq *eof* nil) 
   (setq |$InteractiveMode| t) 
   (setq $boot nil) 
   (setq $newspad t) 
   (setq $spad t) 
   (setq |$e| |$InteractiveFrame|) 
   (|ncIntLoop|)))

@
\subsection{defun ncIntLoop}
<<defun ncIntLoop>>=
(defun |ncIntLoop| ()
  (let ((curinstream *standard-output*)
	(curoutstream *standard-input*))
    (declare (special curinstream curoutstream))
    (|intloop|)))

@
\subsection{defun intloop}
Note that the [[SpadInterpretStream]] function uses a list of 
three strings as an argument. The values in the list seem to have
no use and can eventually be removed. 
\begin{verbatim}
intloop () ==
    mode := $intRestart
    while mode = $intRestart repeat
      resetStackLimits()
      mode := CATCH($intTopLevel,
                    SpadInterpretStream(1, ["TIM", "DALY", "?"], true))

\end{verbatim}
<<defun intloop>>=
(defun |intloop| () 
 (prog (mode) 
  (declare (special |$intTopLevel| |$intRestart|)) 
   (return 
    (progn 
     (setq mode |$intRestart|) 
     ((lambda () 
       (loop 
        (cond 
         ((not (equal mode |$intRestart|))
           (return nil))
         (t
           (progn 
             (|resetStackLimits|) 
             (setq mode 
               (catch |$intTopLevel| 
                 (|SpadInterpretStream| 1 
                   (list 'tim  'daly '?) t)))))))))))))

@
\subsection{defun SpadInterpretStream}
The [[SpadInterpretStream]] function takes three arguments
\begin{list}{}
\item [[str]] This is passed as an argument to [[intloopReadConsole]]
\item [[source]] This is the name of a source file but appears not
to be used. It is set to the list [[(tim daly ?)]].
\item [[interactive?]] If this is false then various messages are 
suppressed and input does not use piles. If this is true then the
library loading routines might output messages and piles are expected
on input (as from a file).
\end{list}
The system commands are handled by the function kept in the ``hook''
variable \verb|$systemCommandFunction| which
has the default function \verb|InterpExecuteSpadSystemCommand|.
Thus, when a system command is entered this function is called.
<<defun SpadInterpretStream>>=
(defun |SpadInterpretStream| (str source interactive?) 
 (prog (|$promptMsg| |$shoeReadLineFunction| |$systemCommandFunction| 
        |$ncMsgList| |$erMsgToss| |$lastPos| |$inclAssertions| 
        |$okToExecuteMachineCode| |$newcompErrorCount| |$newcompMode| 
        |$libQuiet| |$fn|)
  (declare (special |$promptMsg| |$shoeReadLineFunction| 
            |$systemCommandFunction| |$ncMsgList| |$erMsgToss| |$lastPos| 
            |$inclAssertions| |$okToExecuteMachineCode| |$newcompErrorCount| 
            |$newcompMode| |$libQuiet| |$fn| |$nopos|))
   (return 
    (progn 
     (setq |$fn| source) 
     (setq |$libQuiet| (null interactive?)) 
     (setq |$newcompMode| nil) 
     (setq |$newcompErrorCount| 0) 
     (setq |$okToExecuteMachineCode| t) 
     (setq |$inclAssertions| (list 'aix '|CommonLisp|)) 
     (setq |$lastPos| |$nopos|) 
     (setq |$erMsgToss| nil) 
     (setq |$ncMsgList| nil) 
     (setq |$systemCommandFunction| #'|InterpExecuteSpadSystemCommand|) 
     (setq |$shoeReadLineFunction| #'|serverReadLine|) 
     (setq |$promptMsg| 'S2CTP023) 
     (cond 
      (interactive? 
       (progn 
        (princ (mkprompt)) 
        (|intloopReadConsole| "" str) 
        nil))
      (t 
       (progn 
        (|intloopInclude| source 0) 
        nil)))))))

@
\section{The Read-Eval-Print Loop}
\subsection{defun intloopReadConsole}
Note that this function relies on the fact that lisp can do tail-recursion.
The function recursively invokes itself.

The serverReadLine function is a special readline function that handles
communication with the session manager code, which is a separate process
running in parallel. 

We read a line from standard input.
\begin{itemize}
\item If it is a null line then we exit Axiom.
\item If it is a zero length line we prompt and recurse
\item If \$dalymode and open-paren we execute lisp code, prompt and recurse
The \$dalymode will interpret any input that begins with an open-paren
as a lisp expression rather than Axiom input. This is useful for debugging
purposes when most of the input lines will be lisp. Setting \$dalymode
non-nil will certainly break user expectations and is to be used with 
caution.
\item If it is ``)fi'' or ``)fin'' we drop into lisp. Use the (restart)
      function to return to the interpreter loop.
\item If it starts with ``)'' we process the command, prompt, and recurse
\item If it is a command then we remember the current line, process the
      command, prompt, and recurse.
\item If the input has a trailing underscore (Axiom line-continuation)
      then we cut off the continuation character and pass the truncated
      string to ourselves, prompt, and recurse
\item otherwise we process the input, prompt, and recurse.
\end{itemize}
Notice that all but two paths (a null input or a ``)fi'' or a ``)fin'')
will end up as a recursive call to ourselves.
<<defun intloopReadConsole>>=
(defun |intloopReadConsole| (b n) 
 (declare (special $dalymode)) 
 (let (c d pfx input) 
   (setq input (|serverReadLine| *standard-input*)) 
   (when (null (stringp input)) (|leaveScratchpad|)) 
   (when (eql (length input) 0) 
     (princ (mkprompt)) 
     (|intloopReadConsole| "" n))
   (when (and $dalymode (|intloopPrefix?| "(" input))
     (|intnplisp| input) 
     (princ (mkprompt)) 
     (|intloopReadConsole| "" n))
   (setq pfx (|intloopPrefix?| ")fi" input))
   (when (and pfx (or (string= pfx ")fi") (string= pfx ")fin")))
     (throw '|top_level| nil))
   (when (and (equal b "") (setq d (|intloopPrefix?| ")" input)))
     (|setCurrentLine| d) 
     (setq c (|ncloopCommand| d n)) 
     (princ (mkprompt)) 
     (|intloopReadConsole| "" c))
   (setq input (concat b input)) 
   (when (|ncloopEscaped| input) 
     (|intloopReadConsole| (subseq input 0 (- (length input) 1)) n))
   (setq c (|intloopProcessString| input n)) 
   (princ (mkprompt)) 
   (|intloopReadConsole| "" c)))

@
\section{Helper Functions}
\subsection{defun getenviron}
<<defun getenviron>>=
(defun getenviron (shellvar)
 #+allegro (sys::getenv (string var))
 #+clisp (ext:getenv (string var))
 #+(or cmu scl)
  (cdr 
   (assoc (string var) ext:*environment-list* :test #'equalp :key #'string))
 #+(or kcl akcl gcl) (si::getenv (string var))
 #+lispworks (lw:environment-variable (string var))
 #+lucid (lcl:environment-variable (string var))
 #+mcl (ccl::getenv var)
 #+sbcl (sb-ext:posix-getenv var)
 )
@

\subsection{defun init-memory-config}
Austin-Kyoto Common Lisp (AKCL), now known as Gnu Common Lisp (GCL)
requires some changes to the default memory setup to run Axiom efficently.
This function performs those setup commands. 
<<defun init-memory-config>>=
(defun init-memory-config (&key
			   (cons 500)
			   (fixnum 200)
			   (symbol 500)
			   (package 8)
			   (array 400)
			   (string 500)
			   (cfun 100)
			   (cpages 3000)
			   (rpages 1000)
			   (hole 2000) )
  ;; initialize AKCL memory allocation parameters
  #+:AKCL
  (progn
    (system:allocate 'cons cons)
    (system:allocate 'fixnum fixnum)
    (system:allocate 'symbol symbol)
    (system:allocate 'package package)
    (system:allocate 'array array)
    (system:allocate 'string string)
    (system:allocate 'cfun cfun)
    (system:allocate-contiguous-pages cpages)
    (system:allocate-relocatable-pages rpages)
    (system:set-hole-size hole))
  #-:AKCL
  nil)

@

\pagehead{initroot}{initroot}
Sets up the system to use the {\bf AXIOM} shell variable if we can
and default to the {\bf \$spadroot} variable (which was the value
of the {\bf AXIOM} shell variable at build time) if we can't.

Called from \fnref{restart}.
<<defun initroot>>=
(defun initroot (&optional (newroot (BOOT::|getEnv| "AXIOM")))
  (reroot (or newroot $spadroot (error "setenv AXIOM or (setq $spadroot)"))))

@

\subsection{defun intloopPrefix?}
If the prefix string is the same as the whole string initial characters
(ignoring spaces in the whole string) then we return the whole string
minus any leading spaces.
<<defun intloopPrefix?>>=
(defun |intloopPrefix?| (prefix whole)
 (let ((newprefix (string-left-trim '(#\space) prefix))
       (newwhole  (string-left-trim '(#\space) whole)))
  (when (<= (length newprefix) (length newwhole))
   (when (string= newprefix newwhole :end2 (length prefix))
    newwhole))))

@

\subsection{defun make-absolute-filename}
Prefix a filename with the {\bf AXIOM} shell variable.
<<defun make-absolute-filename>>=
(defun make-absolute-filename (name)
 (concatenate 'string $spadroot name))

@

\subsection{defun makeInitialModemapFrame}
<<defun makeInitialModemapFrame>>=
(defun |makeInitialModemapFrame| ()
  (copy |$InitialModemapFrame|)) 

@

\subsection{defun ncloopEscaped}
The ncloopEscaped function will return true if the last non-blank
character of a line is an underscore, the Axiom line-continuation
character. Otherwise, it returns nil.
<<defun ncloopEscaped>>=
(defun |ncloopEscaped| (x)
 (let ((l (length x)))
  (dotimes (i l)
   (when (char= (char x (- l i 1)) #\_) (return t))
   (unless (char= (char x (- l i 1)) #\space) (return nil)))))

@

\subsection{defun reclaim}
Call the garbage collector on various platforms.
<<defun reclaim>>=
#+abcl 
(defun reclaim () (ext::gc))
#+:allegro
(defun reclaim () (excl::gc t))
#+:CCL
(defun reclaim () (gc))
#+clisp
(defun reclaim () (#+lisp=cl ext::gc #-lisp=cl lisp::gc))
#+(or :cmulisp :cmu)
(defun reclaim () (ext:gc))
#+cormanlisp
(defun reclaim () (cl::gc))
#+(OR IBCL KCL GCL)
(defun reclaim () (si::gbc t))
#+lispworks 
(defun reclaim () (hcl::normal-gc))
#+Lucid
(defun reclaim () (lcl::gc))
#+sbcl
(defun reclaim () (sb-ext::gc))
@

\subsection{defun reroot}
The reroot function is used to reset the important variables used by
the system. In particular, these variables are sensitive to the
{\bf AXIOM} shell variable. That variable is renamed internally to
be {\bf \$spadroot}. The {\bf reroot} function will change the
system to use a new root directory and will have the same effect
as changing the {\bf AXIOM} shell variable and rerunning the system
from scratch. Note that we have changed from the
NAG distribution back to the original form. If you need the NAG
version you can push {\bf :tpd} on the {\bf *features*} variable
before compiling this file. A correct call looks like:
\begin{verbatim}
  (in-package "BOOT")
  (reroot "/spad/mnt/${SYS}")
\end{verbatim}
where the [[${SYS}]] variable is the same one set at build time.
<<defun reroot>>=
(defun reroot (dir)
  (setq $spadroot dir)
  (setq $directory-list
   (mapcar #'make-absolute-filename $relative-directory-list))
  (setq $library-directory-list
   (mapcar #'make-absolute-filename $relative-library-directory-list))
  (setq |$defaultMsgDatabaseName|
	(pathname (make-absolute-filename "/doc/msgs/s2-us.msgs")))
  (setq |$msgDatabaseName| ())
  (setq $current-directory $spadroot))

@

\subsection{defun setCurrentLine}
Remember the current line. The cases are:
\begin{itemize}
\item If there is no \$currentLine set it to the input
\item Is the current line a string and the input a string?
      Make them into a list
\item Is \$currentLine not a cons cell? Make it one.
\item Is the input a string? Cons it on the end of the list.
\item Otherwise stick it on the end of the list
\end{itemize}
Note I suspect the last two cases do not occur in practice since
they result in a dotted pair if the input is not a cons. However,
this is what the current code does so I won't change it.
<<defun setCurrentLine>>=
(defun |setCurrentLine| (s)
 (cond 
  ((null |$currentLine|) 
    (setq |$currentLine| s))
  ((and (stringp |$currentLine|) (stringp s))
    (setq |$currentLine| (list |$currentLine| s)))
  ((not (consp |$currentLine|))
    (setq |$currentLine| (cons |$currentLine| s)))
  ((stringp s)
    (rplacd (last |$currentLine|) (cons s nil)))
  (t 
    (rplacd (last |$currentLine|) s)))
 |$currentLine|)

@

\chapter{System Statistics}
\pagehead{statisticsInitialization}{statisticsInitialization}
<<defun statisticsInitialization>>=
(defun |statisticsInitialization| () 
 "initialize the garbage collection timer"
 #+:akcl (system:gbc-time 0)
 nil)

@
\chapter{System Command Handling}
\subsection{defvar \$systemCommands}
The system commands are the top-level commands available in Axiom
that can all be invoked by prefixing the symbol with a closed-paren. 
Thus, to see they copyright you type:
\begin{verbatim}
   )copyright
\end{verbatim}
New commands need to be added to this table. The command invoked will
be the first entry of the pair and the ``user level'' of the command
will be the second entry. 

See:\\
\begin{itemize}
\item The \fnref{abbreviations} command
\item The \fnref{boot} command
\item The \fnref{browse} command
\item The \fnref{cd} command
\item The \fnref{clear} command
\item The \fnref{close} command
\item The \fnref{compiler} command
\item The \fnref{copyright} command
\item The \fnref{credits} command
\item The \fnref{display} command
\item The \fnref{edit} command
\item The \fnref{fin} command
\item The \fnref{frame} command
\item The \fnref{help} command
\item The \fnref{history} command
\item The \fnref{lisp} command
\item The \fnref{library} command
\item The \fnref{load} command
\item The \fnref{ltrace} command
\item The \fnref{pquit} command
\item The \fnref{quit} command
\item The \fnref{read} command
\item The \fnref{savesystem} command
\item The \fnref{set} command
\item The \fnref{show} command
\item The \fnref{spool} command
\item The \fnref{summary} command
\item The \fnref{synonym} command
\item The \fnref{system} command
\item The \fnref{trace} command
\item The \fnref{undo} command
\item The \fnref{what} command
\item The \fnref{with} command
\item The \fnref{workfiles} command
\item The \fnref{zsystemdevelopment} command
\end{itemize}

<<initvars>>=
(defvar |$systemCommands| nil)

(eval-when (eval load)
 (setq |$systemCommands|
 '(
   (|abbreviations|		     . |compiler|   )
   (|boot|			     . |development|)
   (|browse|                         . |development|)
   (|cd|			     . |interpreter|)
   (|clear|			     . |interpreter|)
   (|close|			     . |interpreter|)
   (|compiler|			     . |compiler|   )
   (|copyright|			     . |interpreter|)
   (|credits|			     . |interpreter|)
   (|display|			     . |interpreter|)
   (|edit|			     . |interpreter|)
   (|fin|			     . |development|)
   (|frame|			     . |interpreter|)
   (|help|			     . |interpreter|)
   (|history|			     . |interpreter|)
;; (|input|			     . |interpreter|)
   (|lisp|			     . |development|)
   (|library|			     . |interpreter|)
   (|load|			     . |interpreter|)
   (|ltrace|			     . |interpreter|)
   (|pquit|			     . |interpreter|)
   (|quit|			     . |interpreter|)
   (|read|			     . |interpreter|)
   (|savesystem|		     . |interpreter|)
   (|set|			     . |interpreter|)
   (|show|			     . |interpreter|)
   (|spool|			     . |interpreter|)
   (|summary|			     . |interpreter|)
   (|synonym|			     . |interpreter|)
   (|system|			     . |interpreter|)
   (|trace|			     . |interpreter|)
   (|undo|			     . |interpreter|)
   (|what|			     . |interpreter|)
   (|with|			     . |interpreter|)
   (|workfiles|			     . |development|)
   (|zsystemdevelopment| . |interpreter|)
 )))

@

\subsection{defvar \$SYSCOMMANDS}
This table is used to look up a symbol to see if it might be a command.
<<initvars>>=
(defvar $SYSCOMMANDS nil)
(eval-when (eval load)
 (setq $SYSCOMMANDS (mapcar #'car |$systemCommands|)))

@
\subsection{defvar \$noParseCommands}
This is a list of the commands which have their arguments passed verbatim.
Certain functions, such as the lisp function need to be able to handle
all kinds of input that will not be acceptable to the interpreter. 
<<initvars>>=
(defvar |$noParseCommands| nil)
(eval-when (eval load)
 (setq |$noParseCommands| 
 '( |boot|
    |copyright|
    |credits|
    |fin|
    |lisp|
    |pquit|
    |quit|
    |suspend|
    |synonym|
    |system|
    )))

@
\subsection{defvar \$tokenCommands}
This is a list of the commands that expect the interpreter to parse
their arguments. Thus the history command expects that Axiom will have
tokenized and validated the input before calling the history function.
<<initvars>>=
(defvar |$tokenCommands| nil)
(eval-when (eval load)
 (setq |$tokenCommands|
 '( |abbreviations|
    |cd|
    |clear|
    |close|
    |compiler|
    |depends|
    |display|
    |edit|
    |frame|
    |frame|
    |help|
    |history|
    |input|
    |library|
    |load|
    |ltrace|
    |read|
    |savesystem|
    |set|
    |spool|
    |undo|
    |what|
    |with|
    |workfiles|
    |zsystemdevelopment|
    )))

@

\subsection{defvar \$InitialCommandSynonymAlist}
Axiom can create ``synonyms'' for commands. We create an initial table
of synonyms which are in common use.
<<initvars>>=
(defvar |$InitialCommandSynonymAlist| nil)
(eval-when (eval load)
 (setq |$InitialCommandSynonymAlist|
   '(
       (|?|	     . "what commands")
       (|ap|	     . "what things")
       (|apr|	     . "what things")
       (|apropos|    . "what things")
       (|cache|	     . "set functions cache")
       (|cl|	     . "clear")
       (|cls|	     . "zsystemdevelopment )cls")
       (|cms|	     . "system")
       (|co|	     . "compiler")
       (|d|	     . "display")
       (|dep|	     . "display dependents")
       (|dependents| . "display dependents")
       (|e|	     . "edit")
       (|expose|     . "set expose add constructor")
       (|fc|	     . "zsystemdevelopment )c")
       (|fd|	     . "zsystemdevelopment )d")
       (|fdt|	     . "zsystemdevelopment )dt")
       (|fct|	     . "zsystemdevelopment )ct")
       (|fctl|	     . "zsystemdevelopment )ctl")
       (|fe|	     . "zsystemdevelopment )e")
       (|fec|	     . "zsystemdevelopment )ec")
       (|fect|	     . "zsystemdevelopment )ect")
       (|fns|	     . "exec spadfn")
       (|fortran|    . "set output fortran")
       (|h|	     . "help")
       (|hd|	     . "system hypertex &")
       (|kclam|	     . "boot clearClams ( )")
       (|killcaches| . "boot clearConstructorAndLisplibCaches ( )")
       (|patch|	     . "zsystemdevelopment )patch")
       (|pause|	     . "zsystemdevelopment )pause")
       (|prompt|     . "set message prompt")
       (|recurrence| . "set functions recurrence")
       (|restore|    . "history )restore")
       (|save|	     . "history )save")
       (|startGraphics|    .  "system $AXIOM/lib/viewman &")
       (|startNAGLink|     .  "system $AXIOM/lib/nagman &")
       (|stopGraphics|     .  "lisp (|sockSendSignal| 2 15)")
       (|stopNAGLink|      .  "lisp (|sockSendSignal| 8 15)")
       (|time|	     . "set message time")
       (|type|	     . "set message type")
       (|unexpose|   . "set expose drop constructor")
       (|up|	     . "zsystemdevelopment )update")
       (|version|    . "lisp *yearweek*")
       (|w|	     . "what")
       (|wc|	     . "what categories")
       (|wd|	     . "what domains")
       (|who|        . "lisp (pprint credits)")
       (|wp|	     . "what packages")
       (|ws|	     . "what synonyms")
)))

@
\subsection{defvar \$CommandSynonymAlist}
The actual list of synonyms is initialized to be the same as the 
above initial list of synonyms. The user synonyms that are added
during a session are pushed onto this list for later lookup.
<<initvars>>=
(defvar |$CommandSynonymAlist| nil)
(eval-when (eval load)
 (setq |$CommandSynonymAlist| (copy-alist |$InitialCommandSynonymAlist|)))

@

\subsection{defun ncloopCommand}
The \$systemCommandFunction is set in SpadInterpretStream
to point to the function InterpExecuteSpadSystemCommand.
The system commands are handled by the function kept in the ``hook''
variable \verb|$systemCommandFunction| which
has the default function \verb|InterpExecuteSpadSystemCommand|.
Thus, when a system command is entered this function is called.

The only exception is the \verb|)include| function which inserts
the contents of a file inline in the input stream. This is useful
for processing \verb|)read| of input files.
<<defun ncloopCommand>>=
(defun |ncloopCommand| (line n)
 (declare (special |$systemCommandFunction|))
 (let (a)
  (cond
   ((setq a (|ncloopPrefix?| ")include" line))
     (|ncloopInclude1| a n))
   (t
     (funcall |$systemCommandFunction| line)
     n))))

@
\subsection{defun ncloopPrefix?}
If we find the prefix string in the whole string starting at position zero
we return the remainder of the string without the leading prefix.
<<defun ncloopPrefix?>>=
(defun |ncloopPrefix?| (prefix whole)
 (when (eql (search prefix whole) 0)
  (subseq whole (length prefix))))

@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{abbreviations}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} compiler

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )abbreviation query  \lanb{}{\it nameOrAbbrev}\ranb{}}
\item {\tt )abbreviation category  {\it abbrev  fullname} \lanb{})quiet\ranb{}}
\item {\tt )abbreviation domain  {\it abbrev  fullname}   \lanb{})quiet\ranb{}}
\item {\tt )abbreviation package  {\it abbrev  fullname}  \lanb{})quiet\ranb{}}
\item {\tt )abbreviation remove  {\it nameOrAbbrev}}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to query, set and remove abbreviations for category,
domain and package constructors.
Every constructor must have a unique abbreviation.
This abbreviation is part of the name of the subdirectory
under which the components of the compiled constructor are
stored.
%% BEGIN OBSOLETE
% It is this abbreviation that is used to bring compiled code into
% Axiom with the {\tt )load} command.
%% END OBSOLETE
Furthermore, by issuing this command you
let the system know what file to load automatically if you use a new
constructor.
Abbreviations must start with a letter and then be followed by
up to seven letters or digits.
Any letters appearing in the abbreviation must be in uppercase.

When used with the {\tt query} argument,
\index{abbreviation query}
this command may be used to list the name
associated with a  particular abbreviation or the  abbreviation for a
constructor.
If no abbreviation or name is given, the names and corresponding
abbreviations for {\it all} constructors are listed.

The following shows the abbreviation for the constructor {\tt List}:
\begin{verbatim}
)abbreviation query List
\end{verbatim}
The following shows the constructor name corresponding to the
abbreviation {\tt NNI}:
\begin{verbatim}
)abbreviation query NNI
\end{verbatim}
The following lists all constructor names and their abbreviations.
\begin{verbatim}
)abbreviation query
\end{verbatim}

To add an abbreviation for a constructor, use this command with
{\tt category}, {\tt domain} or {\tt package}.
\index{abbreviation package}
\index{abbreviation domain}
\index{abbreviation category}
The following add abbreviations to the system for a
category, domain and package, respectively:
\begin{verbatim}
)abbreviation domain   SET Set
)abbreviation category COMPCAT  ComplexCategory
)abbreviation package  LIST2MAP ListToMap
\end{verbatim}
If the {\tt )quiet} option is used,
no output is displayed from this command.
You would normally only define an abbreviation in a library source file.
If this command is issued for a constructor that has already been loaded, the
constructor will be reloaded next time it is referenced.  In particular, you
can use this command to force the automatic reloading of constructors.

To remove an abbreviation, the {\tt remove} argument is used.
\index{abbreviation remove}
This is usually
only used to correct a previous command that set an abbreviation for a
constructor name.
If, in fact, the abbreviation does exist, you are prompted
for confirmation of the removal request.
Either of the following commands
will remove the abbreviation {\tt VECTOR2} and the
constructor name {\tt VectorFunctions2} from the system:
\begin{verbatim}
)abbreviation remove VECTOR2
)abbreviation remove VectorFunctions2
\end{verbatim}

\subsection{defun abbreviations}
<<defun abbreviations>>=
(defun |abbreviations| (l)
 (|abbreviationsSpad2Cmd| l)) 

@
\subsection{defun abbreviationsSpad2Cmd}
\begin{verbatim}
;abbreviationsSpad2Cmd l ==
;  null l => helpSpad2Cmd '(abbreviations)
;  abopts := '(query domain category package remove)
;  quiet := nil
;  for [opt] in $options repeat
;    opt := selectOptionLC(opt,'(quiet),'optionError)
;    opt = 'quiet => quiet := true
;  l is [opt,:al] =>
;    key := opOf CAR al
;    type := selectOptionLC(opt,abopts,'optionError)
;    type is 'query =>
;      null al => listConstructorAbbreviations()
;      constructor := abbreviation?(key) => abbQuery(constructor)
;      abbQuery(key)
;    type is 'remove =>
;      DELDATABASE(key,'ABBREVIATION)
;    ODDP SIZE al => sayKeyedMsg("S2IZ0002",[type])
;    repeat
;      null al => return 'fromLoop
;      [a,b,:al] := al
;      mkUserConstructorAbbreviation(b,a,type)
;      SETDATABASE(b,'ABBREVIATION,a)
;      SETDATABASE(b,'CONSTRUCTORKIND,type)
;    null quiet =>
;      sayKeyedMsg("S2IZ0001",[a,type,opOf b])
;      nil
;  nil
\end{verbatim}

<<defun abbreviationsSpad2Cmd>>=
(defun |abbreviationsSpad2Cmd| (arg)
 (prog (abopts quiet opt key type constructor t2 a b al)
  (return
   (seq
    (cond
     ((null arg) (|helpSpad2Cmd| '(|abbreviations|)))
     (t
      (setq abopts '(|query| |domain| |category| |package| |remove|))
      (setq quiet NIL)
      (do ((t0 |$options| (cdr t0)) (t1 nil))
          ((or (atom t0) 
               (progn (setq t1 (car t0)) nil)
               (progn (progn (setq opt (car t1)) t1) nil))
            nil)
       (seq
        (exit
         (progn
          (setq opt
           (|selectOptionLC| opt '(|quiet|) '|optionError|))
          (cond ((eq opt '|quiet|)
            (setq quiet t)))))))
      (cond
       ((and (pairp arg) 
             (progn 
              (setq opt (qcar arg))
              (setq al (qcdr arg))
              t))
         (setq key (|opOf| (car al)))
         (setq type
           (|selectOptionLC| opt abopts '|optionError|))
         (cond
          ((eq type '|query|)
           (cond 
            ((null al) (|listConstructorAbbreviations|))
            ((setq constructor (|abbreviation?| key))
              (|abbQuery| constructor))
            (t (|abbQuery| key))))
          ((eq type '|remove|)
           (deldatabase key 'abbreviation))
          ((oddp (size al))
           (|sayKeyedMsg| 's2iz0002 (cons type nil)))
          (t
           (do () (nil nil)
            (seq 
             (exit 
              (cond
               ((null al) (return '|fromLoop|))
               (t
                 (setq t2 al)
                 (setq a (CAR t2))
                 (setq b (CADR t2))
                 (setq al (CDDR t2))
                 (|mkUserConstructorAbbreviation| b a type)
                 (setdatabase b 'abbreviation a)
                 (setdatabase b 'constructorkind type))))))
           (cond ((null quiet)
            (progn
             (|sayKeyedMsg| 's2iz0001
               (cons a (cons type (cons (|opOf| b) nil)))) nil))))))
       (t nil)))))))) 

@

\subsection{defun listConstructorAbbreviations}
\begin{verbatim}
;listConstructorAbbreviations() ==
;  x := UPCASE queryUserKeyedMsg("S2IZ0056",NIL)
;  MEMQ(STRING2ID_-N(x,1),'(Y YES)) =>
;    whatSpad2Cmd '(categories)
;    whatSpad2Cmd '(domains)
;    whatSpad2Cmd '(packages)
;  sayKeyedMsg("S2IZ0057",NIL)
\end{verbatim}

<<defun listConstructorAbbreviations>>=
(defun |listConstructorAbbreviations| ()
 (prog (x)
  (return
   (progn
    (setq x (upcase (|queryUserKeyedMsg| 's2iz0056 nil)))
    (cond
     ((memq (string2id-n x 1) '(Y YES))
       (|whatSpad2Cmd| '(|categories|))
       (|whatSpad2Cmd| '(|domains|))
       (|whatSpad2Cmd| '(|packages|)))
     (t
       (|sayKeyedMsg| 's2iz0057 nil))))))) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{boot}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} development

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )boot} {\it bootExpression}
\end{list}

\par\noindent{\bf Command Description:}

This command is used by Axiom system developers to execute
expressions written in the BOOT language.
For example,
\begin{verbatim}
)boot times3(x) == 3*x
\end{verbatim}
creates and compiles the Common Lisp function ``times3''
obtained by translating the BOOT code.

\par\noindent{\bf Also See:}
\fnref{fin},
\fnref{lisp},
\fnref{set}, and
\fnref{system}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{browse}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} development

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )browse}
\end{list}

\par\noindent{\bf Command Description:}

This command is used by Axiom system users to start the Axiom top
level loop listening for browser connections.

\section{Overview}
The Axiom book on the help browser is a complete rewrite of the 
hyperdoc mechanism. There are several components that were needed
to make this function. Most of the web browser components are
described in bookvol11.pamphlet. This portion describes some of
the design issues needed to support the interface.

The axServer command takes a port (defaulting to 8085) and a
program to handle the browser interaction (defaulting to multiServ).
The axServer function opens the port, constructs the stream, and
passes the stream to multiServ. The multiServ loop processes one
interaction at a time.

So the basic process is that the Axiom ``)browse'' command opens a
socket and listens for http requests. Based on the type of request
(either 'GET' or 'POST') and the content of the request, which is
one of:
\begin{itemize}
\item command - algebra request/response
\item lispcall - a lisp s-expression to be evaluated
\item showcall - an Axiom )show command
\end{itemize}
the multiServ function will call a handler function to evaluate
the command line and construct a response. GET requests result
in a new browser page. POST requests result in an inline result.

Most responses contain the fields:
\begin{itemize}
\item stepnum - this is the Axiom step number 
\item command - this is the original command from the browser
\item algebra - this is the Axiom 2D algebra output
\item mathml - this is the MathML version of the Axiom algebra
\item type - this is the type of the Axiom result
\end{itemize}

\section{Browsers, MathML, and Fonts}
This work has the Firefox browser as its target. Firefox has built-in
support for MathML, javascript, and XMLHttpRequest handling. More details
are available in bookvol11.pamphlet but the very basic machinery for 
communication with the browser involves a dance between the browser
and the multiServ function (see the axserver.spad.pamphlet). 

In particular, a simple request is embedded in a web page as:
\begin{verbatim}
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="sin(x)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
\end{verbatim}
which says that this is an html ``input'' field of type ``submit''.
The CSS display class is ``subbut'' which is of a different color
than the surrounding text to make it obvious that you can click on
this field. Clickable fields that have no response text are of class
``noresult''.

The javascript call to ``makeRequest'' gives the ``id'' of this input
field, which must be unique in the page, as an argument. In this case,
the argument is 'p3'. The ``value'' field holds the display text which
will be passed back to Axiom as a command.

When the result arrives the ``showanswer'' function will select out
the mathml field of the response, construct the ``id'' of the html
div to hold the response by concatenating the string ``ans'' (answer)
to the ``id'' of the request resulting, in this case, as ``ansp3''.
The ``showanswer'' function will find this div and replace it with a
div containing the mathml result.

The ``makeRequest'' function is:
\begin{verbatim}
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
\end{verbatim}
It contains a request to open a local server connection to Axiom,
sets ``handleResponse'' as the function to call on reply, sets up
the type of request, fills in the command field, and sends off the
http request.

When a response is received, the ``handleResponse'' function checks
for the correct reply state, strips out the important text, and
calls ``showanswer''.
\begin{verbatim}
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }
\end{verbatim}
See bookvol11.pamphlet for further details.

\section{The axServer/multiServ loop}
The basic call to start an Axiom browser listener is:
\begin{verbatim}
  )set message autoload off
  )set output mathml on
  axServer(8085,multiServ)$AXSERV
\end{verbatim}

This call sets the port, opens a socket, attaches it to a stream,
and then calls ``multiServ'' with that stream. The ``multiServ''
function loops serving web responses to that port.

\section{The )browse command}
In order to make the whole process cleaner the function ``)browse''
handles the details. This code creates the command-line function for )browse

The browse function does the internal equivalent of the following 3 command
line statments:
\begin{verbatim}
  )set message autoload off
  )set output mathml on
  axServer(8085,multiServ)$AXSERV
\end{verbatim}
which causes Axiom to start serving web pages on port 8085

For those unfamiliar with calling algebra from lisp there are a 
few points to mention. 

The loadLib needs to be called to load the algebra code into the image.
Normally this is automatic but we are not using the interpreter so
we need to do this ``by hand''.

Each algebra file contains a "constructor function" which builds the
domain, which is a vector, and then caches the vector so that every
call to the contructor returns an EQ vector, that is, the same vector.
In this case, we call the constructor $\vert$AxiomServer$\vert$

The axServer function was mangled internally to 
$\vert$AXSERV;axServer;IMV;2$\vert$.
The multiServ function was mangled to $\vert$AXSERV;multiServ;SeV;3$\vert$
Note well that if you change axserver.spad these names might change
which will generate the error message along the lines of:
\begin{verbatim}
    System error:
    The function $\vert$AXSERV;axServer;IMV;2$\vert$ is undefined.
\end{verbatim}

To fix this you need to look at int/algebra/AXSERV.nrlib/code.lsp
and find the new mangled function name. A better solution would
be to dynamically look up the surface names in the domain vector.

Each Axiom function expects the domain vector as the last argument.
This is not obvious from the call as the interpreter supplies it.
We must do that ``by hand''.

We don't call the multiServ function. We pass it as a parameter to
the axServer function. When it does get called by the SPADCALL
macro it needs to be a lisp pair whose car is the function and
whose cdr is the domain vector. We construct that pair here as
the second argument to axServer. The third, hidden, argument to
axServer is the domain vector which we supply ``by hand''.

The socket can be supplied on the command line but defaults to 8085.
Axiom supplies the arguments as a list.
<<defun browse>>=
(defun |browse| (socket)
 (let (axserv browser)
  (if socket 
    (setq socket (car socket))
    (setq socket 8085))
  (|set| '(|mes| |auto| |off|))
  (|set| '(|out| |mathml| |on|))
  (|loadLib| '|AxiomServer|)
  (setq axserv (|AxiomServer|))
  (setq browser 
   (|AXSERV;axServer;IMV;2| socket
    (cons #'|AXSERV;multiServ;SeV;3| axserv) axserv))))

@
Now we have to bolt it into Axiom. This involves two lookups.

We create the lisp pair 
\begin{verbatim}
  (|browse| . |development|)
\end{verbatim} 
and cons it into the \$systemCommands command table.  This allows the
command to be executed in development mode.  This lookup decides if
this command is allowed. It also has the side-effect of putting the
command into the \$SYSCOMMANDS variable which is used to determine
if the token is a command.

\section{The server support code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{cd}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )cd} {\it directory}
\end{list}

\par\noindent{\bf Command Description:}

This command sets the Axiom working current directory.
The current directory is used for looking for
input files (for {\tt )read}),
Axiom library source files (for {\tt )compile}),
saved history environment files (for {\tt )history )restore}),
compiled Axiom library files (for {\tt )library}), and
files to edit (for {\tt )edit}).
It is also used for writing
spool files (via {\tt )spool}),
writing history input files (via {\tt )history )write}) and
history environment files (via {\tt )history )save}),and
compiled Axiom library files (via {\tt )compile}).
\index{read}
\index{compile}
\index{history )restore}
\index{edit}
\index{spool}
\index{history )write}
\index{history )save}

If issued with no argument, this command sets the Axiom
current directory to your home directory.
If an argument is used, it must be a valid directory name.
Except for the ``{\tt )}'' at the beginning of the command,
this has the same syntax as the operating system {\tt cd} command.

\par\noindent{\bf Also See:}
\fnref{compiler},
\fnref{edit},
\fnref{history},
\fnref{library},
\fnref{read}, and
\fnref{spool}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{clear}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )clear all}
\item{\tt )clear completely}
\item{\tt )clear properties all}
\item{\tt )clear properties}  {\it obj1 \lanb{}obj2 ...\ranb{}}
\item{\tt )clear value      all}
\item{\tt )clear value}     {\it obj1 \lanb{}obj2 ...\ranb{}}
\item{\tt )clear mode       all}
\item{\tt )clear mode}      {\it obj1 \lanb{}obj2 ...\ranb{}}
\end{list}
\par\noindent{\bf Command Description:}

This command is used to remove function and variable declarations, definitions
and values  from the workspace.
To  empty the entire workspace  and reset the
step counter to 1, issue
\begin{verbatim}
)clear all
\end{verbatim}
To remove everything in the workspace but not reset the step counter, issue
\begin{verbatim}
)clear properties all
\end{verbatim}
To remove everything about the object {\tt x}, issue
\begin{verbatim}
)clear properties x
\end{verbatim}
To remove everything about the objects {\tt x, y} and {\tt f}, issue
\begin{verbatim}
)clear properties x y f
\end{verbatim}

The word {\tt properties} may be abbreviated to the single letter
``{\tt p}''.
\begin{verbatim}
)clear p all
)clear p x
)clear p x y f
\end{verbatim}
All definitions of functions and values of variables may be removed by either
\begin{verbatim}
)clear value all
)clear v all
\end{verbatim}
This retains whatever declarations the objects had.  To remove definitions and
values for the specific objects {\tt x, y} and {\tt f}, issue
\begin{verbatim}
)clear value x y f
)clear v x y f
\end{verbatim}
To remove  the declarations  of everything while  leaving the  definitions and
values, issue
\begin{verbatim}
)clear mode  all
)clear m all
\end{verbatim}
To remove declarations for the specific objects {\tt x, y} and {\tt f}, issue
\begin{verbatim}
)clear mode x y f
)clear m x y f
\end{verbatim}
The {\tt )display names} and {\tt )display properties} commands  may be used
to see what is currently in the workspace.

The command
\begin{verbatim}
)clear completely
\end{verbatim}
does everything that {\tt )clear all} does, and also clears the internal
system function and constructor caches.

\par\noindent{\bf Also See:}
\fnref{display},
\fnref{history}, 
\fnref{frame}, and
\fnref{undo}

\subsection{defun clear}
<<defun clear>>=
(defun |clear| (l)
 (|clearSpad2Cmd| l)) 

@

\subsection{defun clearSpad2Cmd}
\begin{verbatim}
;clearSpad2Cmd l ==
;  -- new version which changes the environment and updates history
;  $clearExcept: local := nil
;  if $options then $clearExcept :=
;    "and"/[selectOptionLC(opt,'(except),'optionError) =
;             'except for [opt,:.] in $options]
;  null l =>
;    optList:= "append"/[ ['%l,'"       ",x] for x in $clearOptions]
;    sayKeyedMsg("S2IZ0010",[optList])
;  arg := selectOptionLC(first l,'(all completely scaches),NIL)
;  arg = 'all          => clearCmdAll()
;  arg = 'completely   => clearCmdCompletely()
;  arg = 'scaches      => clearCmdSortedCaches()
;  $clearExcept => clearCmdExcept(l)
;  clearCmdParts(l)
;  updateCurrentInterpreterFrame()
\end{verbatim}

<<defun clearSpad2Cmd>>=
(defun |clearSpad2Cmd| (|l|)
 (prog (|$clearExcept| |opt| |optList| |arg|)
  (declare (special |$clearExcept|))
  (return
   (seq
    (progn
     (setq |$clearExcept| nil)
     (cond 
      (|$options|
       (setq |$clearExcept|
        (prog (t0)
         (setq t0 t)
         (return
          (do ((t1 nil (null t0))
               (t2 |$options| (cdr t2))
               (t3 nil))
              ((or t1 
                   (atom t2)
                   (progn (setq t3 (car t2)) nil)
                   (progn (progn (setq |opt| (car t3)) t3) nil))
                 t0)
           (seq 
            (exit 
             (setq t0
              (and t0 
                   (eq
                    (|selectOptionLC| |opt| '(|except|) '|optionError|)
                    '|except|)))))))))))
     (cond
      ((null |l|)
        (setq |optList|
         (prog (t4)
          (setq t4 nil)
          (return
           (do ((t5 |$clearOptions| (cdr t5)) (|x| nil))
               ((or (atom t5) (progn (setq |x| (car t5)) nil)) t4)
            (seq
             (exit
              (setq t4 
               (append t4 (cons '|%l| (cons "       " (cons |x| nil)))))))))))
        (|sayKeyedMsg| 's2iz0010 (cons |optList| nil)))
      (t
        (setq |arg|
         (|selectOptionLC| (car |l|) '(|all| |completely| |scaches|) nil))
        (cond
         ((eq |arg| '|all|) (|clearCmdAll|))
         ((eq |arg| '|completely|) (|clearCmdCompletely|))
         ((eq |arg| '|scaches|) (|clearCmdSortedCaches|))
         (|$clearExcept| (|clearCmdExcept| |l|))
         (t
          (|clearCmdParts| |l|) (|updateCurrentInterpreterFrame|)))))))))) 

@

\subsection{defun clearCmdSortedCaches}
\begin{verbatim}
;clearCmdSortedCaches() ==
;  $lookupDefaults: local := false
;  for [.,.,:domain] in HGET($ConstructorCache,'SortedCache) repeat
;    pair := compiledLookupCheck('clearCache,[$Void],domain)
;    SPADCALL pair
\end{verbatim}

<<defun clearCmdSortedCaches>>=
(defun |clearCmdSortedCaches| ()
 (prog (|$lookupDefaults| |domain| |pair|)
  (declare (special |$lookupDefaults|))
  (return
   (seq 
    (progn 
     (setq |$lookupDefaults| nil)
     (do ((t0 (hget |$ConstructorCache| '|SortedCache|) (cdr t0)) 
          (t1 nil))
         ((or (atom t0) 
              (progn (setq t1 (car t0)) nil)
              (progn (progn (setq |domain| (cddr t1)) t1) nil))
            nil)
      (seq
       (exit
        (progn
         (setq |pair|
          (|compiledLookupCheck| '|clearCache| (cons |$Void| nil) |domain|))
         (spadcall |pair|)))))))))) 

@

\subsection{defun clearCmdCompletely}
\begin{verbatim}
;clearCmdCompletely() ==
;  clearCmdAll()
;  $localExposureData := COPY_-SEQ $localExposureDataDefault
;  $xdatabase := NIL
;  $CatOfCatDatabase  := NIL
;  $DomOfCatDatabase  := NIL
;  $JoinOfCatDatabase := NIL
;  $JoinOfDomDatabase := NIL
;  $attributeDb := NIL
;  $functionTable := NIL
;  sayKeyedMsg("S2IZ0013",NIL)
;  clearClams()
;  clearConstructorCaches()
;  $existingFiles := MAKE_-HASHTABLE 'UEQUAL
;  sayKeyedMsg("S2IZ0014",NIL)
;  RECLAIM()
;  sayKeyedMsg("S2IZ0015",NIL)
;  NIL
\end{verbatim}

<<defun clearCmdCompletely>>=
(defun |clearCmdCompletely| ()
 (progn (|clearCmdAll|)
  (setq |$localExposureData| (copy-seq |$localExposureDataDefault|))
  (setq |$xdatabase| nil)
  (setq |$CatOfCatDatabase| nil)
  (setq |$DomOfCatDatabase| nil)
  (setq |$JoinOfCatDatabase| nil)
  (setq |$JoinOfDomDatabase| nil)
  (setq |$attributeDb| nil)
  (setq |$functionTable| nil)
  (|sayKeyedMsg| 's2iz0013 nil)
  (|clearClams|)
  (|clearConstructorCaches|)
  (setq |$existingFiles| (make-hashtable 'UEQUAL))
  (|sayKeyedMsg| 's2iz0014 nil)
  (reclaim)
  (|sayKeyedMsg| 's2iz0015 nil)
  nil)) 

@

\subsection{defun clearCmdAll}
\begin{verbatim}
;clearCmdAll() ==
;  clearCmdSortedCaches()
;  ------undo special variables------
;  $frameRecord := nil
;  $previousBindings := nil
;  $variableNumberAlist := nil
;  untraceMapSubNames _/TRACENAMES
;  $InteractiveFrame := LIST LIST NIL
;  resetInCoreHist()
;  if $useInternalHistoryTable
;    then $internalHistoryTable := NIL
;    else deleteFile histFileName()
;  $IOindex := 1
;  updateCurrentInterpreterFrame()
;  $currentLine := '")clear all"    --restored 3/94; needed for undo (RDJ)
;  clearMacroTable()
;  if $frameMessages then sayKeyedMsg("S2IZ0011",[$interpreterFrameName])
;  else sayKeyedMsg("S2IZ0012",NIL)
\end{verbatim}

<<defun clearCmdAll>>=
(defun |clearCmdAll| ()
 (progn
  (|clearCmdSortedCaches|)
  (setq |$frameRecord| nil)
  (setq |$previousBindings| nil)
  (setq |$variableNumberAlist| nil)
  (|untraceMapSubNames| /tracenames)
  (setq |$InteractiveFrame| (list (list nil)))
  (|resetInCoreHist|)
  (cond
   (|$useInternalHistoryTable| (setq |$internalHistoryTable| nil))
   (t (|deleteFile| (|histFileName|))))
  (setq |$IOindex| 1)
  (|updateCurrentInterpreterFrame|)
  (setq |$currentLine| ")clear all")
  (|clearMacroTable|)
  (cond 
   (|$frameMessages|
     (|sayKeyedMsg| 's2iz0011 (cons |$interpreterFrameName| nil)))
   (t (|sayKeyedMsg| 's2iz0012 nil))))) 

@

\subsection{defun clearCmdExcept}
\begin{verbatim}
;clearCmdExcept(l is [opt,:vl]) ==
;  --clears elements of vl of all options EXCEPT opt
;  for option in $clearOptions |
;    ^stringPrefix?(object2String opt,object2String option)
;      repeat clearCmdParts [option,:vl]
\end{verbatim}

<<defun clearCmdExcept>>=
(defun |clearCmdExcept| (arg)
 (prog (opt vl)
  (return
   (seq
    (progn
     (setq opt (car arg))
     (setq vl (cdr arg))
     (do ((t0 |$clearOptions| (cdr t0)) (option nil))
         ((or (atom t0) (progn (setq option (car t0)) nil)) nil)
      (seq
       (exit
        (cond
         ((null 
           (|stringPrefix?| 
            (|object2String| opt) 
            (|object2String| option)))
           (|clearCmdParts| (cons option vl)))))))))))) 

@

\subsection{defun clearCmdParts}
\begin{verbatim}
;clearCmdParts(l is [opt,:vl]) ==
;  -- clears the bindings indicated by opt of all variables in vl
;  option:= selectOptionLC(opt,$clearOptions,'optionError)
;  option:= INTERN PNAME option
;  -- the option can be plural but the key in the alist is sometimes
;  -- singular
;  option :=
;    option = 'types =>  'mode
;    option = 'modes =>  'mode
;    option = 'values => 'value
;    option
;  null vl => sayKeyedMsg("S2IZ0055",NIL)
;  pmacs := getParserMacroNames()
;  imacs := getInterpMacroNames()
;  if vl='(all) then
;    vl := ASSOCLEFT CAAR $InteractiveFrame
;    vl := REMDUP(append(vl, pmacs))
;  $e : local := $InteractiveFrame
;  for x in vl repeat
;    clearDependencies(x,true)
;    if option='properties and x in pmacs then clearParserMacro(x)
;    if option='properties and x in imacs and ^(x in pmacs) then
;        sayMessage ['"   You cannot clear the definition of the system-defined macro ",
;            fixObjectForPrinting x,"."]
;    p1 := ASSOC(x,CAAR $InteractiveFrame) =>
;      option='properties =>
;        if isMap x then
;          (lm := get(x,'localModemap,$InteractiveFrame)) =>
;            PAIRP lm => untraceMapSubNames [CADAR lm]
;          NIL
;        for p2 in CDR p1 repeat
;          prop:= CAR p2
;          recordOldValue(x,prop,CDR p2)
;          recordNewValue(x,prop,NIL)
;        SETF(CAAR $InteractiveFrame,deleteAssoc(x,CAAR $InteractiveFrame))
;      p2:= ASSOC(option,CDR p1) =>
;        recordOldValue(x,option,CDR p2)
;        recordNewValue(x,option,NIL)
;        RPLACD(p2,NIL)
;  nil
\end{verbatim}

<<defun clearCmdParts>>=
(defun |clearCmdParts| (arg)
 (prog (|$e| |opt| |option| |pmacs| |imacs| |vl| |p1| |lm| |prop| |p2|)
  (declare (special |$e|))
  (return
   (seq
    (progn
     (setq |opt| (car arg))
     (setq |vl| (cdr arg))
     (setq |option| (|selectOptionLC| |opt| |$clearOptions| '|optionError|))
     (setq |option| (intern (pname |option|)))
     (setq |option|
      (cond 
       ((eq |option| '|types|) '|mode|)
       ((eq |option| '|modes|) '|mode|)
       ((eq |option| '|values|) '|value|)
       (t |option|)))
     (cond
      ((null |vl|) (|sayKeyedMsg| 's2iz0055 nil))
      (t
       (setq |pmacs| (|getParserMacroNames|))
       (setq |imacs| (|getInterpMacroNames|))
       (cond
        ((boot-equal |vl| '(|all|))
         (setq |vl| (assocleft (caar |$InteractiveFrame|)))
         (setq |vl| (remdup (append |vl| |pmacs|)))))
       (setq |$e| |$InteractiveFrame|)
       (do ((t0 |vl| (cdr t0)) (|x| nil))
           ((or (atom t0) (progn (setq |x| (car t0)) nil)) nil)
        (seq
         (exit
          (progn
           (|clearDependencies| |x| t)
           (cond
            ((and (eq |option| '|properties|) (|member| |x| |pmacs|))
              (|clearParserMacro| |x|)))
           (cond 
            ((and (eq |option| '|properties|) 
                  (|member| |x| |imacs|)
                  (null (|member| |x| |pmacs|)))
             (|sayMessage| (cons 
              "   You cannot clear the definition of the system-defined macro "
               (cons (|fixObjectForPrinting| |x|) 
                     (cons (intern "." "BOOT") nil))))))
           (cond
            ((setq |p1| (|assoc| |x| (caar |$InteractiveFrame|)))
             (cond
              ((eq |option| '|properties|)
               (cond
                ((|isMap| |x|)
                 (seq
                  (cond
                   ((setq |lm| 
                     (|get| |x| '|localModemap| |$InteractiveFrame|))
                    (cond
                     ((pairp |lm|)
                     (exit (|untraceMapSubNames| (cons (cadar |lm|) nil))))))
                   (t nil)))))
               (do ((t1 (cdr |p1|) (cdr t1)) (|p2| nil))
                   ((or (atom t1) (progn (setq |p2| (car t1)) nil)) nil)
                (seq
                 (exit
                  (progn
                   (setq |prop| (car |p2|))
                   (|recordOldValue| |x| |prop| (cdr |p2|))
                   (|recordNewValue| |x| |prop| nil)))))
               (setf (caar |$InteractiveFrame|)
                (|deleteAssoc| |x| (caar |$InteractiveFrame|))))
              ((setq |p2| (|assoc| |option| (cdr |p1|)))
               (|recordOldValue| |x| |option| (cdr |p2|))
               (|recordNewValue| |x| |option| nil)
               (rplacd |p2| nil)))))))))
       nil))))))) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{close}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )close}
\item{\tt )close )quietly}
\end{list}
\par\noindent{\bf Command Description:}

This command is used to close down interpreter client processes.  Such
processes are started by HyperDoc to run Axiom examples when you click
on their text. When you have finished examining or modifying the
example and you do not want the extra window around anymore, issue
\begin{verbatim}
)close
\end{verbatim}
to the Axiom prompt in the window.

If you try to close down the last remaining interpreter client
process, Axiom will offer to close down the entire Axiom session and
return you to the operating system by displaying something like
\begin{verbatim}
   This is the last AXIOM session. Do you want to kill AXIOM?
\end{verbatim}
Type ``{\tt y}'' (followed by the Return key) if this is what you had in mind.
Type ``{\tt n}'' (followed by the Return key) to cancel the command.

You can use the {\tt )quietly} option to force Axiom to
close down the interpreter client process without closing down
the entire Axiom session.

\par\noindent{\bf Also See:}
\fnref{quit} and 
\fnref{pquit}

\subsection{defun queryClients}
Returns the number of active scratchpad clients
<<defun queryClients>>=
(defun |queryClients| ()
 (progn
  (|sockSendInt| |$SessionManager| |$QueryClients|)
  (|sockGetInt| |$SessionManager|))) 

@

\section{defun close}
\begin{verbatim}
;close args ==
;  $saturn =>
;    sayErrorly('"Obsolete system command", _
;      ['" The )close  system command is obsolete in this version of AXIOM.",
;       '" Please use Close from the File menu instead."])
;  quiet:local:= false
;  null $SpadServer =>
;    throwKeyedMsg('"S2IZ0071", [])
;  numClients := queryClients()
;  numClients > 1 =>
;    sockSendInt($SessionManager, $CloseClient)
;    sockSendInt($SessionManager, $currentFrameNum)
;    closeInterpreterFrame(NIL)
;  for [opt,:.] in $options repeat
;    fullopt := selectOptionLC(opt, '(quiet), 'optionError)
;    fullopt = 'quiet   =>
;           quiet:=true
;  quiet =>
;    sockSendInt($SessionManager, $CloseClient)
;    sockSendInt($SessionManager, $currentFrameNum)
;    closeInterpreterFrame(NIL)
;  x := UPCASE queryUserKeyedMsg('"S2IZ0072", nil)
;  MEMQ(STRING2ID_-N(x,1), '(YES Y)) =>
;    BYE()
;  nil
\end{verbatim}

<<defun close>>=
(defun |close| (args)
 (prog (numClients opt fullopt quiet x)
  (return
   (seq
    (cond
     (|$saturn|
      (|sayErrorly| "Obsolete system command" (cons 
       " The )close  system command is obsolete in this version of AXIOM."
       (cons " Please use Close from the File menu instead." nil))))
     (t
      (setq quiet nil)
      (cond
       ((null |$SpadServer|) (|throwKeyedMsg| 's2iz0071 nil))
       (t
        (setq numClients (|queryClients|))
        (cond
         ((> numClients 1)
           (|sockSendInt| |$SessionManager| |$CloseClient|)
           (|sockSendInt| |$SessionManager| |$currentFrameNum|)
           (|closeInterpreterFrame| NIL))
         (t
          (do ((t0 |$options| (cdr t0)) (t1 nil))
              ((or (atom t0) 
                   (progn (setq t1 (car t0)) nil)
                   (progn (progn (setq opt (car t1)) t1) nil))
                 nil)
           (seq
            (exit
             (progn
              (setq fullopt
                (|selectOptionLC| opt '(|quiet|) '|optionError|))
              (cond ((eq fullopt '|quiet|)
               (setq quiet t)))))))
          (cond
           (quiet
            (|sockSendInt| |$SessionManager| |$CloseClient|)
            (|sockSendInt| |$SessionManager| |$currentFrameNum|)
            (|closeInterpreterFrame| NIL))
           (t
            (setq x (upcase (|queryUserKeyedMsg| 's2iz0072 nil)))
            (cond
             ((memq (string2id-n x 1) '(yes y)) (bye))
             (t nil)))))))))))))) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{compiler}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} compiler

\par\noindent{\bf Command Syntax:}

\begin{list}{}
\item {\tt )compile}
\item {\tt )compile {\it fileName}}
\item {\tt )compile {\it fileName}.as}
\item {\tt )compile {\it directory/fileName}.as}
\item {\tt )compile {\it fileName}.ao}
\item {\tt )compile {\it directory/fileName}.ao}
\item {\tt )compile {\it fileName}.al}
\item {\tt )compile {\it directory/fileName}.al}
\item {\tt )compile {\it fileName}.lsp}
\item {\tt )compile {\it directory/fileName}.lsp}
\item {\tt )compile {\it fileName}.spad}
\item {\tt )compile {\it directory/fileName}.spad}
\item {\tt )compile {\it fileName} )new}
\item {\tt )compile {\it fileName} )old}
\item {\tt )compile {\it fileName} )translate}
\item {\tt )compile {\it fileName} )quiet}
\item {\tt )compile {\it fileName} )noquiet}
\item {\tt )compile {\it fileName} )moreargs}
\item {\tt )compile {\it fileName} )onlyargs}
\item {\tt )compile {\it fileName} )break}
\item {\tt )compile {\it fileName} )nobreak}
\item {\tt )compile {\it fileName} )library}
\item {\tt )compile {\it fileName} )nolibrary}
\item {\tt )compile {\it fileName} )vartrace}
\item {\tt )compile {\it fileName} )constructor} {\it nameOrAbbrev}
\end{list}

\par\noindent{\bf Command Description:}

You use this command to invoke the new Axiom library compiler or
the old Axiom system compiler.
The {\tt )compile} system command is actually a combination of
Axiom processing and a call to the Aldor compiler.
It is performing double-duty, acting as a front-end to
both the Aldor compiler and the old Axiom system
compiler.
(The old Axiom system compiler was written in Lisp and was
an integral part of the Axiom environment.
The Aldor compiler is written in C and executed by the operating system
when called from within Axiom.)

This command compiles files with file extensions {\it .as, .ao}
and {\it .al} with the
Aldor compiler and files with file extension {\it .spad} with the
old Axiom system compiler.
It also can compile files with file extension {\it .lsp}. These
are assumed to be Lisp files genererated by the Aldor
compiler.
If you omit the file extension, the command looks to see if you
have specified the {\tt )new} or {\tt )old} option.
If you have given one of these options, the corresponding compiler
is used.
Otherwise, the command first looks in the standard system
directories for files with extension {\it .as, .ao} and {\it
.al} and then files with extension {\it .spad}.
The first file found has the appropriate compiler invoked on it.
If the command cannot find a matching file, an error message is
displayed and the command terminates.

The {\tt )translate} option is used to invoke a special version
of the old system compiler that will translate a {\it .spad} file
to a {\it .as} file. That is, the {\it .spad} file will be parsed and
analyzed and a file using the new syntax will be created. By default,
the {\it .as} file is created in the same directory as the
{\it .spad} file. If that directory is not writable, the current
directory is used. If the current directory is not writable, an
error message is given and the command terminates.
Note that {\tt )translate} implies the {\tt )old} option so the
file extension can safely be omitted. If {\tt )translate} is
given, all other options are ignored.
Please be aware that the translation is not necessarily one
hundred percent complete or correct.
You should attempt to compile the output with the Aldor compiler
and make any necessary corrections.

We now describe the options for the new Aldor compiler.

The first thing {\tt )compile} does is look for a source code
filename among its arguments.
Thus
\begin{verbatim}
)compile mycode.as
)compile /u/jones/as/mycode.as
)compile mycode
\end{verbatim}
all invoke {\tt )compiler} on the file {\tt
/u/jones/as/mycode.as} if the current Axiom working
directory is {\tt /u/jones/as.} (Recall that you can set the
working directory via the {\tt )cd} command. If you don't set it
explicitly, it is the directory from which you started
Axiom.)

This is frequently all you need to compile your file.
This simple command:
\begin{enumerate}
\item Invokes the Aldor compiler and produces Lisp output.
\item Calls the Lisp compiler if the Aldor compilation was
successful.
\item Uses the {\tt )library} command to tell Axiom about
the contents of your compiled file and arrange to have those
contents loaded on demand.
\end{enumerate}

Should you not want the {\tt )library} command automatically
invoked, call {\tt )compile} with the {\tt )nolibrary} option.
For example,
\begin{verbatim}
)compile mycode.as )nolibrary
\end{verbatim}

The general description of Aldor command line arguments is in
the Aldor documentation.
The default options used by the {\tt )compile} command can be
viewed and set using the {\tt )set compiler args} Axiom
system command.
The current defaults are
\begin{verbatim}
-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom
\end{verbatim}
These options mean:
\begin{itemize}
\item {\tt -O}: perform all optimizations,
\item {\tt -Fasy}: generate a {\tt .asy} file,
\item {\tt -Fao}: generate a {\tt .ao} file,
\item {\tt -Flsp}: generate a {\tt .lsp} (Lisp)
file,
\index{Lisp!code generation}
\item {\tt -laxiom}: use the {\tt axiom} library {\tt libaxiom.al},
\item {\tt -Mno-AXL\_W\_WillObsolete}: do not display messages
about older generated files becoming obsolete, and
\item {\tt -DAxiom}: define the global assertion {\tt Axiom} so that the
Aldor libraries for generating stand-alone code
are not accidentally used with Axiom.
\end{itemize}

To supplement these default arguments, use the {\tt )moreargs} option on
{\tt )compile.}
For example,
\begin{verbatim}
)compile mycode.as )moreargs "-v"
\end{verbatim}
uses the default arguments and appends the {\tt -v} (verbose)
argument flag.
The additional argument specification {\bf must be enclosed in
double quotes.}

To completely replace these default arguments for a particular
use of {\tt )compile}, use the {\tt )onlyargs} option.
For example,
\begin{verbatim}
)compile mycode.as )onlyargs "-v -O"
\end{verbatim}
only uses the {\tt -v} (verbose) and {\tt -O} (optimize)
arguments.
The argument specification {\bf must be enclosed in double quotes.}
In this example, Lisp code is not produced and so the compilation
output will not be available to Axiom.

To completely replace the default arguments for all calls to {\tt
)compile} within your Axiom session, use {\tt )set compiler args.}
For example, to use the above arguments for all compilations, issue
\begin{verbatim}
)set compiler args "-v -O"
\end{verbatim}
Make sure you include the necessary {\tt -l} and {\tt -Y}
arguments along with those needed for Lisp file creation.
As above, {\bf the argument specification must be enclosed in double
quotes.}

By default, the {\tt )library} system command {\it exposes} all
domains and categories it processes.
This means that the Axiom intepreter will consider those
domains and categories when it is trying to resolve a reference
to a function.
Sometimes domains and categories should not be exposed.
For example, a domain may just be used privately by another
domain and may not be meant for top-level use.
The {\tt )library} command should still be used, though, so that
the code will be loaded on demand.
In this case, you should use the {\tt )nolibrary} option on {\tt
)compile} and the {\tt )noexpose} option in the {\tt )library}
command. For example,
\begin{verbatim}
)compile mycode.as )nolibrary
)library mycode )noexpose
\end{verbatim}

Once you have established your own collection of compiled code,
you may find it handy to use the {\tt )dir} option on the
{\tt )library} command.
This causes {\tt )library} to process all compiled code in the
specified directory. For example,
\begin{verbatim}
)library )dir /u/jones/as/quantum
\end{verbatim}
You must give an explicit directory after {\tt )dir}, even if you
want all compiled code in the current working directory
processed, e.g.
\begin{verbatim}
)library )dir .
\end{verbatim}

The {\tt )compile} command works with several file extensions. We saw
above what happens when it is invoked on a file with extension {\tt
.as.} A {\tt .ao} file is a portable binary compiled version of a
{\tt .as} file, and {\tt )compile} simply passes the {\tt .ao} file
onto Aldor. The generated Lisp file is compiled and {\tt )library}
is automatically called, just as if you had specified a {\tt .as} file.

A {\tt .al} file is an archive file containing {\tt .ao} files. The
archive is created (on Unix systems) with the {\tt ar} program. When
{\tt )compile} is given a {\tt .al} file, it creates a directory whose
name is based on that of the archive. For example, if you issue
\begin{verbatim}
)compile mylib.al
\end{verbatim}
the directory {\tt mylib.axldir} is created. All
members of the archive are unarchived into the
directory and {\tt )compile} is called on each {\tt .ao} file found. It
is your responsibility to remove the directory and its contents, if you
choose to do so.

A {\tt .lsp} file is a Lisp source file, presumably, in our context,
generated by Aldor when called with the {\tt -Flsp} option. When
{\tt )compile} is used with a {\tt .lsp} file, the Lisp file is
compiled and {\tt )library} is called. You must also have present a
{\tt .asy} generated from the same source file.

The following are descriptions of options for the old system compiler.

You can compile category, domain, and package constructors
contained in files with file extension {\it .spad}.
You can compile individual constructors or every constructor
in a file.

The full filename is remembered between invocations of this command and
{\tt )edit} commands.
The sequence of commands
\begin{verbatim}
)compile matrix.spad
)edit
)compile
\end{verbatim}
will call the compiler, edit, and then call the compiler again
on the file {\bf matrix.spad.}
If you do not specify a {\it directory,} the working current
directory is searched for the file.
If the file is not found, the standard system directories are searched.

If you do not give any options, all constructors within a file are
compiled.
Each constructor should have an {\tt )abbreviation} command in
the file in which it is defined.
We suggest that you place the {\tt )abbreviation} commands at the
top of the file in the order in which the constructors are
defined.
The list of commands serves as a table of contents for the file.
\index{abbreviation}

The {\tt )library} option causes directories containing the
compiled code for each constructor
to be created in the working current directory.
The name of such a directory consists of the constructor
abbreviation and the {\bf .nrlib} file extension.
For example, the directory containing the compiled code for
the {\tt MATRIX} constructor is called {\bf MATRIX.nrlib.}
The {\tt )nolibrary} option says that such files should not
be created.
The default is {\tt )library.}
Note that the semantics of {\tt )library} and {\tt )nolibrary}
for the new Aldor compiler and for the old system compiler are
completely different.

The {\tt )vartrace} option causes the compiler to generate
extra code for the constructor to support conditional tracing of
variable assignments. Without
this option, this code is suppressed and one cannot use
the {\tt )vars} option for the trace command.

The {\tt )constructor} option is used to
specify a particular constructor to compile.
All other constructors in the file are ignored.
The constructor name or abbreviation follows {\tt )constructor.}
Thus either
\begin{verbatim}
)compile matrix.spad )constructor RectangularMatrix
\end{verbatim}
or
\begin{verbatim}
)compile matrix.spad )constructor RMATRIX
\end{verbatim}
compiles  the {\tt RectangularMatrix} constructor
defined in {\bf matrix.spad.}

The {\tt )break} and {\tt )nobreak} options determine what
the old system compiler does when it encounters an error.
{\tt )break} is the default and it indicates that processing
should stop at the first error.
The value of the {\tt )set break} variable then controls what happens.

\par\noindent{\bf Also See:}
{\tt )abbreviations},
{\tt )edit}, and 
{\tt )library}

\subsection{defun compiler}
\begin{verbatim}
;compiler args ==
;    $newConlist: local := nil    --reset by compDefineLisplib and astran
;    null args and null $options and null _/EDITFILE => helpSpad2Cmd '(compiler)
;    if null args then args := [_/EDITFILE]
;    -- first see if the user has explicitly specified the compiler
;    -- to use.
;    optlist := '(new old translate constructor)
;    haveNew := nil
;    haveOld := nil
;    for opt in $options while ^(haveNew and haveOld) repeat
;        [optname,:optargs] := opt
;        fullopt := selectOptionLC(optname,optlist,nil)
;        fullopt = 'new => haveNew := true
;        fullopt = 'translate => haveOld := true
;        fullopt = 'constructor => haveOld := true
;        fullopt = 'old => haveOld := true
;    haveNew and haveOld => throwKeyedMsg("S2IZ0081", nil)
;    af  := pathname args
;    aft := pathnameType af
;-- Whats this for? MCD/PAB 21-9-95
;--    if haveNew and (null(aft) or (aft = '"")) then
;--        af := pathname [af, '"as"]
;--        aft = '"as"
;--    if haveOld and (null(aft) or (aft = '"")) then
;--        af := pathname [af, '"spad"]
;--        aft = '"spad"
;    haveNew or (aft = '"as")   =>
;        not (af1 := $FINDFILE (af, '(as))) =>
;            throwKeyedMsg("S2IL0003",[NAMESTRING af])
;        compileAsharpCmd [af1]
;    haveOld or (aft = '"spad") =>
;        not (af1 := $FINDFILE (af, '(spad))) =>
;            throwKeyedMsg("S2IL0003",[NAMESTRING af])
;        compileSpad2Cmd  [af1]
;    aft = '"lsp"   =>
;        not (af1 := $FINDFILE (af, '(lsp))) =>
;            throwKeyedMsg("S2IL0003",[NAMESTRING af])
;        compileAsharpLispCmd [af1]
;    aft = '"nrlib"  =>
;        not (af1 := $FINDFILE (af, '(nrlib))) =>
;            throwKeyedMsg("S2IL0003",[NAMESTRING af])
;        compileSpadLispCmd [af1]
;    aft = '"ao"   =>
;        not (af1 := $FINDFILE (af, '(ao))) =>
;            throwKeyedMsg("S2IL0003",[NAMESTRING af])
;        compileAsharpCmd [af1]
;    aft = '"al"   =>    -- archive library of .ao files
;        not (af1 := $FINDFILE (af, '(al))) =>
;            throwKeyedMsg("S2IL0003",[NAMESTRING af])
;        compileAsharpArchiveCmd [af1]
;    -- see if we something with the appropriate file extension
;    -- lying around
;    af1 := $FINDFILE (af, '(as spad ao asy))
;    af1 and pathnameType(af1) = '"as"   => compileAsharpCmd [af1]
;    af1 and pathnameType(af1) = '"ao"  => compileAsharpCmd [af1]
;    af1 and pathnameType(af1) = '"spad" => compileSpad2Cmd  [af1]
;    af1 and pathnameType(af1) = '"asy"  => compileAsharpArchiveCmd [af1]
;    -- maybe /EDITFILE has some stuff that can help us
;    ef := pathname _/EDITFILE
;    ef := mergePathnames(af,ef)
;    ef = af => throwKeyedMsg("S2IZ0039", nil)
;    af := ef
;    pathnameType(af) = '"as"   => compileAsharpCmd args
;    pathnameType(af) = '"ao"  => compileAsharpCmd args
;    pathnameType(af) = '"spad" => compileSpad2Cmd  args
;    -- see if we something with the appropriate file extension
;    -- lying around
;    af1 := $FINDFILE (af, '(as spad ao asy))
;    af1 and pathnameType(af1) = '"as"   => compileAsharpCmd [af1]
;    af1 and pathnameType(af1) = '"ao"  => compileAsharpCmd [af1]
;    af1 and pathnameType(af1) = '"spad" => compileSpad2Cmd  [af1]
;    af1 and pathnameType(af1) = '"asy"  => compileAsharpArchiveCmd [af1]
;    throwKeyedMsg("S2IZ0039", nil)
\end{verbatim}

<<defun compiler>>=
(defun |compiler| (args)
 (prog (|$newConlist| optlist optname optargs fullopt havenew haveold 
        aft ef af af1)
  (declare (special |$newConlist|))
  (return
   (seq
    (progn
     (setq |$newConlist| nil)
     (cond
      ((and (null args) (null |$options|) (null /editfile))
        (|helpSpad2Cmd| '(|compiler|)))
      (t
       (cond ((null args) (setq args (cons /editfile nil))))
       (setq optlist '(|new| |old| |translate| |constructor|))
       (setq havenew nil)
       (setq haveold nil)
       (do ((t0 |$options| (CDR t0)) (|opt| NIL))
           ((or (atom t0) 
                (progn (setq |opt| (car t0)) nil)
                (null (null (and havenew haveold))))
             nil)
        (seq
         (exit
          (progn
           (setq optname (car |opt|))
           (setq optargs (cdr |opt|))
           (setq fullopt (|selectOptionLC| optname optlist nil))
           (cond
            ((eq fullopt '|new|) (setq havenew t))
            ((eq fullopt '|translate|) (setq haveold t))
            ((eq fullopt '|constructor|) (setq haveold t))
            ((eq fullopt '|old|) (setq haveold t)))))))
       (cond
        ((and havenew haveold) (|throwKeyedMsg| 's2iz0081 nil))
        (t
         (setq af (|pathname| args))
         (setq aft (|pathnameType| af))
         (cond
          ((or havenew (string= aft "as"))
           (cond
            ((null (setq af1 ($findfile af '(|as|))))
             (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil)))
            (t
             (|compileAsharpCmd| (cons af1 nil)))))
          ((or haveold (string= aft "spad"))
           (cond
            ((null (setq af1 ($findfile af '(|spad|))))
              (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil)))
            (t
              (|compileSpad2Cmd| (cons af1 nil)))))
          ((string= aft "lsp")
           (cond
            ((null (setq af1 ($findfile af '(|lsp|))))
             (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil)))
            (t
             (|compileAsharpLispCmd| (CONS af1 NIL)))))
          ((string= aft "nrlib")
           (cond
            ((null (setq af1 ($findfile af '(|nrlib|))))
             (|throwKeyedMsg| 'S2IL0003 (cons (namestring af) nil)))
            (t
             (|compileSpadLispCmd| (cons af1 nil)))))
          ((string= aft "ao")
           (cond
            ((null (setq af1 ($findfile af '(|ao|))))
             (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil)))
            (t (|compileAsharpCmd| (cons af1 nil)))))
          ((string= aft "al")
           (cond
            ((null (setq af1 ($findfile af '(|al|))))
             (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil)))
            (t (|compileAsharpArchiveCmd| (cons af1 nil)))))
          (t
           (setq af1 ($findfile af '(|as| |spad| |ao| |asy|)))
           (cond
            ((and af1 (string= (|pathnameType| af1) "as"))
             (|compileAsharpCmd| (CONS af1 NIL)))
            ((and af1 (string= (|pathnameType| af1) "ao"))
             (|compileAsharpCmd| (CONS af1 NIL)))
            ((and af1 (string= (|pathnameType| af1) "spad"))
             (|compileSpad2Cmd| (CONS af1 NIL)))
            ((and af1 (string= (|pathnameType| af1) "asy"))
             (|compileAsharpArchiveCmd| (CONS af1 NIL)))
            (t
             (setq ef (|pathname| /editfile))
             (setq ef (|mergePathnames| af ef))
             (cond
              ((boot-equal ef af) (|throwKeyedMsg| 's2iz0039 nil))
              (t
               (setq af ef)
               (cond
                ((string= (|pathnameType| af) "as")
                 (|compileAsharpCmd| args))
                ((string= (|pathnameType| af) "ao")
                 (|compileAsharpCmd| args))
                ((string= (|pathnameType| af) "spad")
                 (|compileSpad2Cmd| args))
                (t
                 (setq af1 ($findfile af '(|as| |spad| |ao| |asy|)))
                 (cond
                  ((and af1 (string= (|pathnameType| af1) "as"))
                    (|compileAsharpCmd| (CONS af1 NIL)))
                  ((and af1 (string= (|pathnameType| af1) "ao"))
                    (|compileAsharpCmd| (CONS af1 NIL)))
                  ((and af1 (string= (|pathnameType| af1) "spad"))
                    (|compileSpad2Cmd| (CONS af1 NIL)))
                  ((and af1 (string= (|pathnameType| af1) "asy"))
                   (|compileAsharpArchiveCmd| (CONS af1 NIL)))
                  (t (|throwKeyedMsg| 's2iz0039 nil)))))))))))))))))))) 

@

\subsection{defun compileAsharpCmd} 
<<defun compileAsharpCmd>>=
(defun |compileAsharpCmd| (args)
  (|compileAsharpCmd1| args)
  (|terminateSystemCommand|)
  (|spadPrompt|))

@

\subsection{defun compileAsharpCmd1}
\begin{verbatim}
;compileAsharpCmd1 args ==
;    -- Assume we entered from the "compiler" function, so args ^= nil
;    -- and is a file with file extension .as or .ao
;    path := pathname args
;    pathType := pathnameType path
;    (pathType ^= '"as") and (pathType ^= '"ao") => throwKeyedMsg("S2IZ0083", nil)
;    ^PROBE_-FILE path => throwKeyedMsg("S2IL0003",[namestring args])
;    SETQ(_/EDITFILE, path)
;    updateSourceFiles path
;    optList :=  '( _
;      new _
;      old _
;      translate _
;      onlyargs _
;      moreargs _
;      quiet _
;      nolispcompile _
;      noquiet _
;      library _
;      nolibrary _
;        )
;    beQuiet := false         -- be verbose here
;    doLibrary  := true       -- so a )library after compilation
;    doCompileLisp := true    -- do compile generated lisp code
;    moreArgs := NIL
;    onlyArgs := NIL
;    for opt in $options repeat
;        [optname,:optargs] := opt
;        fullopt := selectOptionLC(optname,optList,nil)
;        fullopt = 'new       => nil
;        fullopt = 'old       => error "Internal error: compileAsharpCmd got )old"
;        fullopt = 'translate => error "Internal error: compileAsharpCmd got )translate"
;        fullopt = 'quiet     => beQuiet := true
;        fullopt = 'noquiet   => beQuiet := false
;        fullopt = 'nolispcompile   => doCompileLisp := false
;        fullopt = 'moreargs  => moreArgs := optargs
;        fullopt = 'onlyargs  => onlyArgs := optargs
;        fullopt = 'library   => doLibrary  := true
;        fullopt = 'nolibrary => doLibrary  := false
;        throwKeyedMsg("S2IZ0036",[STRCONC('")",object2String optname)])
;    tempArgs :=
;        pathType = '"ao" =>
;            -- want to strip out -Fao
;            (p := STRPOS('"-Fao", $asharpCmdlineFlags, 0, NIL)) =>
;                p = 0 => SUBSTRING($asharpCmdlineFlags, 5, NIL)
;                STRCONC(SUBSTRING($asharpCmdlineFlags, 0, p), '" ",
;                    SUBSTRING($asharpCmdlineFlags, p+5, NIL))
;            $asharpCmdlineFlags
;        $asharpCmdlineFlags
;    asharpArgs :=
;        onlyArgs =>
;            s := ""
;            for a in onlyArgs repeat
;                s := STRCONC(s, '" ", object2String a)
;            s
;        moreArgs =>
;            s := tempArgs
;            for a in moreArgs repeat
;                s := STRCONC(s, '" ", object2String a)
;            s
;        tempArgs
;    if ^beQuiet then sayKeyedMsg("S2IZ0038A",[namestring args, asharpArgs])
;    command :=
;     STRCONC(STRCONC(GETENV('"ALDORROOT"),'"/bin/"),_
;               "aldor ", asharpArgs, '" ", namestring args)
;    rc := OBEY command
;    if (rc = 0) and doCompileLisp then
;        lsp := fnameMake('".", pathnameName args, '"lsp")
;        if fnameReadable?(lsp) then
;            if ^beQuiet then sayKeyedMsg("S2IZ0089", [namestring lsp])
;            compileFileQuietly(lsp)
;        else
;            sayKeyedMsg("S2IL0003", [namestring lsp])
;    if rc = 0 and doLibrary then
;        -- do we need to worry about where the compilation output went?
;        if ^beQuiet then sayKeyedMsg("S2IZ0090", [ pathnameName path ])
;        withAsharpCmd [ pathnameName path ]
;    else if ^beQuiet then
;        sayKeyedMsg("S2IZ0084", nil)
;    extendLocalLibdb $newConlist
\end{verbatim}

<<defun compileAsharpCmd1>>=
(defun |compileAsharpCmd1| (args)
 (prog (path pathtype optlist optname optargs fullopt bequiet docompilelisp 
        moreargs onlyargs dolibrary p tempargs s asharpargs command rc lsp)
   (return
    (seq
     (progn
      (setq path (|pathname| args))
      (setq pathtype (|pathnameType| path))
      (cond
      ((and (nequal pathtype "as") (nequal pathtype "ao"))
        (|throwKeyedMsg| 's2iz0083 nil))
      ((null (probe-file path))
        (|throwKeyedMsg| 's2il0003 (cons (|namestring| args) nil)))
      (t
       (setq /editfile path)
       (|updateSourceFiles| path)
       (setq optlist
        '(|new| |old| |translate| |onlyargs| |moreargs| |quiet| 
          |nolispcompile| |noquiet| |library| |nolibrary|))
       (setq bequiet nil)
       (setq dolibrary t)
       (setq docompilelisp t)
       (setq moreargs nil)
       (setq onlyargs nil)
       (do ((t0 |$options| (cdr t0)) (|opt| nil))
           ((or (atom t0) (progn (setq |opt| (car t0)) nil)) nil)
        (seq
         (exit
          (progn
           (setq optname (car |opt|))
           (setq optargs (cdr |opt|))
           (setq fullopt (|selectOptionLC| optname optlist nil))
           (cond
            ((eq fullopt '|new|) nil)
            ((eq fullopt '|old|)
             (|error| '|Internal error: compileAsharpCmd got )old|))
            ((eq fullopt '|translate|)
             (|error| '|Internal error: compileAsharpCmd got )translate|))
            ((eq fullopt '|quiet|) (setq bequiet t))
            ((eq fullopt '|noquiet|) (setq bequiet nil))
            ((eq fullopt '|nolispcompile|) 
              (setq docompilelisp nil))
            ((eq fullopt '|moreargs|) (setq moreargs optargs))
            ((eq fullopt '|onlyargs|) (setq onlyargs optargs))
            ((eq fullopt '|library|) (setq dolibrary t))
            ((eq fullopt '|nolibrary|) (setq dolibrary nil))
            (t 
             (|throwKeyedMsg| 's2iz0036
              (cons (strconc ")" (|object2String| optname)) nil))))))))
       (setq tempargs
        (cond
         ((string= pathtype "ao")
          (cond
           ((setq p (strpos "-Fao" |$asharpCmdlineFlags| 0 nil))
            (cond
             ((eql p 0) (substring |$asharpCmdlineFlags| 5 nil))
             (t
              (strconc (substring |$asharpCmdlineFlags| 0 p) 
                " " (substring |$asharpCmdlineFlags| (plus p 5) nil)))))
           (t |$asharpCmdlineFlags|)))
         (t |$asharpCmdlineFlags|)))
       (setq asharpargs
        (cond
         (onlyargs
          (setq s '||)
          (do ((t1 onlyargs (cdr t1)) (|a| nil))
              ((or (atom t1) (progn (setq |a| (car t1)) nil)) nil)
           (seq
            (exit
             (setq s (strconc s " " (|object2String| |a|))))))
          s)
         (moreargs
          (setq s tempargs)
          (do ((t2 moreargs (cdr t2)) (|a| nil))
              ((or (atom t2) (progn (setq |a| (car t2)) nil)) nil)
           (seq
            (exit
             (setq s (strconc s " " (|object2String| |a|))))))
          s)
         (t tempargs)))
       (cond ((null bequiet)
        (|sayKeyedMsg| 's2iz0038a 
         (cons (|namestring| args) (cons asharpargs nil)))))
       (setq command
        (strconc
         (strconc (getenv "ALDORROOT") "/bin/")
         '|aldor | asharpargs " " (|namestring| args)))
       (setq rc (obey command))
       (cond
        ((and (eql rc 0) docompilelisp)
          (setq lsp (|fnameMake| "." (|pathnameName| args) "lsp"))
          (cond
           ((|fnameReadable?| lsp)
            (cond
             ((null bequiet)
              (|sayKeyedMsg| 's2iz0089 (cons (|namestring| lsp) nil))))
            (|compileFileQuietly| lsp))
           (t (|sayKeyedMsg| 's2il0003 (cons (|namestring| lsp) nil))))))
       (cond
        ((and (eql rc 0) dolibrary)
         (cond
          ((null bequiet)
            (|sayKeyedMsg| 's2iz0090 (cons (|pathnameName| path) nil))))
         (|withAsharpCmd| (cons (|pathnameName| path) nil)))
        ((null bequiet) (|sayKeyedMsg| 's2iz0084 nil))
        (t nil))
       (|extendLocalLibdb| |$newConlist|)))))))) 

@

\subsection{defun compileAsharpArchiveCmd}
\begin{verbatim}
;compileAsharpArchiveCmd args ==
;    -- Assume we entered from the "compiler" function, so args ^= nil
;    -- and is a file with file extension .al. We also assume that
;    -- the name is fully qualified.
;    path := pathname args
;    ^PROBE_-FILE path => throwKeyedMsg("S2IL0003",[namestring args])
;    -- here is the plan:
;    --   1. extract the file name and try to make a directory based
;    --      on that name.
;    --   2. cd to that directory and ar x the .al file
;    --   3. for each .ao file that shows up, compile it
;    --   4. delete the generated .ao files
;    -- First try to make the directory in the current directory
;    dir  := fnameMake('".", pathnameName path, '"axldir")
;    exists := PROBE_-FILE dir
;    isDir := directoryp namestring dir
;    exists and isDir ^= 1=>
;        throwKeyedMsg("S2IL0027",[namestring dir, namestring args])
;    if isDir ^= 1 then
;        cmd  := STRCONC('"mkdir ", namestring dir)
;        rc   := OBEY cmd
;        rc ^= 0 => throwKeyedMsg("S2IL0027",[namestring dir, namestring args])
;    curDir := $CURRENT_-DIRECTORY
;    -- cd to that directory and try to unarchive the .al file
;    cd [ object2Identifier namestring dir ]
;    cmd := STRCONC( '"ar x ", namestring path )
;    rc := OBEY cmd
;    rc ^= 0 =>
;        cd [ object2Identifier namestring curDir ]
;        throwKeyedMsg("S2IL0028",[namestring dir, namestring args])
;    -- Look for .ao files
;    asos := DIRECTORY '"*.ao"
;    null asos =>
;        cd [ object2Identifier namestring curDir ]
;        throwKeyedMsg("S2IL0029",[namestring dir, namestring args])
;    -- Compile the .ao files
;    for aso in asos repeat
;        compileAsharpCmd1 [ namestring aso ]
;    -- Reset the current directory
;    cd [ object2Identifier namestring curDir ]
;    terminateSystemCommand()
;    spadPrompt()
\end{verbatim}

<<defun compileAsharpArchiveCmd>>=
(defun |compileAsharpArchiveCmd| (args)
 (prog (path dir exists isdir curdir cmd rc asos)
  (return
   (seq
    (progn 
     (setq path (|pathname| args))
     (cond
      ((null (probe-file path))
       (|throwKeyedMsg| 's2il0003 (cons (|namestring| args) nil)))
      (t
       (setq dir (|fnameMake| "." (|pathnameName| path) "axldir"))
       (setq exists (probe-file dir))
       (setq isdir (|directoryp| (|namestring| dir)))
       (cond
        ((and exists (nequal isdir 1))
          (|throwKeyedMsg| 's2il0027
           (cons (|namestring| dir) (cons (|namestring| args) nil))))
        (t
         (cond
          ((nequal isdir 1)
           (setq cmd (strconc "mkdir " (|namestring| dir)))
           (setq rc (obey cmd))
           (cond
            ((nequal rc 0)
             (|throwKeyedMsg| 's2il0027 
              (cons (|namestring| dir) (cons (|namestring| args) nil)))))))
         (setq curdir $current-directory)
         (|cd| (cons (|object2Identifier| (|namestring| dir)) nil))
         (setq cmd (strconc "ar x " (|namestring| path)))
         (setq rc (obey cmd))
         (cond
          ((nequal rc 0)
           (|cd| (cons (|object2Identifier| (|namestring| curdir)) nil))
           (|throwKeyedMsg| 's2il0028
            (cons (|namestring| dir) (cons (|namestring| args) nil))))
          (t
           (setq asos (directory (makestring "*.ao")))
           (cond
            ((null asos)
             (|cd| (cons (|object2Identifier| (|namestring| curdir)) nil))
             (|throwKeyedMsg| 's2il0029
              (cons (|namestring| dir) (cons (|namestring| args) nil))))
            (t
             (do ((t0 asos (cdr t0)) (|aso| nil))
                 ((or (atom t0) (progn (setq |aso| (car t0)) nil)) nil)
              (seq
               (exit
                (|compileAsharpCmd1| (cons (|namestring| |aso|) nil)))))
             (|cd| (CONS (|object2Identifier| (|namestring| curdir)) NIL))
             (|terminateSystemCommand|)
             (|spadPrompt|)))))))))))))) 

@

\subsection{defun compileAsharpLispCmd}
\begin{verbatim}
;compileAsharpLispCmd args ==
;    -- Assume we entered from the "compiler" function, so args ^= nil
;    -- and is a file with file extension .lsp
;    path := pathname args
;    ^PROBE_-FILE path => throwKeyedMsg("S2IL0003",[namestring args])
;    optList :=  '( _
;      quiet _
;      noquiet _
;      library _
;      nolibrary _
;        )
;    beQuiet := false         -- be verbose here
;    doLibrary  := true       -- so a )library after compilation
;    for opt in $options repeat
;        [optname,:optargs] := opt
;        fullopt := selectOptionLC(optname,optList,nil)
;        fullopt = 'quiet     => beQuiet := true
;        fullopt = 'noquiet   => beQuiet := false
;        fullopt = 'library   => doLibrary  := true
;        fullopt = 'nolibrary => doLibrary  := false
;        throwKeyedMsg("S2IZ0036",[STRCONC('")",object2String optname)])
;    lsp := fnameMake(pathnameDirectory path, pathnameName path, pathnameType path)
;    if fnameReadable?(lsp) then
;        if ^beQuiet then sayKeyedMsg("S2IZ0089", [namestring lsp])
;        compileFileQuietly(lsp)
;    else
;        sayKeyedMsg("S2IL0003", [namestring lsp])
;    if doLibrary then
;        -- do we need to worry about where the compilation output went?
;        if ^beQuiet then sayKeyedMsg("S2IZ0090", [ pathnameName path ])
;        withAsharpCmd [ pathnameName path ]
;    else if ^beQuiet then
;        sayKeyedMsg("S2IZ0084", nil)
;    terminateSystemCommand()
;    spadPrompt()
\end{verbatim}

<<defun compileAsharpLispCmd>>=
(defun |compileAsharpLispCmd| (args)
 (prog (path optlist optname optargs fullopt bequiet 
        dolibrary lsp)
  (return 
   (seq 
    (progn 
     (setq path (|pathname| args))
     (cond
      ((null (probe-file path)) 
         (|throwKeyedMsg| 's2il0003 (CONS (|namestring| args) NIL)))
      (t
       (setq optlist '(|quiet| |noquiet| |library| |nolibrary|))
       (setq bequiet nil)
       (setq dolibrary t)
       (do ((t0 |$options| (cdr t0)) (|opt| nil))
           ((or (atom t0) (progn (setq |opt| (car t0)) nil)) nil)
        (seq
         (exit
          (progn
           (setq optname (car |opt|))
           (setq optargs (cdr |opt|))
           (setq fullopt (|selectOptionLC| optname optlist nil))
           (cond
            ((eq fullopt '|quiet|) (setq bequiet t))
            ((eq fullopt '|noquiet|) (setq bequiet nil))
            ((eq fullopt '|library|) (setq dolibrary t))
            ((eq fullopt '|nolibrary|) (setq dolibrary nil))
            (t
             (|throwKeyedMsg| 's2iz0036 
              (cons (strconc ")" (|object2String| optname)) nil))))))))
       (setq lsp
        (|fnameMake|
         (|pathnameDirectory| path)
         (|pathnameName| path)
         (|pathnameType| path)))
       (cond
        ((|fnameReadable?| lsp)
         (cond
          ((null bequiet)
            (|sayKeyedMsg| 's2iz0089 (cons (|namestring| lsp) NIL))))
         (|compileFileQuietly| lsp))
        (t (|sayKeyedMsg| 's2il0003 (cons (|namestring| lsp) nil))))
       (cond
        (dolibrary
         (cond
          ((null bequiet) 
           (|sayKeyedMsg| 's2iz0090 (cons (|pathnameName| path) nil))))
         (|withAsharpCmd| (CONS (|pathnameName| path) NIL)))
        ((null bequiet) (|sayKeyedMsg| 's2iz0084 nil))
        (t nil))
       (|terminateSystemCommand|)
       (|spadPrompt|)))))))) 

@

\subsection{defun compileSpadLispCmd}
\begin{verbatim}
;compileSpadLispCmd args ==
;    -- Assume we entered from the "compiler" function, so args ^= nil
;    -- and is a file with file extension .nrlib
;    path := pathname fnameMake(first args, '"code", '"lsp")
;    ^PROBE_-FILE path => throwKeyedMsg("S2IL0003",[namestring args])
;    optList :=  '( _
;      quiet _
;      noquiet _
;      library _
;      nolibrary _
;        )
;    beQuiet := false         -- be verbose here
;    doLibrary  := true       -- so a )library after compilation
;    for opt in $options repeat
;        [optname,:optargs] := opt
;        fullopt := selectOptionLC(optname,optList,nil)
;        fullopt = 'quiet     => beQuiet := true
;        fullopt = 'noquiet   => beQuiet := false
;        fullopt = 'library   => doLibrary  := true
;        fullopt = 'nolibrary => doLibrary  := false
;        throwKeyedMsg("S2IZ0036",[STRCONC('")",object2String optname)])
;    lsp := fnameMake(pathnameDirectory path, pathnameName path, pathnameType path)
;    if fnameReadable?(lsp) then
;        if ^beQuiet then sayKeyedMsg("S2IZ0089", [namestring lsp])
;        --compileFileQuietly(lsp)
;        RECOMPILE_-LIB_-FILE_-IF_-NECESSARY lsp
;    else
;        sayKeyedMsg("S2IL0003", [namestring lsp])
;    if doLibrary then
;        -- do we need to worry about where the compilation output went?
;        if ^beQuiet then sayKeyedMsg("S2IZ0090", [ pathnameName path ])
;        LOCALDATABASE([ pathnameName first args ],[])
;    else if ^beQuiet then
;        sayKeyedMsg("S2IZ0084", nil)
;    terminateSystemCommand()
;    spadPrompt()
\end{verbatim}

<<defun compileSpadLispCmd>>=
(defun |compileSpadLispCmd| (args)
 (prog (path optlist optname optargs fullopt beQuiet dolibrary lsp)
  (return
   (seq
    (progn
     (setq path (|pathname| (|fnameMake| (car args) "code" "lsp")))
     (cond
      ((null (probe-file path))
        (|throwKeyedMsg| 's2il0003 (cons (|namestring| args) nil)))
      (t
       (setq optlist '(|quiet| |noquiet| |library| |nolibrary|))
       (setq beQuiet nil)
       (setq dolibrary t)
       (do ((t0 |$options| (cdr t0)) (|opt| nil))
           ((or (atom t0) (progn (setq |opt| (car t0)) nil)) nil)
        (seq
         (exit
          (progn
           (setq optname (car |opt|))
           (setq optargs (cdr |opt|))
           (setq fullopt (|selectOptionLC| optname optlist nil))
           (cond
            ((eq fullopt '|quiet|) (setq beQuiet t))
            ((eq fullopt '|noquiet|) (setq beQuiet nil))
            ((eq fullopt '|library|) (setq dolibrary t))
            ((eq fullopt '|nolibrary|) (setq dolibrary nil))
            (t
             (|throwKeyedMsg| 's2iz0036
              (cons (strconc ")" (|object2String| optname)) nil))))))))
       (setq lsp
        (|fnameMake|
         (|pathnameDirectory| path)
         (|pathnameName| path)
         (|pathnameType| path)))
       (cond
        ((|fnameReadable?| lsp)
         (cond
          ((null beQuiet)
           (|sayKeyedMsg| 's2iz0089 (cons (|namestring| lsp) nil))))
          (recompile-lib-file-if-necessary lsp))
        (t
         (|sayKeyedMsg| 's2il0003 (cons (|namestring| lsp) nil))))
       (cond
        (dolibrary
         (cond
          ((null beQuiet)
            (|sayKeyedMsg| 's2iz0090 (cons (|pathnameName| path) nil))))
          (localdatabase (cons (|pathnameName| (car args)) nil) nil))
        ((null beQuiet) (|sayKeyedMsg| 's2iz0084 nil))
        (t nil))
       (|terminateSystemCommand|)
       (|spadPrompt|)))))))) 

@

\subsection{defun withAsharpCmd}
<<defun withAsharpCmd>>=
(defun |withAsharpCmd| (args)
 (let (|$options|)
  (declare (special |$options|))
  (localdatabase args |$options|)))

@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{copyright}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{defun copyright}
<<defun copyright>>=
(defun |copyright| ()
 (obey (strconc "cat " (|getEnv| "AXIOM") "/lib/copyright")))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{credits}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{defun credits}
<<defun credits>>=
(defun |credits| ()
 (mapcar #'(lambda (x) (princ x) (terpri)) credits))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{display}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{verbatim}
  )display abbreviations 
  )display abbreviations [obj]
  )display all
  )display macros
  )display mode all
  )display mode [obj1 [obj2 ...]]
  )display names
  )display operations opname
  )display properties
  )display properties all
  )display properties [obj1 [obj2 ...]]
  )display value all
  )display value [obj1 [obj2 ...]]
\end{verbatim}

This command is used to display the contents of the workspace and
signatures of functions with a given name. A signature gives the
argument and return types of a function.

The command
\begin{verbatim}
  )display abbreviations 
  )display abbreviations [obj]
\end{verbatim}
will show all of the abbreviations in the current workspace.

The command
\begin{verbatim}
  )display all 
\end{verbatim}
is equivalent to 
\begin{verbatim}
  )display properties
\end{verbatim}

The command
\begin{verbatim}
  )display macros
\end{verbatim}
will show all of the macros in the current workspace.

The command
\begin{verbatim}
  )display names
\end{verbatim}
lists the names of all user-defined objects in the workspace. This is
useful if you do not wish to see everything about the objects and need
only be reminded of their names.

To just show the declared mode of ``d'', issue
\begin{verbatim}
  )display mode d
\end{verbatim}

All modemaps for a given operation may be displayed by using
\begin{verbatim}
  )display operations
\end{verbatim}

A modemap is a collection of information about a particular reference
to an operation. This includes the types of the arguments and the
return value, the location of the implementation and any conditions on
the types. The modemap may contain patterns. The following displays
the modemaps for the operation {\bf complex}:
\begin{verbatim}
  )d op complex
\end{verbatim}

In addition to the modemaps for an operation the request to display
an operation will be followed by examples of the operation from each
domain.

The commands
\begin{verbatim}
  )display all
  )display properties
  )display properties all
\end{verbatim}
all do the  same thing: show the values and types and declared modes
of all variables in the workspace. If you have defined functions,
their signatures and definitions will also be displayed.

To show all information about a particular variable or user functions,
for example, something named ``d'', issue
\begin{verbatim}
  )display properties d
\end{verbatim}

To just show the value (and the type) of ``d'', issue
\begin{verbatim}
  )display value d
\end{verbatim}
\section{Variables Used}
\subsection{defvar \$displayOptions}
The current value of \$displayOptions is

<<initvars>>=
(defvar |$displayOptions| 
 '(|abbreviations| |all| |macros| |modes| |names| |operations| 
   |properties| |types| |values|))

@

\section{Data Structures}
\section{Functions}
\subsection{defun display}
This trivial function satisfies the standard pattern of making a
user command match the name of the function which implements the
command. That command immediatly invokes a ``Spad2Cmd'' version.
<<defun display>>=
(defun |display| (l)
 (displaySpad2Cmd l)) 

@

\subsection{displaySpad2Cmd}
We process the options to the command and call the appropriate
display function. There are really only 4 display functions.
All of the other options are just subcases.

There is a slight mismatch between the \$displayOptions list of
symbols and the options this command accepts so we have a cond
branch to clean up the option variable.

If we fall all the way thru we use the \$displayOptions list
to construct a list of strings for the sayMessage function
and tell the user what options are available.
<<defun displaySpad2Cmd>>=
(defun displaySpad2Cmd (l)
 (declare (special |$e|))
 (let ((|$e| |$EmptyEnvironment|) (opt (car l)) (vl (cdr l)) 
       option optList msg)
  (if (and (pairp l) (not (eq opt '?)))
   (progn
    (setq option (|selectOptionLC| opt |$displayOptions| '|optionError|))
    (cond
     ((eq option '|all|)
       (setq l (list '|properties|))
       (setq option '|properties|))
     ((or (eq option '|modes|) (eq option '|types|))
       (setq l (cons '|type| vl))
       (setq option '|type|))
     ((eq option '|values|)
       (setq l (cons '|value| vl))
       (setq option '|value|)))
    (cond 
     ((eq option '|abbreviations|)
      (if (null vl)
        (|listConstructorAbbreviations|)
        (dolist (v vl) (|abbQuery| (|opOf| v)))))
     ((eq option '|operations|) (|displayOperations| vl))
     ((eq option '|macros|) (|displayMacros| vl))
     ((eq option '|names|) (|displayWorkspaceNames|))
     (t (|displayProperties| option l))))
   (|sayMessage|
    (append 
      '("  )display keyword arguments are")
      (mapcar #'(lambda (x) (format nil "~%     ~a" x)) |$displayOptions|)
      (format nil "~%  or abbreviations thereof"))))))

@
\subsection{defun displayOperations}
This function takes a list of operation names. If the list is null
we query the user to see if they want all operations printed. Otherwise
we print the information for the requested symbols.
<<defun displayOperations>>=
(defun |displayOperations| (l)
 (if l
  (dolist (op l) (|reportOpSymbol| op))
  (if (yesanswer)
   (dolist (op (|allOperations|)) (|reportOpSymbol| op))
   (|sayKeyedMsg| 's2iz0059 nil))))

@
\subsection{defun yesanswer}
This is a trivial function to simplify the logic of displaySpad2Cmd.
If the user didn't supply an argument to the )display op command
we ask if they wish to have all information about all Axiom operations
displayed. If the answer is either Y or YES we return true else nil.
<<defun yesanswer>>=
(defun yesanswer ()
 (memq (string2id-n (upcase (|queryUserKeyedMsg| 's2iz0058 nil)) 1) '(y yes)))

@

\subsection{defun displayMacros}
;displayMacros names ==
;  imacs := getInterpMacroNames()
;  pmacs := getParserMacroNames()
;  macros :=
;     null names => APPEND (imacs, pmacs)
;     names
;  macros := REMDUP macros
;  null macros => sayBrightly '"   There are no Axiom macros."
;  -- first do user defined ones
;  first := true
;  for macro in macros repeat
;    macro in pmacs =>
;        if first then
;            sayBrightly ['%l,'"User-defined macros:"]
;            first := NIL
;        displayParserMacro macro
;    macro in imacs => 'iterate
;    sayBrightly (["   ",'%b, macro, '%d, " is not a known Axiom macro."])
;  -- now system ones
;  first := true
;  for macro in macros repeat
;    macro in imacs =>
;        macro in pmacs => 'iterate
;        if first then
;            sayBrightly ['%l,'"System-defined macros:"]
;            first := NIL
;        displayMacro macro
;    macro in pmacs => 'iterate
;  NIL
<<defun displayMacros>>=
(defun |displayMacros| (names)
 (let (imacs pmacs macros first)
  (setq imacs (|getInterpMacroNames|))
  (setq pmacs (|getParserMacroNames|))
  (if names
    (setq macros names)
    (setq macros (append imacs pmacs)))
  (setq macros (remdup macros))
  (cond
   ((null macros) (|sayBrightly| "   There are no Axiom macros."))
   (t
     (setq first t)
     (do ((t0 macros (cdr t0)) (macro nil))
         ((or (atom t0) (progn (setq macro (car t0)) nil)) nil)
      (seq
       (exit
        (cond
         ((|member| macro pmacs)
           (cond
            (first (|sayBrightly|
             (cons '|%l| (cons "User-defined macros:" nil))) (setq first nil)))
           (|displayParserMacro| macro))
         ((|member| macro imacs) '|iterate|)
         (t (|sayBrightly|
          (cons "   "
           (cons '|%b|
            (cons macro
             (cons '|%d| (cons " is not a known Axiom macro." nil)))))))))))
     (setq first t)
     (do ((t1 macros (cdr t1)) (macro nil))
         ((or (atom t1) (progn (setq macro (car t1)) nil)) nil)
      (seq
       (exit
        (cond
         ((|member| macro imacs)
           (cond
            ((|member| macro pmacs) '|iterate|)
            (t 
             (cond
              (first
               (|sayBrightly|
                (cons '|%l|
                 (cons "System-defined macros:" nil))) (setq first nil)))
             (|displayMacro| macro))))
         ((|member| macro pmacs) '|iterate|)))))
     nil)))) 

@

\subsection{sayExample}
This function expects 2 arguments, the documentation string and
the name of the operation. It searches the documentation string for
\verb|++X| lines. These lines are examples lines for functions. 
They look like ordinary \verb|++| comments and fit into the ordinary
comment blocks. So, for example, in the plot.spad.pamphlet file we
find the following function signature:
\begin{verbatim}
    plot: (F -> F,R) -> %
      ++ plot(f,a..b) plots the function \spad{f(x)} 
      ++ on the interval \spad{[a,b]}.
      ++ 
      ++X fp:=(t:DFLOAT):DFLOAT +-> sin(t)
      ++X plot(fp,-1.0..1.0)$PLOT
\end{verbatim}
This function splits out and prints the lines that begin with \verb|++X|.

A minor complication of printing the examples is that the lines have
been processed into internal compiler format. Thus the lines that read:
\begin{verbatim}
      ++X fp:=(t:DFLOAT):DFLOAT +-> sin(t)
      ++X plot(fp,-1.0..1.0)$PLOT
\end{verbatim}
are actually stored as one long line containing the example lines
\begin{verbatim}
"\\indented{1}{plot(\\spad{f},{}a..\\spad{b}) plots the function
 \\spad{f(x)}} \\indented{1}{on the interval \\spad{[a,{}b]}.}
 \\blankline
 \\spad{X} fp:=(t:DFLOAT):DFLOAT +-> sin(\\spad{t})
 \\spad{X} plot(\\spad{fp},{}\\spad{-1}.0..1.0)\\$PLOT"
\end{verbatim}

So when we have an example line starting with ++X, it gets
converted to the compiler to \verb|\spad{X}|. So each 
example line is delimited by \verb|\spad{X}|. 

The compiler also removes the newlines so
if there is a subsequent \verb|\spad{X}| in the docstring
then it implies multiple example lines and we loop over them, 
splitting them up at the delimiter.

If there is only one then we clean it up and print it.
<<defun sayExample>>=
(defun sayExample (docstring)
 (let (line point)
  (when (setq point (search "spad{X}" docstring))
   (setq line (subseq docstring (+ point 8)))
   (do ((mark (search "spad{X}" line) (search "spad{X}" line)))
     ((null mark))
    (princ (cleanupLine (subseq line 0 mark)))
    (|sayNewLine|)
    (setq line (subseq line (+ mark 8))))
   (princ (cleanupLine line))
   (|sayNewLine|)
   (|sayNewLine|))))

@
\subsection{cleanupLine}
This function expects example lines in internal format that has been
partially processed to remove the prefix. Thus we get lines that look 
like:
\begin{verbatim}
 fp:=(t:DFLOAT):DFLOAT +-> sin(\\spad{t}) 
 plot(\\spad{fp},{}\\spad{-1}.0..1.0)\\$PLOT
\end{verbatim}

It removes all instances of \verb|{}|, and \verb|\|, and unwraps the
\verb|spad{}| call, leaving only the argument.

We return lines that look like:
\begin{verbatim}
 fp:=(t:DFLOAT):DFLOAT +-> sin(t)
 plot(fp,-1.0..1.0)$PLOT
\end{verbatim}
which is hopefully exactly what the user wrote.

The compiler inserts \verb|{}| as a space so we remove it.
We remove all of the \verb|\| characters.
We remove all of the \verb|spad{...}| delimiters which will
occur around other spad variables. Technically we should
search recursively for the matching delimiter rather than the
next brace but the problem does not arise in practice.
<<defun cleanupLine>>=
(defun cleanupLine (line)
 (do ((mark (search "{}" line) (search "{}" line)))
  ((null mark))
  (setq line
   (concatenate 'string (subseq line 0 mark) (subseq line (+ mark 2)))))
 (do ((mark (search "\\" line) (search "\\" line)))
  ((null mark))
  (setq line
   (concatenate 'string (subseq line 0 mark) (subseq line (+ mark 1)))))
 (do ((mark (search "spad{" line) (search "spad{" line)))
  ((null mark))
  (let (left point mid right)
   (setq left (subseq line 0 mark))
   (setq point (search "}" line :start2 mark))
   (setq mid (subseq line (+ mark 5) point))
   (setq right (subseq line (+ point 1)))
   (setq line (concatenate 'string left mid right))))
 line)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{edit}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )edit} \lanb{}{\it filename}\ranb{}
\end{list}
\par\noindent{\bf Command Description:}

This command is  used to edit files.
It works in conjunction  with the {\tt )read}
and {\tt )compile} commands to remember the name
of the file on which you are working.
By specifying the name fully, you  can edit any file you wish.
Thus
\begin{verbatim}
)edit /u/julius/matrix.input
\end{verbatim}
will place  you in an editor looking at the  file
{\tt /u/julius/matrix.input}.
\index{editing files}
By default, the editor is {\tt vi},
\index{vi}
but if you have an EDITOR shell environment variable defined, that editor
will be used.
When Axiom is running under the X Window System,
it will try to open a separate {\tt xterm} running your editor if
it thinks one is necessary.
\index{Korn shell}
For example, under the Korn shell, if you issue
\begin{verbatim}
export EDITOR=emacs
\end{verbatim}
then the emacs
\index{emacs}
editor will be used by {\tt )edit}.

If you do not specify a file name, the last file you edited,
read or compiled will be used.
If there is no ``last file'' you will be placed in the editor editing
an empty unnamed file.

It is possible to use the {\tt )system} command to edit a file directly.
For example,
\begin{verbatim}
)system emacs /etc/rc.tcpip
\end{verbatim}
calls {\tt emacs} to edit the file.
\index{emacs}

\par\noindent{\bf Also See:}
\fnref{system},
\fnref{compiler}, and
\fnref{read}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{fin}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} development

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )fin}
\end{list}
\par\noindent{\bf Command Description:}

This command is used by Axiom
developers to leave the Axiom system and return
to the underlying Common Lisp system.
To return to Axiom, issue the
``{\tt (\vertline{}spad\vertline{})}''
function call to Common Lisp.

\par\noindent{\bf Also See:}
\fnref{pquit} and 
\fnref{quit}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )frame  new  {\it frameName}}
\item{\tt )frame  drop  {\it [frameName]}}
\item{\tt )frame  next}
\item{\tt )frame  last}
\item{\tt )frame  names}
\item{\tt )frame  import {\it frameName} {\it [objectName1 [objectName2 ...]]}}
\item{\tt )set message frame on | off}
\item{\tt )set message prompt frame}
\end{list}

\par\noindent{\bf Command Description:}

A {\it frame} can be thought of as a logical session within the
physical session that you get when you start the system.  You can
have as many frames as you want, within the limits of your computer's
storage, paging space, and so on.
Each frame has its own {\it step number}, {\it environment} and {\it history.}
You can have a variable named {\tt a} in one frame and it will
have nothing to do with anything that might be called {\tt a} in
any other frame.

Some frames are created by the HyperDoc program and these can
have pretty strange names, since they are generated automatically.
\index{frame names}
To find out the names
of all frames, issue
\begin{verbatim}
)frame names
\end{verbatim}
It will indicate the name of the current frame.

You create a new frame
\index{frame new}
``{\bf quark}'' by issuing
\begin{verbatim}
)frame new quark
\end{verbatim}
The history facility can be turned on by issuing either
{\tt )set history on} or {\tt )history )on}.
If the history facility is on and you are saving history information
in a file rather than in the Axiom environment
then a history file with filename {\bf quark.axh} will
be created as you enter commands.
If you wish to go back to what
you were doing in the
\index{frame next}
``{\bf initial}'' frame, use
\index{frame last}
\begin{verbatim}
)frame next
\end{verbatim}
or
\begin{verbatim}
)frame last
\end{verbatim}
to cycle through the ring of available frames to get back to
``{\bf initial}''.

If you want to throw
away a frame (say ``{\bf quark}''), issue
\begin{verbatim}
)frame drop quark
\end{verbatim}
If you omit the name, the current frame is dropped.
\index{frame drop}

If you do use frames with the history facility on and writing to a file,
you may want to delete some of the older history files.
\index{file!history}
These are directories, so you may want to issue a command like
{\tt rm -r quark.axh} to the operating system.

You can bring things from another frame by using
\index{frame import}
{\tt )frame import}.
For example, to bring the {\tt f} and {\tt g} from the frame ``{\bf quark}''
to the current frame, issue
\begin{verbatim}
)frame import quark f g
\end{verbatim}
If you want everything from the frame ``{\bf quark}'', issue
\begin{verbatim}
)frame import quark
\end{verbatim}
You will be asked to verify that you really want everything.

There are two {\tt )set} flags
\index{set message frame}
to make it easier to tell where you are.
\begin{verbatim}
)set message frame on | off
\end{verbatim}
will print more messages about frames when it is set on.
By default, it is off.
\begin{verbatim}
)set message prompt frame
\end{verbatim}
will give a prompt
\index{set message prompt frame}
that looks like
\begin{verbatim}
initial (1) ->
\end{verbatim}
\index{prompt!with frame name}
when you start up. In this case, the frame name and step make up the
prompt.

\par\noindent{\bf Also See:}
\fnref{history} and
\fnref{set}

\section{Variables Used}
The frame mechanism uses several dollar variables.
\subsection{Primary variables}
Primary variables are those which exist solely to make the frame
mechanism work. 

The \$interpreterFrameName contains a symbol which is the name
of the current frame in use. 

The \$interpreterFrameRing contains a list of all of the existing
frames. The first frame on the list is the ``current'' frame. When
AXIOMsys is started directly there is only one frame named ``initial''.

If the system is started under sman (using the axiom shell script,
for example), there are two frames, ``initial'' and ``frame0''. In
this case, ``frame0'' is the current frame. This can cause subtle
problems because functions defined in the axiom initialization file
(.axiom.input) will be defined in frame ``initial'' but the current
frame will be ``frame0''. They will appear to be undefined. However,
if the user does ``)frame next'' they can switch to the ``initial''
frame and see the functions correctly defined.

The \$frameMessages variable controls when frame messages will be
displayed. The variable is initially NIL. It can be set on (T) or off (NIL)
using the system command:
\begin{verbatim}
    )set message frame on | off
\end{verbatim}
Setting frame messages on will output a line detailing the 
current frame after every output is complete. 

\subsection{Used variables}

The frame collects and uses a few top level variables. These are:
\$InteractiveFrame, \$IOindex, \$HiFiAccess, \$HistList, \$HistListLen,
\$HistListAct, \$HistRecord, \$internalHistoryTable, and \$localExposureData.

These variables can also be changed by the frame mechanism when the user
requests changing to a different frame.

\section{Data Structures}
\subsection{Frames and the Interpreter Frame Ring}

Axiom has the notion of ``frames''. A frame is a data structure which
holds all the vital data from an Axiom session. There can be multiple
frames and these live in a top-level variable called
\$interpreterFrameRing. This variable holds a circular list of frames.
The parts of a frame and their initial, default values are:

\begin{verbatim}
  $interpreterFrameName      a string, named on creation
  $InteractiveFrame          (list (list nil))
  $IOindex                   an integer, 1
  $HiFiAccess                $HiFiAccess, see the variable description
  $HistList                  $HistList, see the variable description
  $HistListLen               $HistListLen, see the variable description
  $HistListAct               $HistListAct, see the variable description
  $HistRecord                $HistRecord, see the variable description
  $internalHistoryTable      nil
  $localExposureData         a copy of $localExposureData
\end{verbatim}

\section{Accessor Functions}
These could be macros but we wish to export them to the API code
in the algebra so we keep them as functions.
\subsection{0th Frame Component -- frameName}
\subsection{defun frameName}
<<defun frameName>>=
(defun frameName (frame)
 (car frame)) 

@
\subsection{1st Frame Component -- frameInteractive}
<<defun frameInteractive>>=
(defun frameInteractive (frame)
 (nth 1 frame))

@
\subsection{2nd Frame Component -- frameIOIndex}
<<defun frameIOIndex>>=
(defun frameIOIndex (frame)
 (nth 2 frame))

@
\subsection{3rd Frame Component -- frameHiFiAccess}
<<defun frameHiFiAccess>>=
(defun frameHiFiAccess (frame)
 (nth 3 frame))

@
\subsection{4th Frame Component -- frameHistList}
<<defun frameHistList>>=
(defun frameHistList (frame)
 (nth 4 frame))

@
\subsection{5th Frame Component -- frameHistListLen}
<<defun frameHistListLen>>=
(defun frameHistListLen (frame)
 (nth 5 frame))

@
\subsection{6th Frame Component -- frameHistListAct}
<<defun frameHistListAct>>=
(defun frameHistListAct (frame)
 (nth 6 frame))

@
\subsection{7th Frame Component -- frameHistRecord}
<<defun frameHistRecord>>=
(defun frameHistRecord (frame)
 (nth 7 frame))

@
\subsection{8th Frame Component -- frameHistoryTable}
<<defun frameHistoryTable>>=
(defun frameHistoryTable (frame)
 (nth 8 frame))

@
\subsection{9th Frame Component -- frameExposureData}
<<defun frameExposureData>>=
(defun frameExposureData (frame)
 (nth 9 frame))

@

\section{Variables Used}
\section{Data Structures}
\section{Functions}
\subsection{Initializing the Interpreter Frame Ring}

Now that we know what a frame looks like we need a function to
initialize the list of frames. This function sets the initial frame
name to ``initial'' and creates a list of frames containing an empty
frame. This list is the interpreter frame ring and is not actually
circular but is managed as a circular list. 

As a final step we update the world from this frame. This has the
side-effect of resetting all the important global variables to their
initial values.

<<defun initializeInterpreterFrameRing>>=
(defun |initializeInterpreterFrameRing| ()
 (setq |$interpreterFrameName| '|initial|)
 (setq |$interpreterFrameRing|
   (list (|emptyInterpreterFrame| |$interpreterFrameName|)))
 (|updateFromCurrentInterpreterFrame|)
 nil) 

@
\subsection{Creating a List of all of the Frame Names}
\subsection{defun frameNames}
This function simply walks across the frame in the frame ring and
returns a list of the name of each frame. 
<<defun frameNames>>=
(defun |frameNames| () 
 (mapcar #'frameName |$interpreterFrameRing|))

@

\subsection{Get Named Frame Environment (aka Interactive)}
If the frame is found we return the environment portion of the frame
otherwise we construct an empty environment and return it.
The initial values of an empty frame are created here. This function
returns a single frame that will be placed in the frame ring.
\subsection{defun frameEnvironment}
<<defun frameEnvironment>>=
(defun |frameEnvironment| (fname)
 (let ((frame (|findFrameInRing| fname)))
  (if frame
   (frameInteractive frame)
   (list (list nil)))))

@
\subsection{defun emptyInterpreterFrame}
\begin{verbatim}
emptyInterpreterFrame(name) ==
  LIST(name,                            -- frame name
       LIST LIST NIL,                   -- environment
       1,                               -- $IOindex
       $HiFiAccess,                     -- $HiFiAccess
       $HistList,                       -- $HistList
       $HistListLen,                    -- $HistListLen
       $HistListAct,                    -- $HistListAct
       $HistRecord,                     -- $HistRecord
       NIL,                             -- $internalHistoryTable
       COPY_-SEQ $localExposureDataDefault        -- $localExposureData
      )
\end{verbatim}
<<defun emptyInterpreterFrame>>=
(defun |emptyInterpreterFrame| (name)
 (list name
   (list (list nil))
   1 
   |$HiFiAccess| 
   |$HistList| 
   |$HistListLen| 
   |$HistListAct| 
   |$HistRecord| 
   nil 
   (copy-seq |$localExposureDataDefault|))) 

@
\subsection{Collecting up the Environment into a Frame}

We can collect up all the current environment information into
one frame element with this call. It creates a list of the current
values of the global variables and returns this as a frame element.

\subsection{defun createCurrentInterpreterFrame}
<<defun createCurrentInterpreterFrame>>=
(defun |createCurrentInterpreterFrame| ()
 (list 
   |$interpreterFrameName| 
   |$InteractiveFrame| 
   |$IOindex| 
   |$HiFiAccess| 
   |$HistList| 
   |$HistListLen| 
   |$HistListAct| 
   |$HistRecord| 
   |$internalHistoryTable| 
   |$localExposureData|)) 

@
\subsection{Updating from the Current Frame}

The frames are kept on a circular list. The first element on that
list is known as ``the current frame''. This will initialize all
of the interesting interpreter data structures from that frame.

\subsection{defun updateFromCurrentInterpreterFrame}
\begin{verbatim}
updateFromCurrentInterpreterFrame() ==
  [$interpreterFrameName,          _
   $InteractiveFrame,              _
   $IOindex,                       _
   $HiFiAccess,                    _
   $HistList,                      _
   $HistListLen,                   _
   $HistListAct,                   _
   $HistRecord,                    _
   $internalHistoryTable,          _
   $localExposureData              _
   ] := first $interpreterFrameRing
  if $frameMessages then
    sayMessage ['"   Current interpreter frame is called",:bright
      $interpreterFrameName]
  NIL
\end{verbatim}
<<defun updateFromCurrentInterpreterFrame>>=
(defun |updateFromCurrentInterpreterFrame| ()
 (let (tmp1)
  (setq tmp1 (first |$interpreterFrameRing|))
  (setq |$interpreterFrameName| (nth 0 tmp1))
  (setq |$InteractiveFrame|     (nth 1 tmp1))
  (setq |$IOindex|              (nth 2 tmp1))
  (setq |$HiFiAccess|           (nth 3 tmp1))
  (setq |$HistList|             (nth 4 tmp1))
  (setq |$HistListLen|          (nth 5 tmp1))
  (setq |$HistListAct|          (nth 6 tmp1))
  (setq |$HistRecord|           (nth 7 tmp1))
  (setq |$internalHistoryTable| (nth 8 tmp1))
  (setq |$localExposureData|    (nth 9 tmp1))
  (when |$frameMessages| 
   (|sayMessage| 
    (cons "   Current interpreter frame is called" |$interpreterFrameName|)))))

@
\subsection{Find a Frame in the Frame Ring by Name}
Each frame contains its name as the 0th element.  We simply walk all
the frames and if we find one we return it.
\subsection{defun findFrameInRing}
\begin{verbatim}
findFrameInRing(name) ==
  val := NIL
  for frame in $interpreterFrameRing repeat
    CAR frame = name =>
      val := frame
      return frame
  val
\end{verbatim}
<<defun findFrameInRing>>=
(defun |findFrameInRing| (name)
 (block ()
  (dolist (frame |$interpreterFrameRing|)
   (when (boot-equal (frameName frame) name) (return frame)))))

@
\subsection{Update the Current Interpreter Frame}

This function collects the normal contents of the world into a 
frame object, places it first on the frame list, and then sets
the current values of the world from the frame object. 

\subsection{defun updateCurrentInterpreterFrame}
\begin{verbatim}
updateCurrentInterpreterFrame() ==
  RPLACA($interpreterFrameRing,createCurrentInterpreterFrame())
  updateFromCurrentInterpreterFrame()
  NIL
\end{verbatim}
<<defun updateCurrentInterpreterFrame>>=
(defun |updateCurrentInterpreterFrame| ()
  (rplaca |$interpreterFrameRing| (|createCurrentInterpreterFrame|))
  (|updateFromCurrentInterpreterFrame|)
  nil)

@
\subsection{defun nextInterpreterFrame}

This function updates the current frame to make sure all of the
current information is recorded. If there are more frame elements
in the list then this will destructively move the current frame
to the end of the list, that is, assume the frame list reads (1 2 3)
this function will destructively change it to (2 3 1).

Note: the nconc2 function destructively inserts the second list at the
end of the first.
\begin{verbatim}
nextInterpreterFrame() ==
  updateCurrentInterpreterFrame()
  null rest $interpreterFrameRing => NIL  -- nothing to do
  $interpreterFrameRing :=
    NCONC2(rest $interpreterFrameRing,[first $interpreterFrameRing])
  updateFromCurrentInterpreterFrame()
\end{verbatim}
<<defun nextInterpreterFrame>>=
(defun |nextInterpreterFrame| ()
  (when (cdr |$interpreterFrameRing|)
   (setq |$interpreterFrameRing|
    (nconc2 (cdr |$interpreterFrameRing|) 
      (list (car |$interpreterFrameRing|))))
   (|updateFromCurrentInterpreterFrame|)))

@
\subsection{defun changeToNamedInterpreterFrame}
\begin{verbatim}
changeToNamedInterpreterFrame(name) ==
  updateCurrentInterpreterFrame()
  frame := findFrameInRing(name)
  null frame => NIL
  $interpreterFrameRing := [frame,:NREMOVE($interpreterFrameRing, frame)]
  updateFromCurrentInterpreterFrame()
\end{verbatim}
<<defun changeToNamedInterpreterFrame>>=
(defun |changeToNamedInterpreterFrame| (name)
 (prog (frame)
  (return
   (progn 
    (|updateCurrentInterpreterFrame|)
    (setq frame (|findFrameInRing| name))
    (cond 
     ((null frame) 
       nil)
     (t 
       (setq |$interpreterFrameRing|
        (cons frame (nremove |$interpreterFrameRing| frame)))
       (|updateFromCurrentInterpreterFrame|))))))) 

@
\subsection{defun previousInterpreterFrame}
\begin{verbatim}
previousInterpreterFrame() ==
  updateCurrentInterpreterFrame()
  null rest $interpreterFrameRing => NIL  -- nothing to do
  [:b,l] := $interpreterFrameRing
  $interpreterFrameRing := NCONC2([l],b)
  updateFromCurrentInterpreterFrame()
\end{verbatim}
<<defun previousInterpreterFrame>>=
(defun |previousInterpreterFrame| ()
 (prog (tmp1 l b)
  (return
   (progn
    (|updateCurrentInterpreterFrame|)
    (cond
     ((null (cdr |$interpreterFrameRing|))
       nil)
     (t
       (setq tmp1 (reverse |$interpreterFrameRing|))
       (setq l (car tmp1))
       (setq b (nreverse (cdr tmp1)))
       (setq |$interpreterFrameRing| (nconc2 (cons l nil) b))
       (|updateFromCurrentInterpreterFrame|))))))) 

@
\subsection{defun addNewInterpreterFrame}
\begin{verbatim}
addNewInterpreterFrame(name) ==
  null name => throwKeyedMsg("S2IZ0018",NIL)
  updateCurrentInterpreterFrame()
  -- see if we already have one by that name
  for f in $interpreterFrameRing repeat
    name = frameName(f) => throwKeyedMsg("S2IZ0019",[name])
  initHistList()
  $interpreterFrameRing := CONS(emptyInterpreterFrame(name),
    $interpreterFrameRing)
  updateFromCurrentInterpreterFrame()
  _$ERASE histFileName()
\end{verbatim}
<<defun addNewInterpreterFrame>>=
(defun |addNewInterpreterFrame| (name)
 (seq
  (cond
   ((null name)
    (|throwKeyedMsg| 'S2IZ0018 nil))  ; you must provide a name for new frame
   (t
     (|updateCurrentInterpreterFrame|)
     (seq
      (do ((tmp0 |$interpreterFrameRing| (cdr tmp0)) (f nil))
          ((or (atom tmp0) 
               (progn (setq f (car tmp0)) nil))
             nil)
       (seq
        (exit
         (when (boot-equal name (frameName f))
          (exit 
           (|throwKeyedMsg| 'S2IZ0019 ; existing frame with same name
            (cons name nil)))))))
      (|initHistList|)
      (setq |$interpreterFrameRing|
       (cons (|emptyInterpreterFrame| name) |$interpreterFrameRing|))
      (|updateFromCurrentInterpreterFrame|)
      ($erase (|histFileName|))))))) 

@
\subsection{defun closeInterpreterFrame}
\begin{verbatim}
closeInterpreterFrame(name) ==
  -- if name = NIL then it means the current frame
  null rest $interpreterFrameRing =>
    name and (name ^= $interpreterFrameName) =>
      throwKeyedMsg("S2IZ0020",[$interpreterFrameName])
    throwKeyedMsg("S2IZ0021",NIL)
  if null name then $interpreterFrameRing := rest $interpreterFrameRing
  else   -- find the frame
    found := nil
    ifr := NIL
    for f in $interpreterFrameRing repeat
      found or (name ^= frameName(f)) => ifr := CONS(f,ifr)
      found := true
    not found => throwKeyedMsg("S2IZ0022",[name])
    _$ERASE makeHistFileName(name)
    $interpreterFrameRing := nreverse ifr
  updateFromCurrentInterpreterFrame()
\end{verbatim}
<<defun closeInterpreterFrame>>=
(defun |closeInterpreterFrame| (name)
 (prog (ifr found)
  (return
   (seq
    (cond
     ((null (cdr |$interpreterFrameRing|))
       (cond
        ((and name (nequal name |$interpreterFrameName|))
          (|throwKeyedMsg| 'S2IZ0020 ; 1 frame left. not the correct name.
            (cons |$interpreterFrameName| nil))) 
        (t (|throwKeyedMsg| 'S2IZ0021 nil)))) ; only 1 frame left, not closed
     (t
       (cond
        ((null name)
          (setq |$interpreterFrameRing| (cdr |$interpreterFrameRing|)))
        (t 
          (setq found nil)
          (setq ifr nil)
          (do ((tmp0 |$interpreterFrameRing| (cdr tmp0)) (f nil))
              ((or (atom tmp0) (progn (setq f (car tmp0)) nil)) nil)
           (seq
            (exit
             (cond
              ((or found (nequal name (frameName f)))
                (setq ifr (cons f ifr)))
              (t 
                (setq found t))))))
          (cond
           ((null found) 
              (|throwKeyedMsg| 'S2IZ0022 (cons name nil)))
           (t
              ($erase (|makeHistFileName| name))
              (setq |$interpreterFrameRing| (nreverse ifr))))))
       (|updateFromCurrentInterpreterFrame|))))))) 

@
\subsection{defun displayFrameNames}
\begin{verbatim}
displayFrameNames() ==
  fs := "append"/[ ['%l,'"     ",:bright frameName f] for f in
    $interpreterFrameRing]
  sayKeyedMsg("S2IZ0024",[fs])
\end{verbatim}
<<defun displayFrameNames>>=
(defun |displayFrameNames| ()
 (prog (fs)
  (return
   (seq
    (progn
     (setq fs
      (prog (tmp0)
       (setq tmp0 nil)
       (return
        (do ((tmp1 |$interpreterFrameRing| (cdr tmp1)) (f nil))
            ((or (atom tmp1)
                 (progn (setq f (car tmp1)) nil))
               tmp0)
         (seq
          (exit
           (setq tmp0
            (append tmp0 (cons '|%l| 
              (cons "     " (|bright| (frameName f))))))))))))
      (|sayKeyedMsg| 'S2IZ0024 (cons fs nil))))))) ; frame names are ...

@
\subsection{defun importFromFrame}
\begin{verbatim}
importFromFrame args ==
  -- args should have the form [frameName,:varNames]
  if args and atom args then args := [args]
  null args => throwKeyedMsg("S2IZ0073",NIL)
  [fname,:args] := args
  not member(fname,frameNames()) =>
    throwKeyedMsg("S2IZ0074",[fname])
  fname = frameName first $interpreterFrameRing =>
    throwKeyedMsg("S2IZ0075",NIL)
  fenv := frameEnvironment fname
  null args =>
    x := UPCASE queryUserKeyedMsg("S2IZ0076",[fname])
    MEMQ(STRING2ID_-N(x,1),'(Y YES)) =>
      vars := NIL
      for [v,:props] in CAAR fenv repeat
        v = "--macros" =>
          for [m,:.] in props repeat vars := cons(m,vars)
        vars := cons(v,vars)
      importFromFrame [fname,:vars]
    sayKeyedMsg("S2IZ0077",[fname])
  for v in args repeat
    plist := GETALIST(CAAR fenv,v)
    plist =>
      -- remove anything with the same name in the current frame
      clearCmdParts ['propert,v]
      for [prop,:val] in plist repeat
        putHist(v,prop,val,$InteractiveFrame)
    (m := get("--macros--",v,fenv)) =>
      putHist("--macros--",v,m,$InteractiveFrame)
    sayKeyedMsg("S2IZ0079",[v,fname])
  sayKeyedMsg("S2IZ0078",[fname])
\end{verbatim}
<<defun importFromFrame>>=
(defun |importFromFrame| (args)
 (prog (temp1 fname fenv x v props vars plist prop val m)
  (return
   (seq
    (progn
     (when (and args (atom args))
       (setq args (cons args nil))) 
     (cond
      ((null args)
        (|throwKeyedMsg| 'S2IZ0073 nil)) ; missing frame name
      (t
        (setq temp1 args)
        (setq fname (car temp1))
        (setq args (cdr temp1))
        (cond
         ((null (|member| fname (|frameNames|)))
           (|throwKeyedMsg| 'S2IZ0074 (cons fname nil))) ; not frame name
         ((boot-equal fname (frameName (car |$interpreterFrameRing|)))
           (|throwKeyedMsg| 'S2IZ0075 NIL)) ; cannot import from curr frame
         (t
           (setq fenv (|frameEnvironment| fname))
           (cond
            ((null args)
              (setq x
                (upcase (|queryUserKeyedMsg| 'S2IZ0076 (cons fname nil))))
                                             ; import everything?
              (cond
               ((memq (string2id-n x 1) '(y yes))
                 (setq vars nil)
                 (do ((tmp0 (caar fenv) (cdr tmp0)) (tmp1 nil))
                     ((or (atom tmp0) 
                          (progn (setq tmp1 (car tmp0)) nil)
                          (progn 
                           (progn 
                            (setq v (car tmp1))
                            (setq props (cdr tmp1))
                            tmp1)
                           nil))
                       nil)
                  (seq
                   (exit
                    (cond
                     ((eq v '|--macros|)
                       (do ((tmp2 props (cdr tmp2))
                            (tmp3 nil))
                           ((or (atom tmp2) 
                                (progn (setq tmp3 (car tmp2)) nil)
                                (progn 
                                 (progn (setq m (car tmp3)) tmp3)
                                 nil))
                              nil)
                        (seq
                         (exit
                          (setq vars (cons m vars))))))
                     (t (setq vars (cons v vars)))))))
                 (|importFromFrame| (cons fname vars)))
               (t
                 (|sayKeyedMsg| 'S2IZ0077 (cons fname nil)))))
            (t
             (do ((tmp4 args (cdr tmp4)) (v nil))
                 ((or (atom tmp4) (progn (setq v (car tmp4)) nil)) nil)
              (seq
               (exit
                (progn
                 (setq plist (getalist (caar fenv) v))
                 (cond
                  (plist 
                   (|clearCmdParts| (cons '|propert| (cons v nil)))
                   (do ((tmp5 plist (cdr tmp5)) (tmp6 nil))
                       ((or (atom tmp5)
                            (progn (setq tmp6 (car tmp5)) nil)
                            (progn 
                             (progn 
                              (setq prop (car tmp6))
                              (setq val (cdr tmp6))
                              tmp6)
                             nil))
                          nil)
                    (seq
                     (exit (|putHist| v prop val |$InteractiveFrame|)))))
                  ((setq m (|get| '|--macros--| v fenv))
                    (|putHist| '|--macros--| v m |$InteractiveFrame|))
                  (t 
                    (|sayKeyedMsg| 'S2IZ0079 ; frame not found
                      (cons v (cons fname nil)))))))))
             (|sayKeyedMsg| 'S2IZ0078 ; import complete
               (cons fname nil))))))))))))) 

@
\subsection{defun frame}
\begin{verbatim}
-- the system command

frame l == frameSpad2Cmd l
\end{verbatim}
<<defun frame>>=
(defun |frame| (l)
 (|frameSpad2Cmd| l)) 

@
\subsection{defun frameSpad2Cmd}
\begin{verbatim}
frameSpad2Cmd args ==
  frameArgs := '(drop import last names new next)
  $options => throwKeyedMsg("S2IZ0016",['")frame"])
  null(args) => helpSpad2Cmd ['frame]
  arg  := selectOptionLC(first args,frameArgs,'optionError)
  args := rest args
  if args is [a] then args := a
  if ATOM args then args := object2Identifier args
  arg = 'drop  =>
    args and PAIRP(args) => throwKeyedMsg("S2IZ0017",[args])
    closeInterpreterFrame(args)
  arg = 'import =>  importFromFrame args
  arg = 'last  =>   previousInterpreterFrame()
  arg = 'names =>   displayFrameNames()
  arg = 'new   =>
    args and PAIRP(args) => throwKeyedMsg("S2IZ0017",[args])
    addNewInterpreterFrame(args)
  arg = 'next  =>   nextInterpreterFrame()

  NIL
\end{verbatim}
<<defun frameSpad2Cmd>>=
(defun |frameSpad2Cmd| (args)
 (prog (frameArgs arg a)
  (return
   (progn
    (setq frameArgs '(|drop| |import| |last| |names| |new| |next|))
    (cond
     (|$options|
      (|throwKeyedMsg| 'S2IZ0016 ; frame command does not take options
       (cons ")frame" nil)))
     ((null args) 
       (|helpSpad2Cmd| (cons '|frame| nil)))
     (t
       (setq arg 
         (|selectOptionLC| (car args) frameArgs '|optionError|))
       (setq args (cdr args))
       (cond
        ((and (pairp args) 
              (eq (qcdr args) nil)
              (progn (setq a (qcar args)) t))
          (setq args a)))
       (when (atom args)
          (setq args (|object2Identifier| args)))
       (cond
        ((eq arg '|drop|)
          (cond
           ((and args (pairp args))
             (|throwKeyedMsg| 'S2IZ0017 ; not a valid frame name
               (cons args nil)))
           (t (|closeInterpreterFrame| args))))
        ((eq arg '|import|)
          (|importFromFrame| args))
        ((eq arg '|last|)
          (|previousInterpreterFrame|))
        ((eq arg '|names|)
          (|displayFrameNames|))
        ((eq arg '|new|)
          (cond 
           ((and args (pairp args))
             (|throwKeyedMsg| 'S2IZ0017 ; not a valid frame name
               (cons args nil)))
           (t
             (|addNewInterpreterFrame| args))))
        ((eq arg '|next|)
          (|nextInterpreterFrame|))
        (t nil)))))))) 

@
\section{Frame File Messages}
<<Frame File Messages>>=
S2IZ0016
 The %1b system command takes arguments but no options.
S2IZ0017
 %1b is not a valid frame name
S2IZ0018
 You must provide a name for the new frame.
S2IZ0019
 You cannot use the name %1b for a new frame because an existing
 frame already has that name.
S2IZ0020
 There is only one frame active and therefore that cannot be closed.
 Furthermore, the frame name you gave is not the name of the current frame.
 The current frame is called %1b .
S2IZ0021
 The current frame is the only active one.  Issue %b )clear all %d to
 clear its contents.
S2IZ0022
 There is no frame called %1b and so your command cannot be
 processed.
S2IZ0024
 The names of the existing frames are: %1 %l
 The current frame is the first one listed.
S2IZ0073
 %b )frame import %d must be followed by the frame name. The names
 of objects in that frame can then optionally follow the frame name.
 For example,
 %ceon %b )frame import calculus %d %ceoff
 imports all objects in the %b calculus %d frame, and
 %ceon %b )frame import calculus epsilon delta %d %ceoff
 imports the objects named %b epsilon %d and %b delta %d from the
 frame %b calculus %d .
 Please note that if the current frame contained any information
 about objects with these names, then that information would be
 cleared before the import took place.
S2IZ0074
 You cannot import anything from the frame %1b because that is not
 the name of an existing frame.
S2IZ0075
 You cannot import from the current frame (nor is there a need!).
S2IZ0076
 User verification required:
 do you really want to import everything from the frame %1b ?
 If so, please enter %b y %d or %b yes %d :
S2IZ0077
 On your request, AXIOM will not import everything from frame %1b.
S2IZ0078
 Import from frame %1b is complete. Please issue %b )display all %d
 if you wish to see the contents of the current frame.
S2IZ0079
 AXIOM cannot import %1b from frame %2b because it cannot be found.
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{help}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )help}
\item{\tt )help} {\it commandName}
\end{list}

\par\noindent{\bf Command Description:}

This command displays help information about system commands.
If you issue
\begin{verbatim}
)help
\end{verbatim}
then this very text will be shown.
You can also give the name or abbreviation of a system command
to display information about it.
For example,
\begin{verbatim}
)help clear
\end{verbatim}
will display the description of the {\tt )clear} system command.

All this material is available in the Axiom User Guide
and in HyperDoc.
In HyperDoc, choose the {\bf Commands} item from the
{\bf Reference} menu.

\subsection{defun help}
<<defun help>>=
(defun |help| (l)
 (|helpSpad2Cmd| l)) 

@

\subsection{defun helpSpad2Cmd}
<<defun helpSpad2Cmd>>=
(defun |helpSpad2Cmd| (|args|)
 (unless (|newHelpSpad2Cmd| |args|)
  (|sayKeyedMsg| 's2iz0025 (cons |args| nil))))

@

\subsection{defun newHelpSpad2Cmd}
\begin{verbatim}
;newHelpSpad2Cmd args ==
;  if null args then args := ["?"]
;  # args > 1 =>
;    sayKeyedMsg("S2IZ0026",NIL)
;    true
;  sarg := PNAME first args
;  if sarg = '"?" then args := ['help]
;  else if sarg = '"%" then args := ['history]
;       else if sarg = '"%%" then args := ['history]
;  arg := selectOptionLC(first args,$SYSCOMMANDS,nil)
;  if null arg then arg := first args
;  if arg = 'compiler then arg := 'compile
;  -- see if new help file exists
;  narg := PNAME arg
;  null (helpFile := MAKE_-INPUT_-FILENAME [narg,'HELPSPAD,'_*]) => NIL
;  $useFullScreenHelp =>
;    OBEY STRCONC('"$AXIOM/lib/SPADEDIT ",namestring helpFile)
;    true
;  filestream := MAKE_-INSTREAM(helpFile)
;  repeat
;    line := read_-line(filestream,false)
;    NULL line =>
;      SHUT filestream
;      return true
;    SAY line
;  true
\end{verbatim}

<<defun newHelpSpad2Cmd>>=
(defun |newHelpSpad2Cmd| (args)
 (prog (sarg arg |narg| |helpFile| |filestream| |line|)
  (return
   (seq
    (progn
     (cond ((null args) (setq args (cons '? nil))))
     (cond
      ((> (|#| args) 1) (|sayKeyedMsg| 's2iz0026 nil) t)
      (t
       (setq sarg (pname (car args)))
       (cond
        ((string= sarg "?") (setq args (cons '|help| nil)))
        ((string= sarg "%") (setq args (cons '|history| nil)))
        ((string= sarg "%%") (setq args (cons '|history| nil)))
        (t nil))
       (setq arg (|selectOptionLC| (car args) $syscommands nil))
       (cond ((null arg) (setq arg (car args))))
       (cond ((eq arg '|compiler|) (setq arg '|compile|)))
       (setq |narg| (pname arg))
       (cond
        ((null 
          (setq |helpFile| 
           (make-input-filename 
            (cons |narg| (cons 'helpspad (cons '* nil))))))
          nil)
        (|$useFullScreenHelp|
         (obey (strconc "$AXIOM/lib/SPADEDIT " (|namestring| |helpFile|))) t)
        (t
         (setq |filestream| (make-instream |helpFile|))
         (do ()
             (nil nil)
          (seq
           (exit
            (progn
             (setq |line| (|read-line| |filestream| nil))
             (cond
              ((null |line|) (shut |filestream|) (return t))
              (t (say |line|)))))))
         t))))))))) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{history}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )history )on}
\item{\tt )history )off}
\item{\tt )history )write} {\it historyInputFileName}
\item{\tt )history )show [{\it n}] [both]}
\item{\tt )history )save} {\it savedHistoryName}
\item{\tt )history )restore} [{\it savedHistoryName}]
\item{\tt )history )reset}
\item{\tt )history )change} {\it n}
\item{\tt )history )memory}
\item{\tt )history )file}
\item{\tt \%}
\item{\tt \%\%({\it n})}
\item{\tt )set history on | off}
\end{list}

\par\noindent{\bf Command Description:}

The {\it history} facility within Axiom allows you to restore your
environment to that of another session and recall previous
computational results.
Additional commands allow you to review previous
input lines and to create an {\bf .input} file of the lines typed to
\index{file!input}
Axiom.

Axiom saves your input and output if the history facility is
turned on (which is the default).
This information is saved if either of
\begin{verbatim}
)set history on
)history )on
\end{verbatim}
has been issued.
Issuing either
\begin{verbatim}
)set history off
)history )off
\end{verbatim}
will discontinue the recording of information.
\index{history )on}
\index{set history on}
\index{set history off}
\index{history )off}

Whether the facility is disabled or not,
the value of {\tt \%} in Axiom always
refers to the result of the last computation.
If you have not yet entered anything,
{\tt \%} evaluates to an object of type
{\tt Variable('\%)}.
The function {\tt \%\%} may be  used to refer
to other previous results if the history facility is enabled.
In that case,
{\tt \%\%(n)} is  the output from step {\tt n} if {\tt n > 0}.
If {\tt n < 0}, the step is computed relative to the current step.
Thus {\tt \%\%(-1)} is also the previous step,
{\tt \%\%(-2)}, is the  step before that, and so on.
If an invalid step number is given, Axiom will signal an error.

The {\it environment} information can either be saved in a file or entirely in
memory (the default).
Each frame 
has its own history database.
When it is kept in a file, some of it may also be kept in memory for
efficiency.
When the information is saved in a file, the name of the file is
of the form {\bf FRAME.axh} where ``{\bf FRAME}'' is the name of the
current frame.
The history file is placed in the current working directory.

Note that these history database files are not text files (in fact,
they are directories themselves), and so are not in human-readable
format.

The options to the {\tt )history} command are as follows:

\begin{description}
\item[{\tt )change} {\it n}]
will set the number of steps that are saved in memory to {\it n}.
This option only has effect when the history data is maintained in a
file.
If you have issued {\tt )history )memory} (or not changed the default)
there is no need to use {\tt )history )change}.
\index{history )change}

\item[{\tt )on}]
will start the recording of information.
If the workspace is not empty, you will be asked to confirm this
request.
If you do so, the workspace will be cleared and history data will begin
being saved.
You can also turn the facility on by issuing {\tt )set history on}.

\item[{\tt )off}]
will stop the recording of information.
The {\tt )history )show} command will not work after issuing this
command.
Note that this command may be issued to save time, as there is some
performance penalty paid for saving the environment data.
You can also turn the facility off by issuing {\tt )set history off}.

\item[{\tt )file}]
indicates that history data should be saved in an external file on disk.

\item[{\tt )memory}]
indicates that all history data should be kept in memory rather than
saved in a file.
Note that if you are computing with very large objects it may not be
practical to kept this data in memory.

\item[{\tt )reset}]
will flush the internal list of the most recent workspace calculations
so that the data structures may be garbage collected by the underlying
Common Lisp system.
Like {\tt )history )change}, this option only has real effect when
history data is being saved in a file.

\item[{\tt )restore} [{\it savedHistoryName}]]
completely clears the environment and restores it to a saved session, if
possible.
The {\tt )save} option below allows you to save a session to a file
with a given name. If you had issued
{\tt )history )save jacobi}
the command
{\tt )history )restore jacobi}
would clear the current workspace and load the contents of the named
saved session. If no saved session name is specified, the system looks
for a file called {\bf last.axh}.

\item[{\tt )save} {\it savedHistoryName}]
is used to save  a snapshot of the environment in a file.
This file is placed in the current working directory.

Use {\tt )history )restore} to restore the environment to the state
preserved in the file.
This option also creates an input file containing all the lines of input
since you created the workspace frame (for example, by starting your
Axiom session) or last did a {\tt )clear all} or
{\tt )clear completely}.

\item[{\tt )show} [{\it n}] [{\tt both}]]
can show previous input lines and output results.
{\tt )show} will display up to twenty of the last input lines
(fewer if you haven't typed in twenty lines).
{\tt )show} {\it n} will display up to {\it n} of the last input lines.
{\tt )show both} will display up to five of the last input lines and
output results.
{\tt )show} {\it n} {\tt both} will display up to {\it n} of the last
input lines and output results.

\item[{\tt )write} {\it historyInputFile}]
creates an {\bf .input} file with the input lines typed since the start
of the session/frame or the last {\tt )clear all} or {\tt )clear
completely}.
If {\it historyInputFileName} does not contain a period (``.'') in the filename,
{\bf .input} is appended to it.
For example,
{\tt )history )write chaos}
and
{\tt )history )write chaos.input}
both write the input lines to a file called {\bf chaos.input} in your
current working directory.
If you issued one or more {\tt )undo} commands,
{\tt )history )write}
eliminates all
input lines backtracked over as a result of {\tt )undo}.
You can edit this file and then use {\tt )read} to have Axiom process
the contents.
\end{description}

\par\noindent{\bf Also See:}
{\tt )frame},
{\tt )read},
{\tt )set}, and 
{\tt )undo}


History recording is done in two different ways:
\begin{itemize}
\item all changes in variable bindings (i.e. previous values) are
written to [[$HistList]], which is a circular list
\item all new bindings (including the binding to [[%]]) are written to a
file called [[histFileName()]]
one older session is accessible via the file [[$oldHistFileName()]]
\end{itemize}

\section{Variables Used}
The following global variables are used:
\begin{list}{}
\item [[$HistList]], [[$HistListLen]] and [[$HistListAct]] which is the
       actual number of ``undoable'' steps)
\item [[$HistRecord]] collects the input line, all variable bindings
      and the output of a step, before it is written to the file
      [[histFileName()]].
\item [[$HiFiAccess]] is a flag, which is reset by [[)history )off]]
\end{list}
The result of step n can be accessed by [[%n]], which is translated
into a call of [[fetchOutput(n)]]. The 
[[updateHist]] is called after every interpreter step. The 
[[putHist]] function records all changes in the environment to [[$HistList]]
  and [[$HistRecord]]
 
\subsection{Initialized history variables}
<<initvars>>=
(defvar |$oldHistoryFileName| '|last| "vm/370 filename name component")
(defvar |$historyFileType| '|axh|     "vm/370 filename type component")
(defvar |$historyDirectory| 'A        "vm/370 filename disk component")
(defvar |$HiFiAccess| t               "t means turn on history mechanism")
(defvar |$useInternalHistoryTable| t  "t means keep history in core")

@
\section{Data Structures}
\section{Functions}
\subsection{defun makeHistFileName}
\begin{verbatim}
makeHistFileName(fname) ==
  makePathname(fname,$historyFileType,$historyDirectory)
\end{verbatim}
<<defun makeHistFileName>>=
(defun |makeHistFileName| (fname) 
 (|makePathname| fname |$historyFileType| |$historyDirectory|)) 

@ 
\subsection{defun oldHistFileName}
\begin{verbatim}
oldHistFileName() ==
  makeHistFileName($oldHistoryFileName)
\end{verbatim}
<<defun oldHistFileName>>=
(defun |oldHistFileName| ()
 (|makeHistFileName| |$oldHistoryFileName|)) 

@
\subsection{defun histFileName}
\begin{verbatim}
histFileName() ==
  makeHistFileName($interpreterFrameName)
\end{verbatim}
<<defun histFileName>>=
(defun |histFileName| () 
 (|makeHistFileName| |$interpreterFrameName|)) 

@
\subsection{defun histInputFileName}
\begin{verbatim}
histInputFileName(fn) ==
  null fn =>
    makePathname($interpreterFrameName,'INPUT,$historyDirectory)
  makePathname(fn,'INPUT,$historyDirectory)
\end{verbatim}
<<defun histInputFileName>>=
(defun |histInputFileName| (fn)
 (if (null fn)
    (|makePathname| |$interpreterFrameName| 'input |$historyDirectory|)
    (|makePathname| fn 'input |$historyDirectory|)))
@

\subsection{defun initHist}
\begin{verbatim}
initHist() ==
  $useInternalHistoryTable => initHistList()
  oldFile := oldHistFileName()
  newFile := histFileName()
  -- see if history directory is writable
  histFileErase oldFile
  if MAKE_-INPUT_-FILENAME newFile then $REPLACE(oldFile,newFile)
  $HiFiAccess:= 'T
  initHistList()
\end{verbatim}
<<defun initHist>>=
(defun |initHist| ()
 (prog (oldFile newFile)
  (return
   (cond
     (|$useInternalHistoryTable| 
       (|initHistList|))
     (t
       (setq oldFile (|oldHistFileName|))
       (setq newFile (|histFileName|))
       (|histFileErase| oldFile)
       (when (make-input-filename newFile)
        ($replace oldFile newFile))
       (setq |$HiFiAccess| t)
       (|initHistList|)))))) 
 
@
\subsection{defun initHistList}
\begin{verbatim}
initHistList() ==
  -- creates $HistList as a circular list of length $HistListLen
  -- and $HistRecord
  $HistListLen:= 20
  $HistList:= LIST NIL
  li:= $HistList
  for i in 1..$HistListLen repeat li:= CONS(NIL,li)
  RPLACD($HistList,li)
  $HistListAct:= 0
  $HistRecord:= NIL
\end{verbatim}
<<defun initHistList>>=
(defun |initHistList| () 
 (prog (li) 
  (return 
   (seq 
    (progn 
     (setq |$HistListLen| 20) 
     (setq |$HistList| (list nil)) 
     (setq li |$HistList|) 
     (do ((|i| 1 (qsadd1 |i|))) 
         ((qsgreaterp |i| |$HistListLen|) nil) 
      (seq 
       (exit 
        (setq li (cons nil li)))))
     (rplacd |$HistList| li) 
     (setq |$HistListAct| 0) 
     (setq |$HistRecord| nil))))))
 
@
\subsection{defun history}
\begin{verbatim}
history l ==
  l or null $options => sayKeyedMsg("S2IH0006",NIL) 
  historySpad2Cmd()
\end{verbatim}
<<defun history>>=
(defun |history| (l) 
 (cond 
  ((or l (null |$options|)) 
    (|sayKeyedMsg| 'S2IH0006 nil)) ; syntax error
  (t 
    (|historySpad2Cmd|)))) 

@
\subsection{defun historySpad2Cmd}
\begin{verbatim}
historySpad2Cmd() ==
  -- history is a system command which can call resetInCoreHist
  -- and changeHistListLen, and restore last session
  histOptions:=
    '(on off yes no change reset restore write save show file memory)
  opts:= [ [selectOptionLC(opt,histOptions,'optionError),:optargs]
    for [opt,:optargs] in $options]
  for [opt,:optargs] in opts repeat
    opt in '(on yes) =>
      $HiFiAccess => sayKeyedMsg("S2IH0007",NIL) 
      $IOindex = 1 =>       -- haven't done anything yet
        $HiFiAccess:= 'T
        initHistList()
        sayKeyedMsg("S2IH0008",NIL) 
      x := UPCASE queryUserKeyedMsg("S2IH0009",NIL) 
      MEMQ(STRING2ID_-N(x,1),'(Y YES)) =>
        histFileErase histFileName()
        $HiFiAccess:= 'T
        $options := nil
        clearSpad2Cmd '(all)
        sayKeyedMsg("S2IH0008",NIL)
        initHistList()
      sayKeyedMsg("S2IH0010",NIL)
    opt in '(off no) =>
      null $HiFiAccess => sayKeyedMsg("S2IH0011",NIL)
      $HiFiAccess:= NIL
      disableHist()
      sayKeyedMsg("S2IH0012",NIL)
    opt = 'file    => setHistoryCore NIL
    opt = 'memory  => setHistoryCore true
    opt = 'reset   => resetInCoreHist()
    opt = 'save    => saveHistory optargs
    opt = 'show    => showHistory optargs
    opt = 'change  => changeHistListLen first optargs
    opt = 'restore => restoreHistory optargs
    opt = 'write   => writeInputLines(optargs,1)
  'done
\end{verbatim}
<<defun historySpad2Cmd>>=
(defun |historySpad2Cmd| () 
 (prog (histOptions opts opt optargs x) 
  (return 
   (seq 
    (progn 
     (setq histOptions 
       '(|on| |off| |yes| |no| |change| |reset| |restore| |write| 
         |save| |show| |file| |memory|)) 
     (setq opts 
      (prog (tmp1) 
        (setq tmp1 nil) 
        (return 
         (do ((tmp2 |$options| (cdr tmp2)) (tmp3 nil))
             ((or (atom tmp2) 
                  (progn 
                    (setq tmp3 (car tmp2)) 
                    nil) 
                  (progn 
                   (progn 
                    (setq opt (car tmp3)) 
                    (setq optargs (cdr tmp3)) 
                    tmp3) 
                   nil))
                (nreverse0 tmp1))
          (seq 
           (exit 
            (setq tmp1 
             (cons 
               (cons 
                 (|selectOptionLC| opt histOptions '|optionError|)
                 optargs)
               tmp1)))))))) 
     (do ((tmp4 opts (cdr tmp4)) (tmp5 nil))
         ((or (atom tmp4) 
              (progn 
                (setq tmp5 (car tmp4))
                 nil) 
              (progn 
               (progn 
                (setq opt (car tmp5)) 
                (setq optargs (cdr tmp5)) 
                tmp5) 
               nil))
           nil)
       (seq 
        (exit 
         (cond 
          ((|member| opt '(|on| |yes|))
             (cond 
              (|$HiFiAccess| 
                (|sayKeyedMsg| 'S2IH0007 nil)) ; history already on
              ((eql |$IOindex| 1) 
                (setq |$HiFiAccess| t)
                (|initHistList|)
                (|sayKeyedMsg| 'S2IH0008 nil)) ; history now on
              (t 
                (setq x ; really want to turn history on?
                  (upcase (|queryUserKeyedMsg| 'S2IH0009 nil)))
                (cond 
                 ((memq (string2id-n x 1) '(Y YES)) 
                   (|histFileErase| (|histFileName|)) 
                   (setq |$HiFiAccess| t)
                   (setq |$options| nil) 
                   (|clearSpad2Cmd| '(|all|))
                   (|sayKeyedMsg| 'S2IH0008 nil) ; history now on
                   (|initHistList|)) 
                 (t 
                   (|sayKeyedMsg| 'S2IH0010 nil)))))) ; history still off
          ((|member| opt '(|off| |no|)) 
            (cond 
             ((null |$HiFiAccess|) 
               (|sayKeyedMsg| 'S2IH0011 nil)) ; history already off
             (t 
               (setq |$HiFiAccess| nil) 
               (|disableHist|) 
               (|sayKeyedMsg| 'S2IH0012 nil)))) ; history now off
          ((eq opt '|file|)
             (|setHistoryCore| nil)) 
          ((eq opt '|memory|)
             (|setHistoryCore| t)) 
          ((eq opt '|reset|) 
             (|resetInCoreHist|)) 
          ((eq opt '|save|) 
             (|saveHistory| optargs)) 
          ((eq opt '|show|) 
             (|showHistory| optargs)) 
          ((eq opt '|change|)
             (|changeHistListLen| (CAR optargs))) 
          ((eq opt '|restore|)
             (|restoreHistory| optargs)) 
          ((eq opt '|write|)
             (|writeInputLines| optargs 1)))))) 
     '|done|)))))

@ 
\subsection{defun setHistoryCore}
We [[case]] on the [[inCore]] argument value
\begin{list}{}
\item If history is already on and is kept in the same location as requested
(file or memory) then complain.
\item If history is not in use then start using the file or memory as 
requested. This is done by simply setting the [[$useInternalHistoryTable]] 
to the requested value, where [[T]] means use memory and [[NIL]] means
use a file. We tell the user.
\item If history should be in memory, that is [[inCore]] is not [[NIL]],
and the history file already contains information we read the information
from the file, store it in memory, and erase the history file. We modify
[[$useInternalHistoryTable]] to [[T]] to indicate that we're maintining
the history in memory and tell the user.
\item Otherwise history must be on and in memory. We erase any old history
file and then write the in-memory history to a new file
\end{list}
\begin{verbatim}
setHistoryCore inCore ==
  inCore = $useInternalHistoryTable =>
    sayKeyedMsg((inCore => "S2IH0030"; "S2IH0029"),NIL) 
  not $HiFiAccess =>
    $useInternalHistoryTable := inCore
    inCore => sayKeyedMsg("S2IH0032",NIL)
    sayKeyedMsg("S2IH0031",NIL)
  inCore =>
    $internalHistoryTable := NIL
    if $IOindex ^= 0 then
      -- actually put something in there
      l := LENGTH RKEYIDS histFileName()
      for i in 1..l repeat
        vec:= UNWIND_-PROTECT(readHiFi(i),disableHist())
        $internalHistoryTable := CONS([i,:vec],$internalHistoryTable)
      histFileErase histFileName()
    $useInternalHistoryTable := true
    sayKeyedMsg("S2IH0032",NIL)
  $HiFiAccess:= 'NIL
  histFileErase histFileName()
  str := RDEFIOSTREAM ['(MODE . OUTPUT),['FILE,:histFileName()]]
  for [n,:rec] in reverse $internalHistoryTable repeat
    SPADRWRITE(object2Identifier n,rec,str)
  RSHUT str
  $HiFiAccess:= 'T
  $internalHistoryTable := NIL
  $useInternalHistoryTable := NIL
  sayKeyedMsg("S2IH0031",NIL)
\end{verbatim}
<<defun setHistoryCore>>=
(defun |setHistoryCore| (inCore) 
 (prog (l vec str n rec) 
  (cond 
   ((boot-equal inCore |$useInternalHistoryTable|) 
     (if inCore 
        (|sayKeyedMsg| 'S2IH0030 nil) ; memory history already in use
        (|sayKeyedMsg| 'S2IH0029 nil))) ; file history already in use
   ((null |$HiFiAccess|) 
     (setq |$useInternalHistoryTable| inCore) 
     (if inCore 
        (|sayKeyedMsg| 'S2IH0032 nil) ; use memory history
        (|sayKeyedMsg| 'S2IH0031 nil))) ; use file history
   (inCore 
     (setq |$internalHistoryTable| nil) 
     (cond 
      ((nequal |$IOindex| 0) 
        (setq l (length (rkeyids (|histFileName|)))) 
        (do ((|i| 1 (qsadd1 |i|)))
            ((qsgreaterp |i| l) nil)
         (seq 
          (exit 
           (progn 
            (setq vec (unwind-protect (|readHiFi| |i|) (|disableHist|)))
            (setq |$internalHistoryTable| 
              (cons (cons |i| vec) |$internalHistoryTable|))))))
         (|histFileErase| (|histFileName|)))) 
     (setq |$useInternalHistoryTable| t) 
     (|sayKeyedMsg| 'S2IH0032 nil)) ; use memory history
   (t 
     (setq |$HiFiAccess| nil)
     (|histFileErase| (|histFileName|))
     (setq str 
      (rdefiostream 
       (cons 
         '(mode . output) 
          (cons
            (cons 'file (|histFileName|))
             nil))))
     (do ((tmp0 (reverse |$internalHistoryTable|) (cdr tmp0))
          (tmp1 nil))
         ((or (atom tmp0) 
              (progn 
                (setq tmp1 (car tmp0))
                nil) 
              (progn 
               (progn 
                (setq n (car tmp1))
                (setq rec (cdr tmp1))
                tmp1) 
               nil)) 
              nil)
       (seq 
        (exit 
         (spadrwrite (|object2Identifier| n) rec str))))
     (rshut str)
     (setq |$HiFiAccess| t)
     (setq |$internalHistoryTable| nil)
     (setq |$useInternalHistoryTable| nil)
     (|sayKeyedMsg| 'S2IH0031 nil))))) ; use file history

@
\subsection{defun writeInputLines}
\begin{verbatim}
writeInputLines(fn,initial) == 
  -- writes all input lines into file histInputFileName()
  not $HiFiAccess => sayKeyedMsg("S2IH0013",NIL) ; history not on
  null fn =>
    throwKeyedMsg("S2IH0038", nil) ; missing file name
  maxn := 72
  breakChars := [" ","+"]
  for i in initial..$IOindex - 1 repeat
    vecl := CAR readHiFi i
    if STRINGP vecl then vecl := [vecl]
    for vec in vecl repeat
      n := SIZE vec
      while n > maxn repeat
        -- search backwards for a blank
        done := nil
        for j in 1..maxn while ^done repeat
          k := 1 + maxn - j
          MEMQ(vec.k,breakChars) =>
            svec := STRCONC(SUBSTRING(vec,0,k+1),UNDERBAR)
            lineList := [svec,:lineList]
            done := true
            vec := SUBSTRING(vec,k+1,NIL)
            n := SIZE vec
        -- in case we can't find a breaking point
        if ^done then n := 0
      lineList := [vec,:lineList]
  file := histInputFileName(fn)
  histFileErase file
  inp:= DEFIOSTREAM(['(MODE . OUTPUT),['FILE,:file]],255,0)
  for x in removeUndoLines NREVERSE lineList repeat WRITE_-LINE(x,inp)
  -- see file "undo" for definition of removeUndoLines
  if fn ^= 'redo then sayKeyedMsg("S2IH0014",[namestring file])
  SHUT inp
  NIL
\end{verbatim}
<<defun writeInputLines>>=
(defun |writeInputLines| (fn initial) 
 (prog (maxn breakChars vecl k svec done vec n lineList file inp) 
  (return 
   (seq 
    (cond 
     ((null |$HiFiAccess|)
       (|sayKeyedMsg| 'S2IH0013 nil)) ; history is not on
     ((null fn) 
       (|throwKeyedMsg| 'S2IH0038 nil)) ; missing file name
     (t 
       (setq maxn 72)
       (setq breakChars (cons '| | (cons '+ nil)))
       (do ((tmp0 (spaddifference |$IOindex| 1))
            (|i| initial (+ |i| 1)))
           ((> |i| tmp0) nil)
        (seq 
         (exit 
          (progn 
           (setq vecl (car (|readHiFi| |i|)))
           (cond
            ((stringp vecl) (setq vecl (cons vecl nil))))
           (do ((tmp1 vecl (cdr tmp1)) (vec nil))
               ((or (atom tmp1) (progn (setq vec (car tmp1)) nil)) nil)
            (seq 
             (exit 
              (progn 
               (setq n (size vec))
               (do () 
                   ((null (> n maxn)) nil) 
                (seq 
                 (exit 
                  (progn 
                   (setq done nil)
                   (do ((|j| 1 (qsadd1 |j|)))
                       ((or (qsgreaterp |j| maxn) (null (null done))) nil)
                    (seq 
                     (exit 
                      (progn 
                       (setq k (spaddifference (plus 1 maxn) |j|))
                       (cond 
                        ((memq (ELT vec k) breakChars)
                          (progn 
                           (setq svec (strconc 
                             (substring vec 0 (plus k 1)) underbar))
                           (setq lineList (cons svec lineList))
                           (setq done t)
                           (setq vec (substring vec (plus k 1) nil))
                           (setq n (size vec)))))))))
                   (cond 
                    ((null done) (setq n 0))
                    (t nil))))))
               (setq lineList (cons vec lineList))))))))))
       (setq file (|histInputFileName| fn))
       (|histFileErase| file)
       (setq inp 
        (defiostream 
         (cons 
          '(mode . output) 
          (cons (cons 'file file) nil)) 255 0))
       (do ((tmp2 (|removeUndoLines| (nreverse lineList)) (cdr tmp2))
            (x nil)) 
           ((or (atom tmp2) 
                (progn 
                 (setq x (car tmp2)) 
                 nil))
             nil) 
        (seq 
         (exit 
          (write-line x inp))))
       (cond 
        ((nequal fn '|redo|) 
          (|sayKeyedMsg| 'S2IH0014 ; edit this file to see input lines
            (cons (|namestring| file) nil))))
       (shut inp)
       nil)))))) 

@ 
\subsection{defun resetInCoreHist}
\begin{verbatim}
resetInCoreHist() ==
  -- removes all pointers from $HistList
  $HistListAct:= 0
  for i in 1..$HistListLen repeat
    $HistList:= CDR $HistList
    RPLACA($HistList,NIL)
\end{verbatim}
<<defun resetInCoreHist>>=
(defun |resetInCoreHist| () 
 (seq 
  (progn 
   (setq |$HistListAct| 0) 
   (do ((|i| 1 (qsadd1 |i|)))
       ((qsgreaterp |i| |$HistListLen|) nil)
    (seq
     (exit
      (progn
       (setq |$HistList| (cdr |$HistList|))
       (rplaca |$HistList| nil)))))))) 

@
\subsection{defun changeHistListLen}
\begin{verbatim}
changeHistListLen(n) ==
  -- changes the length of $HistList.  n must be nonnegative
  NULL INTEGERP n => sayKeyedMsg("S2IH0015",[n]) 
  dif:= n-$HistListLen
  $HistListLen:= n
  l:= CDR $HistList
  if dif > 0 then
    for i in 1..dif repeat l:= CONS(NIL,l)
  if dif < 0 then
    for i in 1..-dif repeat l:= CDR l
    if $HistListAct > n then $HistListAct:= n
  RPLACD($HistList,l)
  'done
\end{verbatim}
<<defun changeHistListLen>>=
(defun |changeHistListLen| (n)
 (prog (dif l) 
  (return
   (seq
    (cond
     ((null (integerp n)) 
       (|sayKeyedMsg| 'S2IH0015 (cons n nil))) ; only positive integers
     (t 
       (setq dif (spaddifference n |$HistListLen|))
       (setq |$HistListLen| n) 
       (setq l (cdr |$HistList|)) 
       (cond 
        ((> dif 0) 
          (do ((|i| 1 (qsadd1 |i|)))
              ((qsgreaterp |i| dif) nil)
           (seq
            (exit
             (setq l (cons nil l)))))))
       (cond
        ((minusp dif)
          (do ((tmp0 (spaddifference dif)) 
               (|i| 1 (qsadd1 |i|)))
              ((qsgreaterp |i| tmp0) nil)
           (seq
            (exit
             (setq l (cdr l)))))
          (cond
           ((> |$HistListAct| n) (setq |$HistListAct| n))
           (t nil))))
       (rplacd |$HistList| l) 
       '|done|)))))) 

@
\subsection{defun updateHist}
\begin{verbatim}
updateHist() ==
  -- updates the history file and calls updateInCoreHist
  null $IOindex => nil
  startTimingProcess 'history
  updateInCoreHist()
  if $HiFiAccess then
    UNWIND_-PROTECT(writeHiFi(),disableHist())
    $HistRecord:= NIL
  $IOindex:= $IOindex+1
  updateCurrentInterpreterFrame()
  $mkTestInputStack := nil
  $currentLine := nil
  stopTimingProcess 'history
\end{verbatim}
<<defun updateHist>>=
(defun |updateHist| () 
 (cond
   ((null |$IOindex|) nil)
   (t 
     (|startTimingProcess| '|history|)
     (|updateInCoreHist|)
     (when |$HiFiAccess| 
        (unwind-protect (|writeHiFi|) (|disableHist|))
        (setq |$HistRecord| nil))
     (setq |$IOindex| (plus |$IOindex| 1))
     (|updateCurrentInterpreterFrame|)
     (setq |$mkTestInputStack| nil)
     (setq |$currentLine| nil)
     (|stopTimingProcess| '|history|)))) 

@
\subsection{defun updateInCoreHist}
\begin{verbatim}
updateInCoreHist() ==
  -- updates $HistList and $IOindex
  $HistList:= CDR($HistList)
  RPLACA($HistList,NIL)
  if $HistListAct < $HistListLen then $HistListAct:= $HistListAct+1
\end{verbatim}
<<defun updateInCoreHist>>=
(defun |updateInCoreHist| ()
 (progn
  (setq |$HistList| (cdr |$HistList|))
  (rplaca |$HistList| nil) 
  (COND 
   ((> |$HistListLen| |$HistListAct|) 
     (setq |$HistListAct| (plus |$HistListAct| 1)))
   (t nil)))) 

@
\subsection{defun putHist}
\begin{verbatim}
putHist(x,prop,val,e) ==
  -- records new value to $HistRecord and old value to $HistList
  -- then put is called with e
  if not (x='%) then recordOldValue(x,prop,get(x,prop,e))
  if $HiFiAccess then recordNewValue(x,prop,val)
  putIntSymTab(x,prop,val,e)
\end{verbatim}
<<defun putHist>>=
(defun |putHist| (x prop val e)
 (progn
  (when (null (eq x '%))
    (|recordOldValue| x prop (|get| x prop e)))
  (when |$HiFiAccess|
    (|recordNewValue| x prop val))
  (|putIntSymTab| x prop val e))) 

@
\subsection{defun recordNewValue}
\begin{verbatim}
recordNewValue(x,prop,val) ==
  startTimingProcess 'history
  recordNewValue0(x,prop,val)
  stopTimingProcess 'history
\end{verbatim}
<<defun recordNewValue>>=
(defun |recordNewValue| (x prop val)
 (progn 
  (|startTimingProcess| '|history|)
  (|recordNewValue0| x prop val)
  (|stopTimingProcess| '|history|))) 

@
\subsection{defun recordNewValue0}
\begin{verbatim}
recordNewValue0(x,prop,val) ==
  -- writes (prop . val) into $HistRecord
  -- updateHist writes this stuff out into the history file
  p1:= ASSQ(x,$HistRecord) =>
    p2:= ASSQ(prop,CDR p1) =>
      RPLACD(p2,val)
    RPLACD(p1,CONS(CONS(prop,val),CDR p1))
  p:= CONS(x,list CONS(prop,val))
  $HistRecord:= CONS(p,$HistRecord)
\end{verbatim}
<<defun recordNewValue0>>=
(defun |recordNewValue0| (x prop val)
 (prog (p1 p2 p)
  (return 
   (cond 
    ((setq p1 (ASSQ x |$HistRecord|))
      (cond 
       ((setq p2 (assq prop (cdr p1))) (rplacd p2 val))
       (t (rplacd p1 (cons (cons prop val) (cdr p1))))))
    (t
      (setq p (cons x (list (cons prop val))))
      (setq |$HistRecord| (cons p |$HistRecord|))))))) 

@
\subsection{defun recordOldValue}
\begin{verbatim}
recordOldValue(x,prop,val) ==
  startTimingProcess 'history
  recordOldValue0(x,prop,val)
  stopTimingProcess 'history
\end{verbatim}
<<defun recordOldValue>>=
(defun |recordOldValue| (x prop val)
 (progn
  (|startTimingProcess| '|history|)
  (|recordOldValue0| x prop val)
  (|stopTimingProcess| '|history|)))

@
\subsection{defun recordOldValue0}
\begin{verbatim}
recordOldValue0(x,prop,val) ==
  -- writes (prop . val) into $HistList
  p1:= ASSQ(x,CAR $HistList) =>
    not ASSQ(prop,CDR p1) =>
      RPLACD(p1,CONS(CONS(prop,val),CDR p1))
  p:= CONS(x,list CONS(prop,val))
  RPLACA($HistList,CONS(p,CAR $HistList))
\end{verbatim}
<<defun recordOldValue0>>=
(defun |recordOldValue0| (x prop val)
 (prog (p1 p)
  (return
   (seq
    (when (setq p1 (assq x (car |$HistList|)))
      (exit
        (when (null (assq prop (cdr p1)))
          (exit
            (rplacd p1 (cons (cons prop val) (cdr p1)))))))
    (setq p (cons x (list (cons prop val))))
    (rplaca |$HistList| (cons p (car |$HistList|))))))) 

@
\subsection{defun undoInCore}
\begin{verbatim}
undoInCore(n) ==
  -- undoes the last n>0 steps using $HistList
  -- resets $InteractiveFrame
  li:= $HistList
  for i in n..$HistListLen repeat li:= CDR li
  undoChanges(li)
  n:= $IOindex-n-1
  n>0 and
    $HiFiAccess =>
      vec:= CDR UNWIND_-PROTECT(readHiFi(n),disableHist())
      val:= ( p:= ASSQ('%,vec) ) and ( p1:= ASSQ('value,CDR p) ) and
        CDR p1
    sayKeyedMsg("S2IH0019",[n])
  $InteractiveFrame:= putHist('%,'value,val,$InteractiveFrame)
  updateHist()
\end{verbatim}
<<defun undoInCore>>=
(defun |undoInCore| (n)
 (prog (li vec p p1 val)
  (return
   (seq
    (progn
     (setq li |$HistList|) 
     (do ((i n (+ i 1)))
         ((> i |$HistListLen|) nil)
      (seq
       (exit
        (setq li (cdr li)))))
     (|undoChanges| li)
     (setq n (spaddifference (spaddifference |$IOindex| n) 1))
     (and
       (> n 0)
       (cond 
        (|$HiFiAccess|
          (setq vec 
           (cdr (unwind-protect (|readHiFi| n) (|disableHist|))))
          (setq val 
           (and 
            (setq p (assq '% vec))
            (setq p1 (assq '|value| (cdr p)))
            (cdr p1))))
        (t 
          (|sayKeyedMsg| 'S2IH0019 (cons n nil))))) ; no history file
     (setq |$InteractiveFrame| 
       (|putHist| '% '|value| val |$InteractiveFrame|))
     (|updateHist|)))))) 

@
\subsection{defun undoChanges}
\begin{verbatim}
undoChanges(li) ==
  -- undoes all changes of list 'li'
  if not CDR li = $HistList then undoChanges CDR li
  for p1 in CAR li repeat
    x:= CAR p1
    for p2 in CDR p1 repeat
      putHist(x,CAR p2,CDR p2,$InteractiveFrame)
\end{verbatim}
<<defun undoChanges>>=
(defun |undoChanges| (li)
 (prog (x)
  (return
   (seq
    (progn
     (when (null (boot-equal (cdr li) |$HistList|))
       (|undoChanges| (cdr li)))
     (do ((tmp0 (car li) (cdr tmp0)) (p1 nil))
         ((or (atom tmp0) (progn (setq p1 (car tmp0)) nil)) nil)
      (seq
       (exit
        (progn
         (setq x (car p1))
         (do ((tmp1 (cdr p1) (cdr tmp1)) (p2 nil))
             ((or (atom tmp1) (progn (setq p2 (car tmp1)) nil)) nil)
          (seq
           (exit
            (|putHist| x (car p2) (cdr p2) |$InteractiveFrame|)
      )))))))))))) 

@
\subsection{defun undoFromFile}
\begin{verbatim}
undoFromFile(n) ==
  -- makes a clear and redoes all the assignments until step n
  for [x,:varl] in CAAR $InteractiveFrame repeat
    for p in varl repeat
      [prop,:val]:= p
      val =>
        if not (x='%) then recordOldValue(x,prop,val)
        if $HiFiAccess then recordNewValue(x,prop,val)
        RPLACD(p,NIL)
  for i in 1..n repeat
    vec:= UNWIND_-PROTECT(CDR readHiFi(i),disableHist())
    for p1 in vec repeat
      x:= CAR p1
      for p2 in CDR p1 repeat
        $InteractiveFrame:= putHist(x,CAR p2,CDR p2,$InteractiveFrame)
  val:= ( p:= ASSQ('%,vec) ) and ( p1:= ASSQ('value,CDR p) ) and CDR p1
  $InteractiveFrame:= putHist('%,'value,val,$InteractiveFrame)
  updateHist()
\end{verbatim}
<<defun undoFromFile>>=
(defun |undoFromFile| (n)
 (prog (varl prop vec x p p1 val)
  (return
   (seq
    (progn
     (do ((tmp0 (caar |$InteractiveFrame|) (cdr tmp0)) (tmp1 nil))
         ((or (atom tmp0) 
              (progn (setq tmp1 (car tmp0)) nil) 
              (progn
                (progn
                 (setq x (car tmp1)) 
                 (setq varl (cdr tmp1))
                 tmp1)
                 nil))
               nil)
      (seq
       (exit
        (do ((tmp2 varl (cdr tmp2)) (p nil))
            ((or (atom tmp2) (progn (setq p (car tmp2)) nil)) nil)
         (seq
          (exit
           (progn
            (setq prop (car p))
            (setq val (cdr p))
            (when val 
              (progn
                (when (null (eq x '%))
                  (|recordOldValue| x prop val))
                (when |$HiFiAccess| 
                  (|recordNewValue| x prop val))
                (rplacd p nil))))))))))
     (do ((|i| 1 (qsadd1 |i|)))
         ((qsgreaterp |i| n) nil)
      (seq
       (exit
        (progn
         (setq vec 
           (unwind-protect (cdr (|readHiFi| |i|)) (|disableHist|)))
         (do ((tmp3 vec (cdr tmp3)) (p1 nil))
             ((or (atom tmp3) (progn (setq p1 (car tmp3)) nil)) nil)
          (seq
           (exit
            (progn
             (setq x (car p1))
             (do ((tmp4 (cdr p1) (cdr tmp4)) (p2 nil))
                 ((or (atom tmp4) (progn (setq p2 (car tmp4)) nil)) nil)
              (seq
               (exit
                (setq |$InteractiveFrame| 
                 (|putHist| x (car p2) (CDR p2) |$InteractiveFrame|)
       ))))))))))))
     (setq val
      (and 
       (setq p (assq '% vec))
       (setq p1 (assq '|value| (cdr p)))
       (cdr p1)))
     (setq |$InteractiveFrame| 
       (|putHist| '% '|value| val |$InteractiveFrame|))
     (|updateHist|)))))) 

@
\subsection{defun saveHistory}
\begin{verbatim}
saveHistory(fn) ==
  $seen: local := MAKE_-HASHTABLE 'EQ
  not $HiFiAccess => sayKeyedMsg("S2IH0016",NIL)
  not $useInternalHistoryTable and
    null MAKE_-INPUT_-FILENAME histFileName() => sayKeyedMsg("S2IH0022",NIL)
  null fn => 
    throwKeyedMsg("S2IH0037", nil)
  savefile := makeHistFileName(fn)
  inputfile := histInputFileName(fn)
  writeInputLines(fn,1)
  histFileErase savefile
 
  if $useInternalHistoryTable
    then
      saveStr := RDEFIOSTREAM ['(MODE . OUTPUT),['FILE,:savefile]]
      for [n,:rec] in reverse $internalHistoryTable repeat
        val := SPADRWRITE0(object2Identifier n,rec,saveStr)
        val = 'writifyFailed =>
          sayKeyedMsg("S2IH0035", [n, inputfile]) ; unable to save step
      RSHUT saveStr
  sayKeyedMsg("S2IH0018",[namestring(savefile)]) ; saved hist file named
  nil
\end{verbatim}
<<defun saveHistory>>=
(defun |saveHistory| (fn)
 (prog (|$seen| savefile inputfile saveStr n rec val)
  (declare (special |$seen|))
   (return
    (seq
     (progn
      (setq |$seen| (make-hashtable 'eq))
      (cond 
       ((null |$HiFiAccess|) 
         (|sayKeyedMsg| 'S2IH0016 nil)) ; the history file is not on
       ((and (null |$useInternalHistoryTable|) 
             (null (make-input-filename (|histFileName|))))
         (|sayKeyedMsg| 'S2IH0022 nil)) ; no history saved yet
       ((null fn) 
         (|throwKeyedMsg| 'S2IH0037 nil)) ; need to specify a history filename
       (t 
         (setq savefile (|makeHistFileName| fn))
         (setq inputfile (|histInputFileName| fn))
         (|writeInputLines| fn 1)
         (|histFileErase| savefile)
         (when |$useInternalHistoryTable| 
           (setq saveStr 
             (rdefiostream 
              (cons '(mode . output) 
                (cons (cons 'file savefile) nil))))
           (do ((tmp0 (reverse |$internalHistoryTable|) (cdr tmp0))
                (tmp1 nil))
               ((or (atom tmp0) 
                    (progn (setq tmp1 (car tmp0)) nil)
                    (progn
                     (progn
                      (setq n (car tmp1)) 
                      (setq rec (cdr tmp1)) 
                      tmp1) 
                     nil)) 
                    nil)
            (seq
             (exit
              (progn
               (setq val 
                 (spadrwrite0 (|object2Identifier| n) rec saveStr))
               (when (eq val '|writifyFailed|)
                (|sayKeyedMsg| 'S2IH0035 ; can't save the value of step
                 (cons n (cons inputfile nil))))))))
           (rshut saveStr))
         (|sayKeyedMsg| 'S2IH0018 ; saved history file is
           (cons (|namestring| savefile) nil))
         nil)))))))

@
\subsection{defun restoreHistory}
\begin{verbatim}
restoreHistory(fn) ==
  -- uses fn $historyFileType to recover an old session
  -- if fn = NIL, then use $oldHistoryFileName
  if null fn then fn' := $oldHistoryFileName
  else if fn is [fn'] and IDENTP(fn') then fn' := fn'
       else throwKeyedMsg("S2IH0023",[fn'])
  restfile := makeHistFileName(fn')
  null MAKE_-INPUT_-FILENAME restfile =>
    sayKeyedMsg("S2IH0024",[namestring(restfile)]) ; no history file
 
  -- if clear is changed to be undoable, this should be a reset-clear
  $options: local := nil
  clearSpad2Cmd '(all)
 
  curfile := histFileName()
  histFileErase curfile
  _$FCOPY(restfile,curfile)
 
  l:= LENGTH RKEYIDS curfile
  $HiFiAccess:= 'T
  oldInternal := $useInternalHistoryTable
  $useInternalHistoryTable := NIL
  if oldInternal then $internalHistoryTable := NIL
  for i in 1..l repeat
    vec:= UNWIND_-PROTECT(readHiFi(i),disableHist())
    if oldInternal then $internalHistoryTable :=
      CONS([i,:vec],$internalHistoryTable)
    LINE:= CAR vec
    for p1 in CDR vec repeat
      x:= CAR p1
      for p2 in CDR p1 repeat
        $InteractiveFrame:= putHist(x,CAR p2,CDR p2,$InteractiveFrame)
    updateInCoreHist()
  $e := $InteractiveFrame
  for [a,:.] in CAAR $InteractiveFrame repeat
    get(a,'localModemap,$InteractiveFrame) =>
      rempropI(a,'localModemap)
      rempropI(a,'localVars)
      rempropI(a,'mapBody)
  $IOindex:= l+1
  $useInternalHistoryTable := oldInternal
  sayKeyedMsg("S2IH0025",[namestring(restfile)]) 
  clearCmdSortedCaches()
  nil
\end{verbatim}
<<defun restoreHistory>>=
(defun |restoreHistory| (fn)
 (prog (|$options| fnq restfile curfile l oldInternal vec line x a)
  (declare (special |$options|))
   (return
    (seq
     (progn
      (cond 
        ((null fn)
          (setq fnq |$oldHistoryFileName|))
        ((and (pairp fn) 
              (eq (qcdr fn) nil)
              (progn
               (setq fnq (qcar fn))
               t)
              (identp fnq))
          (setq fnq fnq))
        (t (|throwKeyedMsg| 'S2IH0023 (cons fnq nil)))) ; invalid filename
      (setq restfile (|makeHistFileName| fnq))
      (cond 
       ((null (make-input-filename restfile))
         (|sayKeyedMsg| 'S2IH0024  ; file does not exist
            (cons (|namestring| restfile) nil)))
       (t 
         (setq |$options| nil)
         (|clearSpad2Cmd| '(|all|))
         (setq curfile (|histFileName|))
         (|histFileErase| curfile)
         ($fcopy restfile curfile)
         (setq l (length (rkeyids curfile)))
         (setq |$HiFiAccess| t)
         (setq oldInternal |$useInternalHistoryTable|)
         (setq |$useInternalHistoryTable| nil)
         (when oldInternal
           (setq |$internalHistoryTable| nil))
         (do ((|i| 1 (qsadd1 |i|)))
             ((qsgreaterp |i| l) nil)
          (seq
           (exit
            (progn
             (setq vec (unwind-protect (|readHiFi| |i|) (|disableHist|)))
             (when oldInternal
               (setq |$internalHistoryTable| 
                (cons (cons |i| vec) |$internalHistoryTable|)))
             (setq line (car vec))
             (do ((tmp0 (cdr vec) (cdr tmp0)) (p1 nil))
                 ((or (atom tmp0) (progn (setq p1 (car tmp0)) nil)) nil)
              (seq
               (exit
                (progn
                 (setq x (car p1))
                 (do ((tmp1 (cdr p1) (cdr tmp1)) (p2 nil))
                     ((or (atom tmp1) (progn (setq p2 (car tmp1)) nil)) nil)
                  (seq
                   (exit
                    (setq |$InteractiveFrame| 
                      (|putHist| x 
                       (car p2) (cdr p2) |$InteractiveFrame|)))))))))
             (|updateInCoreHist|)))))
         (setq |$e| |$InteractiveFrame|)
         (seq
          (do ((tmp2 (caar |$InteractiveFrame|) (cdr tmp2)) (tmp3 nil))
              ((or (atom tmp2) 
                   (progn
                     (setq tmp3 (car tmp2))
                     nil) 
                   (progn
                    (progn
                      (setq a (car tmp3))
                      tmp3) 
                      nil))
                   nil)
           (seq
            (exit
             (when (|get| a '|localModemap| |$InteractiveFrame|)
              (exit
               (progn
                (|rempropI| a '|localModemap|)
                (|rempropI| a '|localVars|)
                (|rempropI| a '|mapBody|)))))))
          (setq |$IOindex| (plus l 1))
          (setq |$useInternalHistoryTable| oldInternal)
          (|sayKeyedMsg| 'S2IH0025 ; workspace restored
            (cons (|namestring| restfile) nil))
          (|clearCmdSortedCaches|)
          nil)))))))) 

@
\subsection{defun showHistory}
\begin{verbatim}
-- the following used to be the show command when that was used to
-- show history.
showHistory(arg) ==
  -- arg can be of form
  --    NIL          show at most last 20 input lines
  --    (n)          show at most last n input lines
  --    (lit)        where lit is an abbreviation for 'input or 'both
  --                 if 'input, same as NIL
  --                 if 'both, show last 5 input and outputs
  --    (n lit)      show last n input lines + last n output lines
  --                 if lit expands to 'both
  $evalTimePrint: local:= 0
  $printTimeSum: local:= 0
  -- ugh!!! these are needed for timedEvaluateStream
  -- displays the last n steps, default n=20
  not $HiFiAccess => sayKeyedMsg("S2IH0026",['show])
  showInputOrBoth := 'input
  n := 20
  nset := nil
  if arg then
    arg1 := CAR arg
    if INTEGERP arg1 then
      n := arg1
      nset := true
      KDR arg => arg1 := CADR arg
      arg1 := NIL
    arg1 =>
      arg2 := selectOptionLC(arg1,'(input both),nil)
      if arg2
        then ((showInputOrBoth := arg2) = 'both) and (null nset) => n:= 5
        else sayMSG
          concat('"  ",bright arg1,'"is an invalid argument.")
  if n >= $IOindex then n:= $IOindex-1
  mini:= $IOindex-n
  maxi:= $IOindex-1
  showInputOrBoth = 'both =>
    UNWIND_-PROTECT(showInOut(mini,maxi),setIOindex(maxi+1))
  showInput(mini,maxi)
\end{verbatim}
<<defun showHistory>>=
(defun |showHistory| (arg)
 (prog (|$evalTimePrint| |$printTimeSum| nset arg1 arg2 
        showInputOrBoth n mini maxi)
  (declare (special |$evalTimePrint| |$printTimeSum|))
   (return
    (seq
     (progn
      (setq |$evalTimePrint| 0)
      (setq |$printTimeSum| 0)
      (cond
       ((null |$HiFiAccess|)
         (|sayKeyedMsg| 'S2IH0026 (cons '|show| nil))) ; history not on
       (t
         (setq showInputOrBoth '|input|)
         (setq n 20)
         (setq nset nil)
         (when arg 
          (setq arg1 (car arg))
          (when  (integerp arg1)
           (setq n arg1)
           (setq nset t)
           (cond
            ((kdr arg) (setq arg1 (cadr arg)))
            (t (setq arg1 nil))))
          (when arg1 
           (progn
            (setq arg2 (|selectOptionLC| arg1 '(|input| |both|) nil))
            (seq
             (cond 
              (arg2
                 (when (and (eq (setq showInputOrBoth arg2) '|both|)
                            (null nset))
                   (exit (setq n 5))))
              (t
                (|sayMSG| 
                  (|concat| 
                   "  "
                   (|bright| arg1)
                   "is an invalid argument."))))))))
         (when (>= n |$IOindex|)
           (setq n (spaddifference |$IOindex| 1)))
         (setq mini (spaddifference |$IOindex| n))
         (setq maxi (spaddifference |$IOindex| 1))
         (cond 
           ((eq showInputOrBoth '|both|)
             (unwind-protect 
               (|showInOut| mini maxi)
               (|setIOindex| (plus maxi 1))))
           (t (|showInput| mini maxi))))))))))
 
@
\subsection{defun setIOindex}
\begin{verbatim}
setIOindex(n) ==
  -- set $IOindex to n
  $IOindex:= n
\end{verbatim}
<<defun setIOindex>>=
(defun |setIOindex| (n)
  (setq |$IOindex| n)) 

@
\subsection{defun showInput}
\begin{verbatim}
showInput(mini,maxi) ==
  -- displays all input lines from mini to maxi
  for ind in mini..maxi repeat
    vec:= UNWIND_-PROTECT(readHiFi(ind),disableHist())
    if ind<10 then TAB 2 else if ind<100 then TAB 1
    l := CAR vec
    STRINGP l =>
      sayMSG ['"   [",ind,'"] ",CAR vec]
    sayMSG ['"   [",ind,'"] " ]
    for ln in l repeat
      sayMSG ['"      ", ln]
\end{verbatim}
<<defun showInput>>=
(defun |showInput| (mini maxi)
 (prog (vec l)
  (return
   (seq
    (do ((|ind| mini (+ |ind| 1)))
        ((> |ind| maxi) nil)
     (seq
      (exit
       (progn
        (setq vec (unwind-protect (|readHiFi| |ind|) (|disableHist|)))
        (cond
         ((> 10 |ind|) (tab 2))
         ((> 100 |ind|) (tab 1))
         (t nil))
        (setq l (car vec))
        (cond
          ((stringp l)
            (|sayMSG| 
             (cons 
              "   ["
              (cons |ind| 
               (cons "] "
                (cons (car vec) nil))))))
          (t
            (|sayMSG|
             (cons "   ["
              (cons |ind|
               (cons "] " nil))))
           (do ((tmp0 l (cdr tmp0)) (|ln| nil))
               ((or (atom tmp0) (progn (setq |ln| (car tmp0)) nil)) nil)
            (seq
             (exit
              (|sayMSG|
               (cons "      " (cons |ln| nil)))))))))))))))) 

@
\subsection{defun showInOut}
\begin{verbatim}
showInOut(mini,maxi) ==
  -- displays all steps from mini to maxi
  for ind in mini..maxi repeat
    vec:= UNWIND_-PROTECT(readHiFi(ind),disableHist())
    sayMSG [CAR vec]
    Alist:= ASSQ('%,CDR vec) =>
      triple:= CDR ASSQ('value,CDR Alist)
      $IOindex:= ind
      spadPrint(objValUnwrap triple,objMode triple)
\end{verbatim}
<<defun showInOut>>=
(defun |showInOut| (mini maxi)
 (prog (vec Alist triple)
  (return
   (seq
    (do ((ind mini (+ ind 1)))
        ((> ind maxi) nil)
     (seq
      (exit
       (progn
        (setq vec (unwind-protect (|readHiFi| ind) (|disableHist|)))
        (|sayMSG| (cons (car vec) nil))
        (cond
         ((setq Alist (assq '% (cdr vec)))
          (progn
           (setq triple (cdr (assq '|value| (cdr Alist))))
           (setq |$IOindex| ind)
           (|spadPrint| 
             (|objValUnwrap| triple) (|objMode| triple))))))))))))) 

@
\subsection{defun fetchOutput}
\begin{verbatim}
fetchOutput(n) ==
  -- result is the output of step n
  (n = -1) and (val := getI("%",'value)) => val
  $HiFiAccess =>
    n:=
      n < 0 => $IOindex+n
      n
    n >= $IOindex => throwKeyedMsg("S2IH0001",[n])
    n < 1        => throwKeyedMsg("S2IH0002",[n])
    vec:= UNWIND_-PROTECT(readHiFi(n),disableHist())
    Alist:= ASSQ('%,CDR vec) =>
      val:= CDR ASSQ('value,CDR Alist) => val
      throwKeyedMsg("S2IH0003",[n])
    throwKeyedMsg("S2IH0003",[n])
  throwKeyedMsg("S2IH0004",NIL)
\end{verbatim}
<<defun fetchOutput>>=
(defun |fetchOutput| (n)
 (prog (vec Alist val)
  (return
   (cond
    ((and (boot-equal n (spaddifference 1))
          (setq val (|getI| '% '|value|)))
       val)
    (|$HiFiAccess|
     (setq n
      (cond
       ((minusp n) (plus |$IOindex| n))
       (t n)))
     (cond
      ((>= n |$IOindex|) 
        (|throwKeyedMsg| 'S2IH0001 (cons n nil))) ; no step n yet
      ((> 1 n)
        (|throwKeyedMsg| 'S2IH0002 (cons n nil))) ; only nonzero steps
      (t
        (setq vec (unwind-protect (|readHiFi| n) (|disableHist|)))
        (cond
         ((setq Alist (assq '% (cdr vec)))
           (cond
             ((setq val (cdr (assq '|value| (cdr Alist))))
               val)
             (t
               (|throwKeyedMsg| 'S2IH0003 (cons n nil))))) ; no step value
         (t (|throwKeyedMsg| 'S2IH0003 (cons n nil))))))) ; no step value
    (t (|throwKeyedMsg| 'S2IH0004 nil)))))) ; history not on

@
\subsection{defun readHiFi}
\begin{verbatim}
readHiFi(n) ==
  -- reads the file using index n
  if $useInternalHistoryTable
  then
    pair := assoc(n,$internalHistoryTable)
    ATOM pair => keyedSystemError("S2IH0034",NIL)
    vec := QCDR pair
  else
    HiFi:= RDEFIOSTREAM ['(MODE . INPUT),['FILE,:histFileName()]]
    vec:= SPADRREAD(object2Identifier n,HiFi)
    RSHUT HiFi
  vec
\end{verbatim}
<<defun readHiFi>>=
(defun |readHiFi| (n)
 (prog (pair HiFi vec)
  (return
   (progn
    (cond
     (|$useInternalHistoryTable|
      (setq pair (|assoc| n |$internalHistoryTable|))
      (cond
       ((atom pair) 
         (|keyedSystemError| 'S2IH0034 nil)) ; missing element
       (t 
         (setq vec (qcdr pair)))))
     (t
       (setq HiFi
        (rdefiostream
         (cons
          '(mode . input)
           (cons
            (cons 'file (|histFileName|)) nil))))
       (setq vec (spadrread (|object2Identifier| n) HiFi))
       (rshut HiFi)))
    vec)))) 

@
\subsection{defun writeHiFi}
\begin{verbatim}
writeHiFi() ==
  -- writes the information of the current step out to history file
  if $useInternalHistoryTable
  then
    $internalHistoryTable := CONS([$IOindex,$currentLine,:$HistRecord],
      $internalHistoryTable)
  else
    HiFi:= RDEFIOSTREAM ['(MODE . OUTPUT),['FILE,:histFileName()]]
    SPADRWRITE(object2Identifier $IOindex, CONS($currentLine,$HistRecord),HiFi)
    RSHUT HiFi
\end{verbatim}
<<defun writeHiFi>>=
(defun |writeHiFi| ()
 (prog (HiFi)
  (return
   (cond
    (|$useInternalHistoryTable|
     (setq |$internalHistoryTable|
      (cons
       (cons |$IOindex|
        (cons |$currentLine| |$HistRecord|))
        |$internalHistoryTable|)))
    (t
      (setq HiFi
        (rdefiostream
         (cons
           '(mode . output)
            (cons (cons 'file (|histFileName|)) nil))))
      (spadrwrite (|object2Identifier| |$IOindex|)
        (cons |$currentLine| |$HistRecord|) HiFi)
      (rshut HiFi)))))) 

@
\subsection{defun disableHist}
\begin{verbatim} 
disableHist() ==
  -- disables the history mechanism if an error occurred in the protected
  -- piece of code
  not $HiFiAccess => histFileErase histFileName()
  NIL
\end{verbatim}
<<defun disableHist>>=
(defun |disableHist| () 
 (cond
  ((null |$HiFiAccess|) 
    (|histFileErase| (|histFileName|)))
  (t nil))) 

@
\subsection{defun writeHistModesAndValues}
\begin{verbatim}
writeHistModesAndValues() ==
  for [a,:.] in CAAR $InteractiveFrame repeat
    x := get(a,'value,$InteractiveFrame) =>
      putHist(a,'value,x,$InteractiveFrame)
    x := get(a,'mode,$InteractiveFrame) =>
      putHist(a,'mode,x,$InteractiveFrame)
  NIL
\end{verbatim}
<<defun writeHistModesAndValues>>=
(defun |writeHistModesAndValues| ()
 (prog (a x)
  (return
   (seq
    (progn
     (do ((tmp0 (caar |$InteractiveFrame|) (cdr tmp0)) (tmp1 nil))
         ((or (atom tmp0) 
              (progn
                (setq tmp1 (car tmp0))
                nil)
              (progn
                (progn
                  (setq a (car tmp1))
                  tmp1)
              nil))
          nil)
      (seq
       (exit
        (cond
         ((setq x (|get| a '|value| |$InteractiveFrame|))
           (|putHist| a '|value| x |$InteractiveFrame|))
         ((setq x (|get| a '|mode| |$InteractiveFrame|))
           (|putHist| a '|mode| x |$InteractiveFrame|))))))
     nil))))) 

@
\section{Lisplib output transformations}
--% Lisplib output transformations
--  Some types of objects cannot be saved by LISP/VM in lisplibs.
--  These functions transform an object to a writable form and back.
--  SMW
\subsection{defun SPADRWRITE0}
\begin{verbatim}
SPADRWRITE0(vec, item, stream) ==
    val := safeWritify item
    val = 'writifyFailed => val
    rwrite(vec, val, stream)
    item
\end{verbatim}
<<defun SPADRWRITE0>>=
(defun spadrwrite0 (vec item stream)
 (prog (val)
  (return
   (progn
    (setq val (|safeWritify| item))
    (cond
     ((eq val '|writifyFailed|) val)
     (t (|rwrite| vec val stream) item)))))) 

@
\subsection{defun SPADRWRITE}
\begin{verbatim}
SPADRWRITE(vec, item, stream) ==
  val := SPADRWRITE0(vec, item, stream) 
  val = 'writifyFailed =>
    throwKeyedMsg("S2IH0036", nil) ; cannot save value to file
  item
\end{verbatim}
<<defun SPADRWRITE>>=
(defun spadrwrite (vec item stream)
 (prog (val)
  (return
   (progn
    (setq val (spadrwrite0 vec item stream))
    (cond
     ((eq val '|writifyFailed|)
        (|throwKeyedMsg| 'S2IH0036 nil)) ; cannot save value to file
     (t item))))))

@
\subsection{defun SPADRREAD}
\begin{verbatim}
SPADRREAD(vec, stream) ==
    dewritify rread(vec, stream, nil)
\end{verbatim}
<<defun SPADRREAD>>=
(defun spadrread (vec stream)
 (|dewritify| (|rread| vec stream nil))) 

@ 
\subsection{defun unwritable?}
\begin{verbatim}
unwritable? ob ==
    PAIRP  ob or VECP ob       => false   -- first for speed
    COMPILED_-FUNCTION_-P   ob or HASHTABLEP ob => true
    PLACEP ob or READTABLEP ob => true
    FLOATP ob => true
    false
\end{verbatim}
<<defun unwritable?>>=
(defun |unwritable?| (ob)
 (cond
  ((or (pairp ob) (vecp ob)) nil)
  ((or (compiled-function-p ob) (hashtablep ob)) t)
  ((or (placep ob) (readtablep ob)) t)
  ((floatp ob) t)
  (t nil))) 

@
\subsection{defun writifyComplain}
\begin{verbatim}
-- Create a full isomorphic object which can be saved in a lisplib.
-- Note that  dewritify(writify(x))  preserves UEQUALity of hashtables.
-- HASHTABLEs go both ways.
-- READTABLEs cannot presently be transformed back.
 
writifyComplain s ==
   $writifyComplained  = true => nil
   $writifyComplained := true
   sayKeyedMsg("S2IH0027",[s]) 
\end{verbatim}
<<defun writifyComplain>>=
(defun |writifyComplain| (s)
 (cond 
   ((eq |$writifyComplained| t) nil)
   (t
    (setq |$writifyComplained| t)
    (|sayKeyedMsg| 'S2IH0027 (cons s nil))))) ; cannot save value

@
\subsection{defun safeWritify}
\begin{verbatim}
safeWritify ob ==
  CATCH('writifyTag,  writify ob)
\end{verbatim}
<<defun safeWritify>>=
(defun |safeWritify| (ob)
 (catch '|writifyTag| (|writify| ob))) 

@
\subsection{defun writify}
\begin{verbatim}
writify ob ==
    not ScanOrPairVec(function(unwritable?), ob) => ob
    $seen:     local := MAKE_-HASHTABLE 'EQ
    $writifyComplained: local := false
 
    writifyInner ob where
        writifyInner ob ==
            null ob                => nil
            (e := HGET($seen, ob)) => e
 
            PAIRP ob =>
                qcar := QCAR ob
                qcdr := QCDR ob
                (name := spadClosure? ob) =>
                   d := writifyInner QCDR ob
                   nob := ['WRITIFIED_!_!, 'SPADCLOSURE, d, name]
                   HPUT($seen, ob, nob)
                   HPUT($seen, nob, nob)
                   nob
                (ob is ['LAMBDA_-CLOSURE, ., ., x, :.]) and x =>
                  THROW('writifyTag, 'writifyFailed)
                nob := CONS(qcar, qcdr)
                HPUT($seen, ob, nob)
                HPUT($seen, nob, nob)
                qcar := writifyInner qcar
                qcdr := writifyInner qcdr
                QRPLACA(nob, qcar)
                QRPLACD(nob, qcdr)
                nob
            VECP ob =>
                isDomainOrPackage ob =>
                    d := mkEvalable devaluate ob
                    nob := ['WRITIFIED_!_!, 'DEVALUATED, writifyInner d]
                    HPUT($seen, ob, nob)
                    HPUT($seen, nob, nob)
                    nob
                n   := QVMAXINDEX ob
                nob := MAKE_-VEC(n+1)
                HPUT($seen, ob, nob)
                HPUT($seen, nob, nob)
                for i in 0..n repeat
                    QSETVELT(nob, i, writifyInner QVELT(ob,i))
                nob
            ob = 'WRITIFIED_!_! =>
                ['WRITIFIED_!_!, 'SELF]
            -- In CCL constructors are also compiled functions, so we 
            -- need this line:
            constructor? ob => ob
            COMPILED_-FUNCTION_-P ob =>
                THROW('writifyTag, 'writifyFailed)
            HASHTABLEP ob =>
                nob := ['WRITIFIED_!_!]
                HPUT($seen, ob,  nob)
                HPUT($seen, nob, nob)
                keys := HKEYS ob
                QRPLACD(nob,
                        ['HASHTABLE,
                          HASHTABLE_-CLASS ob,
                            writifyInner keys,
                              [writifyInner HGET(ob,k) for k in keys]])
                nob
            PLACEP ob =>
                nob := ['WRITIFIED_!_!, 'PLACE]
                HPUT($seen, ob,  nob)
                HPUT($seen, nob, nob)
                nob
            -- The next three types cause an error on de-writifying.
            -- Create an object of the right shape, nonetheless.
            READTABLEP ob =>
                THROW('writifyTag, 'writifyFailed)
            -- Default case: return the object itself.
            STRINGP ob =>
                EQ(ob, $NullStream) => ['WRITIFIED_!_!, 'NULLSTREAM]
                EQ(ob, $NonNullStream) => ['WRITIFIED_!_!, 'NONNULLSTREAM]
                ob
            FLOATP ob =>
                ob = READ_-FROM_-STRING STRINGIMAGE ob => ob
                ['WRITIFIED_!_!, 'FLOAT, ob,:
                   MULTIPLE_-VALUE_-LIST INTEGER_-DECODE_-FLOAT ob]
            ob
\end{verbatim}
<<defun writify,writifyInner>>=
(defun |writify,writifyInner| (ob)
 (prog (e name tmp1 tmp2 tmp3 x qcar qcdr d n keys nob)
  (return
   (seq
    (when (null ob)
     (exit nil))
    (when (setq e (hget |$seen| ob))
     (exit e))
    (when (pairp ob)
     (exit
      (seq
       (setq qcar (qcar ob))
       (setq qcdr (qcdr ob))
       (when (setq name (|spadClosure?| ob))
        (exit
         (seq
          (setq d (|writify,writifyInner| (qcdr ob)))
          (setq nob 
           (cons 'writified!!
            (cons 'spadclosure 
             (cons d (cons name nil)))))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when 
        (and 
         (and (pairp ob)
              (eq (qcar ob) 'lambda-closure)
              (progn
               (setq tmp1 (qcdr ob))
               (and (pairp tmp1)
                    (progn 
                     (setq tmp2 (qcdr tmp1))
                     (and 
                      (pairp tmp2)
                      (progn 
                       (setq tmp3 (qcdr tmp2))
                       (and (pairp tmp3)
                            (progn
                             (setq x (qcar tmp3))
                             t)))))))) x)
        (exit
         (throw '|writifyTag| '|writifyFailed|)))
       (setq nob (cons qcar qcdr))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (setq qcar (|writify,writifyInner| qcar))
       (setq qcdr (|writify,writifyInner| qcdr))
       (qrplaca nob qcar)
       (qrplacd nob qcdr)
       (exit nob))))
    (when (vecp ob)
     (exit
      (seq
       (when (|isDomainOrPackage| ob)
        (exit
         (seq
          (setq d (|mkEvalable| (|devaluate| ob)))
          (setq nob 
           (cons 'writified!! 
            (cons 'devaluated 
             (cons (|writify,writifyInner| d) nil))))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (setq n (qvmaxindex ob))
       (setq nob (make-vec (plus n 1)))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (do ((|i| 0 (qsadd1 |i|)))
           ((qsgreaterp |i| n) nil)
        (seq
         (exit
          (qsetvelt nob |i| (|writify,writifyInner| (QVELT ob |i|))))))
       (exit nob))))
    (when (eq ob 'writified!!)
     (exit
      (cons 'writified!! (cons 'self nil))))
    (when (|constructor?| ob)
     (exit ob))
    (when (compiled-function-p ob)
     (exit
      (throw '|writifyTag| '|writifyFailed|)))
    (when (hashtablep ob)
     (exit
      (seq
       (setq nob (cons 'writified!! nil))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (setq keys (hkeys ob))
       (qrplacd nob
        (cons 
          'hashtable
          (cons 
            (hashtable-class ob)
            (cons
              (|writify,writifyInner| keys)
              (cons
                (prog (tmp0)
                  (setq tmp0 nil)
                  (return
                   (do ((tmp1 keys (cdr tmp1)) (k nil))
                       ((or (atom tmp1)
                            (progn
                             (setq k (car tmp1))
                              nil))
                            (nreverse0 tmp0))
                    (seq
                     (exit
                      (setq tmp0 
                       (cons 
                         (|writify,writifyInner| (HGET ob k))
                         tmp0)))))))
                nil)))))
       (exit nob))))
    (when (placep ob)
     (exit
      (seq
       (setq nob (cons 'writified!! (cons 'place nil)))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (exit nob))))
    (when (readtablep ob)
     (exit
      (throw '|writifyTag| '|writifyFailed|)))
    (when (stringp ob)
     (exit
      (seq
       (when (eq ob |$NullStream|)
        (exit
         (cons 'writified!! (cons 'nullstream nil))))
       (when (eq ob |$NonNullStream|)
        (exit
         (cons 'writified!! (cons 'nonnullstream nil))))
       (exit ob))))
    (when (floatp ob)
     (exit
      (seq
       (when (boot-equal ob (read-from-string (stringimage ob)))
        (exit ob))
       (exit
        (cons 'writified!!
         (cons 'float 
          (cons ob 
           (multiple-value-list (integer-decode-float ob)))))))))
    (exit ob))))) 

@
<<defun writify>>=
(defun |writify| (ob)
 (prog (|$seen| |$writifyComplained|)
  (declare (special |$seen| |$writifyComplained|))
   (return
    (cond
     ((null (|ScanOrPairVec| (|function| |unwritable?|) ob))
       ob)
     (t
      (setq |$seen| (make-hashtable 'eq))
      (setq |$writifyComplained| nil)
      (|writify,writifyInner| ob)))))) 

@
\subsection{defun spadClosure?}
\begin{verbatim}
spadClosure? ob ==
  fun := QCAR ob
  not (name := BPINAME fun) => nil
  vec := QCDR ob
  not VECP vec => nil
  name
\end{verbatim}
<<defun spadClosure?>>=
(defun |spadClosure?| (ob)
 (prog (fun name vec)
  (return
   (progn
    (setq fun (qcar ob))
    (cond 
     ((null (setq name (bpiname fun))) nil)
     (t
       (setq vec (qcdr ob))
       (cond
        ((null (vecp vec)) nil)
        (t name)))))))) 

@
\subsection{defun dewritify}
\begin{verbatim}
dewritify ob ==
    (not ScanOrPairVec(function is?, ob)
            where  is? a == a = 'WRITIFIED_!_!) => ob
 
    $seen:     local := MAKE_-HASHTABLE 'EQ
 
    dewritifyInner ob where
        dewritifyInner ob ==
            null ob => nil
            e := HGET($seen, ob) => e
 
            PAIRP ob and CAR ob = 'WRITIFIED_!_! =>
                type := ob.1
                type = 'SELF =>
                    'WRITIFIED_!_!
                type = 'BPI =>
                    oname := ob.2
                    f :=
                        INTP oname => EVAL GENSYMMER oname
                        SYMBOL_-FUNCTION oname
                    not COMPILED_-FUNCTION_-P f =>
                        error '"A required BPI does not exist."
                    #ob > 3 and HASHEQ f ^= ob.3 =>
                        error '"A required BPI has been redefined."
                    HPUT($seen, ob, f)
                    f
                type = 'HASHTABLE =>
                    nob := MAKE_-HASHTABLE ob.2
                    HPUT($seen, ob, nob)
                    HPUT($seen, nob, nob)
                    for k in ob.3 for e in ob.4 repeat
                        HPUT(nob, dewritifyInner k, dewritifyInner e)
                    nob
                type = 'DEVALUATED =>
                    nob := EVAL dewritifyInner ob.2
                    HPUT($seen, ob, nob)
                    HPUT($seen, nob, nob)
                    nob
                type = 'SPADCLOSURE =>
                    vec := dewritifyInner ob.2
                    name := ob.3
                    not FBOUNDP name => 
                       error STRCONC('"undefined function: ", SYMBOL_-NAME name)
                    nob := CONS(SYMBOL_-FUNCTION name, vec)
                    HPUT($seen, ob, nob)
                    HPUT($seen, nob, nob)
                    nob
                type = 'PLACE =>
                    nob := READ MAKE_-INSTREAM NIL
                    HPUT($seen, ob, nob)
                    HPUT($seen, nob, nob)
                    nob
                type = 'READTABLE =>
                    error '"Cannot de-writify a read table."
                type = 'NULLSTREAM => $NullStream
                type = 'NONNULLSTREAM => $NonNullStream
                type = 'FLOAT =>
	           [fval, signif, expon, sign] := CDDR ob
                   fval := SCALE_-FLOAT( FLOAT(signif, fval), expon)
                   sign<0 => -fval
                   fval
                error '"Unknown type to de-writify."
 
            PAIRP ob =>
                qcar := QCAR ob
                qcdr := QCDR ob
                nob  := CONS(qcar, qcdr)
                HPUT($seen, ob, nob)
                HPUT($seen, nob, nob)
                QRPLACA(nob, dewritifyInner qcar)
                QRPLACD(nob, dewritifyInner qcdr)
                nob
            VECP ob =>
                n   := QVMAXINDEX ob
                nob := MAKE_-VEC(n+1)
                HPUT($seen, ob, nob)
                HPUT($seen, nob, nob)
                for i in 0..n repeat
                    QSETVELT(nob, i, dewritifyInner QVELT(ob,i))
                nob
            -- Default case: return the object itself.
            ob
\end{verbatim}
<<defun dewritify,is?>>=
(defun |dewritify,is?| (a)
 (eq a 'writified!!))

@
<<defun dewritify,dewritifyInner>>=
(defun |dewritify,dewritifyInner| (ob)
 (prog (e type oname f vec name tmp1 signif expon sign fval qcar qcdr n nob)
  (return
   (seq
    (when (null ob) 
      (exit nil))
    (when (setq e (hget |$seen| ob)) 
      (exit e))
    (when (and (pairp ob) (eq (car ob) 'writified!!))
     (exit
      (seq
       (setq type (elt ob 1))
       (when (eq type 'self) 
        (exit 'writified!!))
       (when (eq type 'bpi)
        (exit
         (seq
          (setq oname (elt ob 2))
          (setq f 
           (seq 
            (when (intp oname) (exit (eval (gensymmer oname))))
            (exit (symbol-function oname))))
          (when (null (compiled-function-p f))
           (exit (|error| "A required BPI does not exist.")))
          (when (and (> (|#| ob) 3) (nequal (hasheq f) (elt ob 3)))
           (exit (|error| "A required BPI has been redefined.")))
          (hput |$seen| ob f)
          (exit f))))
       (when (eq type 'hashtable)
        (exit
         (seq
          (setq nob (make-hashtable (elt ob 2)))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (do ((tmp0 (elt ob 3) (cdr tmp0))
               (k nil)
               (tmp1 (elt ob 4) (cdr tmp1))
               (e nil))
              ((or (atom tmp0) 
                   (progn
                    (setq k (car tmp0))
                    nil) 
                   (atom tmp1) 
                   (progn
                    (setq e (car tmp1))
                    nil))
                   nil)
           (seq
            (exit
             (hput nob (|dewritify,dewritifyInner| k) 
              (|dewritify,dewritifyInner| e)))))
          (exit nob))))
       (when (eq type 'devaluated)
        (exit
         (seq
          (setq nob (eval (|dewritify,dewritifyInner| (elt ob 2))))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when (eq type 'spadclosure)
        (exit
         (seq
          (setq vec (|dewritify,dewritifyInner| (elt ob 2)))
          (setq name (ELT ob 3))
          (when (null (fboundp name))
           (exit
            (|error| 
             (strconc "undefined function: " (symbol-name name)))))
          (setq nob (cons (symbol-function name) vec))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when (eq type 'place) 
        (exit
         (seq
          (setq nob (vmread (make-instream nil)))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when (eq type 'readtable)
        (exit (|error| "Cannot de-writify a read table.")))
       (when (eq type 'nullstream)
        (exit |$NullStream|))
       (when (eq type 'nonnullstream) 
        (exit |$NonNullStream|))
       (when (eq type 'float) 
        (exit
         (seq
          (progn
           (setq tmp1 (cddr ob))
           (setq fval (car tmp1))
           (setq signif (cadr tmp1))
           (setq expon (caddr tmp1))
           (setq sign (cadddr tmp1))
           tmp1)
          (setq fval (scale-float (float signif fval) expon))
          (when (minusp sign)
           (exit (spaddifference fval)))
          (exit fval))))
       (exit (|error| "Unknown type to de-writify.")))))
    (when (pairp ob)
     (exit
      (seq
       (setq qcar (qcar ob))
       (setq qcdr (qcdr ob))
       (setq nob (cons qcar qcdr))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (qrplaca nob (|dewritify,dewritifyInner| qcar))
       (qrplacd nob (|dewritify,dewritifyInner| qcdr))
       (exit nob))))
    (when (vecp ob)
     (exit
      (seq
       (setq n (qvmaxindex ob))
       (setq nob (make-vec (plus n 1)))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (do ((|i| 0 (qsadd1 |i|)))
           ((qsgreaterp |i| n) nil)
        (seq
         (exit
          (qsetvelt nob |i| 
            (|dewritify,dewritifyInner| (qvelt ob |i|))))))
       (exit nob))))
    (exit ob))))) 

@
<<defun dewritify>>=
(defun |dewritify| (ob)
 (prog (|$seen|)
  (declare (special |$seen|))
   (return
    (cond 
     ((null (|ScanOrPairVec| (|function| |dewritify,is?|) ob))
       ob)
     (t
       (setq |$seen| (make-hashtable 'EQ))
       (|dewritify,dewritifyInner| ob)))))) 

@
\subsection{defun ScanOrPairVec}
\begin{verbatim}
ScanOrPairVec(f, ob) ==
    $seen:     local := MAKE_-HASHTABLE 'EQ
 
    CATCH('ScanOrPairVecAnswer, ScanOrInner(f, ob)) where
        ScanOrInner(f, ob) ==
            HGET($seen, ob) => nil
            PAIRP ob =>
                HPUT($seen, ob, true)
                ScanOrInner(f, QCAR ob)
                ScanOrInner(f, QCDR ob)
                nil
            VECP ob =>
                HPUT($seen, ob, true)
                for i in 0..#ob-1 repeat ScanOrInner(f, ob.i)
                nil
            FUNCALL(f, ob) =>
                THROW('ScanOrPairVecAnswer, true)
            nil
\end{verbatim}
<<defun ScanOrPairVec>>=
(defun |ScanOrPairVec,ScanOrInner| (f ob)
 (seq
  (when (hget |$seen| ob) 
   (exit nil))
  (when (pairp ob) 
   (exit
    (seq
     (hput |$seen| ob t)
     (|ScanOrPairVec,ScanOrInner| f (qcar ob))
     (|ScanOrPairVec,ScanOrInner| f (qcdr ob))
     (exit nil))))
  (when (vecp ob) 
   (exit
    (seq
     (hput |$seen| ob t)
     (do ((tmp0 (spaddifference (|#| ob) 1)) (|i| 0 (qsadd1 |i|)))
         ((qsgreaterp |i| tmp0) nil)
      (seq
       (exit (|ScanOrPairVec,ScanOrInner| f (elt ob |i|)))))
     (exit nil))))
  (when (funcall f ob) 
   (exit
    (throw '|ScanOrPairVecAnswer| t)))
  (exit nil))) 

(defun |ScanOrPairVec| (f ob)
 (prog (|$seen|) 
  (declare (special |$seen|)) 
   (return
    (progn
     (setq |$seen| (make-hashtable 'eq))
     (catch '|ScanOrPairVecAnswer| (|ScanOrPairVec,ScanOrInner| f ob))))))

@
\subsection{defun gensymInt}
\begin{verbatim}
gensymInt g ==
  not GENSYMP g => error '"Need a GENSYM"
  p := PNAME g
  n := 0
  for i in 2..#p-1 repeat n := 10 * n + charDigitVal p.i
  n
\end{verbatim}
<<defun gensymInt>>=
(defun |gensymInt| (g) 
 (prog (p n)
  (return
   (seq
    (cond 
     ((null (gensymp g)) 
       (|error| "Need a GENSYM"))
     (t
       (setq p (pname g))
       (setq n 0)
       (do ((tmp0 (spaddifference (|#| p) 1)) (|i| 2 (qsadd1 |i|)))
           ((qsgreaterp |i| tmp0) nil)
        (seq
         (exit
          (setq n (plus (times 10 n) (|charDigitVal| (elt p |i|)))))))
       n))))))

@
\subsection{defun charDigitVal}
\begin{verbatim}
charDigitVal c ==
  digits := '"0123456789"
  n := -1
  for i in 0..#digits-1 while n < 0 repeat
      if c = digits.i then n := i
  n < 0 => error '"Character is not a digit"
  n
\end{verbatim}
<<defun charDigitVal>>=
(defun |charDigitVal| (c)
 (prog (digits n)
  (return
   (seq
    (progn
     (setq digits "0123456789")
     (setq n (spaddifference 1)) 
     (do ((tmp0 (spaddifference (|#| digits) 1)) (|i| 0 (qsadd1 |i|)))
         ((or (qsgreaterp |i| tmp0) (null (minusp n))) nil)
      (seq
       (exit
        (cond 
         ((boot-equal c (elt digits |i|)) (setq n |i|))
         (t nil)))))
     (cond
      ((minusp n) (|error| "Character is not a digit"))
      (t n)))))))

@
\subsection{defun histFileErase}
\begin{verbatim}
histFileErase file ==
  --OBEY STRCONC('"rm -rf ", file)
  PROBE_-FILE(file) and DELETE_-FILE(file)
\end{verbatim}
<<defun histFileErase>>=
(defun |histFileErase| (file)
 (when (probe-file file) 
  (delete-file file)))

@
\section{History File Messages}
<<History File Messages>>=
S2IH0001
 You have not reached step %1b yet, and so its value cannot be
 supplied.
S2IH0002
 Cannot supply value for step %1b because 1 is the first step.
S2IH0003
 Step %1b has no value.
S2IH0004
 The history facility is not on, so you cannot use %b %% %d .
S2IH0006
 You have not used the correct syntax for the %b history %d command.
 Issue %b )help history %d for more information.
S2IH0007
 The history facility is already on.
S2IH0008
 The history facility is now on.
S2IH0009
 Turning on the history facility will clear the contents of the
 workspace.
 Please enter %b y %d or %b yes %d if you really want to do this:
S2IH0010
 The history facility is still off.
S2IH0011
 The history facility is already off.
S2IH0012
 The history facility is now off.
S2IH0013
 The history facility is not on, so the .input file containing your user input
 cannot be created.
S2IH0014
 Edit %b %1 %d to see the saved input lines.
S2IH0015
 The argument %b n %d for %b )history )change n must be a nonnegative
 integer and your argument, %1b , is not one.
S2IH0016
 The history facility is not on, so no information can be saved.
S2IH0018
 The saved history file is %1b .
S2IH0019
 There is no history file, so value of step %1b is
 undefined.
S2IH0022
 No history information had been saved yet.
S2IH0023
 %1b is not a valid filename for the history file.
S2IH0024
 History information cannot be restored from %1b because the file does
 not exist.
S2IH0025
 The workspace has been successfully restored from the history file
 %1b .
S2IH0026
 The history facility command %1b cannot be performed because the
 history facility is not on.
S2IH0027
 A value containing a %1b is being saved in a history file or a
 compiled input file INLIB. This type
 is not yet usable in other history operations.  You might want to issue
 %b )history )off %d
S2IH0029
 History information is already being maintained in an external file
 (and not in memory).
S2IH0030
 History information is already being maintained in memory (and not
 in an external file).
S2IH0031
 When the history facility is active, history information will be
 maintained in a file (and not in an internal table).
S2IH0032
 When the history facility is active, history information will be
 maintained in memory (and not in an external file).
S2IH0034
 Missing element in internal history table.
S2IH0035
 Can't save the value of step number %1b.  You can re-generate this value
 by running the input file %2b.
S2IH0036
 The value specified cannot be saved to a file.
S2IH0037
 You must specify a file name to the history save command
S2IH0038
 You must specify a file name to the history write command
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{include}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )include {\it filename}}
\end{list}

\par\noindent{\bf Command Description:}

The \verb|)include| command can be used in \verb|.input| files
to place the contents of another file inline with the current file.
The path can be an absolute or relative pathname.

\subsection{defun ncloopInclude1}
<<defun ncloopInclude1>>=
(defun |ncloopInclude1| (name n)
 (let (a)
  (if (setq a (|ncloopIncFileName| name))
    (|ncloopInclude| a n)
    n)))

@
\subsection{defun ncloopIncFileName}
Returns the first non-blank substring of the given string.
<<defun ncloopIncFileName>>=
(defun |ncloopIncFileName| (string)
 (let (fn)
  (unless (setq fn (|incFileName| string))
   (write-line (concat string " not found")))
 fn))

@

\subsection{defun ncloopInclude}
Open the file and read it in. The ncloopInclude0 function is part
of the parser and lives in int-top.boot.
<<defun ncloopInclude>>=
(defun |ncloopInclude| (name n)
  (with-open-file (st name) (|ncloopInclude0| st name n)))

@

\subsection{defun incFileName}
Given a string we return the first token from the string which is
the first non-blank substring.
<<defun incFileName>>=
(defun |incFileName| (x)
  (car (|incBiteOff| x)))

@

\subsection{defun incBiteOff}
Takes a sequence and returns the a list of the first token and the
remaining string characters. If there are no remaining string characters
the second string is of length 0. Effectively it "bites off" the first 
token in the string. If the string only 0 or more blanks it returns nil.
<<defun incBiteOff>>=
(defun |incBiteOff| (x)
 (let (blank nonblank)
  (setq x (string x))
  (when (setq nonblank (position #\space x :test-not #'char=))
    (setq blank (position #\space x :start nonblank))
    (if blank
     (list (subseq x nonblank blank) (subseq x blank))
     (list (subseq x nonblank) "")))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{library}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )library {\it libName1  \lanb{}libName2 ...\ranb{}}}
\item{\tt )library )dir {\it dirName}}
\item{\tt )library )only {\it objName1  \lanb{}objlib2 ...\ranb{}}}
\item{\tt )library )noexpose}
\end{list}

\par\noindent{\bf Command Description:}

This command replaces the {\tt )load} system command that
was available in Axiom releases before version 2.0.
The {\tt )library} command makes available to Axiom the compiled
objects in the libraries listed.

For example, if you {\tt )compile dopler.as} in your home
directory, issue {\tt )library dopler} to have Axiom look
at the library, determine the category and domain constructors present,
update the internal database with various properties of the
constructors, and arrange for the constructors to be
automatically loaded when needed.
If the {\tt )noexpose} option has not been given, the
constructors will be exposed (that is, available) in the current
frame.

If you compiled a file with the old system compiler, you will
have an {\it nrlib} present, for example, {\it DOPLER.nrlib,}
where {\tt DOPLER} is a constructor abbreviation.
The command {\tt )library DOPLER} will then do the analysis and
database updates as above.

To tell the system about all libraries in a directory, use
{\tt )library )dir dirName} where {\tt dirName} is an explicit
directory.
You may specify ``.'' as the directory, which means the current
directory from which you started the system or the one you set
via the {\tt )cd} command. The directory name is required.

You may only want to tell the system about particular
constructors within a library. In this case, use the {\tt )only}
option. The command {\tt )library dopler )only Test1} will only
cause the {\sf Test1} constructor to be analyzed, autoloaded,
etc..

Finally, each constructor in a library  are usually automatically exposed when the
{\tt )library} command is used. Use the {\tt )noexpose}
option if you not want them exposed. At a later time you can use
{\tt )set expose add constructor} to expose any hidden
constructors.

{\bf Note for Axiom beta testers:} At various times this
command was called {\tt )local} and {\tt )with} before the name
{\tt )library} became the official name.

\par\noindent{\bf Also See:}
\fnref{cd}, 
\fnref{compiler},
\fnref{frame}, and
\fnref{set}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{lisp}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} development

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )lisp} {\it\lanb{}lispExpression\ranb{}}
\end{list}

\par\noindent{\bf Command Description:}

This command is used by Axiom system developers to have single
expressions evaluated by the Common Lisp system on which
Axiom is built.
The {\it lispExpression} is read by the Common Lisp reader and
evaluated.
If this expression is not complete (unbalanced parentheses, say), the reader
will wait until a complete expression is entered.

Since this command is only useful  for evaluating single expressions, the
{\tt )fin}
command may be used to  drop out  of Axiom  into Common Lisp.

\par\noindent{\bf Also See:}
\fnref{system},
\fnref{boot}, and
\fnref{fin}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{load}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter
\par\noindent{\bf Command Description:}

This command is obsolete. Use {\tt )library} instead.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{ltrace}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} development

\par\noindent{\bf Command Syntax:}

This command has the same arguments as options as the
{\tt )trace} command.

\par\noindent{\bf Command Description:}

This command is used by Axiom system developers to trace
Common Lisp or
BOOT functions.
It is not supported for general use.

\par\noindent{\bf Also See:}
\fnref{boot},
\fnref{lisp}, and
\fnref{trace}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{pquit}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )pquit}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to terminate Axiom  and return to the
operating system.
Other than by redoing all your computations or by
using the {\tt )history )restore}
command to try to restore your working environment,
you cannot return to Axiom in the same state.

{\tt )pquit} differs from the {\tt )quit} in that it always asks for
confirmation that you want to terminate Axiom (the ``p'' is for
``protected'').
\index{quit}
When you enter the {\tt )pquit} command, Axiom responds
%
\begin{center}
Please enter {\bf y} or {\bf yes} if you really want to leave the interactive \\
environment and return to the operating system:
\end{center}
%
If you respond with {\tt y} or {\tt yes}, you will see the message
%
\begin{center}
You are now leaving the Axiom interactive environment. \\
Issue the command {\bf axiom} to the operating system to start a new session.
\end{center}
%
and Axiom will terminate and return you to the operating
system (or the environment from which you invoked the system).
If you responded with something other than {\tt y} or {\tt yes}, then
the message
%
\begin{center}
You have chosen to remain in the Axiom interactive environment.
\end{center}
%
will be displayed and, indeed, Axiom would still be running.

\par\noindent{\bf Also See:}
\fnref{fin},
\fnref{history},
\fnref{close},
\fnref{quit}, and
\fnref{system}

\subsection{defun pquit}
<<defun pquit>>=
(defun |pquit| () (|pquitSpad2Cmd|)) 

@

\subsection{defun pquitSpad2Cmd}
<<defun pquitSpad2Cmd>>=
(defun |pquitSpad2Cmd| ()
 (let ((|$quitCommandType| '|protected|))
  (declare (special |$quitCommandType|))
  (|quitSpad2Cmd|)))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{quit}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )quit}
\item{\tt )set quit protected \vertline{} unprotected}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to terminate Axiom  and return to the
operating system.
Other than by redoing all your computations or by
using the {\tt )history )restore}
command to try to restore your working environment,
you cannot return to Axiom in the same state.

{\tt )quit} differs from the {\tt )pquit} in that it asks for
\index{pquit}
confirmation only if the command
\begin{verbatim}
)set quit protected
\end{verbatim}
has been issued.
\index{set quit protected}
Otherwise, {\tt )quit} will make Axiom terminate and return you
to the operating system (or the environment from which you invoked the
system).

The default setting is {\tt )set quit protected} so that {\tt )quit}
and {\tt )pquit} behave in the same way.
If you do issue
\begin{verbatim}
)set quit unprotected
\end{verbatim}
we
\index{set quit unprotected}
suggest that you do not (somehow) assign {\tt )quit} to be
executed when you press, say, a function key.

\par\noindent{\bf Also See:}
\fnref{fin},
\fnref{history},
\fnref{close},
\fnref{pquit}, and
\fnref{system}

\subsection{defun quit}
<<defun quit>>=
(defun |quit| () (|quitSpad2Cmd|))

@
\subsection{defun quitSpad2Cmd}
<<defun quitSpad2Cmd>>=
(defun |quitSpad2Cmd| ()
 (if (eq |$quitCommandType| '|protected|)
  (let (x)
   (setq x (upcase (|queryUserKeyedMsg| 's2iz0031 nil)))
   (when (memq (string2id-n x 1) '(y yes)) (|leaveScratchpad|))
   (|sayKeyedMsg| 's2iz0032 nil)
   (tersyscommand))
   (|leaveScratchpad|)))


@

\subsection{defun leaveScratchpad}
<<defun leaveScratchpad>>=
(defun |leaveScratchpad| () (bye)) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{read}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )read} {\it \lanb{}fileName\ranb{}}
\item {\tt )read} {\it \lanb{}fileName\ranb{}} \lanb{}{\tt )quiet}\ranb{} \lanb{}{\tt )ifthere}\ranb{}
\end{list}
\par\noindent{\bf Command Description:}

This command is used to read {\bf .input} files into Axiom.
\index{file!input}
The command
\begin{verbatim}
)read matrix.input
\end{verbatim}
will read the contents of the file {\bf matrix.input} into
Axiom.
The ``.input'' file extension is optional.

This command remembers the previous file you edited, read or compiled.
If you do not specify a file name, the previous file will be read.

The {\tt )ifthere} option checks to see whether the {\bf .input} file
exists.
If it does not, the  {\tt )read} command does nothing.
If you do not use this option and the file does not exist,
you are asked to give the name of an existing {\bf .input} file.

The {\tt )quiet} option suppresses output while the file is being read.

\par\noindent{\bf Also See:}
\fnref{compiler},
\fnref{edit}, and
\fnref{history}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{savesystem}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter 
 
\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )savesystem filename}
\end{list}
\par\noindent{\bf Command Description:} 
 
This command is used to save an AXIOM image to disk.  This creates an
executable file which, when started, has everything loaded into it
that was there when the image was saved.  Thus, after executing commands
which cause the loading of some packages, the command:
 
\begin{verbatim}
)savesystem /tmp/savesys
\end{verbatim}

will create an image that can be restarted  with the UNIX command:

\begin{verbatim}
axiom -ws /tmp/savesys
\end{verbatim}

This new system will not need to reload the packages and domains that
were already loaded when the system was saved.

There is currently a restriction that only systems started with the 
command "AXIOMsys" may be saved.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{set}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )set}
\item {\tt )set} {\it label1 \lanb{}... labelN\ranb{}}
\item {\tt )set} {\it label1 \lanb{}... labelN\ranb{} newValue}
\end{list}
\par\noindent{\bf Command Description:}

The {\tt )set} command is used to view or set system variables that
control what messages are displayed, the type of output desired, the
status of the history facility, the way Axiom user functions are
cached, and so on.
Since this collection is very large, we will not discuss them here.
Rather, we will show how the facility is used.
We urge you to explore the {\tt )set} options to familiarize yourself
with how you can modify your Axiom working environment.
There is a HyperDoc version of this same facility available from the
main HyperDoc menu.


The {\tt )set} command is command-driven with a menu display.
It is tree-structured.
To see all top-level nodes, issue {\tt )set} by itself.
\begin{verbatim}
)set
\end{verbatim}
Variables with values have them displayed near the right margin.
Subtrees of selections have ``{\tt ...}''
displayed in the value field.
For example, there are many kinds of messages, so issue
{\tt )set message} to see the choices.
\begin{verbatim}
)set message
\end{verbatim}
The current setting  for the variable that displays
\index{computation timings!displaying}
whether computation times
\index{timings!displaying}
are displayed is visible in the menu displayed by the last command.
To see more information, issue
\begin{verbatim}
)set message time
\end{verbatim}
This shows that time printing is on now.
To turn it off, issue
\begin{verbatim}
)set message time off
\end{verbatim}
\index{set message time}

As noted above, not all settings have so many qualifiers.
For example, to change the {\tt )quit} command to being unprotected
(that is, you will not be prompted for verification), you need only issue
\begin{verbatim}
)set quit unprotected
\end{verbatim}
\index{set quit unprotected}

\par\noindent{\bf Also See:}
\fnref{quit}

\section{Overview}
This section contains tree of information used to initialize the {\bf )set} 
command in the interpreter. The current list is:
\begin{verbatim}

Variable     Description                           Current Value
-----------------------------------------------------------------
compiler   Library compiler options                   ... 
breakmode  execute break processing on error          break 
expose     control interpreter constructor exposure   ... 
functions  some interpreter function options          ... 
fortran    view and set options for FORTRAN output    ... 
kernel     library functions built into the kernel for 
           efficiency                                 ...
hyperdoc   options in using HyperDoc                  ... 
help       view and set some help options             ... 
history    save workspace values in a history file    on 
messages   show messages for various system features  ... 
naglink    options for NAGLink                        ... 
output     view and set some output options           ... 
quit       protected or unprotected quit              unprotected 
streams    set some options for working with streams  ... 
system     set some system development variables      ... 
userlevel  operation access level of system user      development 

Variables with current values of ... have further sub-options. 
For example, issue )set  system to see what the options are 
for system. For more information, issue )help set .

\end{verbatim}
\section{)set list functions}
\subsection{defun initializeSetVariables}
The argument settree is initially the \verb|$setOption| variable.
The fourth element is a union-style switch symbol.
The fifth element is usually a variable to set.
The sixth element is a subtree to recurse for the TREE switch.
The seventh element is usually the default value. For more detailed
explanations see the list structure section \ref{Theliststructure}.
<<defun initializeSetVariables>>=
(defun |initializeSetVariables| (settree) 
 (dolist (setdata settree)
  (case (fourth setdata)
   (FUNCTION
      (if (|functionp| (fifth setdata))
        (funcall (fifth setdata) '|%initialize%|))
        (|sayMSG| "   Function not implemented."))
   (INTEGER (set (fifth setdata) (seventh setdata)))
   (STRING  (set (fifth setdata) (seventh setdata)))
   (LITERALS
       (set (fifth setdata) (|translateYesNo2TrueFalse| (seventh setdata))))
   (TREE  (|initializeSetVariables| (sixth setdata))))))

@

\subsection{defun resetWorkspaceVariables}
<<defun resetWorkspaceVariables>>=
(defun |resetWorkspaceVariables| () 
  (setq /countlist nil)
  (setq /editfile nil)
  (setq /sourcefiles nil)
  (setq |$sourceFiles| nil)
  (setq /pretty nil)
  (setq /spacelist nil)
  (setq /timerlist nil)
  (setq |$existingFiles| (make-hashtable 'uequal))
  (setq |$functionTable| nil)
  (setq $boot nil)
  (setq |$compileMapFlag| nil)
  (setq |$echoLineStack| nil)
  (setq |$operationNameList| nil)
  (setq |$slamFlag| nil)
  (setq |$CommandSynonymAlist| (copy |$InitialCommandSynonymAlist|))
  (setq |$UserAbbreviationsAlist| nil)
  (setq |$msgAlist| nil)
  (setq |$msgDatabase| nil)
  (setq |$msgDatabaseName| nil)
  (setq |$dependeeClosureAlist| nil)
  (setq |$IOindex| 1)
  (setq |$coerceIntByMapCounter| 0)
  (setq |$e| (cons (cons nil nil) nil))
  (setq |$env| (cons (cons nil nil) nil))
  (|initializeSetVariables| |$setOptions|)) 

@

\subsection{defun displaySetOptionInformation}
<<defun displaySetOptionInformation>>=
(defun |displaySetOptionInformation| (arg setdata)
 (let (current)
  (cond
   ((eq (fourth setdata) 'tree)
    (|displaySetVariableSettings| (sixth setdata) (first setdata)))
   (t 
    (|centerAndHighlight|
     (strconc "The " (|object2String| arg) " Option")
      $linelength (|specialChar| '|hbar|))
    (|sayBrightly|
     `(|%l| ,@(|bright| "Description:") ,(second setdata)))
    (case (fourth setdata)
     (FUNCTION
      (terpri)
      (cond 
       ((|functionp| (fifth setdata))
         (funcall (fifth setdata) '|%describe%|))
       (t (|sayMSG| "   Function not implemented."))))
     (INTEGER
      (|sayMessage| 
        `(" The" ,@(|bright| arg) "option" 
          " may be followed by an integer in the range" 
          ,@(|bright| (ELT (sixth setdata) 0)) "to" 
          |%l| ,@(|bright| (ELT (sixth setdata) 1)) "inclusive." 
          " The current setting is" ,@(|bright| (|eval| (fifth setdata))))))
     (STRING
      (|sayMessage| 
        `(" The" ,@(|bright| arg) "option" 
          " is followed by a string enclosed in double quote marks." 
          '|%l| " The current setting is" 
          ,@(|bright| (list '|"| (|eval| (fifth setdata)) '|"|)))))
     (LITERALS
       (|sayMessage|
        `(" The" ,@(|bright| arg) "option"
              " may be followed by any one of the following:"))
       (setq current 
        (|translateTrueFalse2YesNo| (|eval| (fifth setdata))))
       (dolist (name (sixth setdata))
         (if (boot-equal name current)
           (|sayBrightly| `( " ->" ,@(|bright| (|object2String| name))))
           (|sayBrightly| (list "    " (|object2String| name)))))
       (|sayMessage| " The current setting is indicated.")))))))

@

\subsection{defun displaySetVariableSettings}
<<defun displaySetVariableSettings>>=
(defun |displaySetVariableSettings| (settree label)
 (let (setoption st opt subtree subname)
  (cond
   ((eq label '||) (setq label ")set"))
   (t (setq label (strconc "  " (|object2String| label) " "))))
  (|centerAndHighlight|
    (strconc "Current Values of" label " Variables") $linelength '| |)
  (terpri)
  (|sayBrightly| 
   (list "Variable     " "Description                                "
         "Current Value" ))
  (say (|fillerSpaces| $linelength (|specialChar| '|hbar|)))
  (setq subtree nil)
  (dolist (setdata settree)
   (when (|satisfiesUserLevel| (third setdata))
     (setq setoption (|object2String| (first setdata)))
     (setq setoption
      (strconc setoption
       (|fillerSpaces| (spaddifference 13 (|#| setoption)) " ")
       (second setdata)))
     (setq setoption
      (strconc setoption
       (|fillerSpaces| (spaddifference 55 (|#| setoption)) " ")))
     (setq st (fourth setdata))
     (case (fourth setdata)
      (FUNCTION
       (setq opt
        (if (|functionp| (fifth setdata))
         (funcall (fifth setdata) '|%display%|)
         "unimplemented"))
       (cond
        ((pairp opt)
         (setq opt
          (do ((t2 opt (cdr t2)) t1 (|o| nil))
              ((or (atom t2) (progn (setq |o| (car t2)) nil)) t1)
           (setq t1 (append t1 (cons |o| (cons " " nil))))))))
       (|sayBrightly| (|concat| setoption '|%b| opt '|%d|)))
      (STRING
       (setq opt (|object2String| (|eval| (fifth setdata))))
       (|sayBrightly| `(,setoption ,@(|bright| opt))))
      (INTEGER
       (setq opt (|object2String| (|eval| (fifth setdata))))
       (|sayBrightly| `(,setoption ,@(|bright| opt))))
      (LITERALS
       (setq opt (|object2String| 
             (|translateTrueFalse2YesNo| (|eval| (fifth setdata)))))
       (|sayBrightly| `(,setoption ,@(|bright| opt))))
      (TREE
         (|sayBrightly| `(,setoption ,@(|bright| "...")))
         (setq subtree t)
         (setq subname (|object2String| (first setdata)))))))
  (terpri)
  (when subtree
     (|sayBrightly|
      `("Variables with current values of" ,@(|bright| "...")
            "have further sub-options. For example,"))
     (|sayBrightly|
      `("issue" ,@(|bright| ")set ") ,subname
        " to see what the options are for" ,@(|bright| subname) "."
        |%l| "For more information, issue" ,@(|bright| ")help set") ".")))))

@

\subsection{defun translateYesNo2TrueFalse}
<<defun translateYesNo2TrueFalse>>=
(defun |translateYesNo2TrueFalse| (x)
 (cond
  ((|member| x '(|yes| |on|)) t)
  ((|member| x '(|no| |off|)) nil)
  (t x))) 

@

\subsection{defun translateTrueFalse2YesNo}
<<defun translateTrueFalse2YesNo>>=
(defun |translateTrueFalse2YesNo| (x)
 (cond
  ((eq x t) '|on|)
  ((null x) '|off|)
  (t x))) 

@
\section{The list structure}
\label{Theliststructure}
The structure of each list item consists of 7 items.  Consider this 
example:
\begin{verbatim}
  (userlevel
   "operation access level of system user"
   interpreter
   LITERALS
   $UserLevel
   (interpreter compiler development)
   development)
\end{verbatim}
The list looks like (the names in bold are accessor names that can be
found in {\bf property.lisp.pamphlet\cite{1}}. Look for "setName".):
\begin{list}{}
\item {\bf 1} {\sl Name} the keyword the user will see. In this example
the user would say "{\bf )set output userlevel}".
\item {\bf 2} {\sl Label} the message the user will see. In this example
the user would see "operation access level of system user".
\item {\bf 3} {\sl Level} the level where the command will be 
accepted. There are three levels: interpreter, compiler, development.
These commands are restricted to keep the user from causing damage.
\item {\bf 4} {\sl Type} a symbol, one of {\bf FUNCTION}, {\bf INTEGER},
{\bf STRING}, {\bf LITERALS}, {\bf FILENAME} or {\bf TREE}. 
\item {\bf 5} {\sl Var} 
\begin{list}{}
\item FUNCTION is the function to call
\item INTEGER is the variable holding the current user setting.
\item STRING is the variable holding the current user setting.
\item LITERALS variable which holds the current user setting.
\item FILENAME is the variable that holds the current user setting.
\item TREE
\end{list}
\item {\bf 6} {\sl Leaf} 
\begin{list}{}
\item FUNCTION is the list of all possible values
\item INTEGER is the range of possible values
\item STRING is a list of all possible values
\item LITERALS is a list of all of the possible values
\item FILENAME is the function to check the filename
\item TREE
\end{list}
\item {\bf 7} {\sl Def} is the default value 
\begin{list}{}
\item FUNCTION is the default setting
\item INTEGER is the default setting
\item STRING is the default setting
\item LITERALS is the default setting
\item FILENAME is the default value
\item TREE
\end{list}
\end{list}
\section{breakmode}
\begin{verbatim}
-------------------- The breakmode Option ---------------------

 Description: execute break processing on error

 The breakmode option may be followed by any one of the 
 following:

    nobreak
 -> break 
    query
    resume
    fastlinks

 The current setting is indicated.

\end{verbatim}
<<breakmode>>=
  (|breakmode|
   "execute break processing on error"
   |interpreter|
   LITERALS
   |$BreakMode|
   (|nobreak| |break| |query| |resume| |fastlinks|)
   |nobreak|)         ; needed to avoid possible startup looping
@
\section{compiler}
\begin{verbatim}
                  Current Values of  compiler  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
output       library in which to place compiled code     
input        controls libraries from which to load compiled code  
args         arguments for compiling AXIOM code         
             -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete 
             -DAxiom -Y $AXIOM/algebra 

\end{verbatim}
<<compiler>>=
   (|compiler|
    "Library compiler options"
    |interpreter|
    TREE
    |novar|
    (
<<compileroutput>>
<<compilerinput>>
<<compilerargs>>
    ))
@
\subsection{output}
\begin{verbatim}
---------------------- The output Option ----------------------

 Description: library in which to place compiled code

\end{verbatim}
<<compileroutput>>=
      (|output|
       "library in which to place compiled code"
       |interpreter|
       FUNCTION
       |setOutputLibrary|
       NIL
       |htSetOutputLibrary|
	)
@
\subsection{defun setOutputLibrary}
<<defun setOutputLibrary>>=
(defun |setOutputLibrary| (arg)
 (let (fn)
   (cond
    ((eq arg '|%initialize%|) (setq |$outputLibraryName| nil))
    ((eq arg '|%display%|) (or |$outputLibraryName| "user.lib"))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?) (/= (|#| arg) 1))
     (|describeOutputLibraryArgs|))
    (t
     (when (filep (setq fn (stringimage (car arg))))
       (setq fn (truename fn)))
     (|openOutputLibrary| (setq |$outputLibraryName| fn))))))

@

\subsection{defun describeOutputLibraryArgs}
<<defun describeOutputLibraryArgs>>=
(defun |describeOutputLibraryArgs| ()
 (|sayBrightly| (list
  '|%b| ")set compiler output library"
  '|%d| "is used to tell the compiler where to place"
  '|%l| "compiled code generated by the library compiler.  By default it goes"
  '|%l| "in a file called"
  '|%b| "user.lib"
  '|%d| "in the current directory.")))

@

\subsection{defun openOutputLibrary}
The input-libraries and output-library are now truename based.
<<defun openOutputLibrary>>=
(defun |openOutputLibrary| (lib)
 (declare (special output-library input-libraries))
  (|dropInputLibrary| lib)
  (setq output-library (truename lib))
  (push output-library input-libraries))

@

\subsection{input}
\begin{verbatim}
---------------------- The input Option -----------------------

 Description: controls libraries from which to load compiled code

 )set compiler input add library is used to tell AXIOM to add 
  library to the front of the path which determines where 
  compiled code is loaded from.
 )set compiler input drop library is used to tell AXIOM to remove 
  library from this path.
\end{verbatim}
<<compilerinput>>=
      (|input|
       "controls libraries from which to load compiled code"
       |interpreter|
       FUNCTION
       |setInputLibrary|
       NIL
       |htSetInputLibrary|)
@

\subsection{defun setInputLibrary}
The input-libraries is now maintained as a list of truenames.
<<defun setInputLibrary>>=
(defun |setInputLibrary| (arg)
 (declare (special input-libraries))
 (let (tmp1 filename act)
  (cond
   ((eq arg '|%initialize%|) t)
   ((eq arg '|%display%|) (mapcar #'namestring input-libraries))
   ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
    (|describeInputLibraryArgs|))
   ((and (pairp arg)
         (progn
          (setq act (qcar arg))
          (setq tmp1 (qcdr arg))
          (and (pairp tmp1)
               (eq (qcdr tmp1) nil)
               (progn (setq filename (qcar tmp1)) t)))
         (setq act (|selectOptionLC| act '(|add| |drop|) nil)))
    (cond
     ((eq act '|add|)
      (|addInputLibrary| (truename (stringimage filename))))
     ((eq act '|drop|)
      (|dropInputLibrary| (truename (stringimage filename))))))
   (t (|setInputLibrary| nil)))))

@

\subsection{defun describeInputLibraryArgs}
<<defun describeInputLibraryArgs>>=
(defun |describeInputLibraryArgs| ()
 (|sayBrightly| (list
  '|%b| ")set compiler input add library"
  '|%d| "is used to tell AXIOM to add"
  '|%b| "library"
  '|%d| "to"
  '|%l| "the front of the path used to find compile code."
  '|%l|
  '|%b| ")set compiler input drop library"
  '|%d| "is used to tell AXIOM to remove"
  '|%b| "library"
  '|%d|
  '|%l| "from this path.")))

@

\subsection{defun addInputLibrary}
The input-libraries variable is now maintained as a list of truenames.
<<defun addInputLibrary>>=
(defun |addInputLibrary| (lib)
 (declare (special input-libraries))
  (|dropInputLibrary| lib)
  (push (truename lib) input-libraries))

@

\subsection{defun dropInputLibrary}
<<defun dropInputLibrary>>=
(defun |dropInputLibrary| (lib) 
 (declare (special input-libraries))
 (setq input-libraries (delete (truename lib) input-libraries :test #'equal)))

@

\subsection{args}
\begin{verbatim}
----------------------- The args Option -----------------------

 Description: arguments for compiling AXIOM code

 )set compiler args  is used to tell AXIOM how to invoke the 
  library compiler when compiling code for AXIOM.
  The args option is followed by a string enclosed in double 
  quotes.

 The current setting is
 "-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete 
  -DAxiom -Y $AXIOM/algebra" 
\end{verbatim}
<<compilerargs>>=
      (|args|
       "arguments for compiling AXIOM code"
       |interpreter|
       FUNCTION
       |setAsharpArgs|
       (("enter compiler options "
          STRING
          |$asharpCmdlineFlags|
          |chkDirectory|
          "-O -Fasy -Fao -Flsp -laxiom -Mno-AXL__W__WillObsolete -DAxiom -Y $AXIOM/algebra"))
       NIL)
@

\subsection{defun setAsharpArgs}
<<defun setAsharpArgs>>=
(defun |setAsharpArgs| (arg)
 (cond
  ((eq arg '|%initialize%|)
   (setq |$asharpCmdlineFlags|
    "-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra"))
  ((eq arg '|%display%|) |$asharpCmdlineFlags|)
  ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
   (|describeAsharpArgs|))
  (t (setq |$asharpCmdlineFlags| (car arg))))) 

@

\subsection{defun describeAsharpArgs}
<<defun describeAsharpArgs>>=
(defun |describeAsharpArgs| () 
 (|sayBrightly| (list
  '|%b| ")set compiler args "
  '|%d| "is used to tell AXIOM how to invoke the library compiler "
  '|%l| " when compiling code for AXIOM."
  '|%l| " The args option is followed by a string enclosed in double quotes."
  '|%l|
  '|%l| " The current setting is"
  '|%l|
  '|%b| "\"" |$asharpCmdlineFlags| "\""
  '|%d|)))

@

\section{expose}
\begin{verbatim}
---------------------- The expose Option ----------------------

 Description: control interpreter constructor exposure

   The following groups are explicitly exposed in the current 
   frame (called initial ):
                                   basic                                   
                                categories                                 
                                  naglink                                  
                                   anna                                    
 
   The following constructors are explicitly exposed in the 
   current frame:
               there are no explicitly exposed constructors                
 
   The following constructors are explicitly hidden in the 
   current frame:
                there are no explicitly hidden constructors                
 
   When )set expose is followed by no arguments, the information
   you now see is displayed. When followed by the initialize 
   argument, the exposure group data in the file interp.exposed 
   is read and is then available. The arguments add and drop are 
   used to add or drop exposure groups or explicit constructors 
   from the local frame exposure data. Issue
                  )set expose add    or    )set expose drop 
   for more information.
\end{verbatim}
<<expose>>=
  (|expose|
   "control interpreter constructor exposure"
   |interpreter|
   FUNCTION
   |setExpose|
   NIL
   |htSetExpose|)
@
\section{functions}
\begin{verbatim}
             Current Values of  functions  Variables                  

Variable     Description                           Current Value
-----------------------------------------------------------------
cache        number of function results to cache        0 
compile      compile, don't just define function bodies off 
recurrence   specially compile recurrence relations     on 

\end{verbatim}
<<functions>>=
  (|functions|
   "some interpreter function options"
   |interpreter|
   TREE
   |novar|
   (
<<functionscache>>
<<functionscompile>>
<<functionsrecurrence>>
  ))
@
\subsection{cache}
\begin{verbatim}
---------------------- The cache Option -----------------------

 Description: number of function results to cache

 )set functions cache is used to tell AXIOM how many  values 
  computed by interpreter functions should be saved.  This can 
  save quite a bit of time in recursive functions, though one 
  must consider that the cached values will take up (perhaps 
  valuable) room in the workspace.

 The value given  after cache must either be the word all or 
 a positive integer. This may be followed by any number of 
 function names whose cache sizes you wish to so set.  If no 
 functions are given, the default cache  size is set.

 Examples:   )set fun cache all
             )set fun cache 10 f g Legendre

 In general, functions will cache no returned values.
\end{verbatim}
<<functionscache>>=
     (|cache|
      "number of function results to cache"
      |interpreter|
      FUNCTION
      |setFunctionsCache|
      NIL
      |htSetCache|)
@
\subsection{compile}
Per suggestion by Bill Page this has been defaulted to [[on]].
\begin{verbatim}
--------------------- The compile Option ----------------------

 Description: compile, don't just define function bodies

 The compile option may be followed by any one of the following:

 -> on
    off 

 The current setting is indicated.

\end{verbatim}
<<functionscompile>>=
     (|compile|
      "compile, don't just define function bodies"
      |interpreter|
      LITERALS
      |$compileDontDefineFunctions|
      (|on| |off|)
      |on|)
@
\subsection{recurrence}
\begin{verbatim}
-------------------- The recurrence Option --------------------

 Description: specially compile recurrence relations

 The recurrence option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<functionsrecurrence>>=
     (|recurrence|
      "specially compile recurrence relations"
      |interpreter|
      LITERALS
      |$compileRecurrence|
      (|on| |off|)
      |on|)
@
\section{fortran}
\begin{verbatim}
              Current Values of  fortran  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
ints2floats  where sensible, coerce integers to reals   on 
fortindent   the number of characters indented          6 
fortlength   the number of characters on a line         72 
typedecs     print type and dimension lines             on 
defaulttype  default generic type for FORTRAN object    REAL 
precision    precision of generated FORTRAN objects     double 
intrinsic    whether to use INTRINSIC FORTRAN functions off 
explength    character limit for FORTRAN expressions    1320 
segment      split long FORTRAN expressions             on 
optlevel     FORTRAN optimisation level                 0 
startindex   starting index for FORTRAN arrays          1 
calling      options for external FORTRAN calls         ... 

Variables with current values of ... have further sub-options. 
For example, issue )set calling to see what the options are for 
calling.
For more information, issue )help set .
\end{verbatim}
<<fortran>>=
  (|fortran|
   "view and set options for FORTRAN output"
   |interpreter|
   TREE
   |novar|
    (
<<fortranints2floats>>
<<fortranfortindent>>
<<fortranfortlength>>
<<fortrantypedecs>>
<<fortrandefaulttype>>
<<fortranprecision>>
<<fortranintrinsic>>
<<fortranexplength>>
<<fortransegment>>
<<fortranoptlevel>>
<<fortranstartindex>>
<<fortrancalling>>
  ))
@
\subsection{ints2floats}
\begin{verbatim}
------------------- The ints2floats Option --------------------

 Description: where sensible, coerce integers to reals

 The ints2floats option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<fortranints2floats>>=
     (|ints2floats|
      "where sensible, coerce integers to reals"
      |interpreter|
      LITERALS
      |$fortInts2Floats|
      (|on| |off|)
      |on|)
@
\subsection{fortindent}
\begin{verbatim}
-------------------- The fortindent Option --------------------

 Description: the number of characters indented

 The fortindent option may be followed by an integer in the range 
 0 to inclusive. The current setting is 6 

\end{verbatim}
<<fortranfortindent>>=
     (|fortindent|
      "the number of characters indented"
      |interpreter|
      INTEGER
      |$fortIndent|
      (0 NIL)
      6)
@
\subsection{fortlength}
\begin{verbatim}
-------------------- The fortlength Option --------------------

 Description: the number of characters on a line

 The fortlength option may be followed by an integer in the range 
 1 to inclusive. The current setting is 72 

\end{verbatim}
<<fortranfortlength>>=
     (|fortlength|
      "the number of characters on a line"
      |interpreter|
      INTEGER
      |$fortLength|
      (1 NIL)
      72)
@
\subsection{typedecs}
\begin{verbatim}
--------------------- The typedecs Option ---------------------

 Description: print type and dimension lines

 The typedecs option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<fortrantypedecs>>=
     (|typedecs|
      "print type and dimension lines"
      |interpreter|
      LITERALS
      |$printFortranDecs|
      (|on| |off|)
      |on|)
@
\subsection{defaulttype}
\begin{verbatim}
------------------- The defaulttype Option --------------------

 Description: default generic type for FORTRAN object

 The defaulttype option may be followed by any one of the 
 following:

 -> REAL 
    INTEGER
    COMPLEX
    LOGICAL
    CHARACTER

 The current setting is indicated.

\end{verbatim}
<<fortrandefaulttype>>=
     (|defaulttype|
      "default generic type for FORTRAN object"
      |interpreter|
      LITERALS
      |$defaultFortranType|
      (REAL INTEGER COMPLEX LOGICAL CHARACTER)
      REAL)
@
\subsection{precision}
\begin{verbatim}
-------------------- The precision Option ---------------------

 Description: precision of generated FORTRAN objects

 The precision option may be followed by any one of the 
 following:

    single
 -> double 

 The current setting is indicated.

\end{verbatim}
<<fortranprecision>>=
      (|precision|
      "precision of generated FORTRAN objects"
       |interpreter|
       LITERALS
       |$fortranPrecision|
       (|single| |double|)
       |double|)
@
\subsection{intrinsic}
\begin{verbatim}
-------------------- The intrinsic Option ---------------------

 Description: whether to use INTRINSIC FORTRAN functions

 The intrinsic option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<fortranintrinsic>>=
      (|intrinsic|
       "whether to use INTRINSIC FORTRAN functions"
       |interpreter|
       LITERALS
       |$useIntrinsicFunctions|
       (|on| |off|)
       |off|)
@
\subsection{explength}
\begin{verbatim}
-------------------- The explength Option ---------------------

 Description: character limit for FORTRAN expressions

 The explength option may be followed by an integer in the range 
 0 to inclusive. The current setting is 1320 

\end{verbatim}
<<fortranexplength>>=
      (|explength|
       "character limit for FORTRAN expressions"
       |interpreter|
       INTEGER
       |$maximumFortranExpressionLength|
       (0 NIL)
       1320)
@
\subsection{segment}
\begin{verbatim}
--------------------- The segment Option ----------------------

 Description: split long FORTRAN expressions

 The segment option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<fortransegment>>=
      (|segment|
       "split long FORTRAN expressions"
       |interpreter|
       LITERALS
       |$fortranSegment|
       (|on| |off|)
       |on|)
@
\subsection{optlevel}
\begin{verbatim}
--------------------- The optlevel Option ---------------------

 Description: FORTRAN optimisation level

 The optlevel option may be followed by an integer in the range 
 0 to 2 inclusive. The current setting is 0 

\end{verbatim}
<<fortranoptlevel>>=
      (|optlevel|
       "FORTRAN optimisation level"
       |interpreter|
       INTEGER
       |$fortranOptimizationLevel|
       (0 2)
       0)
@
\subsection{startindex}
\begin{verbatim}
-------------------- The startindex Option --------------------

 Description: starting index for FORTRAN arrays

 The startindex option may be followed by an integer in the range 
 0 to 1 inclusive. The current setting is 1 

\end{verbatim}
<<fortranstartindex>>=
      (|startindex|
       "starting index for FORTRAN arrays"
       |interpreter|
       INTEGER
       |$fortranArrayStartingIndex|
       (0 1)
       1)
@
\subsection{calling}
\begin{verbatim}
              Current Values of  calling  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
tempfile     set location of temporary data files       /tmp/ 
directory    set location of generated FORTRAN files    ./ 
linker       linker arguments (e.g. libraries to search) -lxlf 

\end{verbatim}
<<fortrancalling>>=
      (|calling|
      "options for external FORTRAN calls"
      |interpreter|
      TREE
      |novar|
      (
<<callingtempfile>>
<<callingdirectory>>
<<callinglinker>>
       )
      )
@
\subsubsection{tempfile}
\begin{verbatim}
--------------------- The tempfile Option ---------------------

 Description: set location of temporary data files

 )set fortran calling tempfile  is used to tell AXIOM where
 to place intermediate FORTRAN data files . This must be the 
 name of a valid existing directory to which you have permission 
 to write (including the final slash).

 Syntax:
   )set fortran calling tempfile DIRECTORYNAME

 The current setting is /tmp/ 
\end{verbatim}
<<callingtempfile>>=
        (|tempfile|
         "set location of temporary data files"
         |interpreter|
         FUNCTION
         |setFortTmpDir|
         (("enter directory name for which you have write-permission"
           DIRECTORY
           |$fortranTmpDir|
           |chkDirectory|
           "/tmp/"))
         NIL)
@
\subsubsection{directory}
\begin{verbatim}
-------------------- The directory Option ---------------------

 Description: set location of generated FORTRAN files

 )set fortran calling directory  is used to tell AXIOM where
 to place generated FORTRAN files. This must be the name 
 of a valid existing directory to which you have permission 
 to write (including the final slash).

 Syntax:
   )set fortran calling directory DIRECTORYNAME

 The current setting is ./ 
\end{verbatim}
<<callingdirectory>>=
        (|directory|
         "set location of generated FORTRAN files"
         |interpreter|
         FUNCTION
         |setFortDir|
         (("enter directory name for which you have write-permission"
           DIRECTORY
           |$fortranDirectory|
           |chkDirectory|
           "./"))
         NIL)
@
\subsubsection{linker}
\begin{verbatim}
---------------------- The linker Option ----------------------

 Description: linker arguments (e.g. libraries to search)

 )set fortran calling linkerargs is used to pass arguments to 
 the linker when using  mkFort  to create functions which call 
 Fortran code. For example, it might give a list of libraries 
 to be searched, and their locations.
 The string is passed verbatim, so must be the correct syntax for
 the particular linker being used.

 Example: )set fortran calling linker "-lxlf"

 The current setting is -lxlf 
\end{verbatim}
<<callinglinker>>=
        (|linker|
         "linker arguments (e.g. libraries to search)"
         |interpreter|
         FUNCTION
         |setLinkerArgs|
         (("enter linker arguments "
           STRING
           |$fortranLibraries|
           |chkDirectory|
           "-lxlf"))
         NIL
         )
@
\section{kernel}
\begin{verbatim}
              Current Values of  kernel  Variables                    

Variable     Description                           Current Value
-----------------------------------------------------------------
warn         warn when re-definition is attempted       off 
protect      prevent re-definition of kernel functions  off 

\end{verbatim}
<<kernel>>=
  (|kernel|
   "library functions built into the kernel for efficiency"
   |interpreter|
   TREE
   |novar|
   (
<<kernelwarn>>
<<kernelprotect>>
   )
  )
@
\subsection{kernelwarn}
\begin{verbatim}
----------------------- The warn Option -----------------------

 Description: warn when re-definition is attempted

Some AXIOM library functions are compiled into the kernel for 
efficiency reasons. To prevent them being re-defined when loaded 
from a library they are specially protected. If a user wishes to 
know when an attempt is made to re-define such a function, he or 
she should issue the command:
        )set kernel warn on
To restore the default behaviour, he or she should issue the 
command:
        )set kernel warn off
\end{verbatim}
<<kernelwarn>>=
     (|warn|
      "warn when re-definition is attempted"
      |interpreter|
      FUNCTION
      |protectedSymbolsWarning|
      NIL
      |htSetKernelWarn|)
@
\subsection{kernelprotect}
\begin{verbatim}
--------------------- The protect Option ----------------------

 Description: prevent re-definition of kernel functions

Some AXIOM library functions are compiled into the kernel for 
efficiency reasons. To prevent them being re-defined when loaded
from a library they are specially protected.  If a user wishes 
to re-define these functions, he or she should issue the command:
        )set kernel protect off
To restore the default behaviour, he or she should issue the 
command:
        )set kernel protect on
\end{verbatim}
<<kernelprotect>>=
     (|protect|
      "prevent re-definition of kernel functions"
      |interpreter|
      FUNCTION
      |protectSymbols|
      NIL
      |htSetKernelProtect|)
@
\section{hyperdoc}
\begin{verbatim}
             Current Values of  hyperdoc  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
fullscreen   use full screen for this facility          off 
mathwidth    screen width for history output            120 

\end{verbatim}
<<hyperdoc>>=
  (|hyperdoc|
   "options in using HyperDoc"
   |interpreter|
   TREE
   |novar|
   (
<<hyperdocfullscreen>>
<<hyperdocmathwidth>>
   ))
@
\subsection{fullscreen}
\begin{verbatim}
-------------------- The fullscreen Option --------------------

 Description: use full screen for this facility

 The fullscreen option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<hyperdocfullscreen>>=
     (|fullscreen|
      "use full screen for this facility"
      |interpreter|
      LITERALS
      |$fullScreenSysVars|
      (|on| |off|)
      |off|)
@
\subsection{mathwidth}
\begin{verbatim}
-------------------- The mathwidth Option ---------------------

 Description: screen width for history output

 The mathwidth option may be followed by an integer in the range 
 0 to inclusive. The current setting is 120 

\end{verbatim}
<<hyperdocmathwidth>>=
     (|mathwidth|
      "screen width for history output"
      |interpreter|
      INTEGER
      |$historyDisplayWidth|
      (0 NIL)
      120)
@
\section{help}
\begin{verbatim}
               Current Values of  help  Variables                     

Variable     Description                           Current Value
-----------------------------------------------------------------
fullscreen   use fullscreen facility, if possible       off 

\end{verbatim}
<<help>>=
  (|help|
   "view and set some help options"
   |interpreter|
   TREE
   |novar|
   (
<<helpfullscreen>>
   ))
@
\subsection{fullscreen}
\begin{verbatim}
-------------------- The fullscreen Option --------------------

 Description: use fullscreen facility, if possible

 The fullscreen option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<helpfullscreen>>=
    (|fullscreen|
     "use fullscreen facility, if possible"
     |interpreter|
     LITERALS
     |$useFullScreenHelp|
     (|on| |off|)
     |off|)
@
\section{history}
\begin{verbatim}
--------------------- The history Option ----------------------

 Description: save workspace values in a history file

 The history option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<history>>=
  (|history|
   "save workspace values in a history file"
   |interpreter|
   LITERALS
   |$HiFiAccess|
   (|on| |off|)
   |on|)
@
\section{messages}
\begin{verbatim}
             Current Values of  messages  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
autoload     print file auto-load messages              off 
bottomup     display bottom up modemap selection        off 
coercion     display datatype coercion messages         off 
dropmap      display old map defn when replaced         off 
expose       warning for unexposed functions            off 
file         print msgs also to SPADMSG LISTING         off 
frame        display messages about frames              off 
highlighting use highlighting in system messages        off 
instant      present instantiation summary              off 
insteach     present instantiation info                 off 
interponly   say when function code is interpreted      on 
number       display message number with message        off 
prompt       set type of input prompt to display        step 
selection    display function selection msgs            off 
set          show )set setting after assignment         off 
startup      display messages on start-up               off 
summary      print statistics after computation         off 
testing      print system testing header                off 
time         print timings after computation            off 
type         print type after computation               on 
void         print Void value when it occurs            off 
any          print the internal type of objects of domain Any on 
naglink      show NAGLink messages                      on 

\end{verbatim}
<<messages>>=
  (|messages|
   "show messages for various system features"
   |interpreter|
   TREE
   |novar|
   (
<<messagesany>>
<<messagesautoload>>
<<messagesbottomup>>
<<messagescoercion>>
<<messagesdropmap>>
<<messagesexpose>>
<<messagesfile>>
<<messagesframe>>
<<messageshighlighting>>
<<messagesinstant>>
<<messagesinsteach>>
<<messagesinterponly>>
<<messagesnaglink>>
<<messagesnumber>>
<<messagesprompt>>
<<messagesselection>>
<<messagesset>>
<<messagesstartup>>
<<messagessummary>>
<<messagestesting>>
<<messagestime>>
<<messagestype>>
<<messagesvoid>>
   ))
@
\subsection{any}
\begin{verbatim}
----------------------- The any Option ------------------------

 Description: print the internal type of objects of domain Any

 The any option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<messagesany>>=
     (|any|
      "print the internal type of objects of domain Any"
      |interpreter|
      LITERALS
      |$printAnyIfTrue|
      (|on| |off|)
      |on|)
@
\subsection{autoload}
\begin{verbatim}
--------------------- The autoload Option ---------------------

 Description: print file auto-load messages

\end{verbatim}
<<messagesautoload>>=
     (|autoload|
      "print file auto-load messages"
      |interpreter|
      FUNCTION
      |printLoadMessages|
      (|on| |off|)
      |on|)
@
\subsection{bottomup}
\begin{verbatim}
--------------------- The bottomup Option ---------------------

 Description: display bottom up modemap selection

 The bottomup option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesbottomup>>=
     (|bottomup|
      "display bottom up modemap selection"
      |development|
      LITERALS
      |$reportBottomUpFlag|
      (|on| |off|)
      |off|)
@
\subsection{coercion}
\begin{verbatim}
--------------------- The coercion Option ---------------------

 Description: display datatype coercion messages

 The coercion option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagescoercion>>=
     (|coercion|
      "display datatype coercion messages"
      |development|
      LITERALS
      |$reportCoerceIfTrue|
      (|on| |off|)
      |off|)
@
\subsection{dropmap}
\begin{verbatim}
--------------------- The dropmap Option ----------------------

 Description: display old map defn when replaced

 The dropmap option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesdropmap>>=
     (|dropmap|
      "display old map defn when replaced"
      |interpreter|
      LITERALS
      |$displayDroppedMap|
      (|on| |off|)
      |off|)
@
\subsection{expose}
\begin{verbatim}
---------------------- The expose Option ----------------------

 Description: warning for unexposed functions

 The expose option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesexpose>>=
     (|expose|
      "warning for unexposed functions"
      |interpreter|
      LITERALS
      |$giveExposureWarning|
      (|on| |off|)
      |off|)
@
\subsection{file}
\begin{verbatim}
----------------------- The file Option -----------------------

 Description: print msgs also to SPADMSG LISTING

 The file option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesfile>>=
     (|file|
      "print msgs also to SPADMSG LISTING"
      |development|
      LITERALS
      |$printMsgsToFile|
      (|on| |off|)
      |off|)
@
\subsection{frame}
\begin{verbatim}
---------------------- The frame Option -----------------------

 Description: display messages about frames

 The frame option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesframe>>=
     (|frame|
      "display messages about frames"
      |interpreter|
      LITERALS
      |$frameMessages|
      (|on| |off|)
      |off|)
@
\subsection{highlighting}
\begin{verbatim}
------------------- The highlighting Option -------------------

 Description: use highlighting in system messages

 The highlighting option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messageshighlighting>>=
     (|highlighting|
      "use highlighting in system messages"
      |interpreter|
      LITERALS
      |$highlightAllowed|
      (|on| |off|)
      |off|)
@
\subsection{instant}
\begin{verbatim}
--------------------- The instant Option ----------------------

 Description: present instantiation summary

 The instant option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesinstant>>=
     (|instant|
      "present instantiation summary"
      |development|
      LITERALS
      |$reportInstantiations|
      (|on| |off|)
      |off|)
@
\subsection{insteach}
\begin{verbatim}
--------------------- The insteach Option ---------------------

 Description: present instantiation info

 The insteach option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesinsteach>>=
     (|insteach|
      "present instantiation info"
      |development|
      LITERALS
      |$reportEachInstantiation|
      (|on| |off|)
      |off|)
@
\subsection{interponly}
\begin{verbatim}
-------------------- The interponly Option --------------------

 Description: say when function code is interpreted

 The interponly option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<messagesinterponly>>=
     (|interponly|
      "say when function code is interpreted"
      |interpreter|
      LITERALS
      |$reportInterpOnly|
      (|on| |off|)
      |on|)
@
\subsection{naglink}
\begin{verbatim}
--------------------- The naglink Option ----------------------

 Description: show NAGLink messages

 The naglink option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<messagesnaglink>>=
     (|naglink|
      "show NAGLink messages"
      |interpreter|
      LITERALS
      |$nagMessages|
      (|on| |off|)
      |on|)
@
\subsection{number}
\begin{verbatim}
---------------------- The number Option ----------------------

 Description: display message number with message

 The number option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesnumber>>=
     (|number|
      "display message number with message"
      |interpreter|
      LITERALS
      |$displayMsgNumber|
      (|on| |off|)
      |off|)
@
\subsection{prompt}
\begin{verbatim}
---------------------- The prompt Option ----------------------

 Description: set type of input prompt to display

 The prompt option may be followed by any one of the following:

    none
    frame
    plain
 -> step 
    verbose

 The current setting is indicated.

\end{verbatim}
<<messagesprompt>>=
     (|prompt|
      "set type of input prompt to display"
      |interpreter|
      LITERALS
      |$inputPromptType|
      (|none| |frame| |plain| |step| |verbose|)
      |step|)
@
\subsection{selection}
\begin{verbatim}
-------------------- The selection Option ---------------------

 Description: display function selection msgs

 The selection option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesselection>>=
     (|selection|
      "display function selection msgs"
      |interpreter|
      LITERALS
      |$reportBottomUpFlag|
      (|on| |off|)
      |off|)
@
\subsection{set}
\begin{verbatim}
----------------------- The set Option ------------------------

 Description: show )set setting after assignment

 The set option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesset>>=
     (|set|
      "show )set setting after assignment"
      |interpreter|
      LITERALS
      |$displaySetValue|
      (|on| |off|)
      |off|)
@
\subsection{startup}
\begin{verbatim}
--------------------- The startup Option ----------------------

 Description: display messages on start-up

 The startup option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesstartup>>=
     (|startup|
      "display messages on start-up"
      |interpreter|
      LITERALS
      |$displayStartMsgs|
      (|on| |off|)
      |on|)
@
\subsection{summary}
\begin{verbatim}
--------------------- The summary Option ----------------------

 Description: print statistics after computation

 The summary option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagessummary>>=
     (|summary|
      "print statistics after computation"
      |interpreter|
      LITERALS
      |$printStatisticsSummaryIfTrue|
      (|on| |off|)
      |off|)
@
\subsection{testing}
\begin{verbatim}
--------------------- The testing Option ----------------------

 Description: print system testing header

 The testing option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagestesting>>=
     (|testing|
      "print system testing header"
      |development|
      LITERALS
      |$testingSystem|
      (|on| |off|)
      |off|)
@
\subsection{time}
\begin{verbatim}
----------------------- The time Option -----------------------

 Description: print timings after computation

 The time option may be followed by any one of the following:

    on
 -> off 
    long

 The current setting is indicated.

\end{verbatim}
<<messagestime>>=
     (|time|
      "print timings after computation"
      |interpreter|
      LITERALS
      |$printTimeIfTrue|
      (|on| |off| |long|)
      |off|)
@
\subsection{type}
\begin{verbatim}
----------------------- The type Option -----------------------

 Description: print type after computation

 The type option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<messagestype>>=
     (|type|
      "print type after computation"
      |interpreter|
      LITERALS
      |$printTypeIfTrue|
      (|on| |off|)
      |on|)
@
\subsection{void}
\begin{verbatim}
----------------------- The void Option -----------------------

 Description: print Void value when it occurs

 The void option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<messagesvoid>>=
     (|void|
      "print Void value when it occurs"
      |interpreter|
      LITERALS
      |$printVoidIfTrue|
      (|on| |off|)
      |off|)
@
\section{naglink}
\begin{verbatim}
              Current Values of  naglink  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
host         internet address of host for NAGLink       localhost 
persistence  number of (fortran) functions to remember  1 
messages     show NAGLink messages                      on 
double       enforce DOUBLE PRECISION ASPs              on 

\end{verbatim}
<<naglink>>=
  (|naglink|
   "options for NAGLink"
   |interpreter|
   TREE
   |novar|
   (
<<naglinkhost>>
<<naglinkpersistence>>
<<naglinkmessages>>
<<naglinkdouble>>
   ))
@
\subsection{host}
\begin{verbatim}
----------------------- The host Option -----------------------

 Description: internet address of host for NAGLink

 )set naglink host is used to tell  AXIOM which  host to contact
 for a NAGLink request. An Internet address should be supplied. 
 The host specified must be running the NAGLink daemon.

 The current setting is localhost 
\end{verbatim}
<<naglinkhost>>=
     (|host|
      "internet address of host for NAGLink"
      |interpreter|
      FUNCTION
      |setNagHost|
      (("enter host name"
        DIRECTORY
        |$nagHost|
        |chkDirectory|
        "localhost"))
      NIL)
@
\subsection{persistence}
\begin{verbatim}
------------------- The persistence Option --------------------

 Description: number of (fortran) functions to remember

 )set naglink persistence is used to tell  the  nagd  daemon how
  many ASP source and object files to keep around in case you 
  reuse them. This helps to avoid needless recompilations. The 
  number specified should be a non-negative integer.

 The current setting is 1 
\end{verbatim}
<<naglinkpersistence>>=
     (|persistence|
      "number of (fortran) functions to remember"
      |interpreter|
      FUNCTION
      |setFortPers|
      (("Requested remote storage (for asps):"
       INTEGER
       |$fortPersistence|
       (0 NIL)
       10))
      NIL)
@
\subsection{messages}
\begin{verbatim}
--------------------- The messages Option ---------------------

 Description: show NAGLink messages

 The messages option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<naglinkmessages>>=
     (|messages|
      "show NAGLink messages"
      |interpreter|
      LITERALS
      |$nagMessages|
      (|on| |off|)
       |on|)
@
\subsection{double}
\begin{verbatim}
---------------------- The double Option ----------------------

 Description: enforce DOUBLE PRECISION ASPs

 The double option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
<<naglinkdouble>>=
     (|double|
      "enforce DOUBLE PRECISION ASPs"
      |interpreter|
      LITERALS
      |$nagEnforceDouble|
      (|on| |off|)
      |on|)
@
\section{output}
The result of the {\bf )set output} command is:
\begin{verbatim}
Variable     Description                           Current Value
-----------------------------------------------------------------
abbreviate  abbreviate type names                    off 
algebra     display output in algebraic form         On:CONSOLE 
characters  choose special output character set      plain 
fortran     create output in FORTRAN format          Off:CONSOLE 
fraction    how fractions are formatted              vertical 
length      line length of output displays           77 
mathml	    create output in MathML style	     Off:CONSOLE 
openmath    create output in OpenMath style          Off:CONSOLE
script      display output in SCRIPT formula format  Off:CONSOLE 
scripts     show subscripts,... linearly             off 
showeditor  view output of )show in editor           off 
tex         create output in TeX style               Off:CONSOLE 
\end{verbatim}
Since the output option has a bunch of sub-options each suboption 
is defined within the output structure.
<<output>>=
  (|output|
   "view and set some output options"
   |interpreter|
   TREE
   |novar|
    (
<<outputabbreviate>>
<<outputalgebra>>
<<outputcharacters>>
<<outputfortran>>
<<outputfraction>>
<<outputlength>>
<<outputmathml>>
<<outputopenmath>>
<<outputscript>>
<<outputscripts>>
<<outputshoweditor>>
<<outputtex>>
 ))
@
\subsection{abbreviate}
\begin{verbatim}
-------------------- The abbreviate Option --------------------

 Description: abbreviate type names

 The abbreviate option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.
\end{verbatim}
<<outputabbreviate>>=
     (|abbreviate|
      "abbreviate type names"
      |interpreter|
      LITERALS
      |$abbreviateTypes|
      (|on| |off|)
      |off|)
@
\subsection{algebra}
\begin{verbatim}
--------------------- The algebra Option ----------------------

 Description: display output in algebraic form

 )set output algebra is used to tell AXIOM to turn algebra-style
  output printing on and off, and where to place the output.  By
  default, the destination for the output is the screen but 
  printing is turned off.

Syntax:   )set output algebra <arg>
    where arg can be one of
  on          turn algebra printing on (default state)
  off         turn algebra printing off
  console     send algebra output to screen (default state)
  fp<.fe>     send algebra output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .spout.

If you wish to send the output to a file, you may need to issue
this command twice: once with on and once with the file name. 
For example, to send algebra output to the file polymer.spout,
issue the two commands

  )set output algebra on
  )set output algebra polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  On:CONSOLE 
\end{verbatim}
<<outputalgebra>>=
     (|algebra|
      "display output in algebraic form"
      |interpreter|
      FUNCTION
      |setOutputAlgebra|
      (("display output in algebraic form"
        LITERALS
        |$algebraFormat|
        (|off| |on|)
        |on|)
       (break $algebraFormat)
       ("where algebra printing goes (enter {\em console} or a pathname)?"
        FILENAME
        |$algebraOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@
\subsection{characters}
\begin{verbatim}
-------------------- The characters Option --------------------

 Description: choose special output character set


 The characters option may be followed by any one of the 
 following:

    default
 -> plain 

 The current setting is indicated.  This 
 option  determines the special characters used for algebraic 
 output. This is what the current choice of special characters 
 looks like:
   ulc is shown as +          urc is shown as +       
   llc is shown as +          lrc is shown as +       
   vbar is shown as |         hbar is shown as -      
   quad is shown as ?         lbrk is shown as [      
   rbrk is shown as ]         lbrc is shown as {      
   rbrc is shown as }         ttee is shown as +      
   btee is shown as +         rtee is shown as +      
   ltee is shown as +         ctee is shown as +      
   bslash is shown as \    
\end{verbatim}
<<outputcharacters>>=
     (|characters|
      "choose special output character set"
      |interpreter|
      FUNCTION
      |setOutputCharacters|
      NIL
      |htSetOutputCharacters|)
@
\subsection{fortran}
\begin{verbatim}
--------------------- The fortran Option ----------------------

 Description: create output in FORTRAN format

 )set output fortran is used to tell AXIOM to turn FORTRAN-style
  output printing on and off, and where to place the output.  By
  default, the destination for the output is the screen but 
  printing is turned off.

Also See: )set fortran

Syntax:   )set output fortran <arg>
    where arg can be one of
  on          turn FORTRAN printing on
  off         turn FORTRAN printing off (default state)
  console     send FORTRAN output to screen (default state)
  fp<.fe>     send FORTRAN output to file with file prefix 
              fp and file extension .fe. If not given, 
              .fe defaults to .sfort.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name.
For example, to send FORTRAN output to the file polymer.sfort,
 issue the two commands

  )set output fortran on
  )set output fortran polymer

The output is placed in the directory from which you invoked
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
<<outputfortran>>=
     (|fortran|
      "create output in FORTRAN format"
      |interpreter|
      FUNCTION
      |setOutputFortran|
      (("create output in FORTRAN format"
        LITERALS
        |$fortranFormat|
        (|off| |on|)
        |off|)
       (|break| |$fortranFormat|)
       ("where FORTRAN output goes (enter {\em console} or a a pathname)"
        FILENAME
        |$fortranOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@
\subsection{fraction}
\begin{verbatim}
--------------------- The fraction Option ---------------------

 Description: how fractions are formatted

 The fraction option may be followed by any one of the following:

 -> vertical 
    horizontal

 The current setting is indicated.

\end{verbatim}
<<outputfraction>>=
     (|fraction|
      "how fractions are formatted"
      |interpreter|
      LITERALS
      |$fractionDisplayType|
      (|vertical| |horizontal|)
      |vertical|)
@
\subsection{length}
\begin{verbatim}
---------------------- The length Option ----------------------

 Description: line length of output displays

 The length option may be followed by an integer in the range 
 10 to 245 inclusive. The current setting is 77 

\end{verbatim}
<<outputlength>>=
     (|length|
      "line length of output displays"
      |interpreter|
      INTEGER
      $LINELENGTH
      (10 245)
      77)
@
\subsection{mathml}
\begin{verbatim}
----------------------- The mathml Option ------------------------

 Description: create output in MathML style

 )set output mathml is used to tell AXIOM to turn MathML-style output
printing on and off, and where to place the output.  By default,
the destination for the output is the screen but printing is 
turned off.

Syntax:   )set output mathml <arg>
    where arg can be one of
  on          turn MathML printing on
  off         turn MathML printing off (default state)
  console     send MathML output to screen (default state)
  fp<.fe>     send MathML output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .smml.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name. 
For example, to send MathML output to the file polymer.smml, 
issue the two commands

  )set output mathml on
  )set output mathml polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
<<outputmathml>>=
     (|mathml|
      "create output in MathML style"
      |interpreter|
      FUNCTION
      |setOutputMathml|
      (("create output in MathML format"
        LITERALS
        |$mathmlFormat|
        (|off| |on|)
        |off|)
       (|break| |$mathmlFormat|)
       ("where MathML output goes (enter {\em console} or a pathname)"
        FILENAME
        |$mathmlOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)

@
\subsection{openmath}
\begin{verbatim}
----------------------- The openmath Option ------------------------

 Description: create output in OpenMath style

 )set output tex is used to tell AXIOM to turn OpenMath output
printing on and off, and where to place the output.  By default,
the destination for the output is the screen but printing is 
turned off.

Syntax:   )set output tex <arg>
    where arg can be one of
  on          turn OpenMath printing on
  off         turn OpenMath printing off (default state)
  console     send OpenMath output to screen (default state)
  fp<.fe>     send OpenMath output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .sopen.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name. 
For example, to send OpenMath output to the file polymer.sopen, 
issue the two commands

  )set output openmath on
  )set output openmath polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
<<outputopenmath>>=
     (|openmath|
      "create output in OpenMath style"
      |interpreter|
      FUNCTION
      |setOutputOpenMath|
      (("create output in OpenMath format"
        LITERALS
        |$openMathFormat|
        (|off| |on|)
        |off|)
       (|break| |$openMathFormat|)
       ("where TeX output goes (enter {\em console} or a pathname)"
        FILENAME
        |$openMathOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@
\subsection{script}
\begin{verbatim}
---------------------- The script Option ----------------------

 Description: display output in SCRIPT formula format

 )set output script is used to tell AXIOM to turn IBM Script
 formula-style output printing on and off, and where to place
 the output.  By default, the destination for the output is the 
 screen but printing is turned off.

Syntax:   )set output script <arg>
    where arg can be one of
  on      turn IBM Script formula printing on
  off     turn IBM Script formula printing off 
          (default state)
  console send IBM Script formula output to screen 
          (default state)
  fp<.fe> send IBM Script formula output to file with file 
          prefix fp and file extension .fe. If not given, 
          .fe defaults to .sform.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file 
name. For example, to send IBM Script formula output to 
the file polymer.sform, issue the two commands

  )set output script on
  )set output script polymer

The output is placed in the directory from which you 
invoked AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
<<outputscript>>=
     (|script|
      "display output in SCRIPT formula format"
      |interpreter|
      FUNCTION
      |setOutputFormula|
      (("display output in SCRIPT format"
        LITERALS
        |$formulaFormat|
        (|off| |on|)
        |off|)
       (|break| |$formulaFormat|)
       ("where script output goes (enter {\em console} or a a pathname)"
        FILENAME
        |$formulaOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@
\subsection{scripts}
\begin{verbatim}
--------------------- The scripts Option ----------------------

 Description: show subscripts,... linearly

 The scripts option may be followed by any one of the following:

    yes
    no

 The current setting is indicated.

\end{verbatim}
<<outputscripts>>=
     (|scripts|
      "show subscripts,... linearly"
      |interpreter|
      LITERALS
      |$linearFormatScripts|
      (|on| |off|)
      |off|)
@
\subsection{showeditor}
\begin{verbatim}
-------------------- The showeditor Option --------------------

 Description: view output of )show in editor

 The showeditor option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<outputshoweditor>>=
     (|showeditor|
      "view output of )show in editor"
      |interpreter|
      LITERALS
      |$useEditorForShowOutput|
      (|on| |off|)
      |off|)
@
\subsection{tex}
\begin{verbatim}
----------------------- The tex Option ------------------------

 Description: create output in TeX style

 )set output tex is used to tell AXIOM to turn TeX-style output
printing on and off, and where to place the output.  By default,
the destination for the output is the screen but printing is 
turned off.

Syntax:   )set output tex <arg>
    where arg can be one of
  on          turn TeX printing on
  off         turn TeX printing off (default state)
  console     send TeX output to screen (default state)
  fp<.fe>     send TeX output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .stex.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name. 
For example, to send TeX output to the file polymer.stex, 
issue the two commands

  )set output tex on
  )set output tex polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
<<outputtex>>=
     (|tex|
      "create output in TeX style"
      |interpreter|
      FUNCTION
      |setOutputTex|
      (("create output in TeX format"
        LITERALS
        |$texFormat|
        (|off| |on|)
        |off|)
       (|break| |$texFormat|)
       ("where TeX output goes (enter {\em console} or a pathname)"
        FILENAME
        |$texOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@
\section{quit}
\begin{verbatim}
----------------------- The quit Option -----------------------

 Description: protected or unprotected quit

 The quit option may be followed by any one of the following:

    protected
 -> unprotected 

 The current setting is indicated.

\end{verbatim}
<<quit>>=
  (|quit|
   "protected or unprotected quit"
   |interpreter|
   LITERALS
   |$quitCommandType|
   (|protected| |unprotected|)
   |protected|)
@
\section{streams}
\begin{verbatim}
              Current Values of  streams  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
calculate    specify number of elements to calculate    10 
showall      display all stream elements computed       off 

\end{verbatim}
<<streams>>=
  (|streams|
   "set some options for working with streams"
   |interpreter|
   TREE
   |novar|
   (
<<streamscalculate>>
<<streamsshowall>>
  ))
@
\subsection{calculate}
\begin{verbatim}
-------------------- The calculate Option ---------------------

 Description: specify number of elements to calculate

   )set streams calculate is used to tell AXIOM how many elements
    of a stream to calculate when a computation uses the stream. 
    The value given after calculate must either be the word all 
    or a positive integer.

      The current setting is 10 .
\end{verbatim}
<<streamscalculate>>=
     (|calculate|
      "specify number of elements to calculate"
      |interpreter|
      FUNCTION
      |setStreamsCalculate|
      (("number of initial stream elements you want calculated"
       INTEGER
       |$streamCount|
       (0 NIL)
       10))
      NIL)
@
\subsection{showall}
\begin{verbatim}
--------------------- The showall Option ----------------------

 Description: display all stream elements computed

 The showall option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<streamsshowall>>=
    (|showall|
     "display all stream elements computed"
     |interpreter|
     LITERALS
     |$streamsShowAll|
     (|on| |off|)
     |off|)
@
\section{system}
\begin{verbatim}
              Current Values of  system  Variables                    

Variable     Description                           Current Value
-----------------------------------------------------------------
functioncode show gen. LISP for functions when compiled off 
optimization show optimized LISP code                   off 
prettyprint  prettyprint BOOT func's as they compile    off 

\end{verbatim}
<<system>>=
  (|system|
   "set some system development variables"
   |development|
   TREE
   |novar|
   (
<<systemfunctioncode>>
<<systemoptimization>>
<<systemprettyprint>>
   ))
@
\subsection{functioncode}
\begin{verbatim}
------------------- The functioncode Option -------------------

 Description: show gen. LISP for functions when compiled

 The functioncode option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<systemfunctioncode>>=
     (|functioncode|
      "show gen. LISP for functions when compiled"
      |development|
      LITERALS
      |$reportCompilation|
      (|on| |off|)
      |off|)
@
\subsection{optimization}
\begin{verbatim}
------------------- The optimization Option -------------------

 Description: show optimized LISP code

 The optimization option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<systemoptimization>>=
     (|optimization|
      "show optimized LISP code"
      |development|
      LITERALS
      |$reportOptimization|
      (|on| |off|)
      |off|)
@
\subsection{prettyprint}
\begin{verbatim}
------------------- The prettyprint Option --------------------

 Description: prettyprint BOOT func's as they compile

 The prettyprint option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
<<systemprettyprint>>=
     (|prettyprint|
      "prettyprint BOOT func's as they compile"
      |development|
      LITERALS
      $PRETTYPRINT
      (|on| |off|)
      |on|)
@
\section{userlevel}
\begin{verbatim}
-------------------- The userlevel Option ---------------------

 Description: operation access level of system user

 The userlevel option may be followed by any one of the 
 following:

    interpreter
    compiler
 -> development 

 The current setting is indicated.

\end{verbatim}
<<userlevel>>=
  (|userlevel|
   "operation access level of system user"
   |interpreter|
   LITERALS
   |$UserLevel|
   (|interpreter| |compiler| |development|)
   |development|)

<<initvars>>=
(defvar |$setOptions| '(
<<breakmode>>
<<compiler>>
<<expose>>
<<functions>>
<<fortran>>
<<kernel>>
<<hyperdoc>>
<<help>>
<<history>>
<<messages>>
<<naglink>>
<<output>>
<<quit>>
<<streams>>
<<system>>
<<userlevel>>
 ))

@
<<initvars>>=
(defvar |$setOptionNames| (mapcar #'car |$setOptions|))

@

<<postvars>>=
(eval-when (eval load)
 (|initializeSetVariables| |$setOptions|)

@

\section{Set code}

\subsection{defun set}
<<defun set>>=
(defun |set| (l)
 (|set1| l |$setOptions|)) 

@
\subsection{defun set1}
This function will be called with the top level arguments to )set.
For instance, given the command
\begin{verbatim}
   )set break break
\end{verbatim}
this function gets 
\begin{verbatim}
   (set1 (|break| |break|) ....)
\end{verbatim}
and given the command
\begin{verbatim}
   )set mes auto off
\end{verbatim}
this function gets 
\begin{verbatim}
   (set1 (|mes| |auto| |off|) ....)
\end{verbatim}
which, because ``message'' is a TREE, generates the recursive call:
\begin{verbatim}
   (set1 (|auto| |off|) <the message subtree>)
\end{verbatim}
The ``autoload'' subtree is a FUNCTION (printLoadMessages), 
which gets called with \verb|%describe%|
<<defun set1>>=
(defun |set1| (l settree)
 (let (|$setOptionNames| arg setdata st setfunarg num upperlimit arg2)
  (declare (special |$setOptionNames|))
  (cond
   ((null l) (|displaySetVariableSettings| settree '||))
   (t
    (setq |$setOptionNames|
      (do ((t1 settree (cdr t1)) t0 (|x| nil))
          ((or (atom t1) (progn (setq |x| (car t1)) nil)) (nreverse0 t0))
       (seq
        (exit 
         (setq t0 (cons (elt |x| 0) t0))))))
    (setq arg 
     (|selectOption| (downcase (car l)) |$setOptionNames| '|optionError|))
    (setq setdata (cons arg (lassoc arg settree)))
    (cond
     ((null (|satisfiesUserLevel| (third setdata)))
      (|sayKeyedMsg| 's2iz0007 (list |$UserLevel| "set option" nil)))
     ((eql 1 (|#| l)) (|displaySetOptionInformation| arg setdata))
     (t
      (setq st (fourth setdata))
      (case (fourth setdata)
       (FUNCTION
        (setq setfunarg
         (if (eq (elt l 1) 'default) 
          '|%initialize%|
          (kdr l)))
        (if (|functionp| (fifth setdata))
          (funcall (fifth setdata) setfunarg)
          (|sayMSG| "   Function not implemented."))
        (when |$displaySetValue|
         (|displaySetOptionInformation| arg setdata))
        NIL)
       (STRING
        (setq arg2 (elt l 1))
        (cond
         ((eq arg2 'default) (set (fifth setdata) (seventh setdata)))
         (arg2 (set (fifth setdata) arg2))
         (t nil))
        (when (or |$displaySetValue| (null arg2))
         (|displaySetOptionInformation| arg setdata))
        NIL)
       (INTEGER
        (setq arg2
         (progn
          (setq num (elt l 1))
          (cond
           ((and (fixp num)
                 (>= num (elt (sixth setdata) 0))
                 (or (null (setq upperlimit (elt (sixth setdata) 1)))
                     (<= num upperlimit)))
            num)
           (t
            (|selectOption| 
             (elt l 1)
             (cons '|default| (sixth setdata)) nil)))))
        (cond
         ((eq arg2 'default) (set (fifth setdata) (seventh setdata)))
         (arg2 (set (fifth setdata) arg2))
         (t nil))
        (cond
         ((or |$displaySetValue| (null arg2))
          (|displaySetOptionInformation| arg setdata)))
        (cond
         ((null arg2)
          (|sayMessage| 
           `(" Your value" ,@(|bright| (|object2String| (elt l 1)))
             "is not among the valid choices.")))
         (t nil)))
       (LITERALS
        (cond
         ((setq arg2
          (|selectOption| (elt l 1) 
           (cons '|default| (sixth setdata)) nil))
          (cond
           ((eq arg2 'default)
            (set (fifth setdata) 
              (|translateYesNo2TrueFalse| (seventh setdata))))
           (t
            (cond ((eq arg2 '|nobreak|) (use-fast-links t)))
            (cond 
             ((eq arg2 '|fastlinks|)
              (use-fast-links nil)
              (setq arg2 '|break|)))
            (set (fifth setdata) (|translateYesNo2TrueFalse| arg2))))))
        (when (or |$displaySetValue| (null arg2))
          (|displaySetOptionInformation| arg setdata))
        (cond
         ((null arg2)
          (|sayMessage|
           (cons " Your value"
            (append (|bright| (|object2String| (elt l 1)))
             (cons "is not among the valid choices." nil)))))
         (t nil)))
       (TREE (|set1| (kdr l) (sixth setdata)) nil)
       (t 
        (|sayMessage|
         `("Cannot handle set tree node type" ,@(|bright| st) |yet|))
        nil))))))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{show}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item {\tt )show {\it nameOrAbbrev}}
\item {\tt )show {\it nameOrAbbrev} )operations}
\item {\tt )show {\it nameOrAbbrev} )attributes}
\end{list}

\par\noindent{\bf Command Description:}
This command displays information about Axiom
domain, package and category {\it constructors}.
If no options are given, the {\tt )operations} option is assumed.
For example,
\begin{verbatim}
)show POLY
)show POLY )operations
)show Polynomial
)show Polynomial )operations
\end{verbatim}
each display basic information about the
{\tt Polynomial} domain constructor and then provide a
listing of operations.
Since {\tt Polynomial} requires a {\tt Ring} (for example,
{\tt Integer}) as argument, the above commands all refer
to a unspecified ring {\tt R}.
In the list of operations, {\tt \$} means
{\tt Polynomial(R)}.

The basic information displayed includes the {\it signature}
of the constructor (the name and arguments), the constructor
{\it abbreviation}, the {\it exposure status} of the constructor, and the
name of the {\it library source file} for the constructor.

If operation information about a specific domain is wanted,
the full or abbreviated domain name may be used.
For example,
\begin{verbatim}
)show POLY INT
)show POLY INT )operations
)show Polynomial Integer
)show Polynomial Integer )operations
\end{verbatim}
are among  the combinations that will
display the operations exported  by the
domain {\tt Polynomial(Integer)} (as opposed to the general
{\it domain constructor} {\tt Polynomial}).
Attributes may be listed by using the {\tt )attributes} option.

\par\noindent{\bf Also See:}
\fnref{display},
\fnref{set}, and
\fnref{what}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{spool}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )spool} \lanb{}{\it fileName}\ranb{}
\item{\tt )spool}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to save {\it (spool)} all Axiom input and output
\index{file!spool}
into a file, called a {\it spool file.}
You can only have one spool file active at a time.
To start spool, issue this command with a filename. For example,
\begin{verbatim}
)spool integrate.out
\end{verbatim}
To stop spooling, issue {\tt )spool} with no filename.

If the filename is qualified with a directory, then the output will
be placed in that directory.
If no directory information is given, the spool file will be placed in the
\index{directory!for spool files}
{\it current directory.}
The current directory is the directory from which you started
Axiom or is the directory you specified using the
{\tt )cd} command.
\index{cd}

\par\noindent{\bf Also See:}
\fnref{cd}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{summary}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{defun summary}
<<defun summary>>=
(defun |summary| (l)
 (obey (strconc "cat " (|getEnv| "AXIOM") "/lib/summary")))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{synonym}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )synonym}
\item{\tt )synonym} {\it synonym fullCommand}
\item{\tt )what synonyms}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to create short synonyms for system command expressions.
For example, the following synonyms  might simplify commands you often
use.
\begin{verbatim}
)synonym save         history )save
)synonym restore      history )restore
)synonym mail         system mail
)synonym ls           system ls
)synonym fortran      set output fortran
\end{verbatim}
Once defined, synonyms can be
used in place of the longer  command expressions.
Thus
\begin{verbatim}
)fortran on
\end{verbatim}
is the same as the longer
\begin{verbatim}
)set fortran output on
\end{verbatim}
To list all defined synonyms, issue either of
\begin{verbatim}
)synonyms
)what synonyms
\end{verbatim}
To list, say, all synonyms that contain the substring
``{\tt ap}'', issue
\begin{verbatim}
)what synonyms ap
\end{verbatim}

\par\noindent{\bf Also See:}
\fnref{set} and
\fnref{what}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{system}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )system} {\it cmdExpression}
\end{list}

\par\noindent{\bf Command Description:}

This command may be used to issue commands to the operating system while
remaining in Axiom.
The {\it cmdExpression} is passed to the operating system for
execution.

To get an operating system shell, issue, for example,
{\tt )system sh}.
When you enter the key combination,
\fbox{\bf Ctrl}--\fbox{\bf D}
(pressing and holding the
\fbox{\bf Ctrl} key and then pressing the
\fbox{\bf D} key)
the shell will terminate and you will return to Axiom.
We do not recommend this way of creating a shell because
Common Lisp may field some interrupts instead of the shell.
If possible, use a shell running in another window.

If you execute programs that misbehave you may not be able to return to
Axiom.
If this happens, you may have no other choice than to restart
Axiom and restore the environment via {\tt )history )restore}, if
possible.

\par\noindent{\bf Also See:}
\fnref{boot},
\fnref{fin},
\fnref{lisp},
\fnref{pquit}, and
\fnref{quit}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{trace}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )trace}
\item{\tt )trace )off}

\item{\tt )trace} {\it function \lanb{}options\ranb{}}
\item{\tt )trace} {\it constructor \lanb{}options\ranb{}}
\item{\tt )trace} {\it domainOrPackage \lanb{}options\ranb{}}
\end{list}
%
where options can be one or more of
%
\begin{list}{}
\item{\tt )after} {\it S-expression}
\item{\tt )before} {\it S-expression}
\item{\tt )break after}
\item{\tt )break before}
\item{\tt )cond} {\it S-expression}
\item{\tt )count}
\item{\tt )count} {\it n}
\item{\tt )depth} {\it n}
\item{\tt )local} {\it op1 \lanb{}... opN\ranb{}}
\item{\tt )nonquietly}
\item{\tt )nt}
\item{\tt )off}
\item{\tt )only} {\it listOfDataToDisplay}
\item{\tt )ops}
\item{\tt )ops} {\it op1 \lanb{}... opN \ranb{}}
\item{\tt )restore}
\item{\tt )stats}
\item{\tt )stats reset}
\item{\tt )timer}
\item{\tt )varbreak}
\item{\tt )varbreak} {\it var1 \lanb{}... varN \ranb{}}
\item{\tt )vars}
\item{\tt )vars} {\it var1 \lanb{}... varN \ranb{}}
\item{\tt )within} {\it executingFunction}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to trace the execution of functions that make
up the Axiom system, functions defined by users,
and functions from the system library.
Almost all options are available for each type of function but
exceptions will be noted below.

To list all functions, constructors, domains and packages that are
traced, simply issue
\begin{verbatim}
)trace
\end{verbatim}
To untrace everything that is traced, issue
\begin{verbatim}
)trace )off
\end{verbatim}
When a function is traced, the default system action is to display
the arguments to the function and the return value when the
function is exited.
Note that if a function is left via an action such as a {\tt THROW}, no
return value will be displayed.
Also, optimization of tail recursion may decrease the number of
times a function is actually invoked and so may cause less trace
information to be displayed.
Other information can be displayed or collected when a function is
traced and this is controlled by the various options.
Most options will be of interest only to Axiom system
developers.
If a domain or package is traced, the default action is to trace
all functions exported.

Individual interpreter, lisp or boot
functions can be traced by listing their names after
{\tt )trace}.
Any options that are present must follow the functions to be
traced.
\begin{verbatim}
)trace f
\end{verbatim}
traces the function {\tt f}.
To untrace {\tt f}, issue
\begin{verbatim}
)trace f )off
\end{verbatim}
Note that if a function name contains a special character, it will
be necessary to escape the character with an underscore
%
\begin{verbatim}
)trace _/D_,1
\end{verbatim}
%
To trace all domains or packages that are or will be created from a particular
constructor, give the constructor name or abbreviation after
{\tt )trace}.
%
\begin{verbatim}
)trace MATRIX
)trace List Integer
\end{verbatim}
%
The first command traces all domains currently instantiated with
{\tt Matrix}.
If additional domains are instantiated with this constructor
(for example, if you have used {\tt Matrix(Integer)} and
{\tt Matrix(Float)}), they will be automatically traced.
The second command traces {\tt List(Integer)}.
It is possible to trace individual functions in a domain or
package.
See the {\tt )ops} option below.

The following are the general options for the {\tt )trace}
command.

%!! system command parser doesn't treat general s-expressions correctly,
%!! I recommand not documenting )after )before and )cond
\begin{description}
%\item[{\tt )after} {\it S-expression}]
%causes the given Common Lisp {\it S-expression} to be
%executed after exiting the traced function.

%\item[{\tt )before} {\it S-expression}]
%causes the given Common Lisp {\it S-expression} to be
%executed before entering the traced function.

\item[{\tt )break after}]
causes a Common Lisp break loop to be entered after
exiting the traced function.

\item[{\tt )break before}]
causes a Common Lisp break loop to be entered before
entering the traced function.

\item[{\tt )break}]
is the same as {\tt )break before}.

%\item[{\tt )cond} {\it S-expression}]
%causes trace information to be shown only if the given
%Common Lisp {\it S-expression} evaluates to non-NIL.  For
%example, the following command causes the system function
%{\tt resolveTT} to be traced but to have the information
%displayed only if the value of the variable
%{\tt \$reportBottomUpFlag} is non-NIL.
%\begin{verbatim}
%)trace resolveTT )cond \_\$reportBottomUpFlag}
%\end{verbatim}

\item[{\tt )count}]
causes the system to keep a count of the number of times the
traced function is entered.  The total can be displayed with
{\tt )trace )stats} and cleared with {\tt )trace )stats reset}.

\item[{\tt )count} {\it n}]
causes information about the traced function to be displayed for
the first {\it n} executions.  After the \it n-th execution, the
function is untraced.

\item[{\tt )depth} {\it n}]
causes trace information to be shown for only {\it n} levels of
recursion of the traced function.  The command
\begin{verbatim}
)trace fib )depth 10
\end{verbatim}
will cause the display of only 10 levels of trace information for
the recursive execution of a user function {\bf fib}.

\item[{\tt )math}]
causes the function arguments and return value to be displayed in the
Axiom monospace two-dimensional math format.

\item[{\tt )nonquietly}]
causes the display of additional messages when a function is
traced.

\item[{\tt )nt}]
This suppresses all normal trace information.  This option is
useful if the {\tt )count} or {\tt )timer} options are used and
you are interested in the statistics but not the function calling
information.

\item[{\tt )off}]
causes untracing of all or specific functions.  Without an
argument, all functions, constructors, domains and packages are
untraced.  Otherwise, the given functions and other objects
are untraced.  To
immediately retrace the untraced functions, issue {\tt )trace
)restore}.

\item[{\tt )only} {\it listOfDataToDisplay}]
causes only specific trace information to be shown.  The items are
listed by using the following abbreviations:
\begin{description}
\item[a]        display all arguments
\item[v]        display return value
\item[1]        display first argument
\item[2]        display second argument
\item[15]       display the 15th argument, and so on
\end{description}
\end{description}
\begin{description}

\item[{\tt )restore}]
causes the last untraced functions to be retraced.  If additional
options are present, they are added to those previously in effect.

\item[{\tt )stats}]
causes the display of statistics collected by the use of the
{\tt )count} and {\tt )timer} options.

\item[{\tt )stats reset}]
resets to 0 the statistics collected by the use of the
{\tt )count} and {\tt )timer} options.

\item[{\tt )timer}]
causes the system to keep a count of execution times for the
traced function.  The total can be displayed with {\tt )trace
)stats} and cleared with {\tt )trace )stats reset}.

%!! only for lisp, boot, may not work in any case, recommend removing
%\item[{\tt )varbreak}]
%causes a Common Lisp break loop to be entered after
%the assignment to any variable in the traced function.

\item[{\tt )varbreak} {\it var1 \lanb{}... varN\ranb{}}]
causes a Common Lisp break loop to be entered after
the assignment to any of the listed variables in the traced
function.

\item[{\tt )vars}]
causes the display of the value of any variable after it is
assigned in the traced function.
Note that library code must
have been compiled
using the {\tt )vartrace} option in order
to support this option.

\item[{\tt )vars} {\it var1 \lanb{}... varN\ranb{}}]
causes the display of the value of any of the specified variables
after they are assigned in the traced function.
Note that library code must
have been compiled
using the {\tt )vartrace} option in order
to support this option.

\item[{\tt )within} {\it executingFunction}]
causes the display of trace information only if the traced
function is called when the given {\it executingFunction} is running.
\end{description}

The following are the options for tracing constructors, domains
and packages.

\begin{description}
\item[{\tt )local} {\it \lanb{}op1 \lanb{}... opN\ranb{}\ranb{}}]
causes local functions of the constructor to be traced.  Note that
to untrace an individual local function, you must use the fully
qualified internal name, using the escape character
{\tt \_} before the semicolon.
\begin{verbatim}
)trace FRAC )local
)trace FRAC_;cancelGcd )off
\end{verbatim}

\item[{\tt )ops} {\it op1 \lanb{}... opN\ranb{}}]
By default, all operations from a domain or package are traced
when the domain or package is traced.  This option allows you to
specify that only particular operations should be traced.  The
command
%
\begin{verbatim}
)trace Integer )ops min max _+ _-
\end{verbatim}
%
traces four operations from the domain {\tt Integer}.  Since
{\tt +} and {\tt -} are special
characters, it is necessary
to escape them with an underscore.
\end{description}

\par\noindent{\bf Also See:}
\fnref{boot},
\fnref{lisp}, and
\fnref{ltrace}

\subsection{The trace global variables}
This decides when to give trace and untrace messages.
<<initvars>>=
(defvar |$traceNoisely| nil) 

@

This reports the traced functions
<<initvars>>=
(defvar |$reportSpadTrace| nil) 

@

<<initvars>>=
(defvar |$optionAlist| nil) 

@

<<initvars>>=
(defvar |$tracedMapSignatures| nil) 

@

<<initvars>>=
(defvar |$traceOptionList|
 '(|after| |before| |break| |cond| |count| |depth| |local| |mathprint| 
   |nonquietly| |nt| |of| |only| |ops| |restore| |timer| |varbreak| 
   |vars| |within|))

@ 

\subsection{defun trace}
<<defun trace>>=
(defun |trace| (l)
 (|traceSpad2Cmd| l)) 

@

\subsection{defun traceSpad2Cmd}
\begin{verbatim}
;traceSpad2Cmd l ==
;  if l is ['Tuple, l1] then l := l1
;  $mapSubNameAlist:= getMapSubNames(l)
;  trace1 augmentTraceNames(l,$mapSubNameAlist)
;  traceReply()
\end{verbatim}

<<defun traceSpad2Cmd>>=
(defun |traceSpad2Cmd| (l)
 (let (tmp1 l1)
  (cond
   ((and (pairp l)
         (eq (qcar l) '|Tuple|)
         (progn
          (setq tmp1 (qcdr l))
          (and (pairp tmp1)
               (eq (qcdr tmp1) nil)
               (progn 
                (setq l1 (qcar tmp1))
                t))))
      (setq l l1)))
    (setq |$mapSubNameAlist| (|getMapSubNames| l))
    (|trace1| (|augmentTraceNames| l |$mapSubNameAlist|))
    (|traceReply|)))

@

\subsection{defun trace1}
\begin{verbatim}
;trace1 l ==
;  $traceNoisely: local := NIL
;  if hasOption($options,'nonquietly) then $traceNoisely := true
;  hasOption($options,'off) =>
;    (ops := hasOption($options,'ops)) or
;      (lops := hasOption($options,'local)) =>
;        null l => throwKeyedMsg("S2IT0019",NIL)
;        constructor := unabbrev
;          atom l => l
;          null rest l =>
;            atom first l => first l
;            first first l
;          NIL
;        not(isFunctor constructor) => throwKeyedMsg("S2IT0020",NIL)
;        if ops then
;          ops := getTraceOption ops
;          NIL
;        if lops then
;          lops := rest getTraceOption lops
;          untraceDomainLocalOps(constructor,lops)
;    (1 < # $options) and not hasOption($options,'nonquietly) =>
;      throwKeyedMsg("S2IT0021",NIL)
;    untrace l
;  hasOption($options,'stats) =>
;    (1 < # $options) =>
;      throwKeyedMsg("S2IT0001",['")trace ... )stats"])
;    [.,:opt] := CAR $options
;    -- look for )trace )stats       to list the statistics
;    --          )trace )stats reset to reset them
;    null opt =>      -- list the statistics
;      centerAndHighlight('"Traced function execution times",78,"-")
;      ptimers ()
;      SAY '" "
;      centerAndHighlight('"Traced function execution counts",78,"-")
;      pcounters ()
;    selectOptionLC(first opt,'(reset),'optionError)
;    resetSpacers()
;    resetTimers()
;    resetCounters()
;    throwKeyedMsg("S2IT0002",NIL)
;  a:= hasOption($options,'restore) =>
;    null(oldL:= $lastUntraced) => nil
;    newOptions:= DELETE(a,$options)
;    null l => trace1 oldL
;    for x in l repeat
;      x is [domain,:opList] and VECP domain =>
;        sayKeyedMsg("S2IT0003",[devaluate domain])
;      $options:= [:newOptions,:LASSOC(x,$optionAlist)]
;      trace1 LIST x
;  null l => nil
;  l is ["?"] => _?t()
;  traceList:= [transTraceItem x for x in l] or return nil
;  for x in traceList repeat $optionAlist:=
;    ADDASSOC(x,$options,$optionAlist)
;  optionList:= getTraceOptions $options
;  argument:=
;    domainList:= LASSOC("of",optionList) =>
;      LASSOC("ops",optionList) =>
;        throwKeyedMsg("S2IT0004",NIL)
;      opList:=
;        traceList => LIST ["ops",:traceList]
;        nil
;      varList:=
;        y:= LASSOC("vars",optionList) => LIST ["vars",:y]
;        nil
;      [:domainList,:opList,:varList]
;    optionList => [:traceList,:optionList]
;    traceList
;  _/TRACE_,0 [funName for funName in argument]
;  saveMapSig [funName for funName in argument]
\end{verbatim}

<<defun trace1>>=
(defun |trace1| (arg)
 (prog (|$traceNoisely| constructor |ops| |lops| temp1 opt a 
        |oldL| |newOptions| |domain| |traceList| |optionList| |domainList| 
        |opList| |y| |varList| |argument|)
  (declare (special |$traceNoisely|))
  (return
   (seq
    (progn 
     (setq |$traceNoisely| nil)
     (cond
      ((|hasOption| |$options| '|nonquietly|)
        (setq |$traceNoisely| t)))
     (cond
      ((|hasOption| |$options| '|off|)
       (cond
        ((or (setq |ops| (|hasOption| |$options| '|ops|))
             (setq |lops| (|hasOption| |$options| '|local|)))
          (cond
           ((null arg) (|throwKeyedMsg| 's2it0019 nil))
           (t
             (setq constructor
              (|unabbrev|
               (cond
                ((atom arg) arg)
                ((null (cdr arg))
                  (cond
                   ((atom (car arg)) (car arg))
                   (t (car (car arg)))))
                (t nil))))
             (cond
              ((null (|isFunctor| constructor))
                (|throwKeyedMsg| 's2it0020 nil))
              (t
                (cond (|ops| (setq |ops| (|getTraceOption| |ops|)) nil))
                (cond 
                 (|lops|
                  (setq |lops| (cdr (|getTraceOption| |lops|)))
                  (|untraceDomainLocalOps| constructor |lops|))
                 (t nil)))))))
        ((and (qslessp 1 (|#| |$options|))
              (null (|hasOption| |$options| '|nonquietly|)))
          (|throwKeyedMsg| 's2it0021 nil))
        (t (|untrace| arg))))
      ((|hasOption| |$options| '|stats|)
        (cond
         ((qslessp 1 (|#| |$options|))
          (|throwKeyedMsg| 's2it0001 (cons ")trace ... )stats" nil)))
         (t
           (setq temp1 (car |$options|))
           (setq opt (cdr temp1))
           (cond
            ((null opt)
              (|centerAndHighlight| "Traced function execution times" 78 '-)
              (|ptimers|)
              (say " ")
              (|centerAndHighlight| "Traced function execution counts" 78 '-)
              (|pcounters|))
            (t
              (|selectOptionLC| (car opt) '(|reset|) '|optionError|)
              (|resetSpacers|)
              (|resetTimers|)
              (|resetCounters|)
              (|throwKeyedMsg| 's2it0002 nil))))))
      ((setq a (|hasOption| |$options| '|restore|))
        (cond
         ((null (setq |oldL| |$lastUntraced|)) nil)
         (t
           (setq |newOptions| (|delete| a |$options|))
           (cond
            ((null arg) (|trace1| |oldL|))
            (t
             (do ((t0 arg (cdr t0)) (xl nil))
                 ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
              (seq
               (exit
                (cond
                 ((and (pairp x)
                       (progn
                        (setq |domain| (qcar x))
                        (setq |opList| (qcdr x))
                        t)
                       (vecp |domain|))
                   (|sayKeyedMsg| 's2it0003 (cons (|devaluate| |domain|) nil)))
                 (t
                   (setq |$options|
                    (append |newOptions| (lassoc x |$optionAlist|)))
                   (|trace1| (list x))))))))))))
      ((null arg) nil)
      ((and (pairp arg) (eq (qcdr arg) nil) (eq (qcar arg) '?)) (|?t|))
      (t
       (setq |traceList|
        (or
         (prog (t1)
          (setq t1 nil)
          (return
           (do ((t2 arg (cdr t2)) (x nil))
               ((or (atom t2) 
                    (progn (setq x (car t2)) nil))
                (nreverse0 t1))
            (seq
             (exit
              (setq t1 (cons (|transTraceItem| x) t1)))))))
         (return nil)))
       (do ((t3 |traceList| (cdr t3)) (x nil))
           ((or (atom t3) (progn (setq x (car t3)) nil)) nil)
         (seq
          (exit 
           (setq |$optionAlist| (addassoc x |$options| |$optionAlist|)))))
       (setq |optionList| (|getTraceOptions| |$options|))
       (setq |argument|
        (cond
         ((setq |domainList| (lassoc '|of| |optionList|))
           (cond
            ((lassoc '|ops| |optionList|)
              (|throwKeyedMsg| 's2it0004 nil))
            (t
              (setq |opList|
               (cond
                (|traceList| (list (cons '|ops| |traceList|)))
                (t nil)))
              (setq |varList|
               (cond
                ((setq |y| (lassoc '|vars| |optionList|))
                  (list (cons '|vars| |y|)))
                (t nil)))
              (append |domainList| (append |opList| |varList|)))))
         (|optionList| (append |traceList| |optionList|))
         (t |traceList|)))
       (|/TRACE,0|
        (prog (t4)
         (setq t4 nil)
         (return
          (do ((t5 |argument| (cdr t5)) (|funName| nil))
              ((or (atom t5) 
                   (progn (setq |funName| (car t5)) nil))
                (nreverse0 t4))
           (seq
            (exit
             (setq t4 (cons |funName| t4))))))))
       (|saveMapSig|
        (prog (t6)
         (setq t6 nil)
         (return
          (do ((t7 |argument| (cdr t7)) (|funName| nil))
              ((or (atom t7)
                   (progn (setq |funName| (car t7)) nil))
                (nreverse0 t6))
           (seq
            (exit
             (setq t6 (cons |funName| t6))))))))))))))) 

@

\subsection{defun getTraceOptions}
\begin{verbatim}
;getTraceOptions options ==
;  $traceErrorStack: local := nil
;  optionList:= [getTraceOption x for x in options]
;  $traceErrorStack =>
;    null rest $traceErrorStack =>
;      [key,parms] := first $traceErrorStack
;      throwKeyedMsg(key,['"",:parms])
;    throwListOfKeyedMsgs("S2IT0017",[# $traceErrorStack],
;      NREVERSE $traceErrorStack)
;  optionList
\end{verbatim}

<<defun getTraceOptions>>=
(defun |getTraceOptions| (|options|)
 (prog (|$traceErrorStack| |optionList| temp1 key |parms|)
  (declare (special |$traceErrorStack|))
  (return
   (seq
    (progn
     (setq |$traceErrorStack| nil)
     (setq |optionList|
      (prog (t0) 
       (setq t0 nil)
       (return
        (do ((t1 |options| (cdr t1)) (x nil))
            ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
         (seq
          (exit
           (setq t0 (cons (|getTraceOption| x) t0))))))))
     (cond
      (|$traceErrorStack|
       (cond
        ((null (cdr |$traceErrorStack|))
          (setq temp1 (car |$traceErrorStack|))
          (setq key (car temp1))
          (setq |parms| (cadr temp1))
          (|throwKeyedMsg| key (cons "" |parms|)))
        (t
          (|throwListOfKeyedMsgs| 's2it0017
           (cons (|#| |$traceErrorStack|) nil)
           (nreverse |$traceErrorStack|)))))
      (t |optionList|))))))) 

@

\subsection{defun saveMapSig}
\begin{verbatim}
;saveMapSig(funNames) ==
;  for name in funNames repeat
;    map:= RASSOC(name,$mapSubNameAlist) =>
;      $tracedMapSignatures:= ADDASSOC(name,getMapSig(map,name),
;        $tracedMapSignatures)
\end{verbatim}

<<defun saveMapSig>>=
(defun |saveMapSig| (|funNames|)
 (prog (|map|)
  (return
   (seq
    (do ((t0 |funNames| (cdr t0)) (|name| nil))
        ((or (atom t0) (progn (setq |name| (car t0)) nil)) nil)
     (seq
      (exit
       (cond
        ((setq |map| (|rassoc| |name| |$mapSubNameAlist|))
         (exit
          (setq |$tracedMapSignatures|
           (addassoc |name| (|getMapSig| |map| |name|)
                     |$tracedMapSignatures|)))))))))))) 

@

\subsection{defun getMapSig}
\begin{verbatim}
;getMapSig(mapName,subName) ==
;  lmms:= get(mapName,'localModemap,$InteractiveFrame) =>
;    for mm in lmms until sig repeat
;      CADR mm = subName => sig:= CDAR mm
;    sig
\end{verbatim}

<<defun getMapSig>>=
(defun |getMapSig| (|mapName| |subName|)
 (prog (|lmms| |sig|)
  (return
   (seq
    (cond
     ((setq |lmms| (|get| |mapName| '|localModemap| |$InteractiveFrame|))
      (exit
       (seq
        (do ((t0 |lmms| (cdr t0)) (|mm| nil) (t1 nil |sig|))
            ((or (atom t0) (progn (setq |mm| (car t0)) nil) t1) nil)
         (seq
          (exit
           (cond 
            ((boot-equal (cadr |mm|) |subName|)
              (exit 
               (setq |sig| (cdar |mm|))))))))
        (exit |sig|))))))))) 

@

\subsection{defun getTraceOption}
\begin{verbatim}
;getTraceOption (x is [key,:l]) ==
;  key:= selectOptionLC(key,$traceOptionList,'traceOptionError)
;  x := [key,:l]
;  MEMQ(key,'(nonquietly timer nt)) => x
;  key='break =>
;    null l => ['break,'before]
;    opts := [selectOptionLC(y,'(before after),NIL) for y in l]
;    and/[IDENTP y for y in opts] => ['break,:opts]
;    stackTraceOptionError ["S2IT0008",NIL]
;  key='restore =>
;    null l => x
;    stackTraceOptionError ["S2IT0009",[STRCONC('")",object2String key)]]
;  key='only => ['only,:transOnlyOption l]
;  key='within =>
;    l is [a] and IDENTP a => x
;    stackTraceOptionError ["S2IT0010",['")within"]]
;  MEMQ(key,'(cond before after)) =>
;    key:=
;      key="cond" => "when"
;      key
;    l is [a] => [key,:l]
;    stackTraceOptionError ["S2IT0011",[STRCONC('")",object2String key)]]
;  key='depth =>
;    l is [n] and FIXP n => x
;    stackTraceOptionError ["S2IT0012",['")depth"]]
;  key='count =>
;    (null l) or (l is [n] and FIXP n) => x
;    stackTraceOptionError ["S2IT0012",['")count"]]
;  key="of" =>
;    ["of",:[hn y for y in l]] where
;      hn x ==
;        atom x and not UPPER_-CASE_-P (STRINGIMAGE x).(0) =>
;          isDomainOrPackage EVAL x => x
;          stackTraceOptionError ["S2IT0013",[x]]
;        g:= domainToGenvar x => g
;        stackTraceOptionError ["S2IT0013",[x]]
;  MEMQ(key,'(local ops vars)) =>
;    null l or l is ["all"] => [key,:"all"]
;    isListOfIdentifiersOrStrings l => x
;    stackTraceOptionError ["S2IT0015",[STRCONC('")",object2String key)]]
;  key='varbreak =>
;    null l or l is ["all"] => ["varbreak",:"all"]
;    isListOfIdentifiers l => x
;    stackTraceOptionError ["S2IT0016",[STRCONC('")",object2String key)]]
;  key='mathprint =>
;    null l => x
;    stackTraceOptionError ["S2IT0009",[STRCONC('")",object2String key)]]
;  key => throwKeyedMsg("S2IT0005",[key])
\end{verbatim}

<<defun getTraceOption,hn>>=
(defun |getTraceOption,hn| (x)
 (prog (|g|)
  (return
   (seq
    (if (and (atom x) (null (upper-case-p (elt (stringimage x) 0))))
     (exit
      (seq
       (if (|isDomainOrPackage| (eval x)) (exit x))
       (exit 
        (|stackTraceOptionError|
         (cons 's2it0013 (cons (cons x nil) nil)))))))
    (if (setq |g| (|domainToGenvar| x)) (exit |g|))
    (exit
     (|stackTraceOptionError| (cons 's2it0013 (cons (cons x nil) nil)))))))) 

@

<<defun getTraceOption>>=
(defun |getTraceOption| (arg)
 (prog (|l| |opts| key a |n|)
  (return
   (seq
    (progn
     (setq key (car arg))
     (setq |l| (cdr arg))
     (setq key
       (|selectOptionLC| key |$traceOptionList| '|traceOptionError|))
     (setq arg (cons key |l|))
     (cond
      ((memq key '(|nonquietly| |timer| |nt|)) arg)
      ((eq key '|break|)
       (cond
        ((null |l|) (cons '|break| (cons '|before| nil)))
        (t
          (setq |opts|
           (prog (t0)
            (setq t0 nil)
            (return
             (do ((t1 |l| (cdr t1)) (|y| nil))
                 ((or (atom t1)
                      (progn (setq |y| (car t1)) nil))
                    (nreverse0 t0))
              (seq 
               (exit 
                (setq t0 
                 (cons 
                  (|selectOptionLC| |y| '(|before| |after|) nil) t0))))))))
          (cond
           ((prog (t2)
             (setq t2 t)
             (return 
              (do ((t3 nil (null t2)) (t4 |opts| (cdr t4)) (|y| nil))
                  ((or t3 (atom t4) (progn (setq |y| (car t4)) nil)) t2)
                 (seq
                  (exit
                   (setq t2 (and t2 (identp |y|))))))))
              (cons '|break| |opts|))
           (t
            (|stackTraceOptionError| (cons 's2it0008 (cons nil nil))))))))
      ((eq key '|restore|)
       (cond
        ((null |l|) arg)
        (t 
         (|stackTraceOptionError| 
          (cons 's2it0009 
           (cons (cons (strconc ")" (|object2String| key)) nil) nil))))))
      ((eq key '|only|) (cons '|only| (|transOnlyOption| |l|)))
      ((eq key '|within|)
        (cond
         ((and (pairp |l|) 
               (eq (qcdr |l|) nil)
               (progn (setq a (qcar |l|)) t)
               (identp a))
           arg)
         (t 
           (|stackTraceOptionError| 
            (cons 's2it0010 (cons (cons ")within" nil) nil))))))
      ((memq key '(|cond| |before| |after|))
        (setq key 
         (cond 
          ((eq key '|cond|) '|when|)
          (t key)))
        (cond
         ((and (pairp |l|) 
               (eq (qcdr |l|) nil)
               (progn (setq a (qcar |l|)) t))
            (cons key |l|))
         (t 
          (|stackTraceOptionError|
           (cons 's2it0011
            (cons
             (cons (strconc ")"
              (|object2String| key)) nil) nil))))))
      ((eq key '|depth|)
        (cond 
         ((and (pairp |l|) 
               (eq (qcdr |l|) nil)
               (progn (setq |n| (qcar |l|)) t)
               (fixp |n|))
           arg)
         (t 
          (|stackTraceOptionError| 
           (cons 's2it0012 (cons (cons ")depth" nil) nil))))))
      ((eq key '|count|)
        (cond 
         ((or (null |l|) 
              (and (pairp |l|) 
                   (eq (qcdr |l|) nil)
                   (progn (setq |n| (qcar |l|)) t)
                   (fixp |n|)))
            arg)
         (t 
          (|stackTraceOptionError|
            (cons 's2it0012 (cons (cons ")count" nil) nil))))))
      ((eq key '|of|)
        (cons '|of|
         (prog (t5)
          (setq t5 nil)
          (return
           (do ((t6 |l| (cdr t6)) (|y| nil))
               ((or (atom t6) (progn (setq |y| (car t6)) nil)) (nreverse0 t5))
            (seq
             (exit
              (setq t5 (cons (|getTraceOption,hn| |y|) t5)))))))))
      ((memq key '(|local| |ops| |vars|))
        (cond
         ((or (null |l|)
              (and (pairp |l|) (eq (qcdr |l|) nil) (eq (qcar |l|) '|all|)))
           (cons key '|all|))
         ((|isListOfIdentifiersOrStrings| |l|) arg)
         (t
           (|stackTraceOptionError|
            (cons 's2it0015
             (cons
              (cons (strconc ")" (|object2String| key)) nil) nil))))))
      ((eq key '|varbreak|)
        (cond
         ((or (null |l|) 
              (and (pairp |l|) (eq (qcdr |l|) nil) (eq (qcar |l|) '|all|)))
           (cons '|varbreak| '|all|))
         ((|isListOfIdentifiers| |l|) arg)
         (t
           (|stackTraceOptionError|
            (cons 's2it0016
             (cons
              (cons (strconc ")" (|object2String| key)) nil) nil))))))
      ((eq key '|mathprint|)
        (cond
         ((null |l|) arg)
         (t
           (|stackTraceOptionError|
            (cons 's2it0009
             (cons
              (cons (strconc ")" (|object2String| key)) nil) nil))))))
      (key (|throwKeyedMsg| 's2it0005 (CONS key nil))))))))) 

@

\subsection{defun traceOptionError}
\begin{verbatim}
;traceOptionError(opt,keys) ==
;  null keys => stackTraceOptionError ["S2IT0007",[opt]]
;  commandAmbiguityError("trace option",opt,keys)
\end{verbatim}

<<defun traceOptionError>>=
(defun |traceOptionError| (opt |keys|)
 (cond
  ((null |keys|)
    (|stackTraceOptionError| (cons 's2it0007 (cons (cons opt nil) nil))))
  (t
   (|commandAmbiguityError| '|trace option| opt |keys|)))) 

@

\subsection{defun resetTimers}
\begin{verbatim}
;resetTimers () ==
;  for timer in _/TIMERLIST repeat
;    SET(INTERN STRCONC(timer,'"_,TIMER"),0)
\end{verbatim}

<<defun resetTimers>>=
(defun |resetTimers| ()
 (seq
  (do ((t0 /timerlist (cdr t0)) (|timer| nil))
      ((or (atom t0) (progn (setq |timer| (car t0)) nil)) nil)
   (seq
    (exit
     (set (intern (strconc |timer| ",TIMER")) 0)))))) 

@

\subsection{defun resetSpacers}
\begin{verbatim}
;resetSpacers () ==
;  for spacer in _/SPACELIST repeat
;    SET(INTERN STRCONC(spacer,'"_,SPACE"),0)
\end{verbatim}

<<defun resetSpacers>>=
(defun |resetSpacers| ()
 (seq
  (do ((t0 /spacelist (cdr t0)) (|spacer| nil))
      ((or (atom t0) (progn (setq |spacer| (car t0)) nil)) nil)
   (seq
    (exit
     (set (intern (strconc |spacer| ",SPACE")) 0)))))) 

@
\subsection{defun resetCounters}
\begin{verbatim}
;resetCounters () ==
;  for k in _/COUNTLIST repeat
;    SET(INTERN STRCONC(k,'"_,COUNT"),0)
\end{verbatim}

<<defun resetCounters>>=
(defun |resetCounters| ()
 (seq
  (do ((t0 /countlist (cdr t0)) (|k| nil))
      ((or (atom t0) (progn (setq |k| (car t0)) nil)) nil)
    (seq
     (exit
      (set (intern (strconc |k| ",COUNT")) 0)))))) 

@

\subsection{defun ptimers}
\begin{verbatim}
;ptimers() ==
;  null _/TIMERLIST => sayBrightly '"   no functions are timed"
;  for timer in _/TIMERLIST repeat
;    sayBrightly ["  ",:bright timer,'_:,'" ",
;      EVAL(INTERN STRCONC(timer,'"_,TIMER")) / float $timerTicksPerSecond,'" sec."]
\end{verbatim}

<<defun ptimers>>=
(defun |ptimers| ()
 (seq
  (cond
   ((null /timerlist) (|sayBrightly| "   no functions are timed"))
   (t
    (do ((t0 /timerlist (cdr t0)) (|timer| nil))
        ((or (atom t0) (progn (setq |timer| (car t0)) nil)) nil)
     (seq
      (exit
       (|sayBrightly|
        (cons "  "
         (append
          (|bright| |timer|)
          (cons '|:|
           (cons " "
            (cons 
             (quotient
              (eval (intern (strconc |timer| ",TIMER")))
              (|float| |$timerTicksPerSecond|))
             (cons " sec." nil)))))))))))))) 

@

\subsection{defun pspacers}
\begin{verbatim}
;pspacers() ==
;  null _/SPACELIST => sayBrightly '"   no functions have space monitored"
;  for spacer in _/SPACELIST repeat
;    sayBrightly ["  ",:bright spacer,'_:,'" ",
;      EVAL INTERN STRCONC(spacer,'"_,SPACE"),'" bytes"]
\end{verbatim}

<<defun pspacers>>=
(defun |pspacers| ()
 (seq
  (cond
   ((null /spacelist) (|sayBrightly| "   no functions have space monitored"))
   (t
    (do ((t0 /spacelist (cdr t0)) (|spacer| nil))
        ((or (atom t0) (progn (setq |spacer| (car t0)) nil)) nil)
     (seq
      (exit
       (|sayBrightly|
        (cons "  "
         (append
          (|bright| |spacer|)
          (cons '|:|
           (cons " "
            (cons 
             (eval (intern (strconc |spacer| ",SPACE")))
             (cons " bytes" nil)))))))))))))) 

@

\subsection{defun pcounters}
\begin{verbatim}
;pcounters() ==
;  null _/COUNTLIST => sayBrightly '"   no functions are being counted"
;  for k in _/COUNTLIST repeat
;    sayBrightly ["  ",:bright k,'_:,'" ",
;      EVAL INTERN STRCONC(k,'"_,COUNT"),'" times"]
\end{verbatim}

<<defun pcounters>>=
(defun |pcounters| ()
 (seq
  (cond
   ((null /countlist) (|sayBrightly| "   no functions are being counted"))
   (t
    (do ((t0 /countlist (cdr t0)) (|k| nil))
        ((or (atom t0) (progn (setq |k| (car t0)) nil)) nil)
     (seq
      (exit
       (|sayBrightly|
        (cons "  "
         (append
          (|bright| |k|)
          (cons '|:|
           (cons " "
            (cons
             (eval (intern (strconc |k| ",COUNT")))
             (cons " times" nil)))))))))))))) 

@

\subsection{defun transOnlyOption}
\begin{verbatim}
;transOnlyOption l ==
;  l is [n,:y] =>
;    FIXP n => [n,:transOnlyOption y]
;    MEMQ(n:= UPCASE n,'(V A C)) => [n,:transOnlyOption y]
;    stackTraceOptionError ["S2IT0006",[n]]
;    transOnlyOption y
;  nil
\end{verbatim}

<<defun transOnlyOption>>=
(defun |transOnlyOption| (arg)
 (prog (|y| |n|)
  (return
   (cond
    ((and (pairp arg) 
          (progn (setq |n| (qcar arg)) (setq |y| (qcdr arg)) t))
      (cond
       ((fixp |n|)
         (cons |n| (|transOnlyOption| |y|)))
       ((memq (setq |n| (upcase |n|)) '(V A C))
         (cons |n| (|transOnlyOption| |y|)))
       (t 
         (|stackTraceOptionError|
           (cons 's2it0006 (cons (cons |n| nil) nil)))
         (|transOnlyOption| |y|))))
    (t nil))))) 

@

\subsection{defun stackTraceOptionError}
<<defun stackTraceOptionError>>=
(defun |stackTraceOptionError| (x)
 (push x |$traceErrorStack|)
 nil)

@

\subsection{defun removeOption}
\begin{verbatim}
;removeOption(op,options) ==
;  [optEntry for (optEntry:=[opt,:.]) in options | opt ^= op]
\end{verbatim}

<<defun removeOption>>=
(defun |removeOption| (|op| |options|)
 (prog (opt)
  (return
   (seq
    (prog (t0)
     (setq t0 nil)
     (return
      (do ((t1 |options| (cdr t1)) (|optEntry| nil))
          ((or (atom t1)
               (progn (setq |optEntry| (car t1)) nil)
               (progn (progn (setq opt (CAR |optEntry|)) |optEntry|) nil))
        (nreverse0 t0))
       (seq
        (exit
         (cond
          ((nequal opt |op|) (setq t0 (cons |optEntry| t0))))))))))))) 

@

\subsection{defun domainToGenvar}
\begin{verbatim}
;domainToGenvar x ==
;  $doNotAddEmptyModeIfTrue: local:= true
;  (y:= unabbrevAndLoad x) and GETDATABASE(opOf y,'CONSTRUCTORKIND) = 'domain =>
;    g:= genDomainTraceName y
;    SET(g,evalDomain y)
;    g
\end{verbatim}

<<defun domainToGenvar>>=
(defun |domainToGenvar| (arg)
 (prog (|$doNotAddEmptyModeIfTrue| |y| |g|)
  (declare (special |$doNotAddEmptyModeIfTrue|))
  (return
   (progn
    (setq |$doNotAddEmptyModeIfTrue| t)
    (cond
     ((and (setq |y| (|unabbrevAndLoad| arg))
           (eq (getdatabase (|opOf| |y|) 'constructorkind) '|domain|))
       (progn
        (setq |g| (|genDomainTraceName| |y|))
        (set |g| (|evalDomain| |y|)) |g|))))))) 

@

\subsection{defun genDomainTraceName}
\begin{verbatim}
;genDomainTraceName y ==
;  u:= LASSOC(y,$domainTraceNameAssoc) => u
;  g:= GENVAR()
;  $domainTraceNameAssoc:= [ [y,:g],:$domainTraceNameAssoc]
;  g
\end{verbatim}

<<defun genDomainTraceName>>=
(defun |genDomainTraceName| (y)
 (prog (u g)
  (return
   (cond
    ((setq u (lassoc y |$domainTraceNameAssoc|)) u)
    (t
     (setq g (genvar))
     (setq |$domainTraceNameAssoc|
      (cons (cons y g) |$domainTraceNameAssoc|))
     g))))) 

@

\subsection{defun untrace}
\begin{verbatim}
;--this is now called from trace with the )off option
;untrace l ==
;  $lastUntraced:=
;    null l => COPY _/TRACENAMES
;    l
;  untraceList:= [transTraceItem x for x in l]
;  _/UNTRACE_,0 [lassocSub(funName,$mapSubNameAlist) for
;      funName in untraceList]
;  removeTracedMapSigs untraceList
\end{verbatim}

<<defun untrace>>=
(defun |untrace| (arg)
 (prog (|untraceList|)
  (return
   (seq
    (progn
     (setq |$lastUntraced| (cond ((null arg) (copy /tracenames)) (t arg)))
     (setq |untraceList|
      (prog (t0)
       (setq t0 nil)
       (return
        (do ((t1 arg (cdr t1)) (x nil))
            ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
         (seq
          (exit
           (setq t0 (cons (|transTraceItem| x) t0))))))))
     (|/UNTRACE,0|
      (prog (t2)
       (setq t2 nil)
       (return
        (do ((t3 |untraceList|l (cdr t3)) (|funName| nil))
            ((or (atom t3) 
                 (progn (setq |funName| (car t3)) nil))
           (nreverse0 t2))
         (seq
          (exit
           (setq t2 (cons (|lassocSub| |funName| |$mapSubNameAlist|) t2))))))))
     (|removeTracedMapSigs| |untraceList|)))))) 

@

\subsection{defun transTraceItem}
\begin{verbatim}
;transTraceItem x ==
;  $doNotAddEmptyModeIfTrue: local:=true
;  atom x =>
;    (value:=get(x,"value",$InteractiveFrame)) and
;      (objMode value in '((Mode) (Domain) (SubDomain (Domain)))) =>
;        x := objVal value
;        (y:= domainToGenvar x) => y
;        x
;    UPPER_-CASE_-P (STRINGIMAGE x).(0) =>
;      y := unabbrev x
;      constructor?(y) => y
;      PAIRP(y) and constructor?(CAR y) => CAR y
;      (y:= domainToGenvar x) => y
;      x
;    x
;  VECP first x => transTraceItem devaluate first x
;  y:= domainToGenvar x => y
;  throwKeyedMsg("S2IT0018",[x])
\end{verbatim}

<<defun transTraceItem>>=
(defun |transTraceItem| (x)
 (prog (|$doNotAddEmptyModeIfTrue| |value| |y|)
  (declare (special |$doNotAddEmptyModeIfTrue|))
  (return
   (progn
    (setq |$doNotAddEmptyModeIfTrue| t)
    (cond
     ((atom x)
       (cond
        ((and (setq |value| (|get| x '|value| |$InteractiveFrame|))
              (|member| (|objMode| |value|)
                '((|Mode|) (|Domain|) (|SubDomain| (|Domain|)))))
          (setq x (|objVal| |value|))
          (cond 
           ((setq |y| (|domainToGenvar| x)) |y|)
           (t x)))
        ((upper-case-p (elt (stringimage x) 0))
          (setq |y| (|unabbrev| x))
          (cond
           ((|constructor?| |y|) |y|)
           ((and (pairp |y|) (|constructor?| (car |y|))) (car |y|))
           ((setq |y| (|domainToGenvar| x)) |y|)
           (t x)))
        (t x)))
     ((vecp (car x)) (|transTraceItem| (|devaluate| (car x))))
     ((setq |y| (|domainToGenvar| x)) |y|)
     (t (|throwKeyedMsg| 's2it0018 (cons x nil)))))))) 

@

\subsection{defun removeTracedMapSigs}
\begin{verbatim}
;removeTracedMapSigs untraceList ==
;  for name in untraceList repeat
;    REMPROP(name,$tracedMapSignatures)
\end{verbatim}

<<defun removeTracedMapSigs>>=
(defun |removeTracedMapSigs| (|untraceList|)
 (seq
  (do ((t0 |untraceList| (cdr t0)) (|name| nil))
      ((or (atom t0) (progn (setq |name| (car t0)) nil)) nil)
   (seq
    (exit
     (remprop |name| |$tracedMapSignatures|)))))) 

@

\subsection{defun coerceTraceArgs2E}
\begin{verbatim}
;coerceTraceArgs2E(traceName,subName,args) ==
;  MEMQ(name:= subName,$mathTraceList) =>
;    SPADSYSNAMEP PNAME name => coerceSpadArgs2E(reverse CDR reverse args)
;    [ ["=",name,objValUnwrap coerceInteractive(objNewWrap(arg,type),$OutputForm)]
;      for name in '(arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 )
;       for arg in args for type in CDR LASSOC(subName,
;        $tracedMapSignatures)]
;  SPADSYSNAMEP PNAME name => reverse CDR reverse args
;  args
\end{verbatim}

<<defun coerceTraceArgs2E>>=
(defun |coerceTraceArgs2E| (|traceName| |subName| args)
 (prog (|name|)
  (return
   (seq
    (cond
     ((memq (setq |name| |subName|) |$mathTraceList|)
       (cond
        ((spadsysnamep (pname |name|))
          (|coerceSpadArgs2E| (reverse (cdr (reverse args)))))
        (t
         (prog (t0)
          (setq t0 nil)
          (return
           (do ((t1 '(|arg1| |arg2| |arg3| |arg4| |arg5| |arg6| |arg7| |arg8| 
                      |arg9| |arg10| |arg11| |arg12| |arg13| |arg14| |arg15| 
                      |arg16| |arg17| |arg18| |arg19|) (cdr t1))
                (|name| nil)
                (t2 args (cdr t2))
                (arg nil)
                (t3 (cdr (lassoc |subName| |$tracedMapSignatures|)) (cdr t3))
                (type nil))
               ((or (atom t1)
                    (progn (setq |name| (car t1)) nil)
                    (atom t2)
                    (progn (setq arg (car t2)) nil)
                    (atom t3)
                    (progn (setq type (car t3)) nil)) 
                  (nreverse0 t0))
             (seq
              (exit 
               (setq t0
                (cons
                 (cons '= 
                  (cons |name| 
                   (cons (|objValUnwrap|
                     (|coerceInteractive|
                      (|objNewWrap| arg type) |$OutputForm|))
                        nil)))
                     t0))))))))))
     ((spadsysnamep (pname |name|)) (reverse (cdr (reverse args))))
     (t args)))))) 

@

\subsection{defun coerceSpadArgs2E}
\begin{verbatim}
;coerceSpadArgs2E(args) ==
;  -- following binding is to prevent forcing calculation of stream elements
;  $streamCount:local := 0
;  [ ["=",name,objValUnwrap coerceInteractive(objNewWrap(arg,type),$OutputForm)]
;      for name in '(arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 )
;        for arg in args for type in CDR $tracedSpadModemap]
\end{verbatim}

<<defun coerceSpadArgs2E>>=
(defun |coerceSpadArgs2E| (args)
 (prog (|$streamCount|)
  (declare (special |$streamCount|))
  (return
   (seq
    (progn 
     (setq |$streamCount| 0)
     (prog (t0)
      (setq t0 nil)
      (return
       (do ((t1 '(|arg1| |arg2| |arg3| |arg4| |arg5| |arg6| |arg7| |arg8| 
                  |arg9| |arg10| |arg11| |arg12| |arg13| |arg14| |arg15| 
                  |arg16| |arg17| |arg18| |arg19|) (cdr t1))
            (name nil)
            (t2 args (cdr t2))
            (arg nil)
            (t3 (cdr |$tracedSpadModemap|) (cdr t3))
            (type nil))
           ((or (atom t1)
                (progn (setq name (car t1)) nil)
                (atom t2)
                (progn (setq arg (car t2)) nil)
                (atom t3)
                (progn (setq type (car t3)) nil))
             (nreverse0 t0))
         (seq
          (exit
           (setq t0
            (cons
             (cons '=
              (cons name
               (cons (|objValUnwrap|
                 (|coerceInteractive| 
                  (|objNewWrap| arg type)
                  |$OutputForm|)) nil)))
              t0)))))))))))) 

@

\subsection{defun subTypes}
\begin{verbatim}
;subTypes(mm,sublist) ==
;  ATOM mm =>
;    (s:= LASSOC(mm,sublist)) => s
;    mm
;  [subTypes(m,sublist) for m in mm]
\end{verbatim}

<<defun subTypes>>=
(defun |subTypes| (|mm| |sublist|)
 (prog (s)
  (return
   (seq
    (cond
     ((atom |mm|) 
       (cond ((setq s (lassoc |mm| |sublist|)) s) (t |mm|)))
     (t
      (prog (t0)
       (setq t0 nil)
       (return
        (do ((t1 |mm| (cdr t1)) (|m| nil))
            ((or (atom t1) (progn (setq |m| (car t1)) nil)) (nreverse0 t0))
         (seq
          (exit
           (setq t0 (cons (|subTypes| |m| |sublist|) t0))))))))))))) 

@

\subsection{defun coerceTraceFunValue2E}
\begin{verbatim}
;coerceTraceFunValue2E(traceName,subName,value) ==
;  MEMQ(name:= subName,$mathTraceList) =>
;    SPADSYSNAMEP PNAME traceName => coerceSpadFunValue2E(value)
;    (u:=LASSOC(subName,$tracedMapSignatures)) =>
;      objValUnwrap coerceInteractive(objNewWrap(value,CAR u),$OutputForm)
;    value
;  value
\end{verbatim}

<<defun coerceTraceFunValue2E>>=
(defun |coerceTraceFunValue2E| (|traceName| |subName| |value|)
 (prog (name |u|)
  (return
   (cond
    ((memq (setq name |subName|) |$mathTraceList|)
      (cond
       ((spadsysnamep (pname |traceName|)) (|coerceSpadFunValue2E| |value|))
       ((setq |u| (lassoc |subName| |$tracedMapSignatures|))
         (|objValUnwrap|
          (|coerceInteractive|
           (|objNewWrap| |value| (CAR |u|))
             |$OutputForm|)))
       (t |value|)))
    (t |value|))))) 

@

\subsection{defun coerceSpadFunValue2E}
\begin{verbatim}
;coerceSpadFunValue2E(value) ==
;  -- following binding is to prevent forcing calculation of stream elements
;  $streamCount:local := 0
;  objValUnwrap coerceInteractive(objNewWrap(value,CAR $tracedSpadModemap),
;    $OutputForm)
\end{verbatim}

<<defun coerceSpadFunValue2E>>=
(defun |coerceSpadFunValue2E| (|value|)
 (prog (|$streamCount|)
  (declare (special |$streamCount|))
  (return
   (progn
    (setq |$streamCount| 0)
    (|objValUnwrap|
     (|coerceInteractive|
      (|objNewWrap| |value| (CAR |$tracedSpadModemap|))
      |$OutputForm|)))))) 

@

\subsection{defun isListOfIdentifiers}
\begin{verbatim}
;isListOfIdentifiers l == and/[IDENTP x for x in l]
\end{verbatim}

<<defun isListOfIdentifiers>>=
(defun |isListOfIdentifiers| (arg)
 (prog () 
  (return
   (seq
    (prog (t0)
     (setq t0 t)
     (return
      (do ((t1 nil (null t0)) (t2 arg (cdr t2)) (x nil))
          ((or t1 (atom t2) (progn (setq x (car t2)) nil)) t0)
       (seq
        (exit
         (setq t0 (and t0 (identp x)))))))))))) 

@

\subsection{defun isListOfIdentifiersOrStrings}
\begin{verbatim}
;isListOfIdentifiersOrStrings l == and/[IDENTP x or STRINGP x for x in l]
\end{verbatim}

<<defun isListOfIdentifiersOrStrings>>=
(defun |isListOfIdentifiersOrStrings| (arg)
 (prog () 
  (return
   (seq
    (prog (t0)
     (setq t0 t)
     (return
      (do ((t1 nil (null t0)) (t2 arg (cdr t2)) (x nil))
          ((or t1 (atom t2) (progn (setq x (car t2)) nil)) t0)
       (seq
        (exit
         (setq t0 (and t0 (or (identp x) (stringp x))))))))))))) 

@

\subsection{defun getMapSubNames}
\begin{verbatim}
;getMapSubNames(l) ==
;  subs:= nil
;  for mapName in l repeat
;    lmm:= get(mapName,'localModemap,$InteractiveFrame) =>
;      subs:= APPEND([ [mapName,:CADR mm] for mm in lmm],subs)
;  UNION(subs,getPreviousMapSubNames UNIONQ(_/TRACENAMES,
;    $lastUntraced))
\end{verbatim}

<<defun getMapSubNames>>=
(defun |getMapSubNames| (arg)
 (prog (|lmm| |subs|)
  (return
   (seq
    (progn
     (setq |subs| nil)
     (seq
      (do ((t0 arg (cdr t0)) (|mapName| nil))
          ((or (atom t0) (progn (setq |mapName| (CAR t0)) nil)) nil)
       (seq
        (exit
         (cond
          ((setq |lmm|
            (|get| |mapName| '|localModemap| |$InteractiveFrame|))
           (exit
            (setq |subs|
             (append
              (prog (t1)
               (setq t1 nil)
               (return
                (do ((t2 |lmm| (cdr t2)) (|mm| nil))
                    ((or (atom t2)
                         (progn (setq |mm| (CAR t2)) nil)) (nreverse0 t1))
                 (seq
                  (exit
                   (setq t1 (cons (cons |mapName| (cadr |mm|)) t1)))))))
              |subs|))))))))
      (|union| |subs|
        (|getPreviousMapSubNames| (unionq /tracenames |$lastUntraced|))))))))) 

@

\subsection{defun getPreviousMapSubNames}
\begin{verbatim}
;getPreviousMapSubNames(traceNames) ==
;  subs:= nil
;  for mapName in ASSOCLEFT CAAR $InteractiveFrame repeat
;    lmm:= get(mapName,'localModemap,$InteractiveFrame) =>
;      MEMQ(CADAR lmm,traceNames) =>
;        for mm in lmm repeat
;          subs:= [ [mapName,:CADR mm],:subs]
;  subs
\end{verbatim}

<<defun getPreviousMapSubNames>>=
(defun |getPreviousMapSubNames| (|traceNames|)
 (prog (|lmm| |subs|)
  (return
   (seq
    (progn
     (setq |subs| nil)
     (seq
      (do ((t0 (assocleft (caar |$InteractiveFrame|)) (cdr t0))
           (|mapName| nil))
          ((or (atom t0) (progn (setq |mapName| (car t0)) nil)) nil)
       (seq
        (exit
         (cond
          ((setq |lmm|
             (|get| |mapName| '|localModemap| |$InteractiveFrame|))
            (exit
             (cond
              ((memq (cadar |lmm|) |traceNames|)
               (exit
                (do ((t1 |lmm| (cdr t1)) (|mm| nil))
                    ((or (atom t1) (progn (setq |mm| (car t1)) nil)) nil)
                 (seq
                  (exit
                   (setq |subs|
                    (cons (cons |mapName| (cadr |mm|)) |subs|))))))))))))))
      (exit |subs|))))))) 

@

\subsection{defun lassocSub}
\begin{verbatim}
;lassocSub(x,subs)  ==
;  y:= LASSQ(x,subs) => y
;  x
\end{verbatim}

<<defun lassocSub>>=
(defun |lassocSub| (x |subs|)
 (prog (|y|) 
  (return 
   (cond 
    ((setq |y| (lassq x |subs|)) |y|)
    (t x))))) 

@

\subsection{defun rassocSub}
\begin{verbatim}
;rassocSub(x,subs) ==
;  y:= RASSOC(x,subs) => y
;  x
\end{verbatim}

<<defun rassocSub>>=
(defun |rassocSub| (x |subs|)
 (prog (|y|)
  (return
   (cond
    ((setq |y| (|rassoc| x |subs|)) |y|)
    (t x))))) 

@

\subsection{defun isUncompiledMap}
\begin{verbatim}
;isUncompiledMap(x) ==
;  y:= get(x,'value,$InteractiveFrame) =>
;    (CAAR y) = 'MAP and null get(x,'localModemap,$InteractiveFrame)
\end{verbatim}

<<defun isUncompiledMap>>=
(defun |isUncompiledMap| (x)
 (prog (y)
  (return
   (seq 
    (cond
     ((setq y (|get| x '|value| |$InteractiveFrame|))
       (exit
        (and
         (eq (caar y) 'map)
         (null (|get| x '|localModemap| |$InteractiveFrame|)))))))))) 

@

\subsection{defun isInterpOnlyMap}
\begin{verbatim}
;isInterpOnlyMap(map) ==
;  x:= get(map,'localModemap,$InteractiveFrame) =>
;    (CAAAR x) = 'interpOnly
\end{verbatim}

<<defun isInterpOnlyMap>>=
(defun |isInterpOnlyMap| (map)
 (prog (x)
  (return
   (seq
    (cond
     ((setq x (|get| map '|localModemap| |$InteractiveFrame|))
      (exit
       (eq (caaar x) '|interpOnly|)))))))) 

@

\subsection{defun augmentTraceNames}
\begin{verbatim}
;augmentTraceNames(l,mapSubNames) ==
;  res:= nil
;  for traceName in l repeat
;    mml:= get(traceName,'localModemap,$InteractiveFrame) =>
;      res:= APPEND([CADR mm for mm in mml],res)
;    res:= [traceName,:res]
;  res
\end{verbatim}

<<defun augmentTraceNames>>=
(defun |augmentTraceNames| (arg |mapSubNames|)
 (prog (|mml| |res|)
  (return
   (seq
    (progn
     (setq |res| nil)
     (do ((t0 arg (cdr t0)) (|traceName| nil))
         ((or (atom t0) (progn (setq |traceName| (car t0)) nil)) nil)
      (seq
       (exit
        (cond
         ((setq |mml|
            (|get| |traceName| '|localModemap| |$InteractiveFrame|))
           (setq |res|
            (append
             (prog (t1)
              (setq t1 nil)
              (return
               (do ((t2 |mml| (cdr t2)) (|mm| nil))
                   ((or (atom t2) 
                        (progn (setq |mm| (CAR t2)) nil))
                     (nreverse0 t1))
                (seq
                 (exit 
                  (setq t1 (cons (cadr |mm|) t1)))))))
            |res|)))
         (t (setq |res| (cons |traceName| |res|)))))))
     |res|))))) 
@

\subsection{defun isSubForRedundantMapName}
\begin{verbatim}
;isSubForRedundantMapName(subName) ==
;  mapName:= rassocSub(subName,$mapSubNameAlist) =>
;    tail:=MEMBER([mapName,:subName],$mapSubNameAlist) =>
;      MEMQ(mapName,CDR ASSOCLEFT tail)
\end{verbatim}

<<defun isSubForRedundantMapName>>=
(defun |isSubForRedundantMapName| (|subName|)
 (prog (|mapName| |tail|)
  (return
   (seq
    (cond
     ((setq |mapName| (|rassocSub| |subName| |$mapSubNameAlist|))
       (exit
        (cond
         ((setq |tail|
            (|member| (cons |mapName| |subName|) |$mapSubNameAlist|))
           (exit
            (memq |mapName| (cdr (assocleft |tail|))))))))))))) 

@

\subsection{defun untraceMapSubNames}
\begin{verbatim}
;untraceMapSubNames traceNames ==
;  null($mapSubNameAlist:local:= getPreviousMapSubNames traceNames) => nil
;  for name in (subs:= ASSOCRIGHT $mapSubNameAlist)
;    | MEMQ(name,_/TRACENAMES) repeat
;      _/UNTRACE_,2(name,nil)
;      $lastUntraced:= SETDIFFERENCE($lastUntraced,subs)
\end{verbatim}

<<defun untraceMapSubNames>>=
(defun |untraceMapSubNames| (|traceNames|)
 (prog (|$mapSubNameAlist| |subs|)
  (declare (special |$mapSubNameAlist|))
  (return
   (seq
    (cond
     ((null
        (setq |$mapSubNameAlist| (|getPreviousMapSubNames| |traceNames|)))
       nil)
     (t
      (do ((t0 (setq |subs| (assocright |$mapSubNameAlist|)) (CDR t0))
           (name nil))
          ((or (atom t0) (progn (setq name (car t0)) nil)) nil)
       (seq
        (exit
         (cond
          ((memq name /tracenames)
           (progn
            (|/UNTRACE,2| name nil)
            (setq |$lastUntraced|
             (setdifference |$lastUntraced| |subs|)))))))))))))) 

@

\subsection{defmacro funfind}
\begin{verbatim}
;funfind("functor","opname") ==
;  ops:= isFunctor functor
;  [u for u in ops | u is [[ =opname,:.],:.]]
\end{verbatim}

<<defun funfind,LAM>>=
(defun |funfind,LAM| (functor opname)
 (prog (ops tmp1)
  (return
   (seq
    (progn
     (setq ops (|isFunctor| functor))
     (prog (t0)
      (setq t0 nil)
      (return
       (do ((t1 ops (cdr t1)) (|u| nil))
           ((or (atom t1) (progn (setq |u| (car t1)) nil)) (nreverse0 t0))
        (seq
         (exit
          (cond
           ((and (pairp |u|)
                 (progn
                  (setq tmp1 (qcar |u|))
                  (and (pairp tmp1) (equal (qcar tmp1) opname))))
             (setq t0 (cons |u| t0)))))))))))))) 

@

<<defmacro funfind>>=
(defmacro |funfind| (&whole t0 &rest notused &aux t1)
 (dsetq t1 t0)
 (cons '|funfind,LAM| (vmlisp::wrap (cdr t1) '(quote quote)))) 

@

\subsection{defun isDomainOrPackage}
\begin{verbatim}
;isDomainOrPackage dom ==
;  REFVECP dom and #dom>0 and isFunctor opOf dom.(0)
\end{verbatim}

<<defun isDomainOrPackage>>=
(defun |isDomainOrPackage| (dom)
 (and
  (refvecp dom)
  (> (|#| dom) 0)
  (|isFunctor| (|opOf| (elt dom 0))))) 

@

\subsection{defun isTraceGensym}
<<defun isTraceGensym>>=
(defun |isTraceGensym| (x)
 (gensymp x)) 

@

\subsection{defun spadTrace}
\begin{verbatim}
;spadTrace(domain,options) ==
;  $fromSpadTrace:= true
;  $tracedModemap:local:= nil
;  PAIRP domain and REFVECP CAR domain and (CAR domain).0 = 0 =>
;      aldorTrace(domain,options)
;  not isDomainOrPackage domain => userError '"bad argument to trace"
;  listOfOperations:=
;    [g x for x in getOption("OPS",options)] where
;      g x ==
;        STRINGP x => INTERN x
;        x
;  if listOfVariables := getOption("VARS",options) then
;    options := removeOption("VARS",options)
;  if listOfBreakVars := getOption("VARBREAK",options) then
;    options := removeOption("VARBREAK",options)
;  anyifTrue:= null listOfOperations
;  domainId:= opOf domain.(0)
;  currentEntry:= ASSOC(domain,_/TRACENAMES)
;  currentAlist:= KDR currentEntry
;  opStructureList:= flattenOperationAlist getOperationAlistFromLisplib domainId
;  sigSlotNumberAlist:=
;    [triple
;      --new form is (<op> <signature> <slotNumber> <condition> <kind>)
;      for [op,sig,n,.,kind] in opStructureList | kind = 'ELT
;        and (anyifTrue or MEMQ(op,listOfOperations)) and
;         FIXP n and
;          isTraceable(triple:= [op,sig,n],domain)] where
;            isTraceable(x is [.,.,n,:.],domain) ==
;              atom domain.n => nil
;              functionSlot:= first domain.n
;              GENSYMP functionSlot =>
;                (reportSpadTrace("Already Traced",x); nil)
;              null (BPINAME functionSlot) =>
;                (reportSpadTrace("No function for",x); nil)
;              true
;  if listOfVariables then
;    for [.,.,n] in sigSlotNumberAlist repeat
;      fn := first domain.n
;      $letAssoc := AS_-INSERT(BPINAME fn,
;        listOfVariables,$letAssoc)
;  if listOfBreakVars then
;    for [.,.,n] in sigSlotNumberAlist repeat
;      fn := first domain.n
;      $letAssoc := AS_-INSERT(BPINAME fn,
;        [["BREAK",:listOfBreakVars]],$letAssoc)
;  for (pair:= [op,mm,n]) in sigSlotNumberAlist repeat
;    alias:= spadTraceAlias(domainId,op,n)
;    $tracedModemap:= subTypes(mm,constructSubst(domain.0))
;    traceName:= BPITRACE(first domain.n,alias, options)
;    NCONC(pair,[listOfVariables,first domain.n,traceName,alias])
;    RPLAC(first domain.n,traceName)
;  sigSlotNumberAlist:= [x for x in sigSlotNumberAlist | CDDDR x]
;  if $reportSpadTrace then
;    if $traceNoisely then printDashedLine()
;    for x in orderBySlotNumber sigSlotNumberAlist repeat
;      reportSpadTrace("TRACING",x)
;  if $letAssoc then SETLETPRINTFLAG true
;  currentEntry =>
;    RPLAC(rest currentEntry,[:sigSlotNumberAlist,:currentAlist])
;  SETQ(_/TRACENAMES,[ [domain,:sigSlotNumberAlist],:_/TRACENAMES])
;  spadReply()
\end{verbatim}

<<defun spadTrace,g>>=
(defun |spadTrace,g| (x)
 (seq
  (if (stringp x) (exit (intern x)))
  (exit x))) 

@

<<defun spadTrace,isTraceable>>=
(defun |spadTrace,isTraceable| (x |domain|)
 (prog (|n| |functionSlot|)
  (return
   (seq
    (progn
     (setq |n| (caddr x))
     x
     (seq
      (if (atom (elt |domain| |n|)) (exit nil))
      (setq |functionSlot| (car (elt |domain| |n|)))
      (if (gensymp |functionSlot|) 
       (exit (seq (|reportSpadTrace| '|Already Traced| x) (exit nil))))
      (if (null (bpiname |functionSlot|))
       (exit
        (seq
         (|reportSpadTrace| '|No function for| x)
         (exit nil))))
      (exit t))))))) 

@

<<defun spadTrace>>=
(defun |spadTrace| (|domain| |options|)
 (prog (|$tracedModemap| |listOfOperations| |listOfVariables| 
        |listOfBreakVars| |anyifTrue| |domainId| |currentEntry| 
        |currentAlist| |opStructureList| |sig| |kind| |triple| |fn| |op| 
        |mm| |n| |alias| |traceName| |sigSlotNumberAlist|)
 (declare (special |$tracedModemap|))
 (return
  (seq
   (progn
    (setq |$fromSpadTrace| t)
    (setq |$tracedModemap| nil)
    (cond
     ((and (pairp |domain|)
           (refvecp (car |domain|))
           (eql (elt (car |domain|) 0) 0))
       (|aldorTrace| |domain| |options|))
     ((null (|isDomainOrPackage| |domain|))
       (|userError| "bad argument to trace"))
     (t
      (setq |listOfOperations|
       (prog (t0)
        (setq t0 nil)
        (return
         (do ((t1 (|getOption| 'ops |options|) (cdr t1)) (x nil))
             ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
          (seq
           (exit
            (setq t0 (cons (|spadTrace,g| x) t0))))))))
      (cond
       ((setq |listOfVariables| (|getOption| 'vars |options|))
         (setq |options| (|removeOption| 'vars |options|))))
      (cond
       ((setq |listOfBreakVars| (|getOption| 'varbreak |options|))
         (setq |options| (|removeOption| 'varbreak |options|))))
      (setq |anyifTrue| (null |listOfOperations|))
      (setq |domainId| (|opOf| (elt |domain| 0)))
      (setq |currentEntry| (|assoc| |domain| /tracenames))
      (setq |currentAlist| (kdr |currentEntry|))
      (setq |opStructureList| 
       (|flattenOperationAlist| (|getOperationAlistFromLisplib| |domainId|)))
      (setq |sigSlotNumberAlist|
       (prog (t2)
        (setq t2 nil)
        (return
         (do ((t3 |opStructureList| (cdr t3)) (t4 nil))
             ((or (atom t3)
                  (progn (setq t4 (CAR t3)) nil)
                  (progn
                   (progn
                    (setq |op| (car t4))
                    (setq |sig| (cadr t4))
                    (setq |n| (caddr t4))
                    (setq |kind| (car (cddddr t4))) t4)
                   nil))
                (nreverse0 t2))
          (seq
           (exit
            (cond
             ((and (eq |kind| 'ELT)
                   (or |anyifTrue| (memq |op| |listOfOperations|))
                   (fixp |n|)
                   (|spadTrace,isTraceable|
                    (setq |triple|
                     (cons |op| (cons |sig| (cons |n| nil)))) |domain|))
                (setq t2 (cons |triple| t2))))))))))
      (cond 
       (|listOfVariables|
        (do ((t5 |sigSlotNumberAlist| (cdr t5)) (t6 nil))
            ((or (atom t5)
                 (progn (setq t6 (car t5)) nil)
                 (progn (progn (setq |n| (caddr t6)) t6) nil))
              nil)
         (seq
          (exit
           (progn
            (setq |fn| (car (elt |domain| |n|)))
            (setq |$letAssoc|
             (as-insert (bpiname |fn|) |listOfVariables| |$letAssoc|))))))))
      (cond
       (|listOfBreakVars|
        (do ((t7 |sigSlotNumberAlist| (cdr t7)) (t8 nil))
            ((or (atom t7)
                 (progn (setq t8 (car t7)) nil)
                 (progn (progn (setq |n| (caddr t8)) t8) nil))
                nil)
         (seq
          (exit
           (progn
            (setq |fn| (car (elt |domain| |n|)))
            (setq |$letAssoc|
             (as-insert (bpiname |fn|)
              (cons (cons 'break |listOfBreakVars|) nil) |$letAssoc|))))))))
      (do ((t9 |sigSlotNumberAlist| (cdr t9)) (|pair| nil))
          ((or (atom t9)
               (progn (setq |pair| (car t9)) nil)
               (progn
                (progn
                 (setq |op| (car |pair|))
                 (setq |mm| (cadr |pair|))
                 (setq |n| (caddr |pair|))
                 |pair|)
                 nil))
               nil)
       (seq
        (exit
         (progn 
          (setq |alias| (|spadTraceAlias| |domainId| |op| |n|))
          (setq |$tracedModemap|
            (|subTypes| |mm| (|constructSubst| (elt |domain| 0))))
          (setq |traceName|
            (bpitrace (car (elt |domain| |n|)) |alias| |options|))
          (nconc |pair|
            (cons |listOfVariables|
             (cons (car (elt |domain| |n|))
              (cons |traceName| (cons |alias| nil)))))
          (rplac (car (elt |domain| |n|)) |traceName|)))))
      (setq |sigSlotNumberAlist|
       (prog (t10)
        (setq t10 nil)
        (return
         (do ((t11 |sigSlotNumberAlist| (cdr t11)) (x nil))
             ((or (atom t11) (progn (setq x (car t11)) nil)) (nreverse0 t10))
          (seq
           (exit
            (cond ((cdddr x) (setq t10 (cons x t10))))))))))
      (cond
       (|$reportSpadTrace|
        (cond (|$traceNoisely| (|printDashedLine|)))
        (do ((t12 (|orderBySlotNumber| |sigSlotNumberAlist|) (cdr t12))
             (x nil))
            ((or (atom t12)
                 (progn (setq x (car t12)) nil))
                nil)
             (seq (exit (|reportSpadTrace| 'tracing x))))))
      (cond (|$letAssoc| (setletprintflag t)))
      (cond 
       (|currentEntry|
        (rplac (cdr |currentEntry|)
          (append |sigSlotNumberAlist| |currentAlist|)))
       (t 
        (setq /tracenames
         (cons (cons |domain| |sigSlotNumberAlist|) /tracenames))
          (|spadReply|)))))))))) 

@

\subsection{defun traceDomainLocalOps}
\begin{verbatim}
;traceDomainLocalOps(dom,lops,options) ==
; sayMSG ['"  ",'"The )local option has been withdrawn"]
; sayMSG ['"  ",'"Use )ltr to trace local functions."]
; NIL
\end{verbatim}

<<defun traceDomainLocalOps>>=
(defun |traceDomainLocalOps| (|dom| |lops| |options|)
 (progn
  (|sayMSG| (cons "  " (cons "The )local option has been withdrawn" nil)))
  (|sayMSG| (cons "  " (cons "Use )ltr to trace local functions." nil)))
  nil)) 

@

\subsection{defun untraceDomainLocalOps}
\begin{verbatim}
;--  abb := abbreviate dom
;--  loadLibIfNotLoaded abb
;--  actualLops := getLocalOpsFromLisplib abb
;--  null actualLops =>
;--    sayMSG ['"  ",:bright abb,'"has no local functions to trace."]
;--  lops = 'all => _/TRACE_,1(actualLops,options)
;--  l := NIL
;--  for lop in lops repeat
;--    internalName := INTERN STRCONC(PNAME abb,'";",PNAME lop)
;--    not MEMQ(internalName,actualLops) =>
;--      sayMSG ['"  ",:bright abb,'"does not have a local",
;--        '" function called",:bright lop]
;--    l := cons(internalName,l)
;--  l => _/TRACE_,1(l,options)
;--  nil
;untraceDomainLocalOps(dom,lops) ==
; sayMSG ['"  ",:bright abb,'"has no local functions to untrace."]
; NIL
\end{verbatim}

<<defun untraceDomainLocalOps>>=
(defun |untraceDomainLocalOps| (|dom| |lops|)
 (progn
  (|sayMSG|
   (cons "  "
    (append (|bright| |abb|) (cons "has no local functions to untrace." nil))))
  nil)) 

@

\subsection{defun untraceAllDomainLocalOps}
\begin{verbatim}
;--  lops = "all" => untraceAllDomainLocalOps(dom)
;--  abb := abbreviate dom
;--  loadLibIfNotLoaded abb
;--  actualLops := getLocalOpsFromLisplib abb
;--  null actualLops =>
;--    sayMSG ['"  ",:bright abb,'"has no local functions to untrace."]
;--  l := NIL
;--  for lop in lops repeat
;--    internalName := INTERN STRCONC(PNAME abb,'";",PNAME lop)
;--    not MEMQ(internalName,actualLops) =>
;--      sayMSG ['"  ",:bright abb,'"does not have a local",
;--        '" function called",:bright lop]
;--    l := cons(internalName,l)
;--  l => untrace l
;--  nil
;untraceAllDomainLocalOps(dom) == NIL
\end{verbatim}

<<defun untraceAllDomainLocalOps>>=
(defun |untraceAllDomainLocalOps| (|dom|) nil) 

@

\subsection{defun traceDomainConstructor}
\begin{verbatim}
;--  abb := abbreviate dom
;--  actualLops := getLocalOpsFromLisplib abb
;--  null (l := INTERSECTION(actualLops,_/TRACENAMES)) => NIL
;--  _/UNTRACE_,1(l,NIL)
;--  NIL
;traceDomainConstructor(domainConstructor,options) ==
;  -- Trace all domains built with the given domain constructor,
;  -- including all presently instantiated domains, and all future
;  -- instantiations, while domain constructor is traced.
;  loadFunctor domainConstructor
;  listOfLocalOps := getOption("LOCAL",options)
;  if listOfLocalOps then
;    traceDomainLocalOps(domainConstructor,listOfLocalOps,
;      [opt for opt in options | opt isnt ['LOCAL,:.]])
;  listOfLocalOps and not getOption("OPS",options) => NIL
;  for [argl,.,:domain] in HGET($ConstructorCache,domainConstructor)
;    repeat spadTrace(domain,options)
;  SETQ(_/TRACENAMES,[domainConstructor,:_/TRACENAMES])
;  innerDomainConstructor := INTERN STRCONC(domainConstructor,'";")
;  if FBOUNDP innerDomainConstructor then domainConstructor := innerDomainConstructor
;  EMBED(domainConstructor,
;    ['LAMBDA, ['_&REST, 'args],
;      ['PROG, ['domain],
;        ['SETQ,'domain,['APPLY,domainConstructor,'args]],
;        ['spadTrace,'domain,MKQ options],
;        ['RETURN,'domain]]] )
\end{verbatim}

<<defun traceDomainConstructor>>=
(defun |traceDomainConstructor| (|domainConstructor| |options|)
 (prog (|listOfLocalOps| |argl| |domain| |innerDomainConstructor|)
  (return
   (seq
    (progn
     (|loadFunctor| |domainConstructor|)
     (setq |listOfLocalOps| (|getOption| 'local |options|))
     (cond
      (|listOfLocalOps|
       (|traceDomainLocalOps| |domainConstructor| |listOfLocalOps|
        (prog (t0)
         (setq t0 nil)
         (return
          (do ((t1 |options| (cdr t1)) (opt nil))
              ((or (atom t1) (progn (setq opt (car t1)) nil)) (nreverse0 t0))
           (seq
            (exit
             (cond 
              ((null (and (pairp opt) (eq (qcar opt) 'local)))
                (setq t0 (cons opt t0))))))))))))
     (cond 
      ((and |listOfLocalOps| (null (|getOption| 'ops |options|))) nil)
      (t
       (do ((t2 (hget |$ConstructorCache| |domainConstructor|) (cdr t2))
            (t3 nil))
           ((or (atom t2) 
                (progn (setq t3 (car t2)) nil)
                (progn 
                 (progn 
                  (setq |argl| (car t3))
                  (setq |domain| (cddr t3)) t3)
                 nil))
                nil)
         (seq
          (exit
           (|spadTrace| |domain| |options|))))
       (setq /tracenames (cons |domainConstructor| /tracenames))
       (setq |innerDomainConstructor|
         (intern (strconc |domainConstructor| ";")))
       (cond
        ((fboundp |innerDomainConstructor|)
          (setq |domainConstructor| |innerDomainConstructor|)))
       (embed |domainConstructor|
        (cons 'lambda
         (cons 
          (cons '&rest
           (cons 'args nil))
          (cons
           (cons 'prog
            (cons
             (cons '|domain| nil)
             (cons
              (cons 'setq
               (cons '|domain|
                (cons
                 (cons 'apply (cons |domainConstructor|
                  (cons 'args nil))) nil)))
              (cons
               (cons '|spadTrace|
                (cons '|domain|
                 (cons (mkq |options|) nil)))
               (cons (cons 'return (cons '|domain| nil)) nil)))))
           nil))))))))))) 

@

\subsection{defun untraceDomainConstructor}
\begin{verbatim}
;untraceDomainConstructor domainConstructor ==
;  --untrace all the domains in domainConstructor, and unembed it
;  SETQ(_/TRACENAMES,
;    [df for df in _/TRACENAMES | keepTraced?(df, domainConstructor)]) where
;      keepTraced?(df, domainConstructor) ==
;        (df is [dc,:.]) and (isDomainOrPackage dc) and
;           ((KAR devaluate dc) = domainConstructor) =>
;               _/UNTRACE_,0 [dc]
;               false
;        true
;  untraceAllDomainLocalOps domainConstructor
;  innerDomainConstructor := INTERN STRCONC(domainConstructor,'";")
;  if FBOUNDP innerDomainConstructor then UNEMBED innerDomainConstructor
;    else UNEMBED domainConstructor
;  SETQ(_/TRACENAMES,DELETE(domainConstructor,_/TRACENAMES))
\end{verbatim}

<<defun untraceDomainConstructor,keepTraced?>>=
(defun |untraceDomainConstructor,keepTraced?| (|df| |domainConstructor|)
 (prog (|dc|)
  (return
   (seq
    (if (and 
         (and
          (and (pairp |df|) (progn (setq |dc| (qcar |df|)) t))
           (|isDomainOrPackage| |dc|))
         (boot-equal (kar (|devaluate| |dc|)) |domainConstructor|))
     (exit (seq (|/UNTRACE,0| (cons |dc| nil)) (exit nil))))
    (exit t))))) 

@

<<defun untraceDomainConstructor>>=
(defun |untraceDomainConstructor| (|domainConstructor|)
 (prog (|innerDomainConstructor|)
  (return
   (seq
    (progn
     (setq /tracenames
      (prog (t0)
       (setq t0 nil)
       (return
        (do ((t1 /tracenames (cdr t1)) (|df| nil))
            ((or (atom t1) (progn (setq |df| (car t1)) nil)) (nreverse0 t0))
         (seq
          (exit
           (cond ((|untraceDomainConstructor,keepTraced?|
                    |df| |domainConstructor|)
             (setq t0 (cons |df| t0))))))))))
     (|untraceAllDomainLocalOps| |domainConstructor|)
     (setq |innerDomainConstructor|
      (intern (strconc |domainConstructor| ";")))
     (cond
      ((fboundp |innerDomainConstructor|) (unembed |innerDomainConstructor|))
      (t (unembed |domainConstructor|)))
     (setq /tracenames (|delete| |domainConstructor| /tracenames))))))) 

@

\subsection{defun flattenOperationAlist}
\begin{verbatim}
;flattenOperationAlist(opAlist) ==
;   res:= nil
;   for [op,:mmList] in opAlist repeat
;     res:=[:res,:[[op,:mm] for mm in mmList]]
;   res
\end{verbatim}

<<defun flattenOperationAlist>>=
(defun |flattenOperationAlist| (|opAlist|)
 (prog (|op| |mmList| |res|)
  (return
   (seq
    (progn
     (setq |res| nil)
     (do ((t0 |opAlist| (cdr t0)) (t1 nil))
         ((or (atom t0) 
              (progn (setq t1 (car t0)) nil)
              (progn
               (progn (setq |op| (car t1)) (setq |mmList| (cdr t1)) t1)
               nil)) 
             nil)
      (seq
       (exit
        (setq |res|
         (append |res|
          (prog (t2)
           (setq t2 nil)
           (return
            (do ((t3 |mmList| (cdr t3)) (|mm| nil))
                ((or (atom t3)
                     (progn (setq |mm| (car t3)) nil)) (nreverse0 t2))
             (seq
              (exit
               (setq t2 (cons (cons |op| |mm|) t2))))))))))))
     |res|))))) 

@

\subsection{defun mapLetPrint}
\begin{verbatim}
;mapLetPrint(x,val,currentFunction) ==
;  x:= getAliasIfTracedMapParameter(x,currentFunction)
;  currentFunction:= getBpiNameIfTracedMap currentFunction
;  letPrint(x,val,currentFunction)
\end{verbatim}

<<defun mapLetPrint>>=
(defun |mapLetPrint| (x val currentFunction)
  (setq x (|getAliasIfTracedMapParameter| x currentFunction))
  (setq currentFunction (|getBpiNameIfTracedMap| currentFunction))
  (|letPrint| x val currentFunction))

@

\subsection{defun letPrint}
\begin{verbatim}
;-- This is the version for use when we have no idea
;-- what print representation to use for the data object
;letPrint(x,val,currentFunction) ==
;  if $letAssoc and
;    ((y:= LASSOC(currentFunction,$letAssoc)) or (y:= LASSOC("all",$letAssoc))) then
;      if (y="all" or MEMQ(x,y)) and
;        not (IS__GENVAR(x) or isSharpVarWithNum(x) or GENSYMP x) then
;         sayBrightlyNT [:bright x,": "]
;         PRIN0 shortenForPrinting val
;         TERPRI()
;      if (y:= hasPair("BREAK",y)) and
;        (y="all" or MEMQ(x,y) and
;          (not MEMQ((PNAME x).(0),'($ _#)) and not GENSYMP x)) then
;            break [:bright currentFunction,'"breaks after",:bright x,'":= ",
;              shortenForPrinting val]
;  val
\end{verbatim}

<<defun letPrint>>=
(defun |letPrint| (x |val| |currentFunction|)
 (prog (|y|)
  (return
   (progn
    (cond ((and |$letAssoc| 
                (or
                 (setq |y| (lassoc |currentFunction| |$letAssoc|))
                 (setq |y| (lassoc '|all| |$letAssoc|))))
     (cond
      ((and (or (eq |y| '|all|)
                 (memq x |y|))
            (null 
             (or (is_genvar x) (|isSharpVarWithNum| x) (gensymp x))))
        (|sayBrightlyNT| (append (|bright| x) (cons '|: | nil)))
        (prin0 (|shortenForPrinting| |val|))
        (terpri)))
     (cond
      ((and (setq |y| (|hasPair| 'break |y|))
            (or (eq |y| '|all|)
                (and (memq x |y|)
                     (null (memq (elt (pname x) 0) '($ |#|)))
                     (null (gensymp x)))))
       (|break|
        (append 
         (|bright| |currentFunction|)
         (cons "breaks after"
          (append
           (|bright| x)
           (cons ":= " (cons (|shortenForPrinting| |val|) nil)))))))
      (t nil))))
    |val|)))) 

@

\subsection{defun letPrint2}
\begin{verbatim}
;-- This is the version for use when we have already
;-- converted the data into type "Expression"
;letPrint2(x,printform,currentFunction) ==
;  $BreakMode:local := nil
;  if $letAssoc and
;    ((y:= LASSOC(currentFunction,$letAssoc)) or (y:= LASSOC("all",$letAssoc))) then
;      if (y="all" or MEMQ(x,y)) and
;        not (IS__GENVAR(x) or isSharpVarWithNum(x) or GENSYMP x) then
;         $BreakMode:='letPrint2
;         flag:=nil
;         CATCH('letPrint2,mathprint ["=",x,printform],flag)
;         if flag='letPrint2 then print printform
;      if (y:= hasPair("BREAK",y)) and
;        (y="all" or MEMQ(x,y) and
;          (not MEMQ((PNAME x).(0),'($ _#)) and not GENSYMP x)) then
;            break [:bright currentFunction,'"breaks after",:bright x,":= ",
;              printform]
;  x
\end{verbatim}

<<defun letPrint2>>=
(defun |letPrint2| (x |printform| |currentFunction|)
 (prog (|$BreakMode| |flag| |y|)
  (declare (special |$BreakMode|))
  (return
   (progn
    (setq |$BreakMode| nil)
    (cond
     ((and |$letAssoc| 
           (or (setq |y| (lassoc |currentFunction| |$letAssoc|))
               (setq |y| (lassoc '|all| |$letAssoc|))))
      (cond
       ((and
          (or (eq |y| '|all|) (memq x |y|))
          (null (or (is_genvar x) (|isSharpVarWithNum| x) (gensymp x))))
         (setq |$BreakMode| '|letPrint2|)
         (setq |flag| nil)
         (catch '|letPrint2| 
          (|mathprint| (cons '= (cons x (cons |printform| nil)))) |flag|)
         (cond 
          ((eq |flag| '|letPrint2|) (|print| |printform|))
          (t nil))))
      (cond 
       ((and 
         (setq |y| (|hasPair| 'break |y|))
         (or (eq |y| '|all|)
             (and 
              (memq x |y|)
              (null (memq (elt (pname x) 0) '($ |#|)))
              (null (gensymp x)))))
        (|break|
         (append
          (|bright| |currentFunction|)
          (cons "breaks after" 
           (append (|bright| x) (cons '|:= | (cons |printform| nil)))))))
       (t nil))))
    x)))) 

@

\subsection{defun letPrint3}
\begin{verbatim}
;-- This is the version for use when we have our hands on a function
;-- to convert the data into type "Expression"
;letPrint3(x,xval,printfn,currentFunction) ==
;  $BreakMode:local := nil
;  if $letAssoc and
;    ((y:= LASSOC(currentFunction,$letAssoc)) or (y:= LASSOC("all",$letAssoc))) then
;      if (y="all" or MEMQ(x,y)) and
;        not (IS__GENVAR(x) or isSharpVarWithNum(x) or GENSYMP x) then
;         $BreakMode:='letPrint2
;         flag:=nil
;         CATCH('letPrint2,mathprint ["=",x,SPADCALL(xval,printfn)],flag)
;         if flag='letPrint2 then print xval
;      if (y:= hasPair("BREAK",y)) and
;        (y="all" or MEMQ(x,y) and
;          (not MEMQ((PNAME x).(0),'($ _#)) and not GENSYMP x)) then
;            break [:bright currentFunction,'"breaks after",:bright x,'":= ",
;              xval]
;  x
\end{verbatim}

<<defun letPrint3>>=
(defun |letPrint3| (x |xval| |printfn| |currentFunction|)
 (prog (|$BreakMode| |flag| |y|)
  (declare (special |$BreakMode|))
  (return
   (progn
    (setq |$BreakMode| nil)
    (cond
     ((and |$letAssoc| 
       (or (setq |y| (lassoc |currentFunction| |$letAssoc|))
           (setq |y| (lassoc '|all| |$letAssoc|))))
       (cond
        ((and
           (or (eq |y| '|all|) (memq x |y|))
           (null (or (is_genvar x) (|isSharpVarWithNum| x) (gensymp x))))
          (setq |$BreakMode| '|letPrint2|)
          (setq |flag| nil)
          (catch '|letPrint2|
           (|mathprint|
            (cons '= (cons x (cons (spadcall |xval| |printfn|) nil))))
           |flag|)
          (cond
           ((eq |flag| '|letPrint2|) (|print| |xval|))
           (t nil))))
       (cond
        ((and
          (setq |y| (|hasPair| 'break |y|))
          (or
           (eq |y| '|all|)
           (and
            (memq x |y|)
            (null (memq (elt (pname x) 0) '($ |#|)))
            (null (gensymp x)))))
          (|break|
           (append
            (|bright| |currentFunction|)
            (cons "breaks after"
             (append (|bright| x) (cons ":= " (cons |xval| nil)))))))
        (t nil))))
    x)))) 

@
\subsection{defun getAliasIfTracedMapParameter}
\begin{verbatim}
;getAliasIfTracedMapParameter(x,currentFunction) ==
;  isSharpVarWithNum x =>
;    aliasList:= get(currentFunction,'alias,$InteractiveFrame) =>
;      aliasList.(STRING2PINT_-N(SUBSTRING(PNAME x,1,NIL),1)-1)
;  x
\end{verbatim}

<<defun getAliasIfTracedMapParameter>>=
(defun |getAliasIfTracedMapParameter| (x |currentFunction|)
 (prog (|aliasList|)
  (return
   (seq
    (cond
     ((|isSharpVarWithNum| x)
       (cond
        ((setq |aliasList|
           (|get| |currentFunction| '|alias| |$InteractiveFrame|))
         (exit
          (elt |aliasList|
           (spaddifference
            (string2pint-n (substring (pname x) 1 nil) 1) 1))))))
     (t x)))))) 

@

\subsection{defun getBpiNameIfTracedMap}
\begin{verbatim}
;getBpiNameIfTracedMap(name) ==
;  lmm:= get(name,'localModemap,$InteractiveFrame) =>
;    MEMQ(bpiName:= CADAR lmm,_/TRACENAMES) => bpiName
;  name
\end{verbatim}

<<defun getBpiNameIfTracedMap>>=
(defun |getBpiNameIfTracedMap| (name)
 (prog (|lmm| |bpiName|)
  (return
   (seq
    (cond 
     ((setq |lmm| (|get| name '|localModemap| |$InteractiveFrame|))
       (cond
        ((memq (setq |bpiName| (cadar |lmm|)) /tracenames)
           (exit |bpiName|))))
     (t name)))))) 

@

\subsection{defun hasPair}
\begin{verbatim}
;hasPair(key,l) ==
;  atom l => nil
;  l is [ [ =key,:a],:.] => a
;  hasPair(key,rest l)
\end{verbatim}

<<defun hasPair>>=
(defun |hasPair| (key arg)
 (prog (tmp1 a)
  (return 
   (cond
    ((atom arg) nil)
    ((and (pairp arg)
          (progn
           (setq tmp1 (qcar arg))
           (and (pairp tmp1)
                (equal (qcar tmp1) key)
                (progn (setq a (qcdr tmp1)) t))))
       a)
    (t (|hasPair| key (cdr arg))))))) 

@

\subsection{defun shortenForPrinting}
\begin{verbatim}
;shortenForPrinting val ==
;  isDomainOrPackage val => devaluate val
;  val
\end{verbatim}

<<defun shortenForPrinting>>=
(defun |shortenForPrinting| (|val|)
 (if (|isDomainOrPackage| |val|)
  (|devaluate| |val|)
  |val|))

@

\subsection{defun spadTraceAlias}
\begin{verbatim}
;spadTraceAlias(domainId,op,n) ==
;  INTERNL(domainId,".",op,",",STRINGIMAGE n)
\end{verbatim}

<<defun spadTraceAlias>>=
(defun |spadTraceAlias| (|domainId| |op| |n|)
 (internl |domainId| (intern "." "boot") |op| '|,| (stringimage |n|))) 

@

\subsection{defun getOption}
\begin{verbatim}
;getOption(opt,l) ==
;  y:= ASSOC(opt,l) => rest y
\end{verbatim}

<<defun getOption>>=
(defun |getOption| (opt l)
 (prog (y)
  (return
   (seq
    (cond ((setq y (|assoc| opt l)) (exit (cdr y)))))))) 

@

\subsection{defun reportSpadTrace}
\begin{verbatim}
;reportSpadTrace(header,[op,sig,n,:t]) ==
;  null $traceNoisely => nil
;  msg:= [header,'%b,op,":",'%d,rest sig," -> ",first sig," in slot ",n]
;  namePart:= nil --(t is (.,.,name,:.) => (" named ",name); NIL)
;  tracePart:=
;    t is [y,:.] and not null y =>
;      (y="all" => ['%b,"all",'%d,"vars"]; [" vars: ",y])
;    NIL
;  sayBrightly [:msg,:namePart,:tracePart]
\end{verbatim}

<<defun reportSpadTrace>>=
(defun |reportSpadTrace| (|header| t0)
 (prog (|op| |sig| |n| |t| |msg| |namePart| |y| |tracePart|)
  (return 
   (progn
    (setq |op| (car t0))
    (setq |sig| (cadr t0))
    (setq |n| (caddr t0))
    (setq |t| (cdddr t0))
    (cond
     ((null |$traceNoisely|) nil)
     (t
      (setq |msg|
       (cons |header|
        (cons '|%b|
         (cons |op|
          (cons '|:|
           (cons '|%d|
            (cons (CDR |sig|)
             (cons '| -> |
              (cons (car |sig|)
               (cons '| in slot |
                (cons |n| nil)))))))))))
      (setq |namePart| nil)
      (setq |tracePart|
       (cond
        ((and (pairp |t|) (progn (setq |y| (qcar |t|)) t) (null (null |y|)))
          (cond
           ((eq |y| '|all|)
             (cons '|%b| (cons '|all| (cons '|%d| (cons '|vars| nil)))))
           (t (cons '| vars: | (cons |y| nil)))))
        (t nil)))
      (|sayBrightly| (append |msg| (append |namePart| |tracePart|))))))))) 

@

\subsection{defun orderBySlotNumber}
\begin{verbatim}
;orderBySlotNumber l ==
;  ASSOCRIGHT orderList [ [n,:x] for (x:= [.,.,n,:.]) in l]
\end{verbatim}

<<defun orderBySlotNumber>>=
(defun |orderBySlotNumber| (arg)
 (prog (|n|)
  (return 
   (seq
    (assocright
     (|orderList|
      (prog (t0)
       (setq t0 nil)
       (return
        (do ((t1 arg (cdr t1)) (x nil))
            ((or (atom t1)
                 (progn (setq x (car t1)) nil)
                 (progn (progn (setq |n| (caddr x)) x) nil))
               (nreverse0 t0))
         (seq
          (exit
           (setq t0 (cons (cons |n| x) t0))))))))))))) 

@

\subsection{defun /tracereply}
\begin{verbatim}
;_/TRACEREPLY() ==
;  null _/TRACENAMES => MAKESTRING '"   Nothing is traced."
;  for x in _/TRACENAMES repeat
;    x is [d,:.] and isDomainOrPackage d =>
;      domainList:= [devaluate d,:domainList]
;    functionList:= [x,:functionList]
;  [:functionList,:domainList,"traced"]
\end{verbatim}

<<defun /tracereply>>=
(defun /tracereply () 
 (prog (|d| |domainList| |functionList|)
  (return
   (seq
    (cond
     ((null /tracenames) "   Nothing is traced.")
     (t
       (do ((t0 /tracenames (cdr t0)) (x nil))
           ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
        (seq
         (exit
          (cond
           ((and (pairp x) 
                 (progn (setq |d| (qcar x)) t)
                 (|isDomainOrPackage| |d|))
              (setq |domainList| (cons (|devaluate| |d|) |domainList|)))
           (t 
            (setq |functionList| (cons x |functionList|)))))))
       (append |functionList|
        (append |domainList| (cons '|traced| nil))))))))) 

@

\subsection{defun spadReply}
\begin{verbatim}
;spadReply() ==
;  [printName x for x in _/TRACENAMES] where
;    printName x ==
;      x is [d,:.] and isDomainOrPackage d => devaluate d
;      x
\end{verbatim}

<<defun spadReply,printName>>=
(defun |spadReply,printName| (x)
 (prog (|d|)
  (return
   (seq
    (if (and (and (pairp x) (progn (setq |d| (qcar x)) t))
             (|isDomainOrPackage| |d|))
       (exit (|devaluate| |d|)))
     (exit x))))) 

@

<<defun spadReply>>=
(defun |spadReply| ()
 (prog () 
  (return
   (seq
    (prog (t0)
     (setq t0 nil)
     (return
       (do ((t1 /tracenames (cdr t1)) (x nil))
           ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
        (seq
         (exit
          (setq t0 (cons (|spadReply,printName| x) t0))))))))))) 

@

\subsection{defun spadUntrace}
\begin{verbatim}
;spadUntrace(domain,options) ==
;  not isDomainOrPackage domain => userError '"bad argument to untrace"
;  anyifTrue:= null options
;  listOfOperations:= getOption("ops:",options)
;  domainId := devaluate domain
;  null (pair:= ASSOC(domain,_/TRACENAMES)) =>
;    sayMSG ['"   No functions in",
;      :bright prefix2String domainId,'"are now traced."]
;  sigSlotNumberAlist:= rest pair
;  for (pair:= [op,sig,n,lv,bpiPointer,traceName,alias]) in sigSlotNumberAlist |
;    anyifTrue or MEMQ(op,listOfOperations) repeat
;      BPIUNTRACE(traceName,alias)
;      RPLAC(first domain.n,bpiPointer)
;      RPLAC(CDDDR pair,nil)
;      if assocPair:=ASSOC(BPINAME bpiPointer,$letAssoc) then
;        $letAssoc := REMOVER($letAssoc,assocPair)
;        if null $letAssoc then SETLETPRINTFLAG nil
;  newSigSlotNumberAlist:= [x for x in sigSlotNumberAlist | CDDDR x]
;  newSigSlotNumberAlist => RPLAC(rest pair,newSigSlotNumberAlist)
;  SETQ(_/TRACENAMES,DELASC(domain,_/TRACENAMES))
;  spadReply()
\end{verbatim}

<<defun spadUntrace>>=
(defun |spadUntrace| (|domain| |options|)
 (prog (|anyifTrue| |listOfOperations| |domainId| |pair| |sigSlotNumberAlist| 
        |op| |sig| |n| |lv| |bpiPointer| |traceName| |alias| |assocPair| 
        |newSigSlotNumberAlist|)
  (return
   (seq
    (cond
     ((null (|isDomainOrPackage| |domain|))
       (|userError| "bad argument to untrace"))
     (t
      (setq |anyifTrue| (null |options|))
      (setq |listOfOperations| (|getOption| '|ops:| |options|))
      (setq |domainId| (|devaluate| |domain|))
      (cond
       ((null (setq |pair| (|assoc| |domain| /tracenames)))
         (|sayMSG| 
          (cons "   No functions in" 
           (append
            (|bright| (|prefix2String| |domainId|))
            (cons "are now traced." nil)))))
       (t 
        (setq |sigSlotNumberAlist| (cdr |pair|))
        (do ((t0 |sigSlotNumberAlist| (cdr t0)) (|pair| nil))
            ((or (atom t0) 
                 (progn (setq |pair| (car t0)) nil)
                 (progn
                  (progn
                   (setq |op| (car |pair|))
                   (setq |sig| (cadr |pair|))
                   (setq |n| (caddr |pair|))
                   (setq |lv| (cadddr |pair|))
                   (setq |bpiPointer| (car (cddddr |pair|)))
                   (setq |traceName| (cadr (cddddr |pair|)))
                   (setq |alias| (caddr (cddddr |pair|)))
                   |pair|)
                  nil))
                 nil)
         (seq
          (exit
           (cond
            ((or |anyifTrue| (memq |op| |listOfOperations|))
              (progn
                (bpiuntrace |traceName| |alias|)
                (rplac (car (elt |domain| |n|)) |bpiPointer|)
                (rplac (cdddr |pair|) nil)
                (cond
                 ((setq |assocPair|
                     (|assoc| (bpiname |bpiPointer|) |$letAssoc|))
                   (setq |$letAssoc| (remover |$letAssoc| |assocPair|))
                   (cond 
                    ((null |$letAssoc|) (setletprintflag nil))
                    (t nil)))
                 (t nil))))))))
        (setq |newSigSlotNumberAlist|
         (prog (t1) 
          (setq t1 nil)
          (return
           (do ((t2 |sigSlotNumberAlist| (cdr t2)) (x nil))
               ((or (atom t2) (progn (setq x (car t2)) nil)) (nreverse0 t1))
             (seq
              (exit
               (cond ((cdddr x) (setq t1 (cons x t1))))))))))
        (cond 
         (|newSigSlotNumberAlist| 
          (rplac (cdr |pair|) |newSigSlotNumberAlist|))
         (t 
          (setq /tracenames (delasc |domain| /tracenames))
          (|spadReply|))))))))))) 

@
\subsection{defun prTraceNames}
\begin{verbatim}
;prTraceNames() ==
;  (for x in _/TRACENAMES repeat PRINT fn x; nil) where
;    fn x ==
;      x is [d,:t] and isDomainOrPackage d => [devaluate d,:t]
;      x
\end{verbatim}

<<defun prTraceNames,fn>>=
(defun |prTraceNames,fn| (x)
 (prog (|d| |t|)
  (return
   (seq
    (if (and (and (pairp x) 
                  (progn (setq |d| (qcar x)) (setq |t| (qcdr x)) t))
              (|isDomainOrPackage| |d|))
      (exit (cons (|devaluate| |d|) |t|)))
    (exit x))))) 

@

<<defun prTraceNames>>=
(defun |prTraceNames| ()
 (seq
  (progn
   (do ((t0 /tracenames (cdr t0)) (x nil))
       ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
    (seq
     (exit
      (print (|prTraceNames,fn| x))))) nil))) 

@

\subsection{defun traceReply}
\begin{verbatim}
;traceReply() ==
;  $domains: local:= nil
;  $packages: local:= nil
;  $constructors: local:= nil
;  null _/TRACENAMES =>
;    sayMessage '"   Nothing is traced now."
;  sayBrightly '" "
;  for x in _/TRACENAMES repeat
;    x is [d,:.] and (isDomainOrPackage d) => addTraceItem d
;    atom x =>
;      isFunctor x => addTraceItem x
;      (IS__GENVAR x =>
;        addTraceItem EVAL x; functionList:= [x,:functionList])
;    userError '"bad argument to trace"
;  functionList:= "append"/[ [rassocSub(x,$mapSubNameAlist),'" "]
;    for x in functionList | ^isSubForRedundantMapName x]
;  if functionList then
;    2 = #functionList =>
;      sayMSG ["   Function traced: ",:functionList]
;    (22 + sayBrightlyLength functionList) <= $LINELENGTH =>
;      sayMSG ["   Functions traced: ",:functionList]
;    sayBrightly "   Functions traced:"
;    sayBrightly flowSegmentedMsg(functionList,$LINELENGTH,6)
;  if $domains then
;    displayList:= concat(prefix2String first $domains,
;          [:concat('",",'" ",prefix2String x) for x in rest $domains])
;    if atom displayList then displayList:= [displayList]
;    sayBrightly '"   Domains traced: "
;    sayBrightly flowSegmentedMsg(displayList,$LINELENGTH,6)
;  if $packages then
;    displayList:= concat(prefix2String first $packages,
;          [:concat(", ",prefix2String x) for x in rest $packages])
;    if atom displayList then displayList:= [displayList]
;    sayBrightly '"   Packages traced: "
;    sayBrightly flowSegmentedMsg(displayList,$LINELENGTH,6)
;  if $constructors then
;    displayList:= concat(abbreviate first $constructors,
;          [:concat(", ",abbreviate x) for x in rest $constructors])
;    if atom displayList then displayList:= [displayList]
;    sayBrightly '"   Parameterized constructors traced:"
;    sayBrightly flowSegmentedMsg(displayList,$LINELENGTH,6)
\end{verbatim}

<<defun traceReply>>=
(defun |traceReply| ()
 (prog (|$domains| |$packages| |$constructors| |d| |functionList| 
        |displayList|)
  (declare (special |$domains| |$packages| |$constructors|))
  (return
   (seq
    (progn
     (setq |$domains| nil)
     (setq |$packages| nil)
     (setq |$constructors| nil)
     (cond
      ((null /tracenames) (|sayMessage| "   Nothing is traced now."))
      (t
        (|sayBrightly| " ")
        (do ((t0 /tracenames (cdr t0)) (x nil))
             ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
         (seq
          (exit
           (cond
            ((and (pairp x) 
                  (progn (setq |d| (qcar x)) t) (|isDomainOrPackage| |d|))
               (|addTraceItem| |d|))
            ((atom x)
               (cond
                ((|isFunctor| x) (|addTraceItem| x))
                ((is_genvar x) (|addTraceItem| (EVAL x)))
                (t (setq |functionList| (CONS x |functionList|)))))
            (t (|userError| "bad argument to trace"))))))
        (setq |functionList|
          (prog (t1)
           (setq t1 nil)
           (return
            (do ((t2 |functionList| (cdr t2)) (x nil))
                ((or (atom t2) (progn (setq x (car t2)) nil)) t1)
              (seq
               (exit
                (cond 
                 ((null (|isSubForRedundantMapName| x))
                   (setq t1 
                    (append t1 
                     (cons (|rassocSub| x |$mapSubNameAlist|)
                           (cons " " nil))))))))))))
       (cond 
        (|functionList| 
         (cond 
          ((eql 2 (|#| |functionList|))
             (|sayMSG| (cons '|   Function traced: | |functionList|)))
          ((<= (PLUS 22 (|sayBrightlyLength| |functionList|)) $linelength)
             (|sayMSG| (cons '|   Functions traced: | |functionList|)))
          (t 
             (|sayBrightly| "   Functions traced:")
             (|sayBrightly|
              (|flowSegmentedMsg| |functionList| $linelength 6))))))
       (cond 
        (|$domains|
         (setq |displayList|
          (|concat|
           (|prefix2String| (CAR |$domains|))
           (prog (t3)
            (setq t3 nil)
            (return
             (do ((t4 (cdr |$domains|) (cdr t4)) (x nil))
                 ((or (atom t4) (progn (setq x (car t4)) nil)) t3)
              (seq
               (exit
                (setq t3
                 (append t3 (|concat| "," " " (|prefix2String| x)))))))))))
         (cond 
          ((atom |displayList|)
           (setq |displayList| (cons |displayList| nil))))
         (|sayBrightly| "   Domains traced: ")
         (|sayBrightly| (|flowSegmentedMsg| |displayList| $LINELENGTH 6))))
       (cond 
        (|$packages|
          (setq |displayList|
           (|concat|
            (|prefix2String| (CAR |$packages|))
            (prog (t5)
             (setq t5 nil)
             (return
              (do ((t6 (cdr |$packages|) (cdr t6)) (x nil))
                  ((or (atom t6) (progn (setq x (car t6)) nil)) t5)
               (seq
                (exit
                 (setq t5
                  (append t5 (|concat| '|, | (|prefix2String| x)))))))))))
          (cond ((atom |displayList|)
              (setq |displayList| (cons |displayList| nil))))
          (|sayBrightly| "   Packages traced: ")
          (|sayBrightly| (|flowSegmentedMsg| |displayList| $linelength 6))))
       (cond 
        (|$constructors|
         (setq |displayList|
          (|concat|
           (|abbreviate| (CAR |$constructors|))
           (prog (t7)
            (setq t7 nil)
             (return 
              (do ((t8 (cdr |$constructors|) (cdr t8)) (x nil))
                  ((or (atom t8) (progn (setq x (car t8)) nil)) t7)
               (seq
                (exit
                 (setq t7
                 (append t7 (|concat| '|, | (|abbreviate| x)))))))))))
         (cond ((atom |displayList|)
            (setq |displayList| (CONS |displayList| nil))))
         (|sayBrightly| "   Parameterized constructors traced:")
         (|sayBrightly| (|flowSegmentedMsg| |displayList| $linelength 6)))
        (t nil))))))))) 

@

\subsection{defun addTraceItem}
\begin{verbatim}
;addTraceItem d ==
;  constructor? d => $constructors:=[d,:$constructors]
;  isDomain d => $domains:= [devaluate d,:$domains]
;  isDomainOrPackage d => $packages:= [devaluate d,:$packages]
\end{verbatim}

<<defun addTraceItem>>=
(defun |addTraceItem| (|d|)
 (cond
  ((|constructor?| |d|)
    (setq |$constructors| (cons |d| |$constructors|)))
  ((|isDomain| |d|)
    (setq |$domains| (cons (|devaluate| |d|) |$domains|)))
  ((|isDomainOrPackage| |d|)
    (setq |$packages| (cons (|devaluate| |d|) |$packages|))))) 

@

\subsection{defun ?t}
\begin{verbatim}
;_?t() ==
;  null _/TRACENAMES => sayMSG bright '"nothing is traced"
;  for x in _/TRACENAMES | atom x and not IS__GENVAR x repeat
;    if llm:= get(x,'localModemap,$InteractiveFrame) then
;      x:= (LIST (CADAR llm))
;    sayMSG ['"Function",:bright rassocSub(x,$mapSubNameAlist),'"traced"]
;  for x in _/TRACENAMES | x is [d,:l] and isDomainOrPackage d repeat
;    suffix:=
;      isDomain d => '"domain"
;      '"package"
;    sayBrightly ['"   Functions traced in ",suffix,'%b,devaluate d,'%d,":"]
;    for x in orderBySlotNumber l repeat reportSpadTrace("   ",take(4,x))
;    TERPRI()
\end{verbatim}

<<defun ?t>>=
(defun |?t| ()
 (prog (|llm| x |d| |l| |suffix|)
  (return
   (seq
    (cond
     ((null /tracenames) (|sayMSG| (|bright| "nothing is traced")))
     (t
      (do ((t0 /tracenames (cdr t0)) (x nil))
          ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
       (seq
        (exit
         (cond
          ((and (atom x) (null (is_genvar x)))
           (progn
            (cond
             ((setq |llm| (|get| x '|localModemap| |$InteractiveFrame|))
               (setq x (list (cadar |llm|)))))
            (|sayMSG|
             (cons "Function"
              (append
               (|bright| (|rassocSub| x |$mapSubNameAlist|))
               (cons "traced" nil))))))))))
      (do ((t1 /tracenames (cdr t1)) (x nil))
          ((or (atom t1) (progn (setq x (car t1)) nil)) nil)
       (seq
        (exit
         (cond
          ((and (pairp x) 
                (progn (setq |d| (qcar x)) (setq |l| (qcdr x)) t)
                (|isDomainOrPackage| |d|))
           (progn
            (setq |suffix| (cond ((|isDomain| |d|) "domain") (t "package")))
            (|sayBrightly|
             (cons "   Functions traced in "
              (cons |suffix|
               (cons '|%b| 
                (cons (|devaluate| |d|) 
                 (cons '|%d| 
                  (cons ":" nil)))))))
            (do ((t2 (|orderBySlotNumber| |l|) (cdr t2)) (x nil))
                ((or (atom t2) (progn (setq x (car t2)) nil)) nil)
              (seq
               (exit
                (|reportSpadTrace| '|   | (TAKE 4 x)))))
            (terpri))))))))))))) 

@
\subsection{defun tracelet}
\begin{verbatim}
;tracelet(fn,vars) ==
;  if GENSYMP fn and stupidIsSpadFunction EVAL fn then
;    fn := EVAL fn
;    if COMPILED_-FUNCTION_-P fn then fn:=BPINAME fn
;  fn = 'Undef => nil
;  vars:=
;    vars="all" => "all"
;    l:= LASSOC(fn,$letAssoc) => UNION(vars,l)
;    vars
;  $letAssoc:= [ [fn,:vars],:$letAssoc]
;  if $letAssoc then SETLETPRINTFLAG true
;  $TRACELETFLAG : local := true
;  $QuickLet : local := false
;  ^MEMQ(fn,$traceletFunctions) and ^IS__GENVAR fn and COMPILED_-FUNCTION_-P SYMBOL_-FUNCTION fn
;    and not stupidIsSpadFunction fn and not GENSYMP fn =>
;      ($traceletFunctions:= [fn,:$traceletFunctions]; compileBoot fn ;
;       $traceletFunctions:= DELETE(fn,$traceletFunctions) )
\end{verbatim}

<<defun tracelet>>=
(defun |tracelet| (|fn| |vars|)
 (prog ($traceletflag |$QuickLet| |l|)
  (declare (special $traceletflag |$QuickLet|))
  (return
   (progn
    (cond
     ((and (gensymp |fn|) (|stupidIsSpadFunction| (eval |fn|)))
       (setq |fn| (eval |fn|))
       (cond
        ((compiled-function-p |fn|) (setq |fn| (bpiname |fn|)))
        (t nil))))
    (cond
     ((eq |fn| '|Undef|) nil)
     (t
       (setq |vars|
         (cond
          ((eq |vars| '|all|) '|all|)
          ((setq |l| (lassoc |fn| |$letAssoc|)) (|union| |vars| |l|))
          (t |vars|)))
       (setq |$letAssoc| (cons (cons |fn| |vars|) |$letAssoc|))
       (cond (|$letAssoc| (setletprintflag t)))
       (setq $traceletflag t)
       (setq |$QuickLet| nil)
       (cond
        ((and (null (memq |fn| |$traceletFunctions|))
              (null (is_genvar |fn|))
              (compiled-function-p (symbol-function |fn|))
              (null (|stupidIsSpadFunction| |fn|))
              (null (gensymp |fn|)))
          (progn
           (setq |$traceletFunctions| (cons |fn| |$traceletFunctions|))
           (|compileBoot| |fn|)
           (setq |$traceletFunctions|
             (|delete| |fn| |$traceletFunctions|))))))))))) 

@
\subsection{defun breaklet}
\begin{verbatim}
;breaklet(fn,vars) ==
;                       --vars is "all" or a list of variables
;  --$letAssoc ==> (.. (=fn .. (BREAK . all))) OR (.. (=fn .. (BREAK . vl)))
;  if GENSYMP fn and stupidIsSpadFunction EVAL fn then
;    fn := EVAL fn
;    if COMPILED_-FUNCTION_-P fn then fn:= BPINAME fn
;  fn = "Undef" => nil
;  fnEntry:= LASSOC(fn,$letAssoc)
;  vars:=
;    pair:= ASSOC("BREAK",fnEntry) => UNION(vars,rest pair)
;    vars
;  $letAssoc:=
;    null fnEntry => [[fn,:LIST ["BREAK",:vars]],:$letAssoc]
;    pair => (RPLACD(pair,vars); $letAssoc)
;  if $letAssoc then SETLETPRINTFLAG true
;  $QuickLet:local := false
;  ^MEMQ(fn,$traceletFunctions) and not stupidIsSpadFunction fn
;    and not GENSYMP fn =>
;      $traceletFunctions:= [fn,:$traceletFunctions]
;      compileBoot fn
;      $traceletFunctions:= DELETE(fn,$traceletFunctions)
\end{verbatim}

;;;     ***       |breaklet| REDEFINED
<<defun breaklet>>=
(defun |breaklet| (|fn| |vars|)
 (prog (|$QuickLet| |fnEntry| |pair|)
  (declare (special |$QuickLet|))
  (return
   (progn
    (cond
     ((and (gensymp |fn|) (|stupidIsSpadFunction| (eval |fn|)))
       (setq |fn| (eval |fn|))
       (cond
        ((compiled-function-p |fn|) (setq |fn| (bpiname |fn|)))
        (t nil))))
    (cond
     ((eq |fn| '|Undef|) nil)
     (t
      (setq |fnEntry| (lassoc |fn| |$letAssoc|))
      (setq |vars|
       (cond
        ((setq |pair| (|assoc| 'break |fnEntry|))
          (|union| |vars| (cdr |pair|)))
        (t |vars|)))
      (setq |$letAssoc|
       (cond
        ((null |fnEntry|)
          (cons (cons |fn| (list (cons 'break |vars|))) |$letAssoc|))
        (|pair| (rplacd |pair| |vars|) |$letAssoc|)))
      (cond (|$letAssoc| (setletprintflag t)))
      (setq |$QuickLet| nil)
      (cond
       ((and (null (memq |fn| |$traceletFunctions|))
             (null (|stupidIsSpadFunction| |fn|))
             (null (gensymp |fn|)))
        (progn
         (setq |$traceletFunctions| (cons |fn| |$traceletFunctions|))
         (|compileBoot| |fn|)
         (setq |$traceletFunctions|
          (|delete| |fn| |$traceletFunctions|))))))))))) 

@
\subsection{defun stupidIsSpadFunction}
\begin{verbatim}
;stupidIsSpadFunction fn ==
;  -- returns true if the function pname has a semi-colon in it
;  -- eventually, this will use isSpadFunction from luke boot
;  STRPOS('"_;",PNAME fn,0,NIL)
\end{verbatim}

<<defun stupidIsSpadFunction>>=
(defun |stupidIsSpadFunction| (|fn|)
 (strpos ";" (pname |fn|) 0 nil)) 

@

\subsection{defun break}
\begin{verbatim}
;break msg ==
;  condition:= MONITOR_,EVALTRAN(_/BREAKCONDITION,nil)
;  -- The next line is to try to deal with some reported cases of unwanted
;  -- backtraces appearing, MCD.
;  ENABLE_-BACKTRACE(nil)
;  EVAL condition =>
;    sayBrightly msg
;    INTERRUPT()
\end{verbatim}

;;;     ***       |break| REDEFINED

<<defun break>>=
(defun |break| (|msg|)
 (prog (|condition|)
  (return
   (progn
    (setq |condition| (|MONITOR,EVALTRAN| /breakcondition nil))
    (enable-backtrace nil)
    (cond ((eval |condition|) (progn (|sayBrightly| |msg|) (interrupt)))))))) 

@
\subsection{defun compileBoot}
\begin{verbatim}
;compileBoot fn == _/D_,1(LIST fn,'(_/COMP),nil,nil)
\end{verbatim}

<<defun compileBoot>>=
(defun |compileBoot| (|fn|)
 (|/D,1| (list |fn|) '(/comp) nil nil)) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{undo}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )undo}
\item{\tt )undo} {\it integer}
\item{\tt )undo} {\it integer [option]}
\item{\tt )undo} {\tt )redo}
\end{list}
%
where {\it option} is one of
%
\begin{list}{}
\item{\tt )after}
\item{\tt )before}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to
restore the state of the user environment to an earlier
point in the interactive session.
The argument of an {\tt )undo} is an integer which must designate some
step number in the interactive session.

\begin{verbatim}
)undo n
)undo n )after
\end{verbatim}
These commands return the state of the interactive
environment to that immediately after step {\tt n}.
If {\tt n} is a positive number, then {\tt n} refers to step nummber
{\tt n}. If {\tt n} is a negative number, it refers to the \tt n-th
previous command (that is, undoes the effects of the last $-n$
commands).

A {\tt )clear all} resets the {\tt )undo} facility.
Otherwise, an {\tt )undo} undoes the effect of {\tt )clear} with
options {\tt properties}, {\tt value}, and {\tt mode}, and
that of a previous {\tt undo}.
If any such system commands are given between steps $n$ and
$n + 1$ ($n > 0$), their effect is undone
for {\tt )undo m} for any $0 < m \leq n$..

The command {\tt )undo} is equivalent to {\tt )undo -1} (it undoes
the effect of the previous user expression).
The command {\tt )undo 0} undoes any of the above system commands
issued since the last user expression.

\begin{verbatim}
)undo n )before
\end{verbatim}
This command returns the state of the interactive
environment to that immediately before step {\tt n}.
Any {\tt )undo} or {\tt )clear} system commands
given before step {\tt n} will not be undone.

\begin{verbatim}
)undo )redo
\end{verbatim}
This command reads the file {\tt redo.input}.
created by the last {\tt )undo} command.
This file consists of all user input lines, excluding those
backtracked over due to a previous {\tt )undo}.

\par\noindent{\bf Also See:} \fnref{history}

The command {\tt )history )write} will eliminate the ``undone'' command
lines of your program.
\section{Variables Used}
\section{Data Structures}
[[$frameRecord = [delta1, delta2,... ] ]] where
[[delta(i)]] contains changes in the ``backwards'' direction.
Each [[delta(i)]] has the form [[((var . proplist)...)]] where
proplist denotes an ordinary proplist. For example, an entry
of the form [[((x (value) (mode (Integer)))...)]] indicates that
to undo 1 step, [[x]]'s value is cleared and its mode should be set
to [[(Integer)]].

A [[delta(i)]] of the form [[(systemCommand . delta)]] is a special
delta indicating changes due to system commands executed between
the last command and the current command. By recording these deltas
separately, it is possible to undo to either BEFORE or AFTER
the command. These special [[delta(i)]]s are given ONLY when a
a system command is given which alters the environment.

Note: [[recordFrame('system)]] is called before a command is executed, and
[[recordFrame('normal)]] is called after (see processInteractive1).
If no changes are found for former, no special entry is given.

The [[$previousBindings]] is a copy of the 
[[CAAR $InteractiveFrame]]. This is used to
compute the [[delta(i)]]s stored in [[$frameRecord]].
\section{Functions}
\subsection{Initial Undo Variables}
\begin{verbatim}
$undoFlag := true     --Default setting for undo is "on"
$frameRecord  := nil  --Initial setting for frame record
$previousBindings := nil
\end{verbatim}
<<initvars>>=
(defvar |$undoFlag| t "t means we record undo information")
(defvar |$frameRecord| nil "a list of value changes") 
(defvar |$previousBindings| nil "a copy of Interactive Frame info for undo") 
(defvar |$reportUndo| nil "t means we report the steps undo takes")
@
\subsection{defun undo}
\begin{verbatim}
undo(l) ==
--undo takes one option ")redo" which simply reads "redo.input",
--  a file created by every normal )undo command (see below)
  undoWhen := 'after
  if $options is [[key]] then
    stringPrefix?(s := PNAME key,'"redo") =>
      $options := nil           --clear $options so that "read" won't see them
      read '(redo_.input)
    not stringPrefix?(s,'"before") =>
       userError '"only option to undo is _")redo_""
    undoWhen := 'before
  n :=
    null l => -1
    first l
  if IDENTP n then
    n := PARSE_-INTEGER PNAME n
    if not FIXP n then userError '"undo argument must be an integer"
  $InteractiveFrame := undoSteps(undoCount n,undoWhen)
  nil
\end{verbatim}
<<defun undo>>=
(defun |undo| (l)
 (prog (tmp1 key s undoWhen n)
  (return
   (progn
    (setq undoWhen '|after|)
    (when
      (and (pairp |$options|)
           (eq (qcdr |$options|) nil)
           (progn
            (setq tmp1 (qcar |$options|))
            (and (pairp tmp1)
                 (eq (qcdr tmp1) nil)
                 (progn (setq key (qcar tmp1)) t)))
       (cond
        ((|stringPrefix?| (setq s (pname key)) "redo")
          (setq |$options| nil) 
          (|read| '(|redo.input|)))
        ((null (|stringPrefix?| s "before"))
          (|userError| "only option to undo is \")redo\""))
        (t 
          (setq undoWhen '|before|)))))
    (if (null l)
      (setq n (spaddifference 1))
      (setq n (car l)))
    (when (identp n)
      (setq n (parse-integer (pname n)))
      (cond
       ((null (fixp n)) 
         (|userError| "undo argument must be an integer"))
       (t 
         nil)))
    (setq |$InteractiveFrame| (|undoSteps| (|undoCount| n) undoWhen))
    nil)))) 

@
\subsection{defun recordFrame}
\begin{verbatim}
recordFrame(systemNormal) ==
  null $undoFlag => nil        --do nothing if facility is turned off
  currentAlist := KAR $frameRecord
  delta := diffAlist(CAAR $InteractiveFrame,$previousBindings)
  if systemNormal = 'system then
    null delta => return nil     --do not record
    delta := ['systemCommand,:delta]
  $frameRecord := [delta,:$frameRecord]
  $previousBindings := --copy all but the individual properties
    [CONS(CAR x,[CONS(CAR y,CDR y) for y in CDR x]) for x in CAAR $InteractiveFrame]
  first $frameRecord
\end{verbatim}
<<defun recordFrame>>=
(defun |recordFrame| (systemNormal)
 (prog (currentAlist delta)
  (return
   (seq
    (cond 
     ((null |$undoFlag|) nil)
     (t 
       (setq currentAlist (kar |$frameRecord|))
       (setq delta 
         (|diffAlist| (caar |$InteractiveFrame|) |$previousBindings|))
       (cond
        ((eq systemNormal '|system|)
          (cond 
           ((null delta)
             (return nil))
           (t
             (setq delta (cons '|systemCommand| delta))))))
       (setq |$frameRecord| (cons delta |$frameRecord|))
       (setq |$previousBindings|
        (prog (tmp0)
         (setq tmp0 nil)
         (return
          (do ((tmp1 (caar |$InteractiveFrame|) (cdr tmp1)) (x nil))
              ((or (atom tmp1) 
                   (progn (setq x (car tmp1)) nil))
                (nreverse0 tmp0))
           (seq
            (exit
             (setq tmp0
              (cons 
               (cons 
                (car x)
                (prog (tmp2)
                 (setq tmp2 nil)
                 (return
                  (do ((tmp3 (cdr x) (cdr tmp3)) (|y| nil))
                      ((or (atom tmp3) 
                           (progn (setq |y| (car tmp3)) nil))
                        (nreverse0 tmp2))
                   (seq
                    (exit
                     (setq tmp2 (cons (cons (car |y|) (cdr |y|)) tmp2))))))))
                tmp0))))))))
       (car |$frameRecord|))))))) 

@
\subsection{defun diffAlist}
\begin{verbatim}
diffAlist(new,old) ==
--record only those properties which are different
  for (pair := [name,:proplist]) in new repeat
    -- name has an entry both in new and old world
    -- (1) if the old world had no proplist for that variable, then
    --     record NIL as the value of each new property
    -- (2) if the old world does have a proplist for that variable, then
    --     a) for each property with a value: give the old value
    --     b) for each property missing:      give NIL as the old value
    oldPair := ASSQ(name,old) =>
      null (oldProplist := CDR oldPair) =>
      --record old values of new properties as NIL
        acc := [[name,:[[prop] for [prop,:.] in proplist]],:acc]
      deltas := nil
      for (propval := [prop,:val]) in proplist repeat
        null (oldPropval := ASSOC(prop,oldProplist)) => --missing property
          deltas := [[prop],:deltas]
        EQ(CDR oldPropval,val) => 'skip
        deltas := [oldPropval,:deltas]
      deltas => acc := [[name,:NREVERSE deltas],:acc]
    acc := [[name,:[[prop] for [prop,:.] in proplist]],:acc]
--record properties absent on new list (say, from a )cl all)
  for (oldPair := [name,:r]) in old repeat
    r and null LASSQ(name,new) =>
      acc := [oldPair,:acc]
    -- name has an entry both in new and old world
    -- (1) if the new world has no proplist for that variable
    --     (a) if the old world does, record the old proplist
    --     (b) if the old world does not, record nothing
    -- (2) if the new world has a proplist for that variable, it has
    --     been handled by the first loop.
  res := NREVERSE acc
  if BOUNDP '$reportUndo and $reportUndo then reportUndo res
  res
\end{verbatim}
<<defun diffAlist>>=
(defun |diffAlist| (new old)
 (prog (proplist oldPair oldProplist val oldPropval deltas prop name r acc res)
  (return
   (seq
    (progn
     (do ((tmp0 new (cdr tmp0)) (pair nil))
         ((or (atom tmp0) 
              (progn (setq pair (car tmp0)) nil)
              (progn 
               (progn 
                (setq name (car pair))
                (setq proplist (cdr pair))
                pair) 
               nil))
             nil)
      (seq
       (exit
        (cond
         ((setq oldPair (assq name old))
          (cond
           ((null (setq oldProplist (cdr oldPair)))
             (setq acc
              (cons
               (cons
                 name 
                 (prog (tmp1)
                  (setq tmp1 nil)
                  (return
                   (do ((tmp2 proplist (cdr tmp2)) (tmp3 nil))
                       ((or (atom tmp2) 
                            (progn (setq tmp3 (car tmp2)) nil)
                            (progn 
                             (progn (setq prop (car tmp3)) tmp3)
                             nil))
                         (nreverse0 tmp1))
                    (seq
                     (exit
                      (setq tmp1 (cons (cons prop nil) tmp1))))))))
               acc)))
           (t 
             (setq deltas nil)
             (do ((tmp4 proplist (cdr tmp4)) (|propval| nil))
                 ((or (atom tmp4) 
                      (progn (setq |propval| (car tmp4)) nil)
                      (progn
                       (progn
                        (setq prop (car |propval|))
                        (setq val (cdr |propval|))
                        |propval|)
                       nil))
                   nil)
              (seq
               (exit
                (cond
                 ((null (setq oldPropval (|assoc| prop oldProplist)))
                   (setq deltas (cons (cons prop nil) deltas)))
                 ((eq (cdr oldPropval) val) '|skip|)
                 (t (setq deltas (cons oldPropval deltas)))))))
             (when deltas
               (setq acc 
                (cons (cons name (nreverse deltas)) acc))))))
         (t
           (setq acc
            (cons
             (cons
              name
              (prog (tmp5)
               (setq tmp5 nil)
               (return
                (do ((tmp6 proplist (cdr tmp6)) (tmp7 nil))
                    ((or (atom tmp6) 
                         (progn (setq tmp7 (CAR tmp6)) nil)
                         (progn
                          (progn (setq prop (CAR tmp7)) tmp7)
                          nil))
                       (nreverse0 tmp5))
                 (seq
                  (exit
                   (setq tmp5 (cons (cons prop nil) tmp5))))))))
             acc)))))))
     (seq
      (do ((tmp8 old (cdr tmp8)) (oldPair nil))
          ((or (atom tmp8) 
               (progn (setq oldPair (car tmp8)) nil)
               (progn
                (progn
                 (setq name (car oldPair))
                 (setq r (cdr oldPair))
                 oldPair)
                nil))
              nil)
       (seq
        (exit
         (cond
          ((and r (null (lassq name new)))
            (exit 
             (setq acc (cons oldPair acc))))))))
      (setq res (nreverse acc))
      (cond 
       ((and (boundp '|$reportUndo|) |$reportUndo|)
         (|reportUndo| res)))
      (exit res))))))) 

@
\subsection{defun reportUndo}
This function is enabled by setting [[|$reportUndo]] to a non-nil value.
An example of the output generated is:
\begin{verbatim}
r := binary(22/7)
 

           ___
   (1)  11.001
                                                        Type: BinaryExpansion
Properties of % ::
  value was: NIL
  value is:  ((|BinaryExpansion|) WRAPPED . #(1 (1 1) NIL (0 0 1)))
Properties of r ::
  value was: NIL
  value is:  ((|BinaryExpansion|) WRAPPED . #(1 (1 1) NIL (0 0 1)))

\end{verbatim}

\begin{verbatim}
reportUndo acc ==
  for [name,:proplist] in acc repeat
    sayBrightly STRCONC("Properties of ",PNAME name,'" ::")
    curproplist := LASSOC(name,CAAR $InteractiveFrame)
    for [prop,:value] in proplist repeat
      sayBrightlyNT ['"  ",prop,'" was: "]
      pp value
      sayBrightlyNT ['"  ",prop,'" is:  "]
      pp LASSOC(prop,curproplist)
\end{verbatim}
<<defun reportUndo>>=
(defun |reportUndo| (acc)
 (prog (name proplist curproplist prop value)
  (return
   (seq
    (do ((tmp0 acc (cdr tmp0)) (tmp1 nil))
        ((or (atom tmp0) 
             (progn (setq tmp1 (car tmp0)) nil)
             (progn
              (progn
               (setq name (car tmp1))
               (setq proplist (cdr tmp1))
               tmp1)
              nil))
            nil)
     (seq
      (exit
       (progn
        (|sayBrightly|
          (strconc '|Properties of | (pname name) " ::"))
        (setq curproplist (lassoc name (caar |$InteractiveFrame|)))
        (do ((tmp2 proplist (cdr tmp2)) (tmp3 nil))
            ((or (atom tmp2) 
                 (progn (setq tmp3 (car tmp2)) nil)
                 (progn 
                  (progn 
                   (setq prop (car tmp3))
                   (setq value (cdr tmp3))
                   tmp3)
                  nil))
                nil)
         (seq
          (exit
           (progn
            (|sayBrightlyNT|
             (cons "  " (cons prop (cons " was: " nil))))
            (|pp| value)
            (|sayBrightlyNT| 
             (cons "  " (cons prop (cons " is:  " nil))))
            (|pp| (lassoc prop curproplist)))))))))))))) 

@
\subsection{defun clearFrame}
\begin{verbatim}
clearFrame() ==
  clearCmdAll()
  $frameRecord := nil
  $previousBindings := nil
\end{verbatim}
<<defun clearFrame>>=
(defun |clearFrame| ()
 (progn 
  (|clearCmdAll|)
  (setq |$frameRecord| nil) 
  (setq |$previousBindings| nil))) 

@
\subsection{defun undoCount}
\begin{verbatim}
--=======================================================================
--              Undoing previous m commands
--=======================================================================
undoCount(n) ==  --computes the number of undo's, given $IOindex
--pp ["IOindex = ",$IOindex]
  m :=
    n >= 0 => $IOindex - n - 1
    -n
  m >= $IOindex => userError STRCONC('"Magnitude of undo argument must be less than step number (",STRINGIMAGE $IOindex,'").")
  m
\end{verbatim}
<<defun undoCount>>=
(defun |undoCount| (n)
 (prog (m)
  (return
   (progn
    (setq m 
     (cond 
       ((>= n 0) (spaddifference (spaddifference |$IOindex| n) 1))
       (t (spaddifference n))))
    (cond
     ((>= m |$IOindex|)
       (|userError| 
        (strconc "Magnitude of undo argument must be less than step number ("
           (stringimage |$IOindex|) ").")))
     (t m)))))) 

@
\subsection{defun undoSteps}
\begin{verbatim}
undoSteps(m,beforeOrAfter) ==
-- undoes m previous commands; if )before option, then undo one extra at end
--Example: if $IOindex now is 6 and m = 2 then general layout of $frameRecord,
--  after the call to recordFrame below will be:
--  (<change for systemcommands>
--  (<change for #5> <change for system commands>
--  (<change for #4> <change for system commands>
--  (<change for #3> <change for system commands>
--   <change for #2> <change for system commands>
--   <change for #1> <change for system commands>) where system
--  command entries are optional and identified by (systemCommand . change).
--  For a ")undo 3 )after", m = 2 and undoStep swill restore the environment
--  up to, but not including <change for #3>.
--  An "undo 3 )before" will additionally restore <change for #3>.
--  Thus, the later requires one extra undo at the end.
  writeInputLines('redo,$IOindex - m)
  recordFrame('normal)  --do NOT mark this as a system command change
                       --do this undo FIRST (i=0 case)
  env := COPY CAAR $InteractiveFrame
  for i in 0..m for framelist in tails $frameRecord repeat
    env := undoSingleStep(first framelist,env)
    framelist is [.,['systemCommand,:systemDelta],:.] =>
--     pp '"===============> AHA <============="
       framelist := rest framelist             --undoing system commands given
       env := undoSingleStep(systemDelta,env)  --  before command line
    lastTailSeen := framelist
  if beforeOrAfter = 'before then  --do one additional undo for )before
    env := undoSingleStep(first rest lastTailSeen,env)
  $frameRecord := rest $frameRecord --flush the effect of extra recordFrame
  $InteractiveFrame := LIST LIST env
\end{verbatim}
<<defun undoSteps>>=
(defun |undoSteps| (m beforeOrAfter)
 (prog (tmp1 tmp2 systemDelta framelist lastTailSeen env)
  (return
   (seq
    (progn
     (|writeInputLines| '|redo| (spaddifference |$IOindex| m))
     (|recordFrame| '|normal|)
     (setq env (copy (caar |$InteractiveFrame|)))
     (do ((|i| 0 (qsadd1 |i|)) (framelist |$frameRecord| (cdr framelist)))
         ((or (qsgreaterp |i| m) (atom framelist)) nil)
      (seq
       (exit
        (progn
         (setq env (|undoSingleStep| (CAR framelist) env))
         (cond
           ((and (pairp framelist) 
                 (progn
                  (setq tmp1 (qcdr framelist))
                  (and (pairp tmp1) 
                       (progn
                        (setq tmp2 (qcar tmp1))
                        (and (pairp tmp2)
                             (eq (qcar tmp2) '|systemCommand|)
                             (progn 
                              (setq systemDelta (qcdr tmp2))
                              t))))))
             (setq framelist (cdr framelist))
             (setq env (|undoSingleStep| systemDelta env)))
           (t (setq lastTailSeen framelist)))))))
     (cond
      ((eq beforeOrAfter '|before|)
        (setq env (|undoSingleStep| (car (cdr lastTailSeen)) env))))
     (setq |$frameRecord| (cdr |$frameRecord|))
     (setq |$InteractiveFrame| (list (list env)))))))) 

@
\subsection{defun undoSingleStep}
\begin{verbatim}
undoSingleStep(changes,env) ==
--Each change is a name-proplist pair. For each change:
--  (1) if there exists a proplist in env, then for each prop-value change:
--      (a) if the prop exists in env, RPLAC in the change value
--      (b) otherwise, CONS it onto the front of prop-values for that name
--  (2) add change to the front of env
--  pp '"----Undoing 1 step--------"
--  pp changes
  for (change := [name,:changeList]) in changes repeat
    if LASSOC('localModemap,changeList) then
      changeList := undoLocalModemapHack changeList
    pairlist := ASSQ(name,env) =>
      proplist := CDR pairlist =>
        for (pair := [prop,:value]) in changeList repeat
          node := ASSQ(prop,proplist) => RPLACD(node,value)
          RPLACD(proplist,[CAR proplist,:CDR proplist])
          RPLACA(proplist,pair)
      RPLACD(pairlist,changeList)
    env := [change,:env]
  env
\end{verbatim}
<<defun undoSingleStep>>=
(defun |undoSingleStep| (changes env)
 (prog (name changeList pairlist proplist prop value node)
  (return
   (seq
    (progn
     (do ((tmp0 changes (cdr tmp0)) (|change| nil))
         ((or (atom tmp0) 
              (progn (setq |change| (car tmp0)) nil)
              (progn 
               (progn 
                (setq name (car |change|))
                (setq changeList (cdr |change|))
                |change|)
               nil))
             nil)
      (seq
       (exit
        (progn
         (when (lassoc '|localModemap| changeList)
           (setq changeList (|undoLocalModemapHack| changeList)))
         (cond
          ((setq pairlist (assq name env))
            (cond
             ((setq proplist (cdr pairlist))
               (do ((tmp1 changeList (cdr tmp1)) (pair nil))
                   ((or (atom tmp1) 
                        (progn (setq pair (car tmp1)) nil)
                        (progn
                         (progn
                          (setq prop (car pair))
                          (setq value (cdr pair))
                          pair)
                          nil))
                        nil)
                (seq
                 (exit
                  (cond
                   ((setq node (assq prop proplist))
                     (rplacd node value))
                   (t
                     (rplacd proplist
                       (cons (car proplist) (cdr proplist)))
                     (rplaca proplist pair)))))))
             (t (rplacd pairlist changeList))))
          (t 
            (setq env (cons |change| env))))))))
     env))))) 

@
\subsection{defun undoLocalModemapHack} 
\begin{verbatim}
undoLocalModemapHack changeList ==
  [newPair for (pair := [name,:value]) in changeList | newPair] where newPair  ==
     name = 'localModemap => [name]
     pair
\end{verbatim}
<<defun undoLocalModemapHack>>=
(defun |undoLocalModemapHack| (changeList)
 (prog (name value)
  (return
   (seq
    (prog (tmp0)
     (setq tmp0 nil)
     (return
      (do ((tmp1 changeList (cdr tmp1)) (pair nil))
          ((or (atom tmp1) 
               (progn (setq pair (car tmp1)) nil)
               (progn
                (progn
                 (setq name (car pair))
                 (setq value (cdr pair))
                 pair)
                nil))
              (nreverse0 tmp0))
       (seq
        (exit
         (cond
          ((cond
             ((eq name '|localModemap|) (cons name nil))
             (t pair))
           (setq tmp0 
            (cons 
             (cond 
              ((eq name '|localModemap|) (cons name nil))
              (t pair)) tmp0))))))))))))) 

@
\subsection{defun removeUndoLines}
Removing undo lines from [[)hist )write linelist]]
\begin{verbatim}
removeUndoLines u == --called by writeInputLines
  xtra :=
    STRINGP $currentLine => [$currentLine]
    REVERSE $currentLine
  xtra := [x for x in xtra | not stringPrefix?('")history",x)]
  u := [:u, :xtra]
  not (or/[stringPrefix?('")undo",x) for x in u])  => u
  --(1) reverse the list
  --(2) walk down the (reversed) list: when >n appears remove:
  --    (a) system commands
  --    (b) if n > 0: (replace n by n-1; remove a command; repeat (a-b))
  savedIOindex := $IOindex  --save value
  $IOindex := 1
  for y in tails u repeat
    (x := first y).0 = char '_) =>
      stringPrefix?('")undo",s := trimString x) => --parse "undo )option"
        s1 := trimString SUBSTRING(s,5,nil)
        if s1 ^= '")redo" then
          m := charPosition(char '_),s1,0)
          code :=
            m < MAXINDEX s1 => s1.(m + 1)
            char 'a
          s2 := trimString SUBSTRING(s1,0,m)
        n :=
           s1 = '")redo" => 0
           s2 ^= '"" => undoCount PARSE_-INTEGER s2
           -1
        RPLACA(y,CONCAT('">",code,STRINGIMAGE n))
      nil
    $IOindex := $IOindex + 1   --referenced by undoCount
  acc := nil
  for y in tails NREVERSE u repeat
    (x := first y).0 = char '_> =>
      code := x . 1                                 --code = a,b, or r
      n := PARSE_-INTEGER SUBSTRING(x,2,nil)        --n = number of undo steps
      y := rest y                                   --kill >n line
      while y repeat
        c := first y
        c.0 = char '_) or c.0 = char '_> => y := rest y  --kill system commands
        n = 0 => return nil                              --including undos
        n := n - 1
        y := rest y                                 --kill command
      y and code^= char 'b => acc := [c,:acc]       --add last unless )before
    acc := [x,:acc]
  $IOindex := savedIOindex
  acc
\end{verbatim}
<<defun removeUndoLines>>=
(defun |removeUndoLines| (u)
 (prog (xtra savedIOindex s s1 m s2 x code c n y acc)
  (return
   (seq
    (progn
     (setq xtra 
      (cond
       ((stringp |$currentLine|) (cons |$currentLine| nil))
       (t (reverse |$currentLine|))))
     (setq xtra
      (prog (tmp0)
       (setq tmp0 nil)
       (return
        (do ((tmp1 xtra (cdr tmp1)) (x nil))
            ((or (atom tmp1)
                 (progn (setq x (car tmp1)) nil))
               (nreverse0 tmp0))
         (seq
          (exit
           (cond
            ((null (|stringPrefix?| ")history" x))
              (setq tmp0 (cons x tmp0))))))))))
     (setq u (append u xtra))
     (cond
      ((null
        (prog (tmp2)
         (setq tmp2 nil)
         (return
          (do ((tmp3 nil tmp2) (tmp4 u (cdr tmp4)) (x nil))
              ((or tmp3 (atom tmp4) (progn (setq x (car tmp4)) nil)) tmp2)
           (seq
            (exit
             (setq tmp2 
               (or tmp2 (|stringPrefix?| ")undo" x))))))))) u)
      (t
        (setq savedIOindex |$IOindex|)
        (setq |$IOindex| 1)
        (do ((y u (cdr y)))
            ((atom y) nil)
         (seq
          (exit
           (cond
            ((eql (elt (setq x (car y)) 0) #\) )
              (cond
               ((|stringPrefix?| ")undo"
                                 (setq s (|trimString| x)))
                (setq s1 (|trimString| (substring s 5 nil)))
                (cond
                  ((nequal s1 ")redo")
                    (setq m (|charPosition| #\) s1 0))
                    (setq code
                     (cond
                       ((> (maxindex s1) m) (elt s1 (plus m 1)))
                       (t #\a)))
                    (setq s2 (|trimString| (substring s1 0 m)))))
                (setq n
                 (cond
                  ((string= s1 ")redo")
                     0)
                  ((nequal s2 "")
                    (|undoCount| (parse-integer s2)))
                  (t (spaddifference 1))))
                (rplaca y
                  (concat ">" code (stringimage n))))
               (t nil)))
            (t (setq |$IOindex| (plus |$IOindex| 1)))))))
        (setq acc nil)
        (do ((y (nreverse u) (cdr y)))
            ((atom y) nil)
         (seq
          (exit
           (cond
            ((eql (elt (setq x (car y)) 0) #\>)
              (setq code (elt x 1))
              (setq n (parse-integer (substring x 2 nil)))
              (setq y (cdr y))
              (do () 
                  ((null y) nil)
               (seq
                (exit
                 (progn
                  (setq c (car y))
                  (cond 
                   ((or (eql (elt c 0) #\))
                        (eql (elt c 0) #\>))
                     (setq y (cdr y)))
                   ((eql n 0)
                     (return nil))
                   (t
                     (setq n (spaddifference n 1))
                     (setq y (cdr y))))))))
              (cond
               ((and y (nequal code #\b))
                 (setq acc (cons c acc)))))
            (t (setq acc (cons x acc)))))))
        (setq |$IOindex| savedIOindex)
        acc)))))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{what}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\par\noindent{\bf User Level Required:} interpreter

\par\noindent{\bf Command Syntax:}
\begin{list}{}
\item{\tt )what categories} {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\item{\tt )what commands  } {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\item{\tt )what domains   } {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\item{\tt )what operations} {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\item{\tt )what packages  } {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\item{\tt )what synonym   } {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\item{\tt )what things    } {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\item{\tt )apropos        } {\it pattern1} \lanb{}{\it pattern2 ...\ranb{}}
\end{list}

\par\noindent{\bf Command Description:}

This command is used to display lists of things in the system.  The
patterns are all strings and, if present, restrict the contents of the
lists.  Only those items that contain one or more of the strings as
substrings are displayed.  For example,
\begin{verbatim}
)what synonym
\end{verbatim}
displays all command synonyms,
\begin{verbatim}
)what synonym ver
\end{verbatim}
displays all command synonyms containing the substring ``{\tt ver}'',
\begin{verbatim}
)what synonym ver pr
\end{verbatim}
displays all command synonyms
containing the substring  ``{\tt ver}'' or  the substring
``{\tt pr}''.
Output similar to the following will be displayed
\begin{verbatim}
---------------- System Command Synonyms -----------------

user-defined synonyms satisfying patterns:
      ver pr

  )apr ........................... )what things
  )apropos ....................... )what things
  )prompt ........................ )set message prompt
  )version ....................... )lisp *yearweek*
\end{verbatim}

Several other things can be listed with the {\tt )what} command:

\begin{description}
\item[{\tt categories}] displays a list of category constructors.
\index{what categories}
\item[{\tt commands}]  displays a list of  system commands available  at your
user-level.
\index{what commands}
Your user-level
\index{user-level}
is set via the  {\tt )set userlevel} command.
\index{set userlevel}
To get a description of a particular command, such as ``{\tt )what}'', issue
{\tt )help what}.
\item[{\tt domains}]   displays a list of domain constructors.
\index{what domains}
\item[{\tt operations}] displays a list of operations in  the system library.
\index{what operations}
It  is recommended that you  qualify this command with one or
more patterns, as there are thousands of operations available.  For
example, say you are looking for functions that involve computation of
eigenvalues.  To find their names, try {\tt )what operations eig}.
A rather large list of operations  is loaded into the workspace when
this command  is first issued.  This  list will be deleted  when you
clear the workspace  via {\tt )clear all} or {\tt )clear completely}.
It will be re-created if it is needed again.
\item[{\tt packages}]  displays a list of package constructors.
\index{what packages}
\item[{\tt synonym}]  lists system command synonyms.
\index{what synonym}
\item[{\tt things}]    displays all  of the  above types for  items containing
\index{what things}
the pattern strings as  substrings.
The command synonym  {\tt )apropos} is equivalent to
\index{apropos}
{\tt )what things}.
\end{description}

\par\noindent{\bf Also See:}
\fnref{display},
\fnref{set}, and
\fnref{show}

\subsection{defun what}
\begin{verbatim}
what l == whatSpad2Cmd l
\end{verbatim}
<<defun what>>=
(defun |what| (l)
 (|whatSpad2Cmd| l)) 

@

\subsection{defun whatSpad2Cmd}
\begin{verbatim}
whatSpad2Cmd l ==
  $e:local := $EmptyEnvironment
  null l => reportWhatOptions()
  [key0,:args] := l
  key := selectOptionLC(key0,$whatOptions,nil)
  null key => sayKeyedMsg("S2IZ0043",NIL)
  args := [fixpat p for p in args] where
    fixpat x ==
      x is [x',:.] => DOWNCASE x'
      DOWNCASE x
  key = 'things =>
    for opt in $whatOptions repeat
      not MEMQ(opt,'(things)) => whatSpad2Cmd [opt,:args]
  key = 'categories =>
    filterAndFormatConstructors('category,'"Categories",args)
  key = 'commands =>
    whatCommands(args)
  key = 'domains =>
    filterAndFormatConstructors('domain,'"Domains",args)
  key = 'operations =>
    apropos args
  key = 'packages =>
    filterAndFormatConstructors('package,'"Packages",args)
  key = 'synonyms =>
    printSynonyms(args)
\end{verbatim}

\subsection{defun whatSpad2Cmd,fixpat}
<<defun whatSpad2Cmd,fixpat>>=
(defun |whatSpad2Cmd,fixpat| (x)
 (prog (|x'|)
  (return
   (seq
    (if (and (pairp x) (progn (setq |x'| (qcar x)) t))
      (exit (downcase |x'|)))
    (exit (downcase x)))))) 

@

\subsection{defun whatSpad2Cmd}
<<defun whatSpad2Cmd>>=
(defun |whatSpad2Cmd| (arg)
 (prog (|$e| |key0| key args)
  (declare (special |$e|))
  (return
   (seq
    (progn
     (setq |$e| |$EmptyEnvironment|)
     (cond
      ((null arg) (|reportWhatOptions|))
      (t
        (setq |key0| (car arg))
        (setq args (cdr arg))
        (setq key (|selectOptionLC| |key0| |$whatOptions| nil))
        (cond
         ((null key) (|sayKeyedMsg| 's2iz0043 nil))
         (t
          (setq args
           (prog (t0)
            (setq t0 nil)
            (return
              (do ((t1 args (cdr t1)) (p nil))
                  ((or (atom t1)
                       (progn (setq p (car t1)) nil))
                 (nreverse0 t0))
               (seq
                (exit
                 (setq t0 (cons (|whatSpad2Cmd,fixpat| p) t0))))))))
          (seq
           (cond
            ((eq key '|things|)
              (do ((t2 |$whatOptions| (cdr t2)) (opt nil))
                  ((or (atom t2) (progn (setq opt (CAR t2)) nil)) nil)
               (seq
                (exit
                 (cond
                  ((null (memq opt '(|things|)))
                    (exit (|whatSpad2Cmd| (cons opt args)))))))))
            ((eq key '|categories|)
              (|filterAndFormatConstructors| '|category| "Categories" args))
            ((eq key '|commands|) (|whatCommands| args))
            ((eq key '|domains|)
              (|filterAndFormatConstructors| '|domain| "Domains" args))
            ((eq key '|operations|)
               (|apropos| args))
            ((eq key '|packages|)
              (|filterAndFormatConstructors| '|package| "Packages" args))
            (t
             (cond ((eq key '|synonyms|)
                      (|printSynonyms| args))))))))))))))) 

@

\subsection{defun filterAndFormatConstructors}
\begin{verbatim}
filterAndFormatConstructors(constrType,label,patterns) ==
  centerAndHighlight(label,$LINELENGTH,specialChar 'hbar)
  l := filterListOfStringsWithFn(patterns,whatConstructors constrType,
        function CDR)
  if patterns then
    null l =>
      sayMessage ['"   No ",label,'" with names matching patterns:",
        '%l,'"   ",'%b,:blankList patterns,'%d]
    sayMessage [label,'" with names matching patterns:",
      '%l,'"   ",'%b,:blankList patterns,'%d]
  l => pp2Cols l
\end{verbatim}

<<defun filterAndFormatConstructors>>=
(defun |filterAndFormatConstructors| (|constrType| |label| |patterns|)
 (prog (|l|)
  (return
   (progn (|centerAndHighlight| |label| $linelength 
           (|specialChar| '|hbar|))
    (setq |l|
     (|filterListOfStringsWithFn| |patterns|
       (|whatConstructors| |constrType|)
       (|function| cdr)))
    (cond (|patterns|
     (cond
      ((null |l|)
       (|sayMessage|
        (cons "   No "
         (cons |label|
          (cons " with names matching patterns:"
           (cons '|%l|
            (cons "   "
             (cons '|%b|
              (append (|blankList| |patterns|)
               (cons '|%d| nil))))))))))
      (t
        (|sayMessage|
         (cons |label|
          (cons " with names matching patterns:"
           (cons '|%l|
            (cons "   "
             (cons '|%b|
              (append (|blankList| |patterns|)
               (cons '|%d| nil))))))))))))
    (cond (|l| (|pp2Cols| |l|)))))))

@ 

\subsection{defun whatConstructors}
\begin{verbatim}
whatConstructors constrType ==
  -- here constrType should be one of 'category, 'domain, 'package
  MSORT [CONS(GETDATABASE(con,'ABBREVIATION), STRING(con))
    for con in allConstructors()
      | GETDATABASE(con,'CONSTRUCTORKIND) = constrType]
\end{verbatim}

<<defun whatConstructors>>=
(defun |whatConstructors| (|constrType|)
 (prog nil
  (return 
   (seq
    (msort
     (prog (t0)
      (setq t0 nil)
      (return
       (do ((t1 (|allConstructors|) (cdr t1)) (|con| nil))
           ((or (atom t1) (progn (setq |con| (car t1)) nil)) (nreverse0 t0))
        (seq
         (exit
          (cond
           ((boot-equal (getdatabase |con| 'constructorkind)
                        |constrType|)
             (setq t0
              (cons
               (cons
                (getdatabase |con| 'abbreviation)
                (string |con|))
               t0)))))))))))))) 

@

\subsection{defun apropos}
\begin{verbatim}
apropos l ==
  -- l is a list of operation name fragments
  -- this displays all operation names containing these fragments
  ops :=
    null l => allOperations()
    filterListOfStrings([(DOWNCASE STRINGIMAGE p) for p in l],allOperations())
  ops =>
    sayMessage '"Operations whose names satisfy the above pattern(s):"
    sayAsManyPerLineAsPossible MSORT ops
    sayKeyedMsg("S2IF0011",[first ops])
  sayMessage '"   There are no operations containing those patterns"
  NIL
\end{verbatim}

<<defun apropos>>=
(defun |apropos| (arg)
 (prog (|ops|)
  (return
   (seq
    (progn
     (setq |ops|
      (cond 
       ((null arg) (|allOperations|))
       (t
         (|filterListOfStrings|
          (prog (t0)
           (setq t0 nil)
           (return
            (do ((t1 arg (cdr t1)) (p nil))
                ((or (atom t1) (progn (setq p (car t1)) nil))
                  (nreverse0 t0))
            (seq (exit (setq t0 (cons (downcase (stringimage p)) t0)))))))
          (|allOperations|)))))
     (cond
      (|ops|
       (|sayMessage| "Operations whose names satisfy the above pattern(s):")
       (|sayAsManyPerLineAsPossible| (msort |ops|))
       (|sayKeyedMsg| 's2if0011 (cons (car |ops|) nil)))
      (t
       (|sayMessage| "   There are no operations containing those patterns")
       nil))))))) 

@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{with}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

; )library top level command  -- soon to be obsolete

\subsection{defun with}
<<defun with>>=
(defun |with| (args)
 (|library| args))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{workfiles}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{defun workfiles}
\begin{verbatim}
workfiles l == workfilesSpad2Cmd l
\end{verbatim}
<<defun workfiles>>=
(defun |workfiles| (l)
 (|workfilesSpad2Cmd| l)) 

@

\subsection{defun workfilesSpad2Cmd}
\begin{verbatim}
workfilesSpad2Cmd args ==
  args => throwKeyedMsg("S2IZ0047",NIL)
  deleteFlag := nil
  for [type,:.] in $options repeat
    type1 := selectOptionLC(type,'(boot lisp meta delete),nil)
    null type1 => throwKeyedMsg("S2IZ0048",[type])
    type1 = 'delete => deleteFlag := true
  for [type,:flist] in $options repeat
    type1 := selectOptionLC(type,'(boot lisp meta delete),nil)
    type1 = 'delete => nil
    for file in flist repeat
      fl := pathname [file,type1,'"*"]
      deleteFlag => SETQ($sourceFiles,DELETE(fl,$sourceFiles))
      null (MAKE_-INPUT_-FILENAME fl) => sayKeyedMsg("S2IZ0035",[namestring fl])
      updateSourceFiles fl
  SAY " "
  centerAndHighlight(" User-specified work files ",$LINELENGTH,specialChar 'hbar)
  SAY " "
  null $sourceFiles => SAY '"   no files specified"
  SETQ($sourceFiles,SORTBY('pathnameType,$sourceFiles))
  for fl in $sourceFiles repeat sayBrightly ["   " ,namestring fl]
\end{verbatim}
<<defun workfilesSpad2Cmd>>=
(defun |workfilesSpad2Cmd| (args)
 (prog (|deleteFlag| type |flist| |type1| |fl|)
  (return
   (seq
    (cond 
     (args (|throwKeyedMsg| 's2iz0047 nil))
     (t
       (setq |deleteFlag| nil)
       (do ((t0 |$options| (cdr t0)) (t1 nil))
           ((or (atom t0)
                (progn (setq t1 (car t0)) nil)
                (progn (progn (setq type (car t1)) t1) nil))
             nil)
        (seq
         (exit
          (progn 
           (setq |type1|
            (|selectOptionLC| type '(|boot| |lisp| |meta| |delete|) nil))
           (cond
            ((null |type1|)
              (|throwKeyedMsg| 's2iz0048 (cons type nil)))
            ((eq |type1| '|delete|)
              (setq |deleteFlag| t)))))))
       (do ((t2 |$options| (cdr t2)) (t3 nil))
           ((or (atom t2)
            (progn (setq t3 (CAR t2)) nil)
            (progn
             (progn 
              (setq type (car t3))
              (setq |flist| (cdr t3)) t3)
             nil))
            nil)
       (seq
        (exit
         (progn
          (setq |type1|
           (|selectOptionLC| type '(|boot| |lisp| |meta| |delete|) nil))
          (cond
           ((eq |type1| '|delete|) nil)
           (t
            (do ((t4 |flist| (CDR t4)) (|file| nil))
                ((or (atom t4) (progn (setq |file| (car t4)) nil)) nil)
             (seq
              (exit
               (progn
                (setq |fl|
                 (|pathname|
                  (cons |file| (cons |type1| (cons "*" nil)))))
                (cond 
                 (|deleteFlag|
                  (setq |$sourceFiles| (|delete| |fl| |$sourceFiles|)))
                 ((null (make-input-filename |fl|))
                  (|sayKeyedMsg|
                   's2iz0035 (cons (|namestring| |fl|) nil)))
                 (t (|updateSourceFiles| |fl|)))))))))))))
       (say " ")
       (|centerAndHighlight|
        '| User-specified work files |
        $linelength
        (|specialChar| '|hbar|))
       (say " ")
       (cond
        ((null |$sourceFiles|)
          (say "   no files specified"))
        (t
          (setq |$sourceFiles| (sortby '|pathnameType| |$sourceFiles|))
          (do ((t5 |$sourceFiles| (cdr t5)) (|fl| nil))
              ((or (atom t5) (progn (setq |fl| (car t5)) nil)) nil)
           (seq
            (exit
             (|sayBrightly|
               (cons "   " (cons (|namestring| |fl|) nil)))))))))))))) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{zsystemdevelopment}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{defun zsystemdevelopment}
\begin{verbatim}
zsystemdevelopment l == zsystemDevelopmentSpad2Cmd l
\end{verbatim}
<<defun zsystemdevelopment>>=
(defun |zsystemdevelopment| (arg)
 (|zsystemDevelopmentSpad2Cmd| arg)) 

@

\subsection{defun zsystemDevelopmentSpad2Cmd}
\begin{verbatim}
zsystemDevelopmentSpad2Cmd l == zsystemdevelopment1 (l,$InteractiveMode)
\end{verbatim}
<<defun zsystemDevelopmentSpad2Cmd>>=
(defun |zsystemDevelopmentSpad2Cmd| (arg)
 (|zsystemdevelopment1| arg |$InteractiveMode|)) 

@

\subsection{defun zsystemdevelopment1}
\begin{verbatim}
zsystemdevelopment1(l,im) ==
  $InteractiveMode : local := im
  fromopt := nil
  -- cycle through once to see if )from is mentioned
  for [opt,:optargs] in $options repeat
    opt1 := selectOptionLC(opt,'(from),nil)
    opt1 = 'from => fromopt := [['FROM,:optargs]]
  for [opt,:optargs] in $options repeat
    if null optargs then optargs := l
    newopt := APPEND(optargs,fromopt)
    opt1 := selectOptionLC(opt,'(from),nil)
    opt1 = 'from => nil
    opt = "c"   => _/D_,1 (newopt ,_/COMP(),NIL,NIL)
    opt = "d"   => _/D_,1 (newopt ,'DEFINE,NIL,NIL)
    opt = "dt"  => _/D_,1 (newopt ,'DEFINE,NIL,true)
    opt = "ct"  => _/D_,1 (newopt ,_/COMP(),NIL,true)
    opt = "ctl"  => _/D_,1 (newopt ,_/COMP(),NIL,'TRACELET)
    opt = "ec"  => _/D_,1 (newopt ,_/COMP(),true,NIL)
    opt = "ect" => _/D_,1 (newopt ,_/COMP(),true,true)
    opt = "e"   => _/D_,1 (newopt ,NIL,true,NIL)
    opt = "version" => version()
    opt = "pause" =>
      conStream := DEFIOSTREAM ('((DEVICE . CONSOLE) (QUAL . V)),120,0)
      NEXT conStream
      SHUT conStream
    opt = "update" or opt = "patch" =>
      $InteractiveMode := nil
      upf := [KAR optargs or _/VERSION, KADR optargs or _/WSNAME,
              KADDR optargs or '_*]
      fun := (opt = "patch" => '_/UPDATE_-LIB_-1; '_/UPDATE_-1)
      CATCH('FILENAM, FUNCALL(fun, upf))
      sayMessage '"   Update/patch is completed."
    null optargs =>
      sayBrightly ['"   An argument is required for",:bright opt]
    sayMessage ['"   Unknown option:",:bright opt,"    ",'%l,
      '"   Available options are", _
      :bright '"c ct e ec ect cls pause update patch compare record"]
\end{verbatim}
<<defun zsystemdevelopment1>>=
(defun |zsystemdevelopment1| (arg |im|)
 (prog (|$InteractiveMode| |fromopt| opt optargs |newopt| |opt1|
        |conStream| |upf| |fun|)
  (declare (special |$InteractiveMode|))
  (return
   (seq
    (progn
     (setq |$InteractiveMode| |im|)
     (setq |fromopt| nil)
     (do ((t0 |$options| (cdr t0)) (t1 nil))
         ((or (atom t0)
              (progn (setq t1 (car t0)) nil)
              (progn
               (progn
                (setq opt (CAR t1))
                (setq optargs (CDR t1))
                t1)
               nil))
           nil)
      (seq
       (exit
        (progn
         (setq |opt1| (|selectOptionLC| opt '(|from|) nil))
         (cond
          ((eq |opt1| '|from|)
            (setq |fromopt| (cons (cons 'from optargs) nil))))))))
     (do ((t2 |$options| (cdr t2)) (t3 nil))
         ((or (atom t2)
              (progn (setq t3 (car t2)) nil)
              (progn
               (progn
                (setq opt (car t3))
                (setq optargs (cdr t3))
                t3)
               nil))
          nil)
      (seq
       (exit
        (progn
         (cond ((null optargs) (setq optargs arg)))
         (setq |newopt| (append optargs |fromopt|))
         (setq |opt1| (|selectOptionLC| opt '(|from|) nil))
         (cond
          ((eq |opt1| '|from|)
            nil)
          ((eq opt '|c|)
            (|/D,1| |newopt| (/COMP) nil nil))
          ((eq opt '|d|)
            (|/D,1| |newopt| 'define nil nil))
          ((eq opt '|dt|)
            (|/D,1| |newopt| 'define nil t))
          ((eq opt '|ct|)
            (|/D,1| |newopt| (/COMP) nil t))
          ((eq opt '|ctl|)
            (|/D,1| |newopt| (/COMP) nil 'tracelet))
          ((eq opt '|ec|)
            (|/D,1| |newopt| (/COMP) t nil))
          ((eq opt '|ect|)
            (|/D,1| |newopt| (/COMP) t t))
          ((eq opt '|e|)
            (|/D,1| |newopt| nil t nil))
          ((eq opt '|version|)
            (|version|))
          ((eq opt '|pause|)
            (setq |conStream|
              (defiostream '((device . console) (qual . v)) 120 0))
            (next |conStream|)
            (shut |conStream|))
          ((or 
              (eq opt '|update|)
              (eq opt '|patch|))
            (setq |$InteractiveMode| nil)
            (setq |upf|
             (cons
              (or (kar optargs) /version)
              (cons
               (or (kadr optargs) /wsname)
               (cons (or (kaddr optargs) '*) nil))))
            (setq |fun|
             (cond
              ((eq opt '|patch|) '/update-lib-1)
              (t '/update-1)))
            (catch 'filenam (funcall |fun| |upf|))
            (|sayMessage| "   Update/patch is completed."))
          ((null optargs)
           (|sayBrightly|
            (cons
             "   An argument is required for"
             (|bright| opt))))
          (t
           (|sayMessage|
            (cons
             "   Unknown option:"
             (append
              (|bright| opt)
              (cons '|    | (cons '|%l| (cons "   Available options are"
                 (|bright|
                   "c ct e ec ect cls pause update patch compare record")
                )))))))))))))))))

@
\chapter{The Spad Server Mechanism}
<<initvars>>=
(defvar $openServerIfTrue t "t means try starting an open server")
(defconstant $SpadServerName "/tmp/.d" "the name of the spad server socket")
(defvar |$SpadServer| nil "t means Scratchpad acts as a remote server")

@

\pagehead{openserver}{openserver}
This is a cover function for the C code used for communication interface.
<<defun openserver>>=
(defun openserver (name)
  (open_server name))

@

\chapter{Axiom Build-time Functions}
\subsection{defun spad-save}
The {\bf spad-save} function is just a cover function for more
lisp system specific save functions. There is no standard name
for saving a lisp image so we make one and conditionalize it
at compile time.

This function is passed the name of an image that will be saved.
The saved image contains all of the loaded functions.

This is used in the [[src/interp/Makefile.pamphlet]] in three places:
\begin{list}{}
\item creating depsys, an image for compiling axiom.

Some of the Common Lisp code we compile uses macros which
are assumed to be available at compile time. The {\bf DEPSYS}
image is created to contain the compile time environment
and saved. We pipe compile commands into this environment
to compile from Common Lisp to machine dependent code.
\begin{verbatim}
DEPSYS=	${OBJ}/${SYS}/bin/depsys
\end{verbatim}

\item creating savesys, an image for running axiom.

Once we've compile all of the Common Lisp files we fire up
a clean lisp image called {\bf LOADSYS}, load all of the
final executable code and save it out as {\bf SAVESYS}.
The {\bf SAVESYS} image is copied to the [[${MNT}/${SYS}/bin]]
subdirectory and becomes the axiom executable image.
\begin{verbatim}
LOADSYS= ${OBJ}/${SYS}/bin/lisp
SAVESYS= ${OBJ}/${SYS}/bin/interpsys
AXIOMSYS= ${MNT}/${SYS}/bin/AXIOMsys
\end{verbatim}


\item creating debugsys, an image with all interpreted functions loaded.

Occasionally we need to really get into the system internals.
The best way to do this is to run almost all of the lisp code
interpreted rather than compiled (note that cfuns.lisp and sockio.lisp
still need to be loaded in compiled form as they depend on the 
loader to link with lisp internals). This image is nothing more
than a load of the file src/interp/debugsys.lisp.pamphlet. If
you need to make test modifications you can add code to that
file and it will show up here.
\begin{verbatim}
DEBUGSYS=${OBJ}/${SYS}/bin/debugsys
\end{verbatim}
\end{list}
<<defun spad-save>>=
(defun user::spad-save (save-file)
  (setq |$SpadServer| nil)
  (setq $openServerIfTrue t)
#+:AKCL
  (system::save-system save-file)
#+:allegro
  (if (fboundp 'boot::restart)
   (excl::dumplisp :name save-file :restart-function #'boot::restart)
   (excl::dumplisp :name save-file))
#+Lucid
  (if (fboundp 'boot::restart)
   (sys::disksave save-file :restart-function #'boot::restart)
   (sys::disksave save-file))
#+:CCL
  (preserve)
)

@

\chapter{Exposure Groups}
Exposure groups are a way of controlling the namespace available
to the user. Certain algebra files are only useful for internal
purposes but they contain functions have common names (like 
``map''. In order to separate the user visible  functions
from the internal functions the algebra files are collected into
``exposure groups''. These large groups are grouped into sets in
the file \verb|exposed.lsp| which lives in the algebra subdirectory.

Exposure group information is kept in the local frame. For more
information ``The Frame Mechanism'' \ref{TheFrameMechanism} on
page~\pageref{TheFrameMechanism}.

\pagehead{loadExposureGroupData}{loadExposureGroupData}
This function is called from \fnref{restart} at system startup time to 
load the file \verb|exposed.lsp| to set up the exposure group information.
<<defun loadExposureGroupData>>=
(defun |loadExposureGroupData| ()
 (cond
  ((load "./exposed" :verbose nil :if-does-not-exist nil)
    '|done|)
  ((load (concat (system:getenv "AXIOM") "/algebra/exposed")
     :verbose nil :if-does-not-exist nil)
   '|done|)
  (t '|failed|) ))

@

\chapter{The Interpreter}
<<Interpreter>>=
(in-package "BOOT")
<<initvars>>

<<defmacro funfind>>

<<defun abbreviations>>
<<defun abbreviationsSpad2Cmd>>
<<defun addInputLibrary>>
<<defun addNewInterpreterFrame>>
<<defun addTraceItem>>
<<defun apropos>>
<<defun augmentTraceNames>>

<<defun break>>
<<defun breaklet>>
<<defun browse>>

<<defun changeHistListLen>>
<<defun changeToNamedInterpreterFrame>>
<<defun charDigitVal>>
<<defun cleanupLine>>
<<defun clear>>
<<defun clearCmdAll>>
<<defun clearCmdCompletely>>
<<defun clearCmdExcept>>
<<defun clearCmdParts>>
<<defun clearCmdSortedCaches>>
<<defun clearFrame>>
<<defun clearSpad2Cmd>>
<<defun close>>
<<defun closeInterpreterFrame>>
<<defun coerceSpadArgs2E>>
<<defun coerceSpadFunValue2E>>
<<defun coerceTraceArgs2E>>
<<defun coerceTraceFunValue2E>>
<<defun compileAsharpArchiveCmd>>
<<defun compileAsharpCmd>>
<<defun compileAsharpCmd1>>
<<defun compileAsharpLispCmd>>
<<defun compileBoot>>
<<defun compiler>>
<<defun compileSpadLispCmd>>
<<defun copyright>>
<<defun createCurrentInterpreterFrame>>
<<defun credits>>

<<defun describeAsharpArgs>>
<<defun describeInputLibraryArgs>>
<<defun describeOutputLibraryArgs>>
<<defun dewritify>>
<<defun dewritify,dewritifyInner>>
<<defun dewritify,is?>>
<<defun diffAlist>>
<<defun disableHist>>
<<defun display>>
<<defun displayFrameNames>>
<<defun displayMacros>>
<<defun displayOperations>>
<<defun displaySetOptionInformation>>
<<defun displaySetVariableSettings>>
<<defun displaySpad2Cmd>>
<<defun domainToGenvar>>
<<defun dropInputLibrary>>

<<defun emptyInterpreterFrame>>

<<defun fetchOutput>>
<<defun filterAndFormatConstructors>>
<<defun findFrameInRing>>
<<defun flattenOperationAlist>>
<<defun frame>>
<<defun frameEnvironment>>
<<defun frameExposureData>>
<<defun frameHiFiAccess>>
<<defun frameHistList>>
<<defun frameHistListAct>>
<<defun frameHistListLen>>
<<defun frameHistoryTable>>
<<defun frameHistRecord>>
<<defun frameInteractive>>
<<defun frameIOIndex>>
<<defun frameName>>
<<defun frameNames>>
<<defun frameSpad2Cmd>>
<<defun funfind,LAM>>

<<defun genDomainTraceName>>
<<defun gensymInt>>
<<defun getAliasIfTracedMapParameter>>
<<defun getBpiNameIfTracedMap>>
<<defun getenviron>>
<<defun getMapSig>>
<<defun getMapSubNames>>
<<defun getOption>>
<<defun getPreviousMapSubNames>>
<<defun getTraceOption>>
<<defun getTraceOption,hn>>
<<defun getTraceOptions>>

<<defun hasPair>>
<<defun help>>
<<defun helpSpad2Cmd>>
<<defun histFileErase>>
<<defun histFileName>>
<<defun histInputFileName>>
<<defun history>>
<<defun historySpad2Cmd>>

<<defun importFromFrame>>
<<defun incBiteOff>>
<<defun incFileName>>
<<defun initHist>>
<<defun initHistList>>
<<defun initializeInterpreterFrameRing>>
<<defun initializeSetVariables>>
<<defun init-memory-config>>
<<defun initroot>>
<<defun intloop>>
<<defun intloopPrefix?>>
<<defun intloopReadConsole>>
<<defun isDomainOrPackage>>
<<defun isInterpOnlyMap>>
<<defun isListOfIdentifiers>>
<<defun isListOfIdentifiersOrStrings>>
<<defun isSubForRedundantMapName>>
<<defun isTraceGensym>>
<<defun isUncompiledMap>>

<<defun lassocSub>>
<<defun leaveScratchpad>>
<<defun letPrint>>
<<defun letPrint2>>
<<defun letPrint3>>
<<defun listConstructorAbbreviations>>
<<defun loadExposureGroupData>>

<<defun make-absolute-filename>>
<<defun makeHistFileName>>
<<defun makeInitialModemapFrame>>
<<defun mapLetPrint>>

<<defun ncIntLoop>>
<<defun ncloopCommand>>
<<defun ncloopEscaped>>
<<defun ncloopIncFileName>>
<<defun ncloopInclude>>
<<defun ncloopInclude1>>
<<defun ncloopPrefix?>>
<<defun ncTopLevel>>
<<defun newHelpSpad2Cmd>>
<<defun nextInterpreterFrame>>

<<defun oldHistFileName>>
<<defun openOutputLibrary>>
<<defun openserver>>
<<defun orderBySlotNumber>>

<<defun pcounters>>
<<defun pquit>>
<<defun pquitSpad2Cmd>>
<<defun previousInterpreterFrame>>
<<defun prTraceNames>>
<<defun prTraceNames,fn>>
<<defun pspacers>>
<<defun ptimers>>
<<defun putHist>>

<<defun queryClients>>
<<defun quit>>
<<defun quitSpad2Cmd>>

<<defun rassocSub>>
<<defun readHiFi>>
<<defun reclaim>>
<<defun recordFrame>>
<<defun recordNewValue>>
<<defun recordNewValue0>>
<<defun recordOldValue>>
<<defun recordOldValue0>>
<<defun removeOption>>
<<defun removeTracedMapSigs>>
<<defun removeUndoLines>>
<<defun reportSpadTrace>>
<<defun reportUndo>>
<<defun reroot>>
<<defun resetCounters>>
<<defun resetInCoreHist>>
<<defun resetSpacers>>
<<defun resetTimers>>
<<defun resetWorkspaceVariables>>
<<defun restart>>
<<defun restoreHistory>>
<<defun runspad>>

<<defun safeWritify>>
<<defun saveHistory>>
<<defun saveMapSig>>
<<defun sayExample>>
<<defun ScanOrPairVec>>
<<defun set>>
<<defun set1>>
<<defun setAsharpArgs>>
<<defun setCurrentLine>>
<<defun setHistoryCore>>
<<defun setInputLibrary>>
<<defun setIOindex>>
<<defun setOutputLibrary>>
<<defun set-restart-hook>>
<<defun shortenForPrinting>>
<<defun showHistory>>
<<defun showInOut>>
<<defun showInput>>
<<defun spad>>
<<defun spadClosure?>>
<<defun SpadInterpretStream>>
<<defun spadReply>>
<<defun spadReply,printName>>
<<defun SPADRREAD>>
<<defun SPADRWRITE>>
<<defun SPADRWRITE0>>
<<defun spad-save>>
<<defun spadTrace>>
<<defun spadTraceAlias>>
<<defun spadTrace,g>>
<<defun spadTrace,isTraceable>>
<<defun spadUntrace>>
<<defun stackTraceOptionError>>
<<defun statisticsInitialization>>
<<defun stupidIsSpadFunction>>
<<defun subTypes>>
<<defun summary>>

<<defun ?t>>
<<defun trace>>
<<defun trace1>>
<<defun traceDomainConstructor>>
<<defun traceDomainLocalOps>>
<<defun tracelet>>
<<defun traceOptionError>>
<<defun /tracereply>>
<<defun traceReply>>
<<defun traceSpad2Cmd>>
<<defun translateTrueFalse2YesNo>>
<<defun translateYesNo2TrueFalse>>
<<defun transOnlyOption>>
<<defun transTraceItem>>

<<defun undo>>
<<defun undoChanges>>
<<defun undoCount>>
<<defun undoFromFile>>
<<defun undoInCore>>
<<defun undoLocalModemapHack>>
<<defun undoSingleStep>>
<<defun undoSteps>>
<<defun untrace>>
<<defun untraceAllDomainLocalOps>>
<<defun untraceDomainConstructor>>
<<defun untraceDomainConstructor,keepTraced?>>
<<defun untraceDomainLocalOps>>
<<defun untraceMapSubNames>>
<<defun unwritable?>>
<<defun updateCurrentInterpreterFrame>>
<<defun updateFromCurrentInterpreterFrame>>
<<defun updateHist>>
<<defun updateInCoreHist>>

<<defun what>>
<<defun whatConstructors>>
<<defun whatSpad2Cmd>>
<<defun whatSpad2Cmd,fixpat>>
<<defun with>>
<<defun withAsharpCmd>>
<<defun workfiles>>
<<defun workfilesSpad2Cmd>>
<<defun writeHiFi>>
<<defun writeHistModesAndValues>>
<<defun writeInputLines>>
<<defun writify>>
<<defun writifyComplain>>
<<defun writify,writifyInner>>

<<defun yesanswer>>

<<defun zsystemdevelopment>>
<<defun zsystemdevelopment1>>
<<defun zsystemDevelopmentSpad2Cmd>>

@
\chapter{The Global Variables}
\section{Star Global Variables}
\begin{tabular}{lll}
NAME                        & SET              & USE \\
*eof*                       & ncTopLevel       & \\
*features*                  &                  & restart \\
*package*                   &                  & restart \\
*standard-input*            &                  & ncIntLoop \\
*standard-output*           &                  & ncIntLoop \\
*top-level-hook*            & set-restart-hook & \\
\end{tabular}
\subsection{*eof*}
The [[*eof*]] variable is set to [[NIL]] in [[ncTopLevel]].
\subsection{*features*}
The [[*features*]] variable from common lisp is tested for the presence
of the [[:unix]] keyword. Apparently this controls the use of Saturn,
a previous Axiom frontend. The Saturn frontend was never released as
open source and so this test and the associated variables are probably
not used.

\subsection{*package*}
The [[*package*]] variable, from common lisp, is set in [[restart]]
to the [[BOOT]] package where the intepreter lives.
\subsection{*standard-input*}
The [[*standard-input*]] common lisp variable is used to set the 
[[curinstream]] variable in [[ncIntLoop]]. 

This variable is an argument to [[serverReadLine]] in
the [[intloopReadConsole]] function.

\subsection{*standard-output*}
The [[*standard-output*]] common lisp variable is used to set the 
[[curoutstream]] variable in [[ncIntLoop]].

\subsection{*top-level-hook*}
The [[*top-level-hook*]] common lisp variable contains the name of
a function to invoke when an image is started. In our case it is
called [[restart]]. This is the entry point to the Axiom interpreter.

\section{Dollar Global Variables}
\begin{tabular}{lll}
NAME                         & SET                 & USE \\
\$boot                       & ncTopLevel          & \\
coerceFailure                &                     & runspad \\
curinstream                  & ncIntLoop           & \\
curoutstream                 & ncIntLoop           & \\
\$current-directory          & restart             & \\
                             & reroot              & \\
\$currentLine                & restart             & removeUndoLines \\
\$dalymode                   &                     & intloopReadConsole \\
\$defaultMsgDatabaseName     & reroot              & \\
\$directory-list             & reroot              & \\
\$displayStartMsgs           &                     & restart \\
\$e                          & ncTopLevel          & \\
\$erMsgToss                  & SpadInterpretStream & \\
\$fn                         & SpadInterpretStream & \\
\$frameRecord                & initvars            & \\
                             & clearFrame          & \\
                             & undoSteps           & undoSteps \\
                             & recordFrame         & recordFrame \\
\$HiFiAccess                 & initHist            & historySpad2Cmd \\
                             & historySpad2Cmd     & \\
                             &                     & setHistoryCore \\
\$HistList                   & initHist            & \\
\$HistListAct                & initHist            & \\
\$HistListLen                & initHistList        & \\
\$HistRecord                 & initHistList        & \\
\$historyDirectory           &                     & makeHistFileName \\
                             &                     & makeHistFileName \\
\$historyFileType            & initvars           & histInputFileName \\
\$inclAssertions             & SpadInterpretStream & \\
\$inLispVM                   & spad                & \\
\$InteractiveFrame           & restart             & ncTopLevel \\
                             & undo                & recordFrame \\
                             & undoSteps           & undoSteps \\
                             &                     & reportUndo \\
\$InteractiveMode            & ncTopLevel          & \\
\$internalHistoryTable       & initvars            & \\
\$interpreterFrameName       & initializeInterpreterFrameRing & \\
\$interpreterFrameRing       & initializeInterpreterFrameRing & \\
\$InitialModemapFrame        &                     & makeInitialModemapFrame \\
\$intRestart                 &                     & intloop \\
\$intTopLevel                & intloop             & \\
\$IOindex                    & restart             & historySpad2Cmd \\
                             & removeUndoLines     & undoCount \\
\$genValue                   & bookvol5            & i-toplev \\
                             &                     & i-analy \\
                             &                     & i-syscmd \\
                             &                     & i-spec1 \\
                             &                     & i-spec2 \\
                             &                     & i-map \\
\$lastPos                    & SpadInterpretStream & \\
\$libQuiet                   & SpadInterpretStream & \\
\$library-directory-list     & reroot              & \\
\$msgDatabaseName            & reroot              * \\
\$ncMsgList                  & SpadInterpretStream & \\
\$newcompErrorCount          & SpadInterpretStream & \\
\$newcompMode                & SpadInterpretStream & \\
\$newspad                    & ncTopLevel          & \\
\$nopos                      &                     & SpadInterpretStream \\
\$okToExecuteMachineCode     & SpadInterpretStream & \\
\$oldHistoryFileName         & initvars            & oldHistFileName \\
\$openServerIfTrue           & restart             & restart \\
                             & spad-save           & \\
                             & initvars            & \\
\$options                    &                     & history \\
                             & historySpad2Cmd     & historySpad2Cmd \\
                             &                     & undo \\
\$previousBindings           & initvars            & \\
                             & clearFrame          & \\
                             & recordFrame         & recordFrame \\
\$printLoadMsgs              & restart             & \\
\$PrintCompilerMessageIfTrue & spad                & \\
\$promptMsg                  & SpadInterpretStream & \\
\$relative-directory-list    &                     & reroot \\
\$relative-library-directory-list &                & reroot \\
\$reportUndo                 & initvars            & diffAlist \\
\$shoeReadLineFunction       & SpadInterpretStream & \\
\$spad                       & ncTopLevel          & \\
\$spadroot                   & reroot              & initroot \\
                             &                     & make-absolute-filename \\
                             &                     & reroot \\
\$SpadServer                 & restart             & \\
\$SpadServerName             & initvars            & restart \\
\$systemCommandFunction      & SpadInterpretStream & \\
top\_level                   &                     & runspad \\
\$quitTag                    &                     & runspad \\
\$useInternalHistoryTable    & initvars            & initHist \\
                             & setHistoryCore      & setHistoryCore \\
\$undoFlag                   & initvars            & recordFrame \\
\end{tabular}

\subsection{\$boot}
The [[$boot]] variable is set to [[NIL]] in [[ncTopLevel]].

\subsection{coerceFailure}
The [[coerceFailure]] symbol is a catch tag used in [[runspad]]
to catch an exit from [[ncTopLevel]].

\subsection{curinstream}
The [[curinstream]] variable is set to the value of the 
[[*standard-input*]] common lisp
variable in [[ncIntLoop]]. While not using the
``dollar'' convention this variable is still ``global''.

\subsection{curinstream}
The [[curoutstream]] variable is set to the value of the 
[[*standard-output*]] common lisp variable in [[ncIntLoop]].
While not using the ``dollar'' convention this variable is still ``global''.

\subsection{\$current-directory}
This is set to the value returned by the \verb|get-current-directory| 
function in \fnref{restart}. It is set to the argument of the 
\verb|reroot| function.

So during execute both [[$current-directory]] and [[$spadroot]] reflect
the value of the [[AXIOM]] shell variable.

\subsection{\$currentLine}
The [[$currentLine]] line is set to [[NIL]] in [[restart]].
It is used in [[removeUndoLines]] in the undo mechanism.

\subsection{\$dalymode}
The [[$dalymode]] variable is used in a case statement in 
[[intloopReadConsole]]. This variable can be set to any non-nil
value. When not nil the interpreter will send any line that begins
with an ``[[(]]'' to be sent to the underlying lisp. This is useful
for debugging Axiom. The normal value of this variable is [[NIL]].

This variable was created as an alternative to prefixing every lisp
command with [[)lisp]]. When doing a lot of debugging this is tedious
and error prone. This variable was created to shortcut that process.
Clearly it breaks some semantics of the language accepted by the
interpreter as parens are used for grouping expressions.

\subsection{\$defaultMsgDatabaseName}
The [[$defaultMsgDatabaseName]] is the absolute path to the 
[[s2-us.msgs]] file which contains all of the english language
messages output by the system.

\subsection{\$directory-list}
The [[$directory-list]] is a list of absolute directory names.
These names are made absolute by mapping the [[make-absolute-filename]]
over the variable [[$relative-directory-list]].

\subsection{\$displayStartMsgs}
The [[$displayStartMsgs]] variable is used in [[restart]] but is not
set so this is likely a bug.

\subsection{\$e}
The [[$e]] variable is set to the value of
[[$InteractiveFrame]] which is set in [[restart]] to the value of the
call to the [[makeInitialModemapFrame]] function. This function simply
returns a copy of the variable [[$InitialModemapFrame]].

Thus [[$e]] is a copy of the variable [[$InitialModemapFrame]].

This variable is used in the undo mechanism.

\subsection{\$erMsgToss}
The [[$erMsgToss]] variable is set to [[NIL]] in [[SpadInterpretStream]].

\subsection{\$fn}
The [[$fn]] variable is set in [[SpadInterpretStream]]. It is set to
the second argument which is a list. It appears that this list has the
same structure as an argument to the LispVM [[rdefiostream]] function.

\subsection{\$frameRecord}
[[$frameRecord = [delta1, delta2,... ] ]] where
[[delta(i)]] contains changes in the ``backwards'' direction.
Each [[delta(i)]] has the form [[((var . proplist)...)]] where
proplist denotes an ordinary proplist. For example, an entry
of the form [[((x (value) (mode (Integer)))...)]] indicates that
to undo 1 step, [[x]]'s value is cleared and its mode should be set
to [[(Integer)]].

A [[delta(i)]] of the form [[(systemCommand . delta)]] is a special
delta indicating changes due to system commands executed between
the last command and the current command. By recording these deltas
separately, it is possible to undo to either BEFORE or AFTER
the command. These special [[delta(i)]]s are given ONLY when a
a system command is given which alters the environment.

Note: [[recordFrame('system)]] is called before a command is executed, and
[[recordFrame('normal)]] is called after (see processInteractive1).
If no changes are found for former, no special entry is given.

This is part of the undo mechanism.

\subsection{\$genValue}
If the [[$genValue]] variable is true then evaluate generated code,
otherwise leave code unevaluated. If [[$genValue]] is false then we
are compiling. This variable is only defined and used locally.
<<initvars>>=
(defvar |$genValue| nil "evaluate generated code if true")

@

\subsection{\$HiFiAccess}
The [[$HiFiAccess]] is set by [[initHist]] to [[T]]. It is a flag
used by the history mechanism to record whether the history function
is currently on. It can be reset by using the axiom
command
\begin{verbatim}
  )history off
\end{verbatim}
It appears that the name means ``History File Access''.

The [[$HiFiAccess]] variable is used by [[historySpad2Cmd]] to check
whether history is turned on. [[T]] means it is, [[NIL]] means it is not.

\subsection{\$HistList}
Thie [[$HistList]] variable is set by [[initHistList]] to an initial
value of [[NIL]] elements. The last element of the list is smashed to
point to the first element to make the list circular.
This is a circular list of length [[$HistListLen]].

\subsection{\$HistListAct}
The [[$HistListAct]] variable is set by [[initHistList]] to [[0]].
This variable holds the actual number of elements in the history list.
This is the number of ``undoable'' steps.

\subsection{\$HistListLen}
The [[$HistListLen]] variable is set by [[initHistList]] to [[20]].
This is the length of a circular list maintained in the variable
[[$HistList]].

\subsection{\$HistRecord}
The [[$HistRecord]] variable is set by [[initHistList]] to [[NIL]].
[[$HistRecord]] collects the input line, all variable bindings
and the output of a step, before it is written to the file named by
the function [[histFileName]].

\subsection{\$historyFileType}
The [[$historyFileType]] is set at load time by a call to 
[[initvars]] to a value of ``[[axh]]''. It appears that this
is intended to be used as a filetype extension.
It is part of the history mechanism. It is used in [[makeHistFileName]]
as part of the history file name.

\subsection{\$inclAssertions}
The [[$inclAssertions]] is set 
in the function [[SpadInterpretStream]] to the list [[(aix |CommonLisp|)]]

\subsection{\$internalHistoryTable}
The [[$internalHistoryTable]] variable is set at load time by a call to
[[initvars]] to a value of [[NIL]].
It is part of the history mechanism.

\subsection{\$interpreterFrameName}
The [[$interpreterFrameName]] variable, set in 
[[initializeInterpreterFrameRing]] to the constant
[[initial]] to indicate that this is the initial (default) frame.

Frames are structures that capture all of the variables defined in a
session. There can be multiple frames and the user can freely switch
between them. Frames are kept in a ring data structure so you can 
move around the ring.

\subsection{\$interpreterFrameRing}
The [[$interpreterFrameRing]] is set to a pair whose car is set to
the result of [[emptyInterpreterFrame]]

\subsection{\$InitialModemapFrame}
This variable is copied and returned by the function 
[[makeInitialModemapFrame]]. There is no initial value so this
is probably a bug.

\subsection{\$inLispVM}
The [[$inLispVM]] is set to [[NIL]] in [[spad]]. LispVM is a
non-common lisp that runs on IBM/370 mainframes. This is probably dead
code.  It appears that this list has the same structure as an argument
to the LispVM [[rdefiostream]] function.

\subsection{\$InteractiveFrame}
The [[$InteractiveFrame]] is set in [[restart]] to the value of the
call to the [[makeInitialModemapFrame]] function. This function simply
returns a copy of the variable [[$InitialModemapFrame]]

\subsection{\$InteractiveMode}
The [[$InteractiveMode]] is set to [[T]] in [[ncTopLevel]].

\subsection{\$intRestart}
The [[$intRestart]] variable is used in [[intloop]] but has no value.
This is probably a bug. While the variable's value is unchanged the
system will continually reenter the [[SpadInterpretStream]] function.

\subsection{\$intTopLevel}
The [[$intTopLevel]] is a catch tag. Throwing to this tags which is
caught in the [[intloop]] will 
restart the [[SpadInterpretStream]] function.

\subsection{\$IOindex}
The [[$IOindex]] index variable is set to [[1]] in [[restart]].
This variable is used in the [[historySpad2Cmd]] function in the
history mechanism. It is set in the [[removeUndoLines]] function
in the undo mechanism.

This is used in the undo mechanism in function [[undoCount]]
to compute the number of undos. You can't undo more actions then
have already happened.

\subsection{\$lastPos}
The [[$lastPos]] variable is set in [[SpadInterpretStream]]
to the value of the [[$nopos]] variable.
Since [[$nopos]] appears to have no value
this is likely a bug.

\subsection{\$libQuiet}
The [[$libQuiet]] variable is set to the third argument of the
[[SpadInterpretStream]] function. This is passed from [[intloop]]
with the value of [[T]]. This variable appears to be intended to
control the printing of library loading messages which would need
to be suppressed if input was coming from a file.

\subsection{\$library-directory-list}
The [[$library-directory-list]] variable is set by [[reroot]] by
mapping the function [[make-absolute-filename]] across the 
[[$relative-library-directory-list]] variable which is not yet set so this
is probably a bug.

\subsection{\$msgDatabaseName}
The [[$msgDatabaseName]] is set to [[NIL]] in [[reroot]].

\subsection{\$ncMsgList}
The [[$ncMsgList]] is set to [[NIL]] in [[SpadInterpretStream]].

\subsection{\$newcompErrorCount}
The [[$newcompErrorCount]] is set to [[0]] in [[SpadInterpretStream]].

\subsection{\$newcompMode}
The [[$newcompMode]] is set to [[NIL]] in [[SpadInterpretStream]].

\subsection{\$newspad}
The [[$newspad]] is set to [[T]] in [[ncTopLevel]].

\subsection{\$nopos}
The [[$nopos]] variable is used in [[SpadInterpretStream]] but does
not appear to have a value and is likely a bug.

\subsection{\$oldHistoryFileName}
The [[$oldHistoryFileName]] is set at load time by a call to 
[[initvars]] to a value of ``[[last]]''. 
It is part of the history mechanism. It is used in the function
[[oldHistFileName]] and [[restoreHistory]].

\subsection{\$okToExecuteMachineCode}
The [[$okToExecuteMachineCode]] is set to [[T]] in [[SpadInterpretStream]].

\subsection{\$options}
The [[$options]] variable is tested by the [[history]] function.
If it is [[NIL]] then output the message 
\begin{verbatim}
  You have not used the correct syntax for the history command.
  Issue )help history for more information.
\end{verbatim}

The [[$options]] variable is tested in the [[historySpad2Cmd]] function.
It appears to record the options that were given to a spad command on
the input line. The function [[selectOptionLC]] appears to take a list
off options to scan.

This variable is not yet set and is probably a bug.

\subsection{\$previousBindings}
The [[$previousBindings]] is a copy of the 
[[CAAR $InteractiveFrame]]. This is used to
compute the [[delta(i)]]s stored in [[$frameRecord]].
This is part of the undo mechanism.

\pagehead{printLoadMsgs}{printLoadMsgs}
The [[$printLoadMsgs]] variable is set to [[T]] in [[restart]].

\subsection{\$PrintCompilerMessageIfTrue}
The [[$PrintCompilerMessageIfTrue]] variable is set to [[NIL]] in [[spad]].

\subsection{\$openServerIfTrue}
The [[$openServerIfTrue]] is tested in [[restart]] before it has been
set (and is thus a bug). It appears to control whether the interpreter
will be used as an open server, probably for OpenMath use.

If an open server is not requested then this variable to [[NIL]]

\subsection{\$promptMsg}
The [[$promptMsg]] variable is set to the constant [[S2CTP023]]. This 
constant points to a message in [[src/doc/msgs/s2-us.msgs]]. This message
does nothing but print the argument value.

\subsection{\$relative-directory-list}
The [[$relative-directory-list]] is used in [[reroot]] to create 
[[$directory-list]] which is a list of absolute directory names.
It is not yet set and is probably a bug.

\subsection{\$relative-library-directory-list}
The [[$relative-library-directory-list]] is used in [[reroot]] to create
a list of absolute directory names from [[$library-directory-list]] (which is 
It is not yet set and is probably a bug).

\subsection{\$reportUndo}
The [[$reportUndo]] variable is used in [[diffAlist]]. It was not normally
bound but has been set to [[T]] in [[initvars]]. If the variable is set
to [[T]] then we call [[reportUndo]].

It is part of the undo mechanism.

\subsection{\$shoeReadLineFunction}
The [[$shoeReadLineFunction]] is set in [[SpadInterpretStream]]
to point to the 
[[serverReadLine]] 

\subsection{\$spadroot}
The [[$spadroot]] variable is the internal name for the [[AXIOM]]
shell variable. 

The [[$spadroot]] variable is set in [[reroot]] to the value of the
argument. The argument is expected to be a directory name. 

The [[$spadroot]] variable is tested in [[initroot]].

The [[$spadroot]] variable is used by the function 
[[make-absolute-filename]]. It concatenates this variable to the 
front of a relative pathname to make it absolute.
\subsection{\$spad}
The [[$spad]] variable is set to [[T]] in [[ncTopLevel]].

\subsection{\$SpadServer}
If an open server is not requested then this variable to [[T]].
It has no value before this time (and is thus a bug).

\subsection{\$SpadServerName}
The [[$SpadServerName]] is passed to the [[openServer]] function, if the
function exists. 

\subsection{\$systemCommandFunction}
The [[$systemCommandFunction]] is set in [[SpadInterpretStream]]
to point to the function
[[InterpExecuteSpadSystemCommand]].

\subsection{top\_level}
The [[top\_level]] symbol is a catch tag used in [[runspad]]
to catch an exit from [[ncTopLevel]].

\subsection{\$quitTag}
The [[$quitTag]] is used as a variable in a [[catch]] block. 
It appears that it can be thrown somewhere below [[ncTopLevel]].

\subsection{\$useInternalHistoryTable}
The [[$useInternalHistoryTable]] variable is set at load time by a call to
[[initvars]] to a value of [[NIL]]. It is part of the history mechanism.

\subsection{\$undoFlag}
The [[$undoFlag]] is used in [[recordFrame]] to decide whether to do
undo recording. It is initially set to [[T]] in [[initvars]].
This is part of the undo mechanism.

\chapter{Makefile.bookvol5}
<<*>>=
LATEX=/usr/bin/latex
LISP=${AXIOM}/obj/linux/bin/lisp
TANGLE=/usr/local/bin/NOTANGLE
WEAVE=/usr/local/bin/NOWEAVE -delay

all: bookvol5
	@echo 0 done

bookvol5: bookvol5.pamphlet
	@echo 1 extracting the bookvol5reter
	${WEAVE} bookvol5.pamphlet >bookvol5.tex
	${LATEX} bookvol5.tex
	${LATEX} bookvol5.tex
	${TANGLE} -R"Interpreter" bookvol5.pamphlet >bookvol5.lisp

remake:	
	@echo 2 rebuilding the makefile
	@${TANGLE} bookvol5.pamphlet >Makefile.bookvol5

@
\eject
\begin{thebibliography}{99}
\bibitem{1} Daly, Timothy, "The Axiom Literate Documentation"\\
{\bf http://axiom.axiom-developer.org/axiom-website/documentation.html}
\bibitem{2} Daly, Timothy, ``The Axiom Wiki Website''\\
{\bf http://axiom.axiom-developer.org}
\end{thebibliography}
\printindex
\end{document}
